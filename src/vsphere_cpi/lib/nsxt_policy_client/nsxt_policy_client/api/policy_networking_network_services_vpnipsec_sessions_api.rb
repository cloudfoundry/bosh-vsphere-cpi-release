=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicyNetworkingNetworkServicesVPNIPSECSessionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#create_or_patch_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_ip_sec_vpn_session_0(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier0_ip_sec_vpn_session_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_ip_sec_vpn_session_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session_0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier0_ip_sec_vpn_session_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#create_or_patch_tier0_ip_sec_vpn_session_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#create_or_patch_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_ip_sec_vpn_session_0(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier1_ip_sec_vpn_session_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_ip_sec_vpn_session_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_patch_tier1_ip_sec_vpn_session_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#create_or_patch_tier1_ip_sec_vpn_session_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#create_or_update_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier0_ip_sec_vpn_session_0(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier0_ip_sec_vpn_session_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier0_ip_sec_vpn_session_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session_0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier0_ip_sec_vpn_session_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#create_or_update_tier0_ip_sec_vpn_session_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#create_or_update_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier1_ip_sec_vpn_session_0(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier1_ip_sec_vpn_session_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier1_ip_sec_vpn_session_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.create_or_update_tier1_ip_sec_vpn_session_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#create_or_update_tier1_ip_sec_vpn_session_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      delete_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#delete_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_ip_sec_vpn_session_0(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      delete_tier0_ip_sec_vpn_session_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_ip_sec_vpn_session_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier0_ip_sec_vpn_session_0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier0_ip_sec_vpn_session_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#delete_tier0_ip_sec_vpn_session_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-1.
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      delete_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-1.
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#delete_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-1.
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_ip_sec_vpn_session_0(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      delete_tier1_ip_sec_vpn_session_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-1.
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_ip_sec_vpn_session_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier1_ip_sec_vpn_session_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.delete_tier1_ip_sec_vpn_session_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#delete_tier1_ip_sec_vpn_session_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier0_ip_sec_vpn_peer_config(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier0_ip_sec_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier0_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier0_ip_sec_vpn_peer_config_0(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_peer_config_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier0_ip_sec_vpn_peer_config_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_peer_config_0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_peer_config_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_peer_config_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_peer_config_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_peer_config_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier0_ip_sec_vpn_peer_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_ip_sec_vpn_session_0(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_session_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_ip_sec_vpn_session_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier0_ip_sec_vpn_session_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier0_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier1_ip_sec_vpn_peer_config(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_peer_config_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier1_ip_sec_vpn_peer_config_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier1_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier1_ip_sec_vpn_peer_config_0(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_peer_config_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier1_ip_sec_vpn_peer_config_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_peer_config_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_peer_config_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_peer_config_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_peer_config_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_peer_config_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier1_ip_sec_vpn_peer_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_ip_sec_vpn_session_0(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_session_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_ip_sec_vpn_session_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier1_ip_sec_vpn_session_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#get_tier1_ip_sec_vpn_session_with_sensitive_data_show_sensitive_data_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier0_ip_sec_vpn_sessions(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_ip_sec_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier0_ip_sec_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#list_tier0_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier0_ip_sec_vpn_sessions_0(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_ip_sec_vpn_sessions_0_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-0. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier0_ip_sec_vpn_sessions_0_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions_0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier0_ip_sec_vpn_sessions_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#list_tier0_ip_sec_vpn_sessions_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier1_ip_sec_vpn_sessions(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_ip_sec_vpn_sessions_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier1_ip_sec_vpn_sessions_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#list_tier1_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier1_ip_sec_vpn_sessions_0(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_ip_sec_vpn_sessions_0_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-1. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier1_ip_sec_vpn_sessions_0_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions_0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions_0"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingNetworkServicesVPNIPSECSessionsApi.list_tier1_ip_sec_vpn_sessions_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesVPNIPSECSessionsApi#list_tier1_ip_sec_vpn_sessions_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
