=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_firewall_flood_protection_binding(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      delete_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#delete_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_firewall_flood_protection_binding_0(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      delete_policy_firewall_flood_protection_binding_0_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_flood_protection_binding_0_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_policy_firewall_flood_protection_binding_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_policy_firewall_flood_protection_binding_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_policy_firewall_flood_protection_binding_0"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_policy_firewall_flood_protection_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#delete_policy_firewall_flood_protection_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-0 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_flood_protection_profile_binding(tier0_id, flood_protection_profile_binding_id, opts = {})
      delete_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-0 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#delete_tier0_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-0 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_flood_protection_profile_binding_0(tier0_id, flood_protection_profile_binding_id, opts = {})
      delete_tier0_flood_protection_profile_binding_0_with_http_info(tier0_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-0 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_flood_protection_profile_binding_0_with_http_info(tier0_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#delete_tier0_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_locale_services_flood_protection_profile_binding(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      delete_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#delete_tier0_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_locale_services_flood_protection_profile_binding_0(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      delete_tier0_locale_services_flood_protection_profile_binding_0_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_locale_services_flood_protection_profile_binding_0_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_locale_services_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier0_locale_services_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#delete_tier0_locale_services_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_flood_protection_profile_binding(tier1_id, flood_protection_profile_binding_id, opts = {})
      delete_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#delete_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_flood_protection_profile_binding_0(tier1_id, flood_protection_profile_binding_id, opts = {})
      delete_tier1_flood_protection_profile_binding_0_with_http_info(tier1_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_flood_protection_profile_binding_0_with_http_info(tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#delete_tier1_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_locale_services_flood_protection_profile_binding(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      delete_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#delete_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_locale_services_flood_protection_profile_binding_0(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      delete_tier1_locale_services_flood_protection_profile_binding_0_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_locale_services_flood_protection_profile_binding_0_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_locale_services_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.delete_tier1_locale_services_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#delete_tier1_locale_services_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def get_policy_firewall_flood_protection_binding(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def get_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#get_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def get_policy_firewall_flood_protection_binding_0(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_flood_protection_binding_0_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def get_policy_firewall_flood_protection_binding_0_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_policy_firewall_flood_protection_binding_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_policy_firewall_flood_protection_binding_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_policy_firewall_flood_protection_binding_0"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_policy_firewall_flood_protection_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#get_policy_firewall_flood_protection_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier0_flood_protection_profile_binding(tier0_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#get_tier0_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier0_flood_protection_profile_binding_0(tier0_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_flood_protection_profile_binding_0_with_http_info(tier0_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier0_flood_protection_profile_binding_0_with_http_info(tier0_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#get_tier0_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier0_locale_services_flood_protection_profile_binding(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#get_tier0_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier0_locale_services_flood_protection_profile_binding_0(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_locale_services_flood_protection_profile_binding_0_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier0_locale_services_flood_protection_profile_binding_0_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_locale_services_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier0_locale_services_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#get_tier0_locale_services_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier1_flood_protection_profile_binding(tier1_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#get_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier1_flood_protection_profile_binding_0(tier1_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_flood_protection_profile_binding_0_with_http_info(tier1_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier1_flood_protection_profile_binding_0_with_http_info(tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#get_tier1_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier1_locale_services_flood_protection_profile_binding(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#get_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier1_locale_services_flood_protection_profile_binding_0(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_locale_services_flood_protection_profile_binding_0_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier1_locale_services_flood_protection_profile_binding_0_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_locale_services_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.get_tier1_locale_services_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#get_tier1_locale_services_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def list_firewall_flood_protection_bindings_across_domains(opts = {})
      data, _status_code, _headers = list_firewall_flood_protection_bindings_across_domains_with_http_info(opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def list_firewall_flood_protection_bindings_across_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_firewall_flood_protection_bindings_across_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_firewall_flood_protection_bindings_across_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_firewall_flood_protection_bindings_across_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/firewall-flood-protection-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#list_firewall_flood_protection_bindings_across_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def list_firewall_flood_protection_bindings_across_domains_0(opts = {})
      data, _status_code, _headers = list_firewall_flood_protection_bindings_across_domains_0_with_http_info(opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def list_firewall_flood_protection_bindings_across_domains_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_firewall_flood_protection_bindings_across_domains_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_firewall_flood_protection_bindings_across_domains_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_firewall_flood_protection_bindings_across_domains_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/firewall-flood-protection-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#list_firewall_flood_protection_bindings_across_domains_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def list_policy_firewall_flood_protection_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_policy_firewall_flood_protection_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def list_policy_firewall_flood_protection_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_policy_firewall_flood_protection_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_policy_firewall_flood_protection_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_policy_firewall_flood_protection_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_policy_firewall_flood_protection_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_policy_firewall_flood_protection_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#list_policy_firewall_flood_protection_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def list_policy_firewall_flood_protection_bindings_0(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_policy_firewall_flood_protection_bindings_0_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def list_policy_firewall_flood_protection_bindings_0_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_policy_firewall_flood_protection_bindings_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_policy_firewall_flood_protection_bindings_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_policy_firewall_flood_protection_bindings_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_policy_firewall_flood_protection_bindings_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.list_policy_firewall_flood_protection_bindings_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#list_policy_firewall_flood_protection_bindings_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_flood_protection_profile_binding_map(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      patch_policy_firewall_flood_protection_profile_binding_map_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_flood_protection_profile_binding_map_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_policy_firewall_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#patch_policy_firewall_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_flood_protection_profile_binding_map_0(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      patch_policy_firewall_flood_protection_profile_binding_map_0_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_flood_protection_profile_binding_map_0_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_policy_firewall_flood_protection_profile_binding_map_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_policy_firewall_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_policy_firewall_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_policy_firewall_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_policy_firewall_flood_protection_profile_binding_map_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#patch_policy_firewall_flood_protection_profile_binding_map_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_flood_protection_profile_binding_map(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier0_flood_protection_profile_binding_map_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_flood_protection_profile_binding_map_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#patch_tier0_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_flood_protection_profile_binding_map_0(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier0_flood_protection_profile_binding_map_0_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_flood_protection_profile_binding_map_0_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_flood_protection_profile_binding_map_0 ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_flood_protection_profile_binding_map_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#patch_tier0_flood_protection_profile_binding_map_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_locale_services_flood_protection_profile_binding_map(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier0_locale_services_flood_protection_profile_binding_map_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_locale_services_flood_protection_profile_binding_map_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_locale_services_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#patch_tier0_locale_services_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_locale_services_flood_protection_profile_binding_map_0(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier0_locale_services_flood_protection_profile_binding_map_0_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_locale_services_flood_protection_profile_binding_map_0_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_locale_services_flood_protection_profile_binding_map_0 ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_locale_services_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_locale_services_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_locale_services_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier0_locale_services_flood_protection_profile_binding_map_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#patch_tier0_locale_services_flood_protection_profile_binding_map_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_flood_protection_profile_binding_map(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier1_flood_protection_profile_binding_map_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_flood_protection_profile_binding_map_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#patch_tier1_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_flood_protection_profile_binding_map_0(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier1_flood_protection_profile_binding_map_0_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_flood_protection_profile_binding_map_0_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_flood_protection_profile_binding_map_0 ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_flood_protection_profile_binding_map_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#patch_tier1_flood_protection_profile_binding_map_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_locale_services_flood_protection_profile_binding_map(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier1_locale_services_flood_protection_profile_binding_map_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_locale_services_flood_protection_profile_binding_map_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_locale_services_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#patch_tier1_locale_services_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_locale_services_flood_protection_profile_binding_map_0(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier1_locale_services_flood_protection_profile_binding_map_0_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_locale_services_flood_protection_profile_binding_map_0_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_locale_services_flood_protection_profile_binding_map_0 ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_locale_services_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_locale_services_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_locale_services_flood_protection_profile_binding_map_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.patch_tier1_locale_services_flood_protection_profile_binding_map_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#patch_tier1_locale_services_flood_protection_profile_binding_map_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def update_policy_firewall_flood_protection_binding(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      data
    end

    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def update_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#update_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def update_policy_firewall_flood_protection_binding_0(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_policy_firewall_flood_protection_binding_0_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      data
    end

    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def update_policy_firewall_flood_protection_binding_0_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_policy_firewall_flood_protection_binding_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_policy_firewall_flood_protection_binding_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_policy_firewall_flood_protection_binding_0"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_policy_firewall_flood_protection_binding_0"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_policy_firewall_flood_protection_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#update_policy_firewall_flood_protection_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier0_flood_protection_profile_binding(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#update_tier0_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier0_flood_protection_profile_binding_0(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_flood_protection_profile_binding_0_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier0_flood_protection_profile_binding_0_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#update_tier0_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier0_locale_services_flood_protection_profile_binding(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#update_tier0_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier0_locale_services_flood_protection_profile_binding_0(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_locale_services_flood_protection_profile_binding_0_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier0_locale_services_flood_protection_profile_binding_0_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_locale_services_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier0_locale_services_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#update_tier0_locale_services_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier1_flood_protection_profile_binding(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#update_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier1_flood_protection_profile_binding_0(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_flood_protection_profile_binding_0_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier1_flood_protection_profile_binding_0_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#update_tier1_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier1_locale_services_flood_protection_profile_binding(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#update_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier1_locale_services_flood_protection_profile_binding_0(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_locale_services_flood_protection_profile_binding_0_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier1_locale_services_flood_protection_profile_binding_0_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_locale_services_flood_protection_profile_binding_0 ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_locale_services_flood_protection_profile_binding_0"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi.update_tier1_locale_services_flood_protection_profile_binding_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecuritySecurityProfilesFloodProtectionProfileBindingApi#update_tier1_locale_services_flood_protection_profile_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
