=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdfwGroupVmDetailListResult]
    def get_group_vm_details(group_path, opts = {})
      data, _status_code, _headers = get_group_vm_details_with_http_info(group_path, opts)
      data
    end

    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdfwGroupVmDetailListResult, Fixnum, Hash)>] PolicyIdfwGroupVmDetailListResult data, response status code and response headers
    def get_group_vm_details_with_http_info(group_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_group_vm_details ...'
      end
      # verify the required parameter 'group_path' is set
      if @api_client.config.client_side_validation && group_path.nil?
        fail ArgumentError, "Missing the required parameter 'group_path' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_group_vm_details"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/group-vm-details'

      # query parameters
      query_params = {}
      query_params[:'group_path'] = group_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdfwGroupVmDetailListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_group_vm_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdfwGroupVmDetailListResult]
    def get_group_vm_details_0(group_path, opts = {})
      data, _status_code, _headers = get_group_vm_details_0_with_http_info(group_path, opts)
      data
    end

    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdfwGroupVmDetailListResult, Fixnum, Hash)>] PolicyIdfwGroupVmDetailListResult data, response status code and response headers
    def get_group_vm_details_0_with_http_info(group_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_group_vm_details_0 ...'
      end
      # verify the required parameter 'group_path' is set
      if @api_client.config.client_side_validation && group_path.nil?
        fail ArgumentError, "Missing the required parameter 'group_path' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_group_vm_details_0"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/group-vm-details'

      # query parameters
      query_params = {}
      query_params[:'group_path'] = group_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdfwGroupVmDetailListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_group_vm_details_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionStatus]
    def get_idfw_status_for_a_compute_collection(compute_collection_id, opts = {})
      data, _status_code, _headers = get_idfw_status_for_a_compute_collection_with_http_info(compute_collection_id, opts)
      data
    end

    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionStatus, Fixnum, Hash)>] IdfwComputeCollectionStatus data, response status code and response headers
    def get_idfw_status_for_a_compute_collection_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_idfw_status_for_a_compute_collection ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_idfw_status_for_a_compute_collection"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_idfw_status_for_a_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionStatus]
    def get_idfw_status_for_a_compute_collection_0(compute_collection_id, opts = {})
      data, _status_code, _headers = get_idfw_status_for_a_compute_collection_0_with_http_info(compute_collection_id, opts)
      data
    end

    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionStatus, Fixnum, Hash)>] IdfwComputeCollectionStatus data, response status code and response headers
    def get_idfw_status_for_a_compute_collection_0_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_idfw_status_for_a_compute_collection_0 ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_idfw_status_for_a_compute_collection_0"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_idfw_status_for_a_compute_collection_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionListResult]
    def get_idfw_status_for_all_compute_collections(opts = {})
      data, _status_code, _headers = get_idfw_status_for_all_compute_collections_with_http_info(opts)
      data
    end

    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionListResult, Fixnum, Hash)>] IdfwComputeCollectionListResult data, response status code and response headers
    def get_idfw_status_for_all_compute_collections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_idfw_status_for_all_compute_collections ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_idfw_status_for_all_compute_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionListResult]
    def get_idfw_status_for_all_compute_collections_0(opts = {})
      data, _status_code, _headers = get_idfw_status_for_all_compute_collections_0_with_http_info(opts)
      data
    end

    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionListResult, Fixnum, Hash)>] IdfwComputeCollectionListResult data, response status code and response headers
    def get_idfw_status_for_all_compute_collections_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_idfw_status_for_all_compute_collections_0 ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/compute-collections/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_idfw_status_for_all_compute_collections_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwSystemStats]
    def get_idfw_system_statistics_data(opts = {})
      data, _status_code, _headers = get_idfw_system_statistics_data_with_http_info(opts)
      data
    end

    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwSystemStats, Fixnum, Hash)>] IdfwSystemStats data, response status code and response headers
    def get_idfw_system_statistics_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_idfw_system_statistics_data ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/system-stats'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwSystemStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_idfw_system_statistics_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwSystemStats]
    def get_idfw_system_statistics_data_0(opts = {})
      data, _status_code, _headers = get_idfw_system_statistics_data_0_with_http_info(opts)
      data
    end

    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwSystemStats, Fixnum, Hash)>] IdfwSystemStats data, response status code and response headers
    def get_idfw_system_statistics_data_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_idfw_system_statistics_data_0 ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/system-stats'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwSystemStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_idfw_system_statistics_data_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserStats]
    def get_user_login_events(user_id, opts = {})
      data, _status_code, _headers = get_user_login_events_with_http_info(user_id, opts)
      data
    end

    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserStats, Fixnum, Hash)>] IdfwUserStats data, response status code and response headers
    def get_user_login_events_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_user_login_events ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_user_login_events"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/user-stats/{user-id}'.sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_user_login_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserStats]
    def get_user_login_events_0(user_id, opts = {})
      data, _status_code, _headers = get_user_login_events_0_with_http_info(user_id, opts)
      data
    end

    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserStats, Fixnum, Hash)>] IdfwUserStats data, response status code and response headers
    def get_user_login_events_0_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_user_login_events_0 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_user_login_events_0"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/user-stats/{user-id}'.sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_user_login_events_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVmStats]
    def get_user_login_events_for_avm(vm_id, opts = {})
      data, _status_code, _headers = get_user_login_events_for_avm_with_http_info(vm_id, opts)
      data
    end

    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVmStats, Fixnum, Hash)>] IdfwVmStats data, response status code and response headers
    def get_user_login_events_for_avm_with_http_info(vm_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_user_login_events_for_avm ...'
      end
      # verify the required parameter 'vm_id' is set
      if @api_client.config.client_side_validation && vm_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_user_login_events_for_avm"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/vm-stats/{vm-id}'.sub('{' + 'vm-id' + '}', vm_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVmStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_user_login_events_for_avm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVmStats]
    def get_user_login_events_for_avm_0(vm_id, opts = {})
      data, _status_code, _headers = get_user_login_events_for_avm_0_with_http_info(vm_id, opts)
      data
    end

    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVmStats, Fixnum, Hash)>] IdfwVmStats data, response status code and response headers
    def get_user_login_events_for_avm_0_with_http_info(vm_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_user_login_events_for_avm_0 ...'
      end
      # verify the required parameter 'vm_id' is set
      if @api_client.config.client_side_validation && vm_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_user_login_events_for_avm_0"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/vm-stats/{vm-id}'.sub('{' + 'vm-id' + '}', vm_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVmStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_user_login_events_for_avm_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserSessionDataAndMappings]
    def get_user_session_data(opts = {})
      data, _status_code, _headers = get_user_session_data_with_http_info(opts)
      data
    end

    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserSessionDataAndMappings, Fixnum, Hash)>] IdfwUserSessionDataAndMappings data, response status code and response headers
    def get_user_session_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_user_session_data ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/user-session-data'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserSessionDataAndMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_user_session_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserSessionDataAndMappings]
    def get_user_session_data_0(opts = {})
      data, _status_code, _headers = get_user_session_data_0_with_http_info(opts)
      data
    end

    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserSessionDataAndMappings, Fixnum, Hash)>] IdfwUserSessionDataAndMappings data, response status code and response headers
    def get_user_session_data_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.get_user_session_data_0 ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/user-session-data'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserSessionDataAndMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#get_user_session_data_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwTransportNodeStatusListResult]
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection(compute_collection_id, opts = {})
      data, _status_code, _headers = list_idfw_status_for_all_transport_nodes_in_a_compute_collection_with_http_info(compute_collection_id, opts)
      data
    end

    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwTransportNodeStatusListResult, Fixnum, Hash)>] IdfwTransportNodeStatusListResult data, response status code and response headers
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/transport-nodes/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwTransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#list_idfw_status_for_all_transport_nodes_in_a_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwTransportNodeStatusListResult]
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection_0(compute_collection_id, opts = {})
      data, _status_code, _headers = list_idfw_status_for_all_transport_nodes_in_a_compute_collection_0_with_http_info(compute_collection_id, opts)
      data
    end

    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwTransportNodeStatusListResult, Fixnum, Hash)>] IdfwTransportNodeStatusListResult data, response status code and response headers
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection_0_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection_0 ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection_0"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/transport-nodes/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwTransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#list_idfw_status_for_all_transport_nodes_in_a_compute_collection_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVirtualMachineStatusListResult]
    def list_virtual_machine_idfw_status_by_transport_node(transport_node_id, opts = {})
      data, _status_code, _headers = list_virtual_machine_idfw_status_by_transport_node_with_http_info(transport_node_id, opts)
      data
    end

    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVirtualMachineStatusListResult, Fixnum, Hash)>] IdfwVirtualMachineStatusListResult data, response status code and response headers
    def list_virtual_machine_idfw_status_by_transport_node_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.list_virtual_machine_idfw_status_by_transport_node ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.list_virtual_machine_idfw_status_by_transport_node"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/transport-nodes/{transport-node-id}/vms/status'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVirtualMachineStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#list_virtual_machine_idfw_status_by_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVirtualMachineStatusListResult]
    def list_virtual_machine_idfw_status_by_transport_node_0(transport_node_id, opts = {})
      data, _status_code, _headers = list_virtual_machine_idfw_status_by_transport_node_0_with_http_info(transport_node_id, opts)
      data
    end

    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVirtualMachineStatusListResult, Fixnum, Hash)>] IdfwVirtualMachineStatusListResult data, response status code and response headers
    def list_virtual_machine_idfw_status_by_transport_node_0_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.list_virtual_machine_idfw_status_by_transport_node_0 ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi.list_virtual_machine_idfw_status_by_transport_node_0"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/transport-nodes/{transport-node-id}/vms/status'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVirtualMachineStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallIdentityStoreApi#list_virtual_machine_idfw_status_by_transport_node_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
