=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicyOperationsIPFIXFirewallIPFIXProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or Replace IPFIX DFW collection Config.
    # Create or replace IPFIX DFW profile. Config will start forwarding data to provided IPFIX DFW collector. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [IPFIXDFWProfile]
    def create_or_replace_ipfixdfw_profile(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      data, _status_code, _headers = create_or_replace_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts)
      data
    end

    # Create or Replace IPFIX DFW collection Config.
    # Create or replace IPFIX DFW profile. Config will start forwarding data to provided IPFIX DFW collector. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(IPFIXDFWProfile, Fixnum, Hash)>] IPFIXDFWProfile data, response status code and response headers
    def create_or_replace_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXFirewallIPFIXProfilesApi.create_or_replace_ipfixdfw_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.create_or_replace_ipfixdfw_profile"
      end
      # verify the required parameter 'ipfixdfw_profile' is set
      if @api_client.config.client_side_validation && ipfixdfw_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixdfw_profile' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.create_or_replace_ipfixdfw_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixdfw_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXFirewallIPFIXProfilesApi#create_or_replace_ipfixdfw_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IPFIX DFW collection Config.
    # Create or replace IPFIX DFW profile. Config will start forwarding data to provided IPFIX DFW collector. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [IPFIXDFWProfile]
    def create_or_replace_ipfixdfw_profile_0(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      data, _status_code, _headers = create_or_replace_ipfixdfw_profile_0_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts)
      data
    end

    # Create or Replace IPFIX DFW collection Config.
    # Create or replace IPFIX DFW profile. Config will start forwarding data to provided IPFIX DFW collector. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(IPFIXDFWProfile, Fixnum, Hash)>] IPFIXDFWProfile data, response status code and response headers
    def create_or_replace_ipfixdfw_profile_0_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXFirewallIPFIXProfilesApi.create_or_replace_ipfixdfw_profile_0 ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.create_or_replace_ipfixdfw_profile_0"
      end
      # verify the required parameter 'ipfixdfw_profile' is set
      if @api_client.config.client_side_validation && ipfixdfw_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixdfw_profile' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.create_or_replace_ipfixdfw_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixdfw_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXFirewallIPFIXProfilesApi#create_or_replace_ipfixdfw_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX DFW Profile
    # API deletes IPFIX DFW Profile. Selected IPFIX Collectors will stop receiving flows. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_ipfixdfw_profile(ipfix_dfw_profile_id, opts = {})
      delete_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, opts)
      nil
    end

    # Delete IPFIX DFW Profile
    # API deletes IPFIX DFW Profile. Selected IPFIX Collectors will stop receiving flows. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXFirewallIPFIXProfilesApi.delete_ipfixdfw_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.delete_ipfixdfw_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXFirewallIPFIXProfilesApi#delete_ipfixdfw_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX DFW Profile
    # API deletes IPFIX DFW Profile. Selected IPFIX Collectors will stop receiving flows. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_ipfixdfw_profile_0(ipfix_dfw_profile_id, opts = {})
      delete_ipfixdfw_profile_0_with_http_info(ipfix_dfw_profile_id, opts)
      nil
    end

    # Delete IPFIX DFW Profile
    # API deletes IPFIX DFW Profile. Selected IPFIX Collectors will stop receiving flows. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfixdfw_profile_0_with_http_info(ipfix_dfw_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXFirewallIPFIXProfilesApi.delete_ipfixdfw_profile_0 ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.delete_ipfixdfw_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXFirewallIPFIXProfilesApi#delete_ipfixdfw_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX DFW Profile
    # API provides list IPFIX DFW profiles available on selected logical DFW. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXDFWProfileListResult]
    def list_ipfixdfw_profiles(opts = {})
      data, _status_code, _headers = list_ipfixdfw_profiles_with_http_info(opts)
      data
    end

    # List IPFIX DFW Profile
    # API provides list IPFIX DFW profiles available on selected logical DFW. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXDFWProfileListResult, Fixnum, Hash)>] IPFIXDFWProfileListResult data, response status code and response headers
    def list_ipfixdfw_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXFirewallIPFIXProfilesApi.list_ipfixdfw_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.list_ipfixdfw_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.list_ipfixdfw_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipfix-dfw-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXFirewallIPFIXProfilesApi#list_ipfixdfw_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX DFW Profile
    # API provides list IPFIX DFW profiles available on selected logical DFW. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXDFWProfileListResult]
    def list_ipfixdfw_profiles_0(opts = {})
      data, _status_code, _headers = list_ipfixdfw_profiles_0_with_http_info(opts)
      data
    end

    # List IPFIX DFW Profile
    # API provides list IPFIX DFW profiles available on selected logical DFW. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXDFWProfileListResult, Fixnum, Hash)>] IPFIXDFWProfileListResult data, response status code and response headers
    def list_ipfixdfw_profiles_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXFirewallIPFIXProfilesApi.list_ipfixdfw_profiles_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.list_ipfixdfw_profiles_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.list_ipfixdfw_profiles_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/ipfix-dfw-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXFirewallIPFIXProfilesApi#list_ipfixdfw_profiles_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IPFIX DFW profile
    # Create a new IPFIX DFW profile if the IPFIX DFW profile with given id does not already exist. If the IPFIX DFW profile with the given id already exists, patch with the existing IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_ipfixdfw_profile(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      patch_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts)
      nil
    end

    # Patch IPFIX DFW profile
    # Create a new IPFIX DFW profile if the IPFIX DFW profile with given id does not already exist. If the IPFIX DFW profile with the given id already exists, patch with the existing IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXFirewallIPFIXProfilesApi.patch_ipfixdfw_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.patch_ipfixdfw_profile"
      end
      # verify the required parameter 'ipfixdfw_profile' is set
      if @api_client.config.client_side_validation && ipfixdfw_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixdfw_profile' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.patch_ipfixdfw_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixdfw_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXFirewallIPFIXProfilesApi#patch_ipfixdfw_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IPFIX DFW profile
    # Create a new IPFIX DFW profile if the IPFIX DFW profile with given id does not already exist. If the IPFIX DFW profile with the given id already exists, patch with the existing IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_ipfixdfw_profile_0(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      patch_ipfixdfw_profile_0_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts)
      nil
    end

    # Patch IPFIX DFW profile
    # Create a new IPFIX DFW profile if the IPFIX DFW profile with given id does not already exist. If the IPFIX DFW profile with the given id already exists, patch with the existing IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfixdfw_profile_0_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXFirewallIPFIXProfilesApi.patch_ipfixdfw_profile_0 ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.patch_ipfixdfw_profile_0"
      end
      # verify the required parameter 'ipfixdfw_profile' is set
      if @api_client.config.client_side_validation && ipfixdfw_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixdfw_profile' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.patch_ipfixdfw_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixdfw_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXFirewallIPFIXProfilesApi#patch_ipfixdfw_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX DFW Profile
    # API will return details of IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW collection id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXDFWProfile]
    def read_ipfixdfw_profile(ipfix_dfw_profile_id, opts = {})
      data, _status_code, _headers = read_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, opts)
      data
    end

    # Get IPFIX DFW Profile
    # API will return details of IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW collection id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXDFWProfile, Fixnum, Hash)>] IPFIXDFWProfile data, response status code and response headers
    def read_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXFirewallIPFIXProfilesApi.read_ipfixdfw_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.read_ipfixdfw_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXFirewallIPFIXProfilesApi#read_ipfixdfw_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX DFW Profile
    # API will return details of IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW collection id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXDFWProfile]
    def read_ipfixdfw_profile_0(ipfix_dfw_profile_id, opts = {})
      data, _status_code, _headers = read_ipfixdfw_profile_0_with_http_info(ipfix_dfw_profile_id, opts)
      data
    end

    # Get IPFIX DFW Profile
    # API will return details of IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW collection id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXDFWProfile, Fixnum, Hash)>] IPFIXDFWProfile data, response status code and response headers
    def read_ipfixdfw_profile_0_with_http_info(ipfix_dfw_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXFirewallIPFIXProfilesApi.read_ipfixdfw_profile_0 ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling PolicyOperationsIPFIXFirewallIPFIXProfilesApi.read_ipfixdfw_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXFirewallIPFIXProfilesApi#read_ipfixdfw_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
