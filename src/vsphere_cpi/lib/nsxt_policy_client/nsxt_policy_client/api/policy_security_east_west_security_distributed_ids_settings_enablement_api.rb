=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create or update IDS config on cluster level
    # Update intrusion detection system on cluster level.
    # @param cluster_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsClusterConfig]
    def create_or_update_ids_cluster_config(cluster_id, ids_cluster_config, opts = {})
      data, _status_code, _headers = create_or_update_ids_cluster_config_with_http_info(cluster_id, ids_cluster_config, opts)
      data
    end

    # create or update IDS config on cluster level
    # Update intrusion detection system on cluster level.
    # @param cluster_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsClusterConfig, Fixnum, Hash)>] IdsClusterConfig data, response status code and response headers
    def create_or_update_ids_cluster_config_with_http_info(cluster_id, ids_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.create_or_update_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.create_or_update_ids_cluster_config"
      end
      # verify the required parameter 'ids_cluster_config' is set
      if @api_client.config.client_side_validation && ids_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_cluster_config' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.create_or_update_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#create_or_update_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS config on cluster level
    # Update intrusion detection system on cluster level.
    # @param cluster_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsClusterConfig]
    def create_or_update_ids_cluster_config_0(cluster_id, ids_cluster_config, opts = {})
      data, _status_code, _headers = create_or_update_ids_cluster_config_0_with_http_info(cluster_id, ids_cluster_config, opts)
      data
    end

    # create or update IDS config on cluster level
    # Update intrusion detection system on cluster level.
    # @param cluster_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsClusterConfig, Fixnum, Hash)>] IdsClusterConfig data, response status code and response headers
    def create_or_update_ids_cluster_config_0_with_http_info(cluster_id, ids_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.create_or_update_ids_cluster_config_0 ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.create_or_update_ids_cluster_config_0"
      end
      # verify the required parameter 'ids_cluster_config' is set
      if @api_client.config.client_side_validation && ids_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_cluster_config' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.create_or_update_ids_cluster_config_0"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#create_or_update_ids_cluster_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IDS configuration
    # Update intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsStandaloneHostConfig]
    def create_or_update_ids_standalone_host_config(ids_standalone_host_config, opts = {})
      data, _status_code, _headers = create_or_update_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts)
      data
    end

    # Create or update IDS configuration
    # Update intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsStandaloneHostConfig, Fixnum, Hash)>] IdsStandaloneHostConfig data, response status code and response headers
    def create_or_update_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.create_or_update_ids_standalone_host_config ...'
      end
      # verify the required parameter 'ids_standalone_host_config' is set
      if @api_client.config.client_side_validation && ids_standalone_host_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_standalone_host_config' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.create_or_update_ids_standalone_host_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_standalone_host_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsStandaloneHostConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#create_or_update_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IDS configuration
    # Update intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsStandaloneHostConfig]
    def create_or_update_ids_standalone_host_config_0(ids_standalone_host_config, opts = {})
      data, _status_code, _headers = create_or_update_ids_standalone_host_config_0_with_http_info(ids_standalone_host_config, opts)
      data
    end

    # Create or update IDS configuration
    # Update intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsStandaloneHostConfig, Fixnum, Hash)>] IdsStandaloneHostConfig data, response status code and response headers
    def create_or_update_ids_standalone_host_config_0_with_http_info(ids_standalone_host_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.create_or_update_ids_standalone_host_config_0 ...'
      end
      # verify the required parameter 'ids_standalone_host_config' is set
      if @api_client.config.client_side_validation && ids_standalone_host_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_standalone_host_config' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.create_or_update_ids_standalone_host_config_0"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_standalone_host_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsStandaloneHostConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#create_or_update_ids_standalone_host_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS cluster config.
    # Read intrusion detection system cluster config 
    # @param cluster_id User entered ID
    # @param [Hash] opts the optional parameters
    # @return [IdsClusterConfig]
    def get_ids_cluster_config(cluster_id, opts = {})
      data, _status_code, _headers = get_ids_cluster_config_with_http_info(cluster_id, opts)
      data
    end

    # Read IDS cluster config.
    # Read intrusion detection system cluster config 
    # @param cluster_id User entered ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsClusterConfig, Fixnum, Hash)>] IdsClusterConfig data, response status code and response headers
    def get_ids_cluster_config_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.get_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.get_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#get_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS cluster config.
    # Read intrusion detection system cluster config 
    # @param cluster_id User entered ID
    # @param [Hash] opts the optional parameters
    # @return [IdsClusterConfig]
    def get_ids_cluster_config_0(cluster_id, opts = {})
      data, _status_code, _headers = get_ids_cluster_config_0_with_http_info(cluster_id, opts)
      data
    end

    # Read IDS cluster config.
    # Read intrusion detection system cluster config 
    # @param cluster_id User entered ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsClusterConfig, Fixnum, Hash)>] IdsClusterConfig data, response status code and response headers
    def get_ids_cluster_config_0_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.get_ids_cluster_config_0 ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.get_ids_cluster_config_0"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#get_ids_cluster_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS config
    # Read intrusion detection system config of standalone hosts. 
    # @param [Hash] opts the optional parameters
    # @return [IdsStandaloneHostConfig]
    def get_ids_standalone_host_config(opts = {})
      data, _status_code, _headers = get_ids_standalone_host_config_with_http_info(opts)
      data
    end

    # Read IDS config
    # Read intrusion detection system config of standalone hosts. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsStandaloneHostConfig, Fixnum, Hash)>] IdsStandaloneHostConfig data, response status code and response headers
    def get_ids_standalone_host_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.get_ids_standalone_host_config ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsStandaloneHostConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#get_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS config
    # Read intrusion detection system config of standalone hosts. 
    # @param [Hash] opts the optional parameters
    # @return [IdsStandaloneHostConfig]
    def get_ids_standalone_host_config_0(opts = {})
      data, _status_code, _headers = get_ids_standalone_host_config_0_with_http_info(opts)
      data
    end

    # Read IDS config
    # Read intrusion detection system config of standalone hosts. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsStandaloneHostConfig, Fixnum, Hash)>] IdsStandaloneHostConfig data, response status code and response headers
    def get_ids_standalone_host_config_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.get_ids_standalone_host_config_0 ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsStandaloneHostConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#get_ids_standalone_host_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS cluster configs
    # List intrusion detection system cluster configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsClusterConfigListResult]
    def list_ids_cluster_configs(opts = {})
      data, _status_code, _headers = list_ids_cluster_configs_with_http_info(opts)
      data
    end

    # List IDS cluster configs
    # List intrusion detection system cluster configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsClusterConfigListResult, Fixnum, Hash)>] IdsClusterConfigListResult data, response status code and response headers
    def list_ids_cluster_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.list_ids_cluster_configs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.list_ids_cluster_configs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.list_ids_cluster_configs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#list_ids_cluster_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS cluster configs
    # List intrusion detection system cluster configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsClusterConfigListResult]
    def list_ids_cluster_configs_0(opts = {})
      data, _status_code, _headers = list_ids_cluster_configs_0_with_http_info(opts)
      data
    end

    # List IDS cluster configs
    # List intrusion detection system cluster configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsClusterConfigListResult, Fixnum, Hash)>] IdsClusterConfigListResult data, response status code and response headers
    def list_ids_cluster_configs_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.list_ids_cluster_configs_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.list_ids_cluster_configs_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.list_ids_cluster_configs_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/cluster-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#list_ids_cluster_configs_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS config on cluster level
    # Patch intrusion detection system on cluster level.
    # @param cluster_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_cluster_config(cluster_id, ids_cluster_config, opts = {})
      patch_ids_cluster_config_with_http_info(cluster_id, ids_cluster_config, opts)
      nil
    end

    # Patch IDS config on cluster level
    # Patch intrusion detection system on cluster level.
    # @param cluster_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_cluster_config_with_http_info(cluster_id, ids_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.patch_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.patch_ids_cluster_config"
      end
      # verify the required parameter 'ids_cluster_config' is set
      if @api_client.config.client_side_validation && ids_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_cluster_config' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.patch_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#patch_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS config on cluster level
    # Patch intrusion detection system on cluster level.
    # @param cluster_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_cluster_config_0(cluster_id, ids_cluster_config, opts = {})
      patch_ids_cluster_config_0_with_http_info(cluster_id, ids_cluster_config, opts)
      nil
    end

    # Patch IDS config on cluster level
    # Patch intrusion detection system on cluster level.
    # @param cluster_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_cluster_config_0_with_http_info(cluster_id, ids_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.patch_ids_cluster_config_0 ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.patch_ids_cluster_config_0"
      end
      # verify the required parameter 'ids_cluster_config' is set
      if @api_client.config.client_side_validation && ids_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_cluster_config' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.patch_ids_cluster_config_0"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#patch_ids_cluster_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS configuration
    # Patch intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_standalone_host_config(ids_standalone_host_config, opts = {})
      patch_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts)
      nil
    end

    # Patch IDS configuration
    # Patch intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.patch_ids_standalone_host_config ...'
      end
      # verify the required parameter 'ids_standalone_host_config' is set
      if @api_client.config.client_side_validation && ids_standalone_host_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_standalone_host_config' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.patch_ids_standalone_host_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_standalone_host_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#patch_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS configuration
    # Patch intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_standalone_host_config_0(ids_standalone_host_config, opts = {})
      patch_ids_standalone_host_config_0_with_http_info(ids_standalone_host_config, opts)
      nil
    end

    # Patch IDS configuration
    # Patch intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_standalone_host_config_0_with_http_info(ids_standalone_host_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.patch_ids_standalone_host_config_0 ...'
      end
      # verify the required parameter 'ids_standalone_host_config' is set
      if @api_client.config.client_side_validation && ids_standalone_host_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_standalone_host_config' when calling PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi.patch_ids_standalone_host_config_0"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_standalone_host_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsSettingsEnablementApi#patch_ids_standalone_host_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
