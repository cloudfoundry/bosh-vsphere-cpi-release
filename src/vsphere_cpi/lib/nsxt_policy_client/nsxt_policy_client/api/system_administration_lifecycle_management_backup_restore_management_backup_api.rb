=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Configure backup
    # Configure file server and timers for automated backup. If secret fields are omitted (password, passphrase) then use the previously set value. 
    # @param backup_configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :frame_type Frame type (default to LOCAL_LOCAL_MANAGER)
    # @option opts [String] :site_id Site ID (default to localhost)
    # @return [BackupConfiguration]
    def configure_backup_config(backup_configuration, opts = {})
      data, _status_code, _headers = configure_backup_config_with_http_info(backup_configuration, opts)
      data
    end

    # Configure backup
    # Configure file server and timers for automated backup. If secret fields are omitted (password, passphrase) then use the previously set value. 
    # @param backup_configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :frame_type Frame type
    # @option opts [String] :site_id Site ID
    # @return [Array<(BackupConfiguration, Fixnum, Hash)>] BackupConfiguration data, response status code and response headers
    def configure_backup_config_with_http_info(backup_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.configure_backup_config ...'
      end
      # verify the required parameter 'backup_configuration' is set
      if @api_client.config.client_side_validation && backup_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'backup_configuration' when calling SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.configure_backup_config"
      end
      if @api_client.config.client_side_validation && opts[:'frame_type'] && !['GLOBAL_MANAGER', 'LOCAL_MANAGER', 'LOCAL_LOCAL_MANAGER', 'NSX_INTELLIGENCE'].include?(opts[:'frame_type'])
        fail ArgumentError, 'invalid value for "frame_type", must be one of GLOBAL_MANAGER, LOCAL_MANAGER, LOCAL_LOCAL_MANAGER, NSX_INTELLIGENCE'
      end
      # resource path
      local_var_path = '/cluster/backups/config'

      # query parameters
      query_params = {}
      query_params[:'frame_type'] = opts[:'frame_type'] if !opts[:'frame_type'].nil?
      query_params[:'site_id'] = opts[:'site_id'] if !opts[:'site_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(backup_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BackupConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi#configure_backup_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get backup configuration
    # Get a configuration of a file server and timers for automated backup. Fields that contain secrets (password, passphrase) are not returned. 
    # @param [Hash] opts the optional parameters
    # @return [BackupConfiguration]
    def get_backup_config(opts = {})
      data, _status_code, _headers = get_backup_config_with_http_info(opts)
      data
    end

    # Get backup configuration
    # Get a configuration of a file server and timers for automated backup. Fields that contain secrets (password, passphrase) are not returned. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BackupConfiguration, Fixnum, Hash)>] BackupConfiguration data, response status code and response headers
    def get_backup_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.get_backup_config ...'
      end
      # resource path
      local_var_path = '/cluster/backups/config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BackupConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi#get_backup_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get backup history
    # Get history of previous backup operations 
    # @param [Hash] opts the optional parameters
    # @return [BackupOperationHistory]
    def get_backup_history(opts = {})
      data, _status_code, _headers = get_backup_history_with_http_info(opts)
      data
    end

    # Get backup history
    # Get history of previous backup operations 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BackupOperationHistory, Fixnum, Hash)>] BackupOperationHistory data, response status code and response headers
    def get_backup_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.get_backup_history ...'
      end
      # resource path
      local_var_path = '/cluster/backups/history'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BackupOperationHistory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi#get_backup_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all backup related information for a site
    # Get a configuration of a file server, timers for automated backup, latest backup status, backups list for a site. Fields that contain secrets (password, passphrase) are not returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :frame_type Frame type (default to LOCAL_LOCAL_MANAGER)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :show_backups_list Need a list of backups (default to true)
    # @option opts [String] :site_id UUID of the site (default to localhost)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [BackupOverview]
    def get_backup_overview(opts = {})
      data, _status_code, _headers = get_backup_overview_with_http_info(opts)
      data
    end

    # Get all backup related information for a site
    # Get a configuration of a file server, timers for automated backup, latest backup status, backups list for a site. Fields that contain secrets (password, passphrase) are not returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :frame_type Frame type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :show_backups_list Need a list of backups
    # @option opts [String] :site_id UUID of the site
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(BackupOverview, Fixnum, Hash)>] BackupOverview data, response status code and response headers
    def get_backup_overview_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.get_backup_overview ...'
      end
      if @api_client.config.client_side_validation && opts[:'frame_type'] && !['GLOBAL_MANAGER', 'LOCAL_MANAGER', 'LOCAL_LOCAL_MANAGER', 'NSX_INTELLIGENCE'].include?(opts[:'frame_type'])
        fail ArgumentError, 'invalid value for "frame_type", must be one of GLOBAL_MANAGER, LOCAL_MANAGER, LOCAL_LOCAL_MANAGER, NSX_INTELLIGENCE'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.get_backup_overview, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.get_backup_overview, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/cluster/backups/overview'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'frame_type'] = opts[:'frame_type'] if !opts[:'frame_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'show_backups_list'] = opts[:'show_backups_list'] if !opts[:'show_backups_list'].nil?
      query_params[:'site_id'] = opts[:'site_id'] if !opts[:'site_id'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BackupOverview')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi#get_backup_overview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get backup status
    # Get status of active backup operations 
    # @param [Hash] opts the optional parameters
    # @return [CurrentBackupOperationStatus]
    def get_backup_status(opts = {})
      data, _status_code, _headers = get_backup_status_with_http_info(opts)
      data
    end

    # Get backup status
    # Get status of active backup operations 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CurrentBackupOperationStatus, Fixnum, Hash)>] CurrentBackupOperationStatus data, response status code and response headers
    def get_backup_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.get_backup_status ...'
      end
      # resource path
      local_var_path = '/cluster/backups/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CurrentBackupOperationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi#get_backup_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get ssh fingerprint of remote(backup) server
    # Get SHA256 fingerprint of ECDSA key of remote server. The caller should independently verify that the key is trusted. 
    # @param remote_server_fingerprint_request 
    # @param [Hash] opts the optional parameters
    # @return [RemoteServerFingerprint]
    def get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint(remote_server_fingerprint_request, opts = {})
      data, _status_code, _headers = get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint_with_http_info(remote_server_fingerprint_request, opts)
      data
    end

    # Get ssh fingerprint of remote(backup) server
    # Get SHA256 fingerprint of ECDSA key of remote server. The caller should independently verify that the key is trusted. 
    # @param remote_server_fingerprint_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoteServerFingerprint, Fixnum, Hash)>] RemoteServerFingerprint data, response status code and response headers
    def get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint_with_http_info(remote_server_fingerprint_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint ...'
      end
      # verify the required parameter 'remote_server_fingerprint_request' is set
      if @api_client.config.client_side_validation && remote_server_fingerprint_request.nil?
        fail ArgumentError, "Missing the required parameter 'remote_server_fingerprint_request' when calling SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint"
      end
      # resource path
      local_var_path = '/cluster/backups?action=retrieve_ssh_fingerprint'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(remote_server_fingerprint_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RemoteServerFingerprint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi#get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request one-time backup
    # Request one-time backup. The backup will be uploaded using the same server configuration as for automatic backup. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :frame_type Frame type (default to LOCAL_LOCAL_MANAGER)
    # @option opts [String] :site_id Site ID (default to localhost)
    # @return [nil]
    def request_onetime_backup_backup_to_remote(opts = {})
      request_onetime_backup_backup_to_remote_with_http_info(opts)
      nil
    end

    # Request one-time backup
    # Request one-time backup. The backup will be uploaded using the same server configuration as for automatic backup. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :frame_type Frame type
    # @option opts [String] :site_id Site ID
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def request_onetime_backup_backup_to_remote_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.request_onetime_backup_backup_to_remote ...'
      end
      if @api_client.config.client_side_validation && opts[:'frame_type'] && !['GLOBAL_MANAGER', 'LOCAL_MANAGER', 'LOCAL_LOCAL_MANAGER', 'NSX_INTELLIGENCE'].include?(opts[:'frame_type'])
        fail ArgumentError, 'invalid value for "frame_type", must be one of GLOBAL_MANAGER, LOCAL_MANAGER, LOCAL_LOCAL_MANAGER, NSX_INTELLIGENCE'
      end
      # resource path
      local_var_path = '/cluster?action=backup_to_remote'

      # query parameters
      query_params = {}
      query_params[:'frame_type'] = opts[:'frame_type'] if !opts[:'frame_type'].nil?
      query_params[:'site_id'] = opts[:'site_id'] if !opts[:'site_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi#request_onetime_backup_backup_to_remote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request one-time inventory summary.
    # Request one-time inventory summary. The backup will be uploaded using the same server configuration as for an automatic backup. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def request_onetime_inventory_summary_summarize_inventory_to_remote(opts = {})
      request_onetime_inventory_summary_summarize_inventory_to_remote_with_http_info(opts)
      nil
    end

    # Request one-time inventory summary.
    # Request one-time inventory summary. The backup will be uploaded using the same server configuration as for an automatic backup. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def request_onetime_inventory_summary_summarize_inventory_to_remote_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi.request_onetime_inventory_summary_summarize_inventory_to_remote ...'
      end
      # resource path
      local_var_path = '/cluster?action=summarize_inventory_to_remote'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi#request_onetime_inventory_summary_summarize_inventory_to_remote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
