=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicyInventoryGroupsGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add or Remove external id based members from/to a Group 
    # It will add or remove the specified members having external ID for a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param group_member_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addor_remove_group_external_id_members(domain_id, group_id, expression_id, group_member_list, action, opts = {})
      addor_remove_group_external_id_members_with_http_info(domain_id, group_id, expression_id, group_member_list, action, opts)
      nil
    end

    # Add or Remove external id based members from/to a Group 
    # It will add or remove the specified members having external ID for a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param group_member_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def addor_remove_group_external_id_members_with_http_info(domain_id, group_id, expression_id, group_member_list, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members"
      end
      # verify the required parameter 'group_member_list' is set
      if @api_client.config.client_side_validation && group_member_list.nil?
        fail ArgumentError, "Missing the required parameter 'group_member_list' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/external-id-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_member_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#addor_remove_group_external_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add or Remove external id based members from/to a Group 
    # It will add or remove the specified members having external ID for a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param group_member_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addor_remove_group_external_id_members_0(domain_id, group_id, expression_id, group_member_list, action, opts = {})
      addor_remove_group_external_id_members_0_with_http_info(domain_id, group_id, expression_id, group_member_list, action, opts)
      nil
    end

    # Add or Remove external id based members from/to a Group 
    # It will add or remove the specified members having external ID for a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param group_member_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def addor_remove_group_external_id_members_0_with_http_info(domain_id, group_id, expression_id, group_member_list, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members_0"
      end
      # verify the required parameter 'group_member_list' is set
      if @api_client.config.client_side_validation && group_member_list.nil?
        fail ArgumentError, "Missing the required parameter 'group_member_list' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members_0"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_external_id_members_0"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/external-id-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_member_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#addor_remove_group_external_id_members_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add or Remove IP Addresses from/to a Group 
    # It will add or remove the specified IP Addresses from a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param ip_address_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addor_remove_group_ip_addresses(domain_id, group_id, expression_id, ip_address_list, action, opts = {})
      addor_remove_group_ip_addresses_with_http_info(domain_id, group_id, expression_id, ip_address_list, action, opts)
      nil
    end

    # Add or Remove IP Addresses from/to a Group 
    # It will add or remove the specified IP Addresses from a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param ip_address_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def addor_remove_group_ip_addresses_with_http_info(domain_id, group_id, expression_id, ip_address_list, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses"
      end
      # verify the required parameter 'ip_address_list' is set
      if @api_client.config.client_side_validation && ip_address_list.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_list' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/ip-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#addor_remove_group_ip_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add or Remove IP Addresses from/to a Group 
    # It will add or remove the specified IP Addresses from a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param ip_address_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addor_remove_group_ip_addresses_0(domain_id, group_id, expression_id, ip_address_list, action, opts = {})
      addor_remove_group_ip_addresses_0_with_http_info(domain_id, group_id, expression_id, ip_address_list, action, opts)
      nil
    end

    # Add or Remove IP Addresses from/to a Group 
    # It will add or remove the specified IP Addresses from a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param ip_address_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def addor_remove_group_ip_addresses_0_with_http_info(domain_id, group_id, expression_id, ip_address_list, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses_0"
      end
      # verify the required parameter 'ip_address_list' is set
      if @api_client.config.client_side_validation && ip_address_list.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_list' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses_0"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_ip_addresses_0"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/ip-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#addor_remove_group_ip_addresses_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add or Remove MAC Addresses from/to a Group 
    # It will add or remove the specified MAC Addresses from a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param mac_address_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addor_remove_group_mac_addresses(domain_id, group_id, expression_id, mac_address_list, action, opts = {})
      addor_remove_group_mac_addresses_with_http_info(domain_id, group_id, expression_id, mac_address_list, action, opts)
      nil
    end

    # Add or Remove MAC Addresses from/to a Group 
    # It will add or remove the specified MAC Addresses from a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param mac_address_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def addor_remove_group_mac_addresses_with_http_info(domain_id, group_id, expression_id, mac_address_list, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses"
      end
      # verify the required parameter 'mac_address_list' is set
      if @api_client.config.client_side_validation && mac_address_list.nil?
        fail ArgumentError, "Missing the required parameter 'mac_address_list' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/mac-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mac_address_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#addor_remove_group_mac_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add or Remove MAC Addresses from/to a Group 
    # It will add or remove the specified MAC Addresses from a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param mac_address_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addor_remove_group_mac_addresses_0(domain_id, group_id, expression_id, mac_address_list, action, opts = {})
      addor_remove_group_mac_addresses_0_with_http_info(domain_id, group_id, expression_id, mac_address_list, action, opts)
      nil
    end

    # Add or Remove MAC Addresses from/to a Group 
    # It will add or remove the specified MAC Addresses from a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param mac_address_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def addor_remove_group_mac_addresses_0_with_http_info(domain_id, group_id, expression_id, mac_address_list, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses_0"
      end
      # verify the required parameter 'mac_address_list' is set
      if @api_client.config.client_side_validation && mac_address_list.nil?
        fail ArgumentError, "Missing the required parameter 'mac_address_list' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses_0"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_mac_addresses_0"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/mac-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mac_address_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#addor_remove_group_mac_addresses_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add or Remove path based members from/to a Group 
    # It will add or remove the specified members having path for a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param group_member_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addor_remove_group_path_members(domain_id, group_id, expression_id, group_member_list, action, opts = {})
      addor_remove_group_path_members_with_http_info(domain_id, group_id, expression_id, group_member_list, action, opts)
      nil
    end

    # Add or Remove path based members from/to a Group 
    # It will add or remove the specified members having path for a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param group_member_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def addor_remove_group_path_members_with_http_info(domain_id, group_id, expression_id, group_member_list, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members"
      end
      # verify the required parameter 'group_member_list' is set
      if @api_client.config.client_side_validation && group_member_list.nil?
        fail ArgumentError, "Missing the required parameter 'group_member_list' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/path-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_member_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#addor_remove_group_path_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add or Remove path based members from/to a Group 
    # It will add or remove the specified members having path for a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param group_member_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addor_remove_group_path_members_0(domain_id, group_id, expression_id, group_member_list, action, opts = {})
      addor_remove_group_path_members_0_with_http_info(domain_id, group_id, expression_id, group_member_list, action, opts)
      nil
    end

    # Add or Remove path based members from/to a Group 
    # It will add or remove the specified members having path for a given expression of a group. 
    # @param domain_id 
    # @param group_id 
    # @param expression_id 
    # @param group_member_list 
    # @param action Add or Remove group members.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def addor_remove_group_path_members_0_with_http_info(domain_id, group_id, expression_id, group_member_list, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members_0"
      end
      # verify the required parameter 'group_member_list' is set
      if @api_client.config.client_side_validation && group_member_list.nil?
        fail ArgumentError, "Missing the required parameter 'group_member_list' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members_0"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling PolicyInventoryGroupsGroupsApi.addor_remove_group_path_members_0"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/path-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_member_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#addor_remove_group_path_members_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group
    # Delete Group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :fail_if_subtree_exists Do not delete if the group subtree has any entities (default to false)
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_group(domain_id, group_id, opts = {})
      delete_group_with_http_info(domain_id, group_id, opts)
      nil
    end

    # Delete Group
    # Delete Group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :fail_if_subtree_exists Do not delete if the group subtree has any entities
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.delete_group ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.delete_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.delete_group"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fail_if_subtree_exists'] = opts[:'fail_if_subtree_exists'] if !opts[:'fail_if_subtree_exists'].nil?
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#delete_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group
    # Delete Group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :fail_if_subtree_exists Do not delete if the group subtree has any entities (default to false)
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_group_0(domain_id, group_id, opts = {})
      delete_group_0_with_http_info(domain_id, group_id, opts)
      nil
    end

    # Delete Group
    # Delete Group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :fail_if_subtree_exists Do not delete if the group subtree has any entities
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_0_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.delete_group_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fail_if_subtree_exists'] = opts[:'fail_if_subtree_exists'] if !opts[:'fail_if_subtree_exists'].nil?
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#delete_group_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group External ID Expression
    # Delete Group External ID Expression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id ExternalIDExpression ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_external_id_expression(domain_id, group_id, expression_id, opts = {})
      delete_group_external_id_expression_with_http_info(domain_id, group_id, expression_id, opts)
      nil
    end

    # Delete Group External ID Expression
    # Delete Group External ID Expression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id ExternalIDExpression ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_external_id_expression_with_http_info(domain_id, group_id, expression_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.delete_group_external_id_expression ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_external_id_expression"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_external_id_expression"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_external_id_expression"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/external-id-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#delete_group_external_id_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group External ID Expression
    # Delete Group External ID Expression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id ExternalIDExpression ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_external_id_expression_0(domain_id, group_id, expression_id, opts = {})
      delete_group_external_id_expression_0_with_http_info(domain_id, group_id, expression_id, opts)
      nil
    end

    # Delete Group External ID Expression
    # Delete Group External ID Expression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id ExternalIDExpression ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_external_id_expression_0_with_http_info(domain_id, group_id, expression_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.delete_group_external_id_expression_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_external_id_expression_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_external_id_expression_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_external_id_expression_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/external-id-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#delete_group_external_id_expression_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group IPAddressExpression
    # Delete Group IPAddressExpression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id IPAddressExpression ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_ip_address_expression(domain_id, group_id, expression_id, opts = {})
      delete_group_ip_address_expression_with_http_info(domain_id, group_id, expression_id, opts)
      nil
    end

    # Delete Group IPAddressExpression
    # Delete Group IPAddressExpression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id IPAddressExpression ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_ip_address_expression_with_http_info(domain_id, group_id, expression_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.delete_group_ip_address_expression ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_ip_address_expression"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_ip_address_expression"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_ip_address_expression"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/ip-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#delete_group_ip_address_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group IPAddressExpression
    # Delete Group IPAddressExpression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id IPAddressExpression ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_ip_address_expression_0(domain_id, group_id, expression_id, opts = {})
      delete_group_ip_address_expression_0_with_http_info(domain_id, group_id, expression_id, opts)
      nil
    end

    # Delete Group IPAddressExpression
    # Delete Group IPAddressExpression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id IPAddressExpression ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_ip_address_expression_0_with_http_info(domain_id, group_id, expression_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.delete_group_ip_address_expression_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_ip_address_expression_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_ip_address_expression_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_ip_address_expression_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/ip-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#delete_group_ip_address_expression_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group MACAddressExpression
    # Delete Group MACAddressExpression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id MACAddressExpression ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_mac_address_expression(domain_id, group_id, expression_id, opts = {})
      delete_group_mac_address_expression_with_http_info(domain_id, group_id, expression_id, opts)
      nil
    end

    # Delete Group MACAddressExpression
    # Delete Group MACAddressExpression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id MACAddressExpression ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_mac_address_expression_with_http_info(domain_id, group_id, expression_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.delete_group_mac_address_expression ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_mac_address_expression"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_mac_address_expression"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_mac_address_expression"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/mac-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#delete_group_mac_address_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group MACAddressExpression
    # Delete Group MACAddressExpression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id MACAddressExpression ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_mac_address_expression_0(domain_id, group_id, expression_id, opts = {})
      delete_group_mac_address_expression_0_with_http_info(domain_id, group_id, expression_id, opts)
      nil
    end

    # Delete Group MACAddressExpression
    # Delete Group MACAddressExpression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id MACAddressExpression ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_mac_address_expression_0_with_http_info(domain_id, group_id, expression_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.delete_group_mac_address_expression_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_mac_address_expression_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_mac_address_expression_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_mac_address_expression_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/mac-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#delete_group_mac_address_expression_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group Path Expression
    # Delete Group Path Expression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id PathExpression ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_path_expression(domain_id, group_id, expression_id, opts = {})
      delete_group_path_expression_with_http_info(domain_id, group_id, expression_id, opts)
      nil
    end

    # Delete Group Path Expression
    # Delete Group Path Expression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id PathExpression ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_path_expression_with_http_info(domain_id, group_id, expression_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.delete_group_path_expression ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_path_expression"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_path_expression"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_path_expression"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/path-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#delete_group_path_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group Path Expression
    # Delete Group Path Expression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id PathExpression ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_path_expression_0(domain_id, group_id, expression_id, opts = {})
      delete_group_path_expression_0_with_http_info(domain_id, group_id, expression_id, opts)
      nil
    end

    # Delete Group Path Expression
    # Delete Group Path Expression
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id PathExpression ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_path_expression_0_with_http_info(domain_id, group_id, expression_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.delete_group_path_expression_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_path_expression_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_path_expression_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.delete_group_path_expression_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/path-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#delete_group_path_expression_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Groups for a domain
    # List Groups for a domain. Groups can be filtered using member_types query parameter, which returns the groups that contains the specified member types. Multiple member types can be provided as comma separated values. The API also return groups having member type that are subset of provided member_types. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Comma Seperated Member types
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GroupListResult]
    def list_group_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_group_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List Groups for a domain
    # List Groups for a domain. Groups can be filtered using member_types query parameter, which returns the groups that contains the specified member types. Multiple member types can be provided as comma separated values. The API also return groups having member type that are subset of provided member_types. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Comma Seperated Member types
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GroupListResult, Fixnum, Hash)>] GroupListResult data, response status code and response headers
    def list_group_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.list_group_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.list_group_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryGroupsGroupsApi.list_group_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryGroupsGroupsApi.list_group_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'member_types'] = opts[:'member_types'] if !opts[:'member_types'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#list_group_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Groups for a domain
    # List Groups for a domain. Groups can be filtered using member_types query parameter, which returns the groups that contains the specified member types. Multiple member types can be provided as comma separated values. The API also return groups having member type that are subset of provided member_types. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Comma Seperated Member types
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GroupListResult]
    def list_group_for_domain_0(domain_id, opts = {})
      data, _status_code, _headers = list_group_for_domain_0_with_http_info(domain_id, opts)
      data
    end

    # List Groups for a domain
    # List Groups for a domain. Groups can be filtered using member_types query parameter, which returns the groups that contains the specified member types. Multiple member types can be provided as comma separated values. The API also return groups having member type that are subset of provided member_types. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Comma Seperated Member types
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GroupListResult, Fixnum, Hash)>] GroupListResult data, response status code and response headers
    def list_group_for_domain_0_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.list_group_for_domain_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.list_group_for_domain_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryGroupsGroupsApi.list_group_for_domain_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryGroupsGroupsApi.list_group_for_domain_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'member_types'] = opts[:'member_types'] if !opts[:'member_types'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#list_group_for_domain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a group external ID expression
    # If a group ExternalIDexpression with the expression-id is not already present, create a new ExternalIDexpresison. If it already exists, replace the existing ExternalIDexpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id ExternalIDExpression ID
    # @param external_id_expression 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_external_id_expression_for_domain(domain_id, group_id, expression_id, external_id_expression, opts = {})
      patch_group_external_id_expression_for_domain_with_http_info(domain_id, group_id, expression_id, external_id_expression, opts)
      nil
    end

    # Patch a group external ID expression
    # If a group ExternalIDexpression with the expression-id is not already present, create a new ExternalIDexpresison. If it already exists, replace the existing ExternalIDexpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id ExternalIDExpression ID
    # @param external_id_expression 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_external_id_expression_for_domain_with_http_info(domain_id, group_id, expression_id, external_id_expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.patch_group_external_id_expression_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_external_id_expression_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_external_id_expression_for_domain"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_external_id_expression_for_domain"
      end
      # verify the required parameter 'external_id_expression' is set
      if @api_client.config.client_side_validation && external_id_expression.nil?
        fail ArgumentError, "Missing the required parameter 'external_id_expression' when calling PolicyInventoryGroupsGroupsApi.patch_group_external_id_expression_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/external-id-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(external_id_expression)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#patch_group_external_id_expression_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a group external ID expression
    # If a group ExternalIDexpression with the expression-id is not already present, create a new ExternalIDexpresison. If it already exists, replace the existing ExternalIDexpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id ExternalIDExpression ID
    # @param external_id_expression 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_external_id_expression_for_domain_0(domain_id, group_id, expression_id, external_id_expression, opts = {})
      patch_group_external_id_expression_for_domain_0_with_http_info(domain_id, group_id, expression_id, external_id_expression, opts)
      nil
    end

    # Patch a group external ID expression
    # If a group ExternalIDexpression with the expression-id is not already present, create a new ExternalIDexpresison. If it already exists, replace the existing ExternalIDexpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id ExternalIDExpression ID
    # @param external_id_expression 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_external_id_expression_for_domain_0_with_http_info(domain_id, group_id, expression_id, external_id_expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.patch_group_external_id_expression_for_domain_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_external_id_expression_for_domain_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_external_id_expression_for_domain_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_external_id_expression_for_domain_0"
      end
      # verify the required parameter 'external_id_expression' is set
      if @api_client.config.client_side_validation && external_id_expression.nil?
        fail ArgumentError, "Missing the required parameter 'external_id_expression' when calling PolicyInventoryGroupsGroupsApi.patch_group_external_id_expression_for_domain_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/external-id-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(external_id_expression)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#patch_group_external_id_expression_for_domain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a group
    # If a group with the group-id is not already present, create a new group. If it already exists, patch the group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_for_domain(domain_id, group_id, group, opts = {})
      patch_group_for_domain_with_http_info(domain_id, group_id, group, opts)
      nil
    end

    # Patch a group
    # If a group with the group-id is not already present, create a new group. If it already exists, patch the group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_for_domain_with_http_info(domain_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.patch_group_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_for_domain"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling PolicyInventoryGroupsGroupsApi.patch_group_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#patch_group_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a group
    # If a group with the group-id is not already present, create a new group. If it already exists, patch the group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_for_domain_0(domain_id, group_id, group, opts = {})
      patch_group_for_domain_0_with_http_info(domain_id, group_id, group, opts)
      nil
    end

    # Patch a group
    # If a group with the group-id is not already present, create a new group. If it already exists, patch the group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_for_domain_0_with_http_info(domain_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.patch_group_for_domain_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_for_domain_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_for_domain_0"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling PolicyInventoryGroupsGroupsApi.patch_group_for_domain_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#patch_group_for_domain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a group IP Address expression
    # If a group IPAddressExpression with the expression-id is not already present, create a new IPAddressExpression. If it already exists, replace the existing IPAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id IPAddressExpression ID
    # @param ip_address_expression 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_ip_address_expression_for_domain(domain_id, group_id, expression_id, ip_address_expression, opts = {})
      patch_group_ip_address_expression_for_domain_with_http_info(domain_id, group_id, expression_id, ip_address_expression, opts)
      nil
    end

    # Patch a group IP Address expression
    # If a group IPAddressExpression with the expression-id is not already present, create a new IPAddressExpression. If it already exists, replace the existing IPAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id IPAddressExpression ID
    # @param ip_address_expression 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_ip_address_expression_for_domain_with_http_info(domain_id, group_id, expression_id, ip_address_expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.patch_group_ip_address_expression_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_ip_address_expression_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_ip_address_expression_for_domain"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_ip_address_expression_for_domain"
      end
      # verify the required parameter 'ip_address_expression' is set
      if @api_client.config.client_side_validation && ip_address_expression.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_expression' when calling PolicyInventoryGroupsGroupsApi.patch_group_ip_address_expression_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/ip-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_expression)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#patch_group_ip_address_expression_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a group IP Address expression
    # If a group IPAddressExpression with the expression-id is not already present, create a new IPAddressExpression. If it already exists, replace the existing IPAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id IPAddressExpression ID
    # @param ip_address_expression 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_ip_address_expression_for_domain_0(domain_id, group_id, expression_id, ip_address_expression, opts = {})
      patch_group_ip_address_expression_for_domain_0_with_http_info(domain_id, group_id, expression_id, ip_address_expression, opts)
      nil
    end

    # Patch a group IP Address expression
    # If a group IPAddressExpression with the expression-id is not already present, create a new IPAddressExpression. If it already exists, replace the existing IPAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id IPAddressExpression ID
    # @param ip_address_expression 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_ip_address_expression_for_domain_0_with_http_info(domain_id, group_id, expression_id, ip_address_expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.patch_group_ip_address_expression_for_domain_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_ip_address_expression_for_domain_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_ip_address_expression_for_domain_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_ip_address_expression_for_domain_0"
      end
      # verify the required parameter 'ip_address_expression' is set
      if @api_client.config.client_side_validation && ip_address_expression.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_expression' when calling PolicyInventoryGroupsGroupsApi.patch_group_ip_address_expression_for_domain_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/ip-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_expression)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#patch_group_ip_address_expression_for_domain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a group MAC Address expression
    # If a group MACAddressExpression with the expression-id is not already present, create a new MACAddressExpression. If it already exists, replace the existing MACAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id MACAddressExpression ID
    # @param mac_address_expression 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_mac_address_expression_for_domain(domain_id, group_id, expression_id, mac_address_expression, opts = {})
      patch_group_mac_address_expression_for_domain_with_http_info(domain_id, group_id, expression_id, mac_address_expression, opts)
      nil
    end

    # Patch a group MAC Address expression
    # If a group MACAddressExpression with the expression-id is not already present, create a new MACAddressExpression. If it already exists, replace the existing MACAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id MACAddressExpression ID
    # @param mac_address_expression 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_mac_address_expression_for_domain_with_http_info(domain_id, group_id, expression_id, mac_address_expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.patch_group_mac_address_expression_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_mac_address_expression_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_mac_address_expression_for_domain"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_mac_address_expression_for_domain"
      end
      # verify the required parameter 'mac_address_expression' is set
      if @api_client.config.client_side_validation && mac_address_expression.nil?
        fail ArgumentError, "Missing the required parameter 'mac_address_expression' when calling PolicyInventoryGroupsGroupsApi.patch_group_mac_address_expression_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/mac-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mac_address_expression)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#patch_group_mac_address_expression_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a group MAC Address expression
    # If a group MACAddressExpression with the expression-id is not already present, create a new MACAddressExpression. If it already exists, replace the existing MACAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id MACAddressExpression ID
    # @param mac_address_expression 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_mac_address_expression_for_domain_0(domain_id, group_id, expression_id, mac_address_expression, opts = {})
      patch_group_mac_address_expression_for_domain_0_with_http_info(domain_id, group_id, expression_id, mac_address_expression, opts)
      nil
    end

    # Patch a group MAC Address expression
    # If a group MACAddressExpression with the expression-id is not already present, create a new MACAddressExpression. If it already exists, replace the existing MACAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id MACAddressExpression ID
    # @param mac_address_expression 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_mac_address_expression_for_domain_0_with_http_info(domain_id, group_id, expression_id, mac_address_expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.patch_group_mac_address_expression_for_domain_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_mac_address_expression_for_domain_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_mac_address_expression_for_domain_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_mac_address_expression_for_domain_0"
      end
      # verify the required parameter 'mac_address_expression' is set
      if @api_client.config.client_side_validation && mac_address_expression.nil?
        fail ArgumentError, "Missing the required parameter 'mac_address_expression' when calling PolicyInventoryGroupsGroupsApi.patch_group_mac_address_expression_for_domain_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/mac-address-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mac_address_expression)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#patch_group_mac_address_expression_for_domain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a group path expression
    # If a group path_expression with the expression-id is not already present, create a new pathexpresison. If it already exists, replace the existing pathexpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id PathExpression ID
    # @param path_expression 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_path_expression_for_domain(domain_id, group_id, expression_id, path_expression, opts = {})
      patch_group_path_expression_for_domain_with_http_info(domain_id, group_id, expression_id, path_expression, opts)
      nil
    end

    # Patch a group path expression
    # If a group path_expression with the expression-id is not already present, create a new pathexpresison. If it already exists, replace the existing pathexpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id PathExpression ID
    # @param path_expression 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_path_expression_for_domain_with_http_info(domain_id, group_id, expression_id, path_expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.patch_group_path_expression_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_path_expression_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_path_expression_for_domain"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_path_expression_for_domain"
      end
      # verify the required parameter 'path_expression' is set
      if @api_client.config.client_side_validation && path_expression.nil?
        fail ArgumentError, "Missing the required parameter 'path_expression' when calling PolicyInventoryGroupsGroupsApi.patch_group_path_expression_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/path-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(path_expression)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#patch_group_path_expression_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a group path expression
    # If a group path_expression with the expression-id is not already present, create a new pathexpresison. If it already exists, replace the existing pathexpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id PathExpression ID
    # @param path_expression 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_path_expression_for_domain_0(domain_id, group_id, expression_id, path_expression, opts = {})
      patch_group_path_expression_for_domain_0_with_http_info(domain_id, group_id, expression_id, path_expression, opts)
      nil
    end

    # Patch a group path expression
    # If a group path_expression with the expression-id is not already present, create a new pathexpresison. If it already exists, replace the existing pathexpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param expression_id PathExpression ID
    # @param path_expression 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_path_expression_for_domain_0_with_http_info(domain_id, group_id, expression_id, path_expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.patch_group_path_expression_for_domain_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_path_expression_for_domain_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_path_expression_for_domain_0"
      end
      # verify the required parameter 'expression_id' is set
      if @api_client.config.client_side_validation && expression_id.nil?
        fail ArgumentError, "Missing the required parameter 'expression_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_path_expression_for_domain_0"
      end
      # verify the required parameter 'path_expression' is set
      if @api_client.config.client_side_validation && path_expression.nil?
        fail ArgumentError, "Missing the required parameter 'path_expression' when calling PolicyInventoryGroupsGroupsApi.patch_group_path_expression_for_domain_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/path-expressions/{expression-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'expression-id' + '}', expression_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(path_expression)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#patch_group_path_expression_for_domain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read group
    # Read group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def read_group_for_domain(domain_id, group_id, opts = {})
      data, _status_code, _headers = read_group_for_domain_with_http_info(domain_id, group_id, opts)
      data
    end

    # Read group
    # Read group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def read_group_for_domain_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.read_group_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.read_group_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.read_group_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#read_group_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read group
    # Read group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def read_group_for_domain_0(domain_id, group_id, opts = {})
      data, _status_code, _headers = read_group_for_domain_0_with_http_info(domain_id, group_id, opts)
      data
    end

    # Read group
    # Read group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def read_group_for_domain_0_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.read_group_for_domain_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.read_group_for_domain_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.read_group_for_domain_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#read_group_for_domain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a group
    # If a group with the group-id is not already present, create a new group. If it already exists, update the group. Avoid creating groups with multiple MACAddressExpression and IPAddressExpression. In future releases, group will be restricted to contain a single MACAddressExpression and IPAddressExpression along with other expressions. To group IPAddresses or MACAddresses, use nested groups instead of multiple IPAddressExpressions/MACAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def update_group_for_domain(domain_id, group_id, group, opts = {})
      data, _status_code, _headers = update_group_for_domain_with_http_info(domain_id, group_id, group, opts)
      data
    end

    # Create or update a group
    # If a group with the group-id is not already present, create a new group. If it already exists, update the group. Avoid creating groups with multiple MACAddressExpression and IPAddressExpression. In future releases, group will be restricted to contain a single MACAddressExpression and IPAddressExpression along with other expressions. To group IPAddresses or MACAddresses, use nested groups instead of multiple IPAddressExpressions/MACAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def update_group_for_domain_with_http_info(domain_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.update_group_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.update_group_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.update_group_for_domain"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling PolicyInventoryGroupsGroupsApi.update_group_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#update_group_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a group
    # If a group with the group-id is not already present, create a new group. If it already exists, update the group. Avoid creating groups with multiple MACAddressExpression and IPAddressExpression. In future releases, group will be restricted to contain a single MACAddressExpression and IPAddressExpression along with other expressions. To group IPAddresses or MACAddresses, use nested groups instead of multiple IPAddressExpressions/MACAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def update_group_for_domain_0(domain_id, group_id, group, opts = {})
      data, _status_code, _headers = update_group_for_domain_0_with_http_info(domain_id, group_id, group, opts)
      data
    end

    # Create or update a group
    # If a group with the group-id is not already present, create a new group. If it already exists, update the group. Avoid creating groups with multiple MACAddressExpression and IPAddressExpression. In future releases, group will be restricted to contain a single MACAddressExpression and IPAddressExpression along with other expressions. To group IPAddresses or MACAddresses, use nested groups instead of multiple IPAddressExpressions/MACAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def update_group_for_domain_0_with_http_info(domain_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.update_group_for_domain_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.update_group_for_domain_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.update_group_for_domain_0"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling PolicyInventoryGroupsGroupsApi.update_group_for_domain_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#update_group_for_domain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
