=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module NSXTPolicy
  class PolicyInventoryGroupsGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Group
    # Delete Group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :fail_if_subtree_exists Do not delete if the group subtree has any entities (default to false)
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_group(domain_id, group_id, opts = {})
      delete_group_with_http_info(domain_id, group_id, opts)
      nil
    end

    # Delete Group
    # Delete Group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :fail_if_subtree_exists Do not delete if the group subtree has any entities
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.delete_group ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.delete_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.delete_group"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fail_if_subtree_exists'] = opts[:'fail_if_subtree_exists'] if !opts[:'fail_if_subtree_exists'].nil?
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#delete_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a group
    # If a group with the group-id is not already present, create a new group. If it already exists, patch the group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_for_domain(domain_id, group_id, group, opts = {})
      patch_group_for_domain_with_http_info(domain_id, group_id, group, opts)
      nil
    end

    # Patch a group
    # If a group with the group-id is not already present, create a new group. If it already exists, patch the group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_for_domain_with_http_info(domain_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.patch_group_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.patch_group_for_domain"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling PolicyInventoryGroupsGroupsApi.patch_group_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#patch_group_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read group
    # Read group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def read_group_for_domain(domain_id, group_id, opts = {})
      data, _status_code, _headers = read_group_for_domain_with_http_info(domain_id, group_id, opts)
      data
    end

    # Read group
    # Read group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def read_group_for_domain_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.read_group_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.read_group_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.read_group_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#read_group_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a group
    # If a group with the group-id is not already present, create a new group. If it already exists, update the group. Avoid creating groups with multiple MACAddressExpression and IPAddressExpression. In future releases, group will be restricted to contain a single MACAddressExpression and IPAddressExpression along with other expressions. To group IPAddresses or MACAddresses, use nested groups instead of multiple IPAddressExpressions/MACAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def update_group_for_domain(domain_id, group_id, group, opts = {})
      data, _status_code, _headers = update_group_for_domain_with_http_info(domain_id, group_id, group, opts)
      data
    end

    # Create or update a group
    # If a group with the group-id is not already present, create a new group. If it already exists, update the group. Avoid creating groups with multiple MACAddressExpression and IPAddressExpression. In future releases, group will be restricted to contain a single MACAddressExpression and IPAddressExpression along with other expressions. To group IPAddresses or MACAddresses, use nested groups instead of multiple IPAddressExpressions/MACAddressExpression. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def update_group_for_domain_with_http_info(domain_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryGroupsGroupsApi.update_group_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyInventoryGroupsGroupsApi.update_group_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyInventoryGroupsGroupsApi.update_group_for_domain"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling PolicyInventoryGroupsGroupsApi.update_group_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryGroupsGroupsApi#update_group_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
