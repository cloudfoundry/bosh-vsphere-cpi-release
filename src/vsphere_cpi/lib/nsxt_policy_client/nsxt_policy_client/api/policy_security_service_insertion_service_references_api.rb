=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecurityServiceInsertionServiceReferencesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [ServiceReference]
    def create_or_update_service_reference(service_reference_id, service_reference, opts = {})
      data, _status_code, _headers = create_or_update_service_reference_with_http_info(service_reference_id, service_reference, opts)
      data
    end

    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceReference, Fixnum, Hash)>] ServiceReference data, response status code and response headers
    def create_or_update_service_reference_with_http_info(service_reference_id, service_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.create_or_update_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.create_or_update_service_reference"
      end
      # verify the required parameter 'service_reference' is set
      if @api_client.config.client_side_validation && service_reference.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference' when calling PolicySecurityServiceInsertionServiceReferencesApi.create_or_update_service_reference"
      end
      # resource path
      local_var_path = '/global-infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_reference)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#create_or_update_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [ServiceReference]
    def create_or_update_service_reference_0(service_reference_id, service_reference, opts = {})
      data, _status_code, _headers = create_or_update_service_reference_0_with_http_info(service_reference_id, service_reference, opts)
      data
    end

    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceReference, Fixnum, Hash)>] ServiceReference data, response status code and response headers
    def create_or_update_service_reference_0_with_http_info(service_reference_id, service_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.create_or_update_service_reference_0 ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.create_or_update_service_reference_0"
      end
      # verify the required parameter 'service_reference' is set
      if @api_client.config.client_side_validation && service_reference.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference' when calling PolicySecurityServiceInsertionServiceReferencesApi.create_or_update_service_reference_0"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_reference)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#create_or_update_service_reference_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update service profile
    # Create or update Service profile to specify vendor temp- late attributes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceProfile]
    def create_policy_service_profile(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      data, _status_code, _headers = create_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts)
      data
    end

    # Create or update service profile
    # Create or update Service profile to specify vendor temp- late attributes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceProfile, Fixnum, Hash)>] PolicyServiceProfile data, response status code and response headers
    def create_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.create_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.create_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.create_policy_service_profile"
      end
      # verify the required parameter 'policy_service_profile' is set
      if @api_client.config.client_side_validation && policy_service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_profile' when calling PolicySecurityServiceInsertionServiceReferencesApi.create_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#create_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update service profile
    # Create or update Service profile to specify vendor temp- late attributes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceProfile]
    def create_policy_service_profile_0(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      data, _status_code, _headers = create_policy_service_profile_0_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts)
      data
    end

    # Create or update service profile
    # Create or update Service profile to specify vendor temp- late attributes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceProfile, Fixnum, Hash)>] PolicyServiceProfile data, response status code and response headers
    def create_policy_service_profile_0_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.create_policy_service_profile_0 ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.create_policy_service_profile_0"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.create_policy_service_profile_0"
      end
      # verify the required parameter 'policy_service_profile' is set
      if @api_client.config.client_side_validation && policy_service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_profile' when calling PolicySecurityServiceInsertionServiceReferencesApi.create_policy_service_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#create_policy_service_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service profile
    # This API can be used to delete service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_profile(service_reference_id, service_profile_id, opts = {})
      delete_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts)
      nil
    end

    # Delete Service profile
    # This API can be used to delete service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.delete_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.delete_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.delete_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#delete_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service profile
    # This API can be used to delete service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_profile_0(service_reference_id, service_profile_id, opts = {})
      delete_policy_service_profile_0_with_http_info(service_reference_id, service_profile_id, opts)
      nil
    end

    # Delete Service profile
    # This API can be used to delete service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_profile_0_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.delete_policy_service_profile_0 ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.delete_policy_service_profile_0"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.delete_policy_service_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#delete_policy_service_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service Reference
    # This API can be used to delete a service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete all children associated with service reference (default to false)
    # @return [nil]
    def delete_service_reference(service_reference_id, opts = {})
      delete_service_reference_with_http_info(service_reference_id, opts)
      nil
    end

    # Delete Service Reference
    # This API can be used to delete a service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete all children associated with service reference
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_reference_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.delete_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.delete_service_reference"
      end
      # resource path
      local_var_path = '/global-infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cascade'] = opts[:'cascade'] if !opts[:'cascade'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#delete_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service Reference
    # This API can be used to delete a service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete all children associated with service reference (default to false)
    # @return [nil]
    def delete_service_reference_0(service_reference_id, opts = {})
      delete_service_reference_0_with_http_info(service_reference_id, opts)
      nil
    end

    # Delete Service Reference
    # This API can be used to delete a service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete all children associated with service reference
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_reference_0_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.delete_service_reference_0 ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.delete_service_reference_0"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cascade'] = opts[:'cascade'] if !opts[:'cascade'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#delete_service_reference_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Groups used in Redirection rules for a given Service Profile.
    # List of Groups used in Redirection rules for a given Service Profile. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [ServiceProfileGroups]
    def get_policy_service_profile_groups(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = get_policy_service_profile_groups_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # Get Groups used in Redirection rules for a given Service Profile.
    # List of Groups used in Redirection rules for a given Service Profile. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(ServiceProfileGroups, Fixnum, Hash)>] ServiceProfileGroups data, response status code and response headers
    def get_policy_service_profile_groups_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.get_policy_service_profile_groups ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.get_policy_service_profile_groups"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.get_policy_service_profile_groups"
      end
      # resource path
      local_var_path = '/global-infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}/group-associations'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceProfileGroups')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#get_policy_service_profile_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Groups used in Redirection rules for a given Service Profile.
    # List of Groups used in Redirection rules for a given Service Profile. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [ServiceProfileGroups]
    def get_policy_service_profile_groups_0(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = get_policy_service_profile_groups_0_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # Get Groups used in Redirection rules for a given Service Profile.
    # List of Groups used in Redirection rules for a given Service Profile. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(ServiceProfileGroups, Fixnum, Hash)>] ServiceProfileGroups data, response status code and response headers
    def get_policy_service_profile_groups_0_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.get_policy_service_profile_groups_0 ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.get_policy_service_profile_groups_0"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.get_policy_service_profile_groups_0"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}/group-associations'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceProfileGroups')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#get_policy_service_profile_groups_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service profiles
    # List all the service profiles available for given service reference 
    # @param service_reference_id Service reference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyServiceProfileListResult]
    def list_policy_service_profiles(service_reference_id, opts = {})
      data, _status_code, _headers = list_policy_service_profiles_with_http_info(service_reference_id, opts)
      data
    end

    # List service profiles
    # List all the service profiles available for given service reference 
    # @param service_reference_id Service reference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyServiceProfileListResult, Fixnum, Hash)>] PolicyServiceProfileListResult data, response status code and response headers
    def list_policy_service_profiles_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.list_policy_service_profiles ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.list_policy_service_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceReferencesApi.list_policy_service_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceReferencesApi.list_policy_service_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#list_policy_service_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service profiles
    # List all the service profiles available for given service reference 
    # @param service_reference_id Service reference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyServiceProfileListResult]
    def list_policy_service_profiles_0(service_reference_id, opts = {})
      data, _status_code, _headers = list_policy_service_profiles_0_with_http_info(service_reference_id, opts)
      data
    end

    # List service profiles
    # List all the service profiles available for given service reference 
    # @param service_reference_id Service reference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyServiceProfileListResult, Fixnum, Hash)>] PolicyServiceProfileListResult data, response status code and response headers
    def list_policy_service_profiles_0_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.list_policy_service_profiles_0 ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.list_policy_service_profiles_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceReferencesApi.list_policy_service_profiles_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceReferencesApi.list_policy_service_profiles_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/service-references/{service-reference-id}/service-profiles'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#list_policy_service_profiles_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service references
    # List all the partner service references available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceReferenceListResult]
    def list_service_references(opts = {})
      data, _status_code, _headers = list_service_references_with_http_info(opts)
      data
    end

    # List service references
    # List all the partner service references available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceReferenceListResult, Fixnum, Hash)>] ServiceReferenceListResult data, response status code and response headers
    def list_service_references_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.list_service_references ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceReferencesApi.list_service_references, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceReferencesApi.list_service_references, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/service-references'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReferenceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#list_service_references\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service references
    # List all the partner service references available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceReferenceListResult]
    def list_service_references_0(opts = {})
      data, _status_code, _headers = list_service_references_0_with_http_info(opts)
      data
    end

    # List service references
    # List all the partner service references available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceReferenceListResult, Fixnum, Hash)>] ServiceReferenceListResult data, response status code and response headers
    def list_service_references_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.list_service_references_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceReferencesApi.list_service_references_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceReferencesApi.list_service_references_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/service-references'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReferenceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#list_service_references_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service profile
    # Create Service profile to specify vendor template attri- butes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_service_profile(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      patch_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts)
      nil
    end

    # Create service profile
    # Create Service profile to specify vendor template attri- butes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.patch_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.patch_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.patch_policy_service_profile"
      end
      # verify the required parameter 'policy_service_profile' is set
      if @api_client.config.client_side_validation && policy_service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_profile' when calling PolicySecurityServiceInsertionServiceReferencesApi.patch_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#patch_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service profile
    # Create Service profile to specify vendor template attri- butes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_service_profile_0(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      patch_policy_service_profile_0_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts)
      nil
    end

    # Create service profile
    # Create Service profile to specify vendor template attri- butes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_service_profile_0_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.patch_policy_service_profile_0 ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.patch_policy_service_profile_0"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.patch_policy_service_profile_0"
      end
      # verify the required parameter 'policy_service_profile' is set
      if @api_client.config.client_side_validation && policy_service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_profile' when calling PolicySecurityServiceInsertionServiceReferencesApi.patch_policy_service_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#patch_policy_service_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_reference(service_reference_id, service_reference, opts = {})
      patch_service_reference_with_http_info(service_reference_id, service_reference, opts)
      nil
    end

    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_reference_with_http_info(service_reference_id, service_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.patch_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.patch_service_reference"
      end
      # verify the required parameter 'service_reference' is set
      if @api_client.config.client_side_validation && service_reference.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference' when calling PolicySecurityServiceInsertionServiceReferencesApi.patch_service_reference"
      end
      # resource path
      local_var_path = '/global-infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_reference)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#patch_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_reference_0(service_reference_id, service_reference, opts = {})
      patch_service_reference_0_with_http_info(service_reference_id, service_reference, opts)
      nil
    end

    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_reference_0_with_http_info(service_reference_id, service_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.patch_service_reference_0 ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.patch_service_reference_0"
      end
      # verify the required parameter 'service_reference' is set
      if @api_client.config.client_side_validation && service_reference.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference' when calling PolicySecurityServiceInsertionServiceReferencesApi.patch_service_reference_0"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_reference)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#patch_service_reference_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service profile
    # This API can be used to read service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceProfile]
    def read_policy_service_profile(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = read_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # Read service profile
    # This API can be used to read service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceProfile, Fixnum, Hash)>] PolicyServiceProfile data, response status code and response headers
    def read_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.read_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.read_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.read_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#read_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service profile
    # This API can be used to read service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceProfile]
    def read_policy_service_profile_0(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = read_policy_service_profile_0_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # Read service profile
    # This API can be used to read service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceProfile, Fixnum, Hash)>] PolicyServiceProfile data, response status code and response headers
    def read_policy_service_profile_0_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.read_policy_service_profile_0 ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.read_policy_service_profile_0"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.read_policy_service_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#read_policy_service_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service reference
    # This API can be used to read service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @return [ServiceReference]
    def read_service_reference(service_reference_id, opts = {})
      data, _status_code, _headers = read_service_reference_with_http_info(service_reference_id, opts)
      data
    end

    # Read service reference
    # This API can be used to read service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceReference, Fixnum, Hash)>] ServiceReference data, response status code and response headers
    def read_service_reference_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.read_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.read_service_reference"
      end
      # resource path
      local_var_path = '/global-infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#read_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service reference
    # This API can be used to read service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @return [ServiceReference]
    def read_service_reference_0(service_reference_id, opts = {})
      data, _status_code, _headers = read_service_reference_0_with_http_info(service_reference_id, opts)
      data
    end

    # Read service reference
    # This API can be used to read service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceReference, Fixnum, Hash)>] ServiceReference data, response status code and response headers
    def read_service_reference_0_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceReferencesApi.read_service_reference_0 ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceReferencesApi.read_service_reference_0"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceReferencesApi#read_service_reference_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
