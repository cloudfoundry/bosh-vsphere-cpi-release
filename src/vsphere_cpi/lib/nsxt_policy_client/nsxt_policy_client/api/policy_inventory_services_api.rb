=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicyInventoryServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Service entry
    # Delete Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_entry(service_id, service_entry_id, opts = {})
      delete_service_entry_with_http_info(service_id, service_entry_id, opts)
      nil
    end

    # Delete Service entry
    # Delete Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_entry_with_http_info(service_id, service_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.delete_service_entry ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.delete_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling PolicyInventoryServicesApi.delete_service_entry"
      end
      # resource path
      local_var_path = '/global-infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#delete_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service entry
    # Delete Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_entry_0(service_id, service_entry_id, opts = {})
      delete_service_entry_0_with_http_info(service_id, service_entry_id, opts)
      nil
    end

    # Delete Service entry
    # Delete Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_entry_0_with_http_info(service_id, service_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.delete_service_entry_0 ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.delete_service_entry_0"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling PolicyInventoryServicesApi.delete_service_entry_0"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#delete_service_entry_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service
    # Delete Service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_for_tenant(service_id, opts = {})
      delete_service_for_tenant_with_http_info(service_id, opts)
      nil
    end

    # Delete Service
    # Delete Service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_for_tenant_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.delete_service_for_tenant ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.delete_service_for_tenant"
      end
      # resource path
      local_var_path = '/global-infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#delete_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service
    # Delete Service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_for_tenant_0(service_id, opts = {})
      delete_service_for_tenant_0_with_http_info(service_id, opts)
      nil
    end

    # Delete Service
    # Delete Service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_for_tenant_0_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.delete_service_for_tenant_0 ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.delete_service_for_tenant_0"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#delete_service_for_tenant_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceEntryListResult]
    def list_service_entries(service_id, opts = {})
      data, _status_code, _headers = list_service_entries_with_http_info(service_id, opts)
      data
    end

    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceEntryListResult, Fixnum, Hash)>] ServiceEntryListResult data, response status code and response headers
    def list_service_entries_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.list_service_entries ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.list_service_entries"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryServicesApi.list_service_entries, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryServicesApi.list_service_entries, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/services/{service-id}/service-entries'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#list_service_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceEntryListResult]
    def list_service_entries_0(service_id, opts = {})
      data, _status_code, _headers = list_service_entries_0_with_http_info(service_id, opts)
      data
    end

    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceEntryListResult, Fixnum, Hash)>] ServiceEntryListResult data, response status code and response headers
    def list_service_entries_0_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.list_service_entries_0 ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.list_service_entries_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryServicesApi.list_service_entries_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryServicesApi.list_service_entries_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/services/{service-id}/service-entries'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#list_service_entries_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Services for infra
    # Paginated list of Services for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default services
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceListResult]
    def list_services_for_tenant(opts = {})
      data, _status_code, _headers = list_services_for_tenant_with_http_info(opts)
      data
    end

    # List Services for infra
    # Paginated list of Services for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default services
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceListResult, Fixnum, Hash)>] ServiceListResult data, response status code and response headers
    def list_services_for_tenant_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.list_services_for_tenant ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryServicesApi.list_services_for_tenant, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryServicesApi.list_services_for_tenant, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/services'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'default_service'] = opts[:'default_service'] if !opts[:'default_service'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#list_services_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Services for infra
    # Paginated list of Services for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default services
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceListResult]
    def list_services_for_tenant_0(opts = {})
      data, _status_code, _headers = list_services_for_tenant_0_with_http_info(opts)
      data
    end

    # List Services for infra
    # Paginated list of Services for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default services
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceListResult, Fixnum, Hash)>] ServiceListResult data, response status code and response headers
    def list_services_for_tenant_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.list_services_for_tenant_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryServicesApi.list_services_for_tenant_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInventoryServicesApi.list_services_for_tenant_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/services'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'default_service'] = opts[:'default_service'] if !opts[:'default_service'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#list_services_for_tenant_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, patch the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_entry(service_id, service_entry_id, service_entry, opts = {})
      patch_service_entry_with_http_info(service_id, service_entry_id, service_entry, opts)
      nil
    end

    # Patch a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, patch the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_entry_with_http_info(service_id, service_entry_id, service_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.patch_service_entry ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.patch_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling PolicyInventoryServicesApi.patch_service_entry"
      end
      # verify the required parameter 'service_entry' is set
      if @api_client.config.client_side_validation && service_entry.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry' when calling PolicyInventoryServicesApi.patch_service_entry"
      end
      # resource path
      local_var_path = '/global-infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#patch_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, patch the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_entry_0(service_id, service_entry_id, service_entry, opts = {})
      patch_service_entry_0_with_http_info(service_id, service_entry_id, service_entry, opts)
      nil
    end

    # Patch a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, patch the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_entry_0_with_http_info(service_id, service_entry_id, service_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.patch_service_entry_0 ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.patch_service_entry_0"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling PolicyInventoryServicesApi.patch_service_entry_0"
      end
      # verify the required parameter 'service_entry' is set
      if @api_client.config.client_side_validation && service_entry.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry' when calling PolicyInventoryServicesApi.patch_service_entry_0"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#patch_service_entry_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, patch the service including the nested service entries. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_for_tenant(service_id, service, opts = {})
      patch_service_for_tenant_with_http_info(service_id, service, opts)
      nil
    end

    # Patch a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, patch the service including the nested service entries. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_for_tenant_with_http_info(service_id, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.patch_service_for_tenant ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.patch_service_for_tenant"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling PolicyInventoryServicesApi.patch_service_for_tenant"
      end
      # resource path
      local_var_path = '/global-infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#patch_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, patch the service including the nested service entries. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_for_tenant_0(service_id, service, opts = {})
      patch_service_for_tenant_0_with_http_info(service_id, service, opts)
      nil
    end

    # Patch a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, patch the service including the nested service entries. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_for_tenant_0_with_http_info(service_id, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.patch_service_for_tenant_0 ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.patch_service_for_tenant_0"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling PolicyInventoryServicesApi.patch_service_for_tenant_0"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#patch_service_for_tenant_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Service entry
    # Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [ServiceEntry]
    def read_service_entry(service_id, service_entry_id, opts = {})
      data, _status_code, _headers = read_service_entry_with_http_info(service_id, service_entry_id, opts)
      data
    end

    # Service entry
    # Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceEntry, Fixnum, Hash)>] ServiceEntry data, response status code and response headers
    def read_service_entry_with_http_info(service_id, service_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.read_service_entry ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.read_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling PolicyInventoryServicesApi.read_service_entry"
      end
      # resource path
      local_var_path = '/global-infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#read_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Service entry
    # Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [ServiceEntry]
    def read_service_entry_0(service_id, service_entry_id, opts = {})
      data, _status_code, _headers = read_service_entry_0_with_http_info(service_id, service_entry_id, opts)
      data
    end

    # Service entry
    # Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceEntry, Fixnum, Hash)>] ServiceEntry data, response status code and response headers
    def read_service_entry_0_with_http_info(service_id, service_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.read_service_entry_0 ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.read_service_entry_0"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling PolicyInventoryServicesApi.read_service_entry_0"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#read_service_entry_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a service
    # Read a service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def read_service_for_tenant(service_id, opts = {})
      data, _status_code, _headers = read_service_for_tenant_with_http_info(service_id, opts)
      data
    end

    # Read a service
    # Read a service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def read_service_for_tenant_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.read_service_for_tenant ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.read_service_for_tenant"
      end
      # resource path
      local_var_path = '/global-infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#read_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a service
    # Read a service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def read_service_for_tenant_0(service_id, opts = {})
      data, _status_code, _headers = read_service_for_tenant_0_with_http_info(service_id, opts)
      data
    end

    # Read a service
    # Read a service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def read_service_for_tenant_0_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.read_service_for_tenant_0 ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.read_service_for_tenant_0"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#read_service_for_tenant_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, update the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [ServiceEntry]
    def update_service_entry(service_id, service_entry_id, service_entry, opts = {})
      data, _status_code, _headers = update_service_entry_with_http_info(service_id, service_entry_id, service_entry, opts)
      data
    end

    # Create or update a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, update the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceEntry, Fixnum, Hash)>] ServiceEntry data, response status code and response headers
    def update_service_entry_with_http_info(service_id, service_entry_id, service_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.update_service_entry ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.update_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling PolicyInventoryServicesApi.update_service_entry"
      end
      # verify the required parameter 'service_entry' is set
      if @api_client.config.client_side_validation && service_entry.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry' when calling PolicyInventoryServicesApi.update_service_entry"
      end
      # resource path
      local_var_path = '/global-infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#update_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, update the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [ServiceEntry]
    def update_service_entry_0(service_id, service_entry_id, service_entry, opts = {})
      data, _status_code, _headers = update_service_entry_0_with_http_info(service_id, service_entry_id, service_entry, opts)
      data
    end

    # Create or update a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, update the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceEntry, Fixnum, Hash)>] ServiceEntry data, response status code and response headers
    def update_service_entry_0_with_http_info(service_id, service_entry_id, service_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.update_service_entry_0 ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.update_service_entry_0"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling PolicyInventoryServicesApi.update_service_entry_0"
      end
      # verify the required parameter 'service_entry' is set
      if @api_client.config.client_side_validation && service_entry.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry' when calling PolicyInventoryServicesApi.update_service_entry_0"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#update_service_entry_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, update the service including the nested service entries. This is a full replace. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def update_service_for_tenant(service_id, service, opts = {})
      data, _status_code, _headers = update_service_for_tenant_with_http_info(service_id, service, opts)
      data
    end

    # Create or update a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, update the service including the nested service entries. This is a full replace. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def update_service_for_tenant_with_http_info(service_id, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.update_service_for_tenant ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.update_service_for_tenant"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling PolicyInventoryServicesApi.update_service_for_tenant"
      end
      # resource path
      local_var_path = '/global-infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#update_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, update the service including the nested service entries. This is a full replace. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def update_service_for_tenant_0(service_id, service, opts = {})
      data, _status_code, _headers = update_service_for_tenant_0_with_http_info(service_id, service, opts)
      data
    end

    # Create or update a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, update the service including the nested service entries. This is a full replace. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def update_service_for_tenant_0_with_http_info(service_id, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInventoryServicesApi.update_service_for_tenant_0 ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyInventoryServicesApi.update_service_for_tenant_0"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling PolicyInventoryServicesApi.update_service_for_tenant_0"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInventoryServicesApi#update_service_for_tenant_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
