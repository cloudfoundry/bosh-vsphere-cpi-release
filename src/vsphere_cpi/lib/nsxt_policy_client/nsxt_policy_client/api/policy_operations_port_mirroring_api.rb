=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicyOperationsPortMirroringApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or Replace Port Mirroring Instance.
    # Create or Replace port mirroring instance. Packets will be mirrored from source group to destination group. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [PortMirroringInstance]
    def create_or_replace_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      data, _status_code, _headers = create_or_replace_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts)
      data
    end

    # Create or Replace Port Mirroring Instance.
    # Create or Replace port mirroring instance. Packets will be mirrored from source group to destination group. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMirroringInstance, Fixnum, Hash)>] PortMirroringInstance data, response status code and response headers
    def create_or_replace_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance' is set
      if @api_client.config.client_side_validation && port_mirroring_instance.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#create_or_replace_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace Port Mirroring Instance.
    # Create or Replace port mirroring instance. Packets will be mirrored from source group to destination group. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [PortMirroringInstance]
    def create_or_replace_port_mirroring_instance_0(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      data, _status_code, _headers = create_or_replace_port_mirroring_instance_0_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts)
      data
    end

    # Create or Replace Port Mirroring Instance.
    # Create or Replace port mirroring instance. Packets will be mirrored from source group to destination group. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMirroringInstance, Fixnum, Hash)>] PortMirroringInstance data, response status code and response headers
    def create_or_replace_port_mirroring_instance_0_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_instance_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_instance_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_instance_0"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_instance_0"
      end
      # verify the required parameter 'port_mirroring_instance' is set
      if @api_client.config.client_side_validation && port_mirroring_instance.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_instance_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#create_or_replace_port_mirroring_instance_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace Port Mirroring Profile.
    # Create or Replace port mirroring profile. Packets will be mirrored from source group, segment, port to destination group. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profiles Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PortMirroringProfile]
    def create_or_replace_port_mirroring_profile(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      data, _status_code, _headers = create_or_replace_port_mirroring_profile_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts)
      data
    end

    # Create or Replace Port Mirroring Profile.
    # Create or Replace port mirroring profile. Packets will be mirrored from source group, segment, port to destination group. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profiles Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PortMirroringProfile, Fixnum, Hash)>] PortMirroringProfile data, response status code and response headers
    def create_or_replace_port_mirroring_profile_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_profile ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_profile"
      end
      # verify the required parameter 'port_mirroring_profile' is set
      if @api_client.config.client_side_validation && port_mirroring_profile.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_profile"
      end
      # resource path
      local_var_path = '/infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#create_or_replace_port_mirroring_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace Port Mirroring Profile.
    # Create or Replace port mirroring profile. Packets will be mirrored from source group, segment, port to destination group. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profiles Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PortMirroringProfile]
    def create_or_replace_port_mirroring_profile_0(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      data, _status_code, _headers = create_or_replace_port_mirroring_profile_0_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts)
      data
    end

    # Create or Replace Port Mirroring Profile.
    # Create or Replace port mirroring profile. Packets will be mirrored from source group, segment, port to destination group. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profiles Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PortMirroringProfile, Fixnum, Hash)>] PortMirroringProfile data, response status code and response headers
    def create_or_replace_port_mirroring_profile_0_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_profile_0 ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_profile_0"
      end
      # verify the required parameter 'port_mirroring_profile' is set
      if @api_client.config.client_side_validation && port_mirroring_profile.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile' when calling PolicyOperationsPortMirroringApi.create_or_replace_port_mirroring_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#create_or_replace_port_mirroring_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port Mirroring Instance
    # API will delete port mirroring instance. Mirroring from source to destination ports will be stopped. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, opts = {})
      delete_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts)
      nil
    end

    # Delete Port Mirroring Instance
    # API will delete port mirroring instance. Mirroring from source to destination ports will be stopped. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.delete_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsPortMirroringApi.delete_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsPortMirroringApi.delete_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsPortMirroringApi.delete_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#delete_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port Mirroring Instance
    # API will delete port mirroring instance. Mirroring from source to destination ports will be stopped. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_port_mirroring_instance_0(domain_id, group_id, port_mirroring_instance_id, opts = {})
      delete_port_mirroring_instance_0_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts)
      nil
    end

    # Delete Port Mirroring Instance
    # API will delete port mirroring instance. Mirroring from source to destination ports will be stopped. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_mirroring_instance_0_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.delete_port_mirroring_instance_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsPortMirroringApi.delete_port_mirroring_instance_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsPortMirroringApi.delete_port_mirroring_instance_0"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsPortMirroringApi.delete_port_mirroring_instance_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#delete_port_mirroring_instance_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port Mirroring Profile
    # API will delete port mirroring profile. Mirroring from source to destination ports will be stopped. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_port_mirroring_profile(port_mirroring_profile_id, opts = {})
      delete_port_mirroring_profile_with_http_info(port_mirroring_profile_id, opts)
      nil
    end

    # Delete Port Mirroring Profile
    # API will delete port mirroring profile. Mirroring from source to destination ports will be stopped. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_mirroring_profile_with_http_info(port_mirroring_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.delete_port_mirroring_profile ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling PolicyOperationsPortMirroringApi.delete_port_mirroring_profile"
      end
      # resource path
      local_var_path = '/infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#delete_port_mirroring_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port Mirroring Profile
    # API will delete port mirroring profile. Mirroring from source to destination ports will be stopped. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_port_mirroring_profile_0(port_mirroring_profile_id, opts = {})
      delete_port_mirroring_profile_0_with_http_info(port_mirroring_profile_id, opts)
      nil
    end

    # Delete Port Mirroring Profile
    # API will delete port mirroring profile. Mirroring from source to destination ports will be stopped. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_mirroring_profile_0_with_http_info(port_mirroring_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.delete_port_mirroring_profile_0 ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling PolicyOperationsPortMirroringApi.delete_port_mirroring_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#delete_port_mirroring_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port Mirroring Instances
    # API will list all port mirroring instances active on current group. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortMirroringInstanceListResult]
    def list_port_mirroring_instances(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_port_mirroring_instances_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Port Mirroring Instances
    # API will list all port mirroring instances active on current group. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortMirroringInstanceListResult, Fixnum, Hash)>] PortMirroringInstanceListResult data, response status code and response headers
    def list_port_mirroring_instances_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.list_port_mirroring_instances ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsPortMirroringApi.list_port_mirroring_instances"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsPortMirroringApi.list_port_mirroring_instances"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsPortMirroringApi.list_port_mirroring_instances, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsPortMirroringApi.list_port_mirroring_instances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#list_port_mirroring_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port Mirroring Instances
    # API will list all port mirroring instances active on current group. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortMirroringInstanceListResult]
    def list_port_mirroring_instances_0(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_port_mirroring_instances_0_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Port Mirroring Instances
    # API will list all port mirroring instances active on current group. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortMirroringInstanceListResult, Fixnum, Hash)>] PortMirroringInstanceListResult data, response status code and response headers
    def list_port_mirroring_instances_0_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.list_port_mirroring_instances_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsPortMirroringApi.list_port_mirroring_instances_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsPortMirroringApi.list_port_mirroring_instances_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsPortMirroringApi.list_port_mirroring_instances_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsPortMirroringApi.list_port_mirroring_instances_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#list_port_mirroring_instances_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port Mirroring Profiles
    # API will list all port mirroring profiles group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortMirroringProfileListResult]
    def list_port_mirroring_profiles(opts = {})
      data, _status_code, _headers = list_port_mirroring_profiles_with_http_info(opts)
      data
    end

    # List Port Mirroring Profiles
    # API will list all port mirroring profiles group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortMirroringProfileListResult, Fixnum, Hash)>] PortMirroringProfileListResult data, response status code and response headers
    def list_port_mirroring_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.list_port_mirroring_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsPortMirroringApi.list_port_mirroring_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsPortMirroringApi.list_port_mirroring_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/port-mirroring-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#list_port_mirroring_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port Mirroring Profiles
    # API will list all port mirroring profiles group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortMirroringProfileListResult]
    def list_port_mirroring_profiles_0(opts = {})
      data, _status_code, _headers = list_port_mirroring_profiles_0_with_http_info(opts)
      data
    end

    # List Port Mirroring Profiles
    # API will list all port mirroring profiles group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortMirroringProfileListResult, Fixnum, Hash)>] PortMirroringProfileListResult data, response status code and response headers
    def list_port_mirroring_profiles_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.list_port_mirroring_profiles_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsPortMirroringApi.list_port_mirroring_profiles_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsPortMirroringApi.list_port_mirroring_profiles_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/port-mirroring-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#list_port_mirroring_profiles_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Port Mirroring Instance.
    # Create a new Port Mirroring Instance if the Port Mirroring Instance with given id does not already exist. If the Port Mirroring Instance with the given id already exists, patch with the existing Port Mirroring Instance. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      patch_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts)
      nil
    end

    # Patch Port Mirroring Instance.
    # Create a new Port Mirroring Instance if the Port Mirroring Instance with given id does not already exist. If the Port Mirroring Instance with the given id already exists, patch with the existing Port Mirroring Instance. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.patch_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance' is set
      if @api_client.config.client_side_validation && port_mirroring_instance.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#patch_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Port Mirroring Instance.
    # Create a new Port Mirroring Instance if the Port Mirroring Instance with given id does not already exist. If the Port Mirroring Instance with the given id already exists, patch with the existing Port Mirroring Instance. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_port_mirroring_instance_0(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      patch_port_mirroring_instance_0_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts)
      nil
    end

    # Patch Port Mirroring Instance.
    # Create a new Port Mirroring Instance if the Port Mirroring Instance with given id does not already exist. If the Port Mirroring Instance with the given id already exists, patch with the existing Port Mirroring Instance. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_mirroring_instance_0_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.patch_port_mirroring_instance_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_instance_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_instance_0"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_instance_0"
      end
      # verify the required parameter 'port_mirroring_instance' is set
      if @api_client.config.client_side_validation && port_mirroring_instance.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_instance_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#patch_port_mirroring_instance_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Port Mirroring Profile.
    # Create a new Port Mirroring Profile if the Port Mirroring Profile with given id does not already exist. If the Port Mirroring Profile with the given id already exists, patch with the existing Port Mirroring Profile. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_port_mirroring_profile(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      patch_port_mirroring_profile_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts)
      nil
    end

    # Patch Port Mirroring Profile.
    # Create a new Port Mirroring Profile if the Port Mirroring Profile with given id does not already exist. If the Port Mirroring Profile with the given id already exists, patch with the existing Port Mirroring Profile. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_mirroring_profile_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.patch_port_mirroring_profile ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_profile"
      end
      # verify the required parameter 'port_mirroring_profile' is set
      if @api_client.config.client_side_validation && port_mirroring_profile.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_profile"
      end
      # resource path
      local_var_path = '/infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#patch_port_mirroring_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Port Mirroring Profile.
    # Create a new Port Mirroring Profile if the Port Mirroring Profile with given id does not already exist. If the Port Mirroring Profile with the given id already exists, patch with the existing Port Mirroring Profile. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_port_mirroring_profile_0(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      patch_port_mirroring_profile_0_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts)
      nil
    end

    # Patch Port Mirroring Profile.
    # Create a new Port Mirroring Profile if the Port Mirroring Profile with given id does not already exist. If the Port Mirroring Profile with the given id already exists, patch with the existing Port Mirroring Profile. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_mirroring_profile_0_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.patch_port_mirroring_profile_0 ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_profile_0"
      end
      # verify the required parameter 'port_mirroring_profile' is set
      if @api_client.config.client_side_validation && port_mirroring_profile.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile' when calling PolicyOperationsPortMirroringApi.patch_port_mirroring_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#patch_port_mirroring_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Details of Port Mirroring Instance 
    # API will return details of port mirroring instance. If instance does not exist, it will return 404. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [PortMirroringInstance]
    def read_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, opts = {})
      data, _status_code, _headers = read_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts)
      data
    end

    # Details of Port Mirroring Instance 
    # API will return details of port mirroring instance. If instance does not exist, it will return 404. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMirroringInstance, Fixnum, Hash)>] PortMirroringInstance data, response status code and response headers
    def read_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.read_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsPortMirroringApi.read_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsPortMirroringApi.read_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsPortMirroringApi.read_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#read_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Details of Port Mirroring Instance 
    # API will return details of port mirroring instance. If instance does not exist, it will return 404. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [PortMirroringInstance]
    def read_port_mirroring_instance_0(domain_id, group_id, port_mirroring_instance_id, opts = {})
      data, _status_code, _headers = read_port_mirroring_instance_0_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts)
      data
    end

    # Details of Port Mirroring Instance 
    # API will return details of port mirroring instance. If instance does not exist, it will return 404. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMirroringInstance, Fixnum, Hash)>] PortMirroringInstance data, response status code and response headers
    def read_port_mirroring_instance_0_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.read_port_mirroring_instance_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsPortMirroringApi.read_port_mirroring_instance_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsPortMirroringApi.read_port_mirroring_instance_0"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsPortMirroringApi.read_port_mirroring_instance_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#read_port_mirroring_instance_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Details of Port Mirroring Profile 
    # API will return details of port mirroring profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @return [PortMirroringProfile]
    def read_port_mirroring_profile(port_mirroring_profile_id, opts = {})
      data, _status_code, _headers = read_port_mirroring_profile_with_http_info(port_mirroring_profile_id, opts)
      data
    end

    # Details of Port Mirroring Profile 
    # API will return details of port mirroring profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMirroringProfile, Fixnum, Hash)>] PortMirroringProfile data, response status code and response headers
    def read_port_mirroring_profile_with_http_info(port_mirroring_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.read_port_mirroring_profile ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling PolicyOperationsPortMirroringApi.read_port_mirroring_profile"
      end
      # resource path
      local_var_path = '/infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#read_port_mirroring_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Details of Port Mirroring Profile 
    # API will return details of port mirroring profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @return [PortMirroringProfile]
    def read_port_mirroring_profile_0(port_mirroring_profile_id, opts = {})
      data, _status_code, _headers = read_port_mirroring_profile_0_with_http_info(port_mirroring_profile_id, opts)
      data
    end

    # Details of Port Mirroring Profile 
    # API will return details of port mirroring profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMirroringProfile, Fixnum, Hash)>] PortMirroringProfile data, response status code and response headers
    def read_port_mirroring_profile_0_with_http_info(port_mirroring_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsPortMirroringApi.read_port_mirroring_profile_0 ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling PolicyOperationsPortMirroringApi.read_port_mirroring_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsPortMirroringApi#read_port_mirroring_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
