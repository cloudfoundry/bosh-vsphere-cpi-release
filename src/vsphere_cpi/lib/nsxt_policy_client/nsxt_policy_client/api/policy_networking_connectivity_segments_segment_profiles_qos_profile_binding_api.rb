=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Port QoS Profile Binding Profile
    # API will delete Port QoS Profile Binding Profile.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_port_qo_s_binding(segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      delete_infra_port_qo_s_binding_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, opts)
      nil
    end

    # Delete Port QoS Profile Binding Profile
    # API will delete Port QoS Profile Binding Profile.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_port_qo_s_binding_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_port_qo_s_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_port_qo_s_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_port_qo_s_binding"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_port_qo_s_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#delete_infra_port_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port QoS Profile Binding Profile
    # API will delete Port QoS Profile Binding Profile.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_port_qo_s_binding_0(segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      delete_infra_port_qo_s_binding_0_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, opts)
      nil
    end

    # Delete Port QoS Profile Binding Profile
    # API will delete Port QoS Profile Binding Profile.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_port_qo_s_binding_0_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_port_qo_s_binding_0 ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_port_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#delete_infra_port_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Segment QoS Profile Binding Profile
    # API will delete Segment QoS Profile Binding Profile.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment_qo_s_binding(segment_id, segment_qos_profile_binding_map_id, opts = {})
      delete_infra_segment_qo_s_binding_with_http_info(segment_id, segment_qos_profile_binding_map_id, opts)
      nil
    end

    # Delete Segment QoS Profile Binding Profile
    # API will delete Segment QoS Profile Binding Profile.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_qo_s_binding_with_http_info(segment_id, segment_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_segment_qo_s_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_segment_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#delete_infra_segment_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Segment QoS Profile Binding Profile
    # API will delete Segment QoS Profile Binding Profile.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment_qo_s_binding_0(segment_id, segment_qos_profile_binding_map_id, opts = {})
      delete_infra_segment_qo_s_binding_0_with_http_info(segment_id, segment_qos_profile_binding_map_id, opts)
      nil
    end

    # Delete Segment QoS Profile Binding Profile
    # API will delete Segment QoS Profile Binding Profile.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_qo_s_binding_0_with_http_info(segment_id, segment_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_segment_qo_s_binding_0 ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_infra_segment_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#delete_infra_segment_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port QoS Profile Binding Profile
    # API will delete Port QoS Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_port_qo_s_binding(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      delete_port_qo_s_binding_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts)
      nil
    end

    # Delete Port QoS Profile Binding Profile
    # API will delete Port QoS Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_qo_s_binding_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_port_qo_s_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_port_qo_s_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_port_qo_s_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_port_qo_s_binding"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_port_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#delete_port_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port QoS Profile Binding Profile
    # API will delete Port QoS Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_port_qo_s_binding_0(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      delete_port_qo_s_binding_0_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts)
      nil
    end

    # Delete Port QoS Profile Binding Profile
    # API will delete Port QoS Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_qo_s_binding_0_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_port_qo_s_binding_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_port_qo_s_binding_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_port_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#delete_port_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Segment QoS Profile Binding Profile
    # API will delete Segment QoS Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_segment_qo_s_binding(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts = {})
      delete_segment_qo_s_binding_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts)
      nil
    end

    # Delete Segment QoS Profile Binding Profile
    # API will delete Segment QoS Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_segment_qo_s_binding_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_segment_qo_s_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_segment_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#delete_segment_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Segment QoS Profile Binding Profile
    # API will delete Segment QoS Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_segment_qo_s_binding_0(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts = {})
      delete_segment_qo_s_binding_0_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts)
      nil
    end

    # Delete Segment QoS Profile Binding Profile
    # API will delete Segment QoS Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_segment_qo_s_binding_0_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_segment_qo_s_binding_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.delete_segment_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#delete_segment_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Port QoS Profile Binding Map
    # API will get Port QoS Profile Binding Map. 
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PortQoSProfileBindingMap]
    def get_infra_port_qo_s_binding(segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_port_qo_s_binding_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, opts)
      data
    end

    # Get Port QoS Profile Binding Map
    # API will get Port QoS Profile Binding Map. 
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortQoSProfileBindingMap, Fixnum, Hash)>] PortQoSProfileBindingMap data, response status code and response headers
    def get_infra_port_qo_s_binding_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_port_qo_s_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_port_qo_s_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_port_qo_s_binding"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_port_qo_s_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#get_infra_port_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Port QoS Profile Binding Map
    # API will get Port QoS Profile Binding Map. 
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PortQoSProfileBindingMap]
    def get_infra_port_qo_s_binding_0(segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_port_qo_s_binding_0_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, opts)
      data
    end

    # Get Port QoS Profile Binding Map
    # API will get Port QoS Profile Binding Map. 
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortQoSProfileBindingMap, Fixnum, Hash)>] PortQoSProfileBindingMap data, response status code and response headers
    def get_infra_port_qo_s_binding_0_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_port_qo_s_binding_0 ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_port_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#get_infra_port_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Segment QoS Profile Binding Map
    # API will get Segment QoS Profile Binding Map. 
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [SegmentQoSProfileBindingMap]
    def get_infra_segment_qo_s_binding(segment_id, segment_qos_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_segment_qo_s_binding_with_http_info(segment_id, segment_qos_profile_binding_map_id, opts)
      data
    end

    # Get Segment QoS Profile Binding Map
    # API will get Segment QoS Profile Binding Map. 
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentQoSProfileBindingMap, Fixnum, Hash)>] SegmentQoSProfileBindingMap data, response status code and response headers
    def get_infra_segment_qo_s_binding_with_http_info(segment_id, segment_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_segment_qo_s_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_segment_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#get_infra_segment_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Segment QoS Profile Binding Map
    # API will get Segment QoS Profile Binding Map. 
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [SegmentQoSProfileBindingMap]
    def get_infra_segment_qo_s_binding_0(segment_id, segment_qos_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_segment_qo_s_binding_0_with_http_info(segment_id, segment_qos_profile_binding_map_id, opts)
      data
    end

    # Get Segment QoS Profile Binding Map
    # API will get Segment QoS Profile Binding Map. 
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentQoSProfileBindingMap, Fixnum, Hash)>] SegmentQoSProfileBindingMap data, response status code and response headers
    def get_infra_segment_qo_s_binding_0_with_http_info(segment_id, segment_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_segment_qo_s_binding_0 ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_infra_segment_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#get_infra_segment_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Port QoS Profile Binding Map
    # API will get Port QoS Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PortQoSProfileBindingMap]
    def get_port_qo_s_binding(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_port_qo_s_binding_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts)
      data
    end

    # Get Port QoS Profile Binding Map
    # API will get Port QoS Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortQoSProfileBindingMap, Fixnum, Hash)>] PortQoSProfileBindingMap data, response status code and response headers
    def get_port_qo_s_binding_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_port_qo_s_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_port_qo_s_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_port_qo_s_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_port_qo_s_binding"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_port_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#get_port_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Port QoS Profile Binding Map
    # API will get Port QoS Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PortQoSProfileBindingMap]
    def get_port_qo_s_binding_0(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_port_qo_s_binding_0_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts)
      data
    end

    # Get Port QoS Profile Binding Map
    # API will get Port QoS Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortQoSProfileBindingMap, Fixnum, Hash)>] PortQoSProfileBindingMap data, response status code and response headers
    def get_port_qo_s_binding_0_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_port_qo_s_binding_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_port_qo_s_binding_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_port_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#get_port_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Segment QoS Profile Binding Map
    # API will get Segment QoS Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [SegmentQoSProfileBindingMap]
    def get_segment_qo_s_binding(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_segment_qo_s_binding_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts)
      data
    end

    # Get Segment QoS Profile Binding Map
    # API will get Segment QoS Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentQoSProfileBindingMap, Fixnum, Hash)>] SegmentQoSProfileBindingMap data, response status code and response headers
    def get_segment_qo_s_binding_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_segment_qo_s_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_segment_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#get_segment_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Segment QoS Profile Binding Map
    # API will get Segment QoS Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [SegmentQoSProfileBindingMap]
    def get_segment_qo_s_binding_0(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_segment_qo_s_binding_0_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts)
      data
    end

    # Get Segment QoS Profile Binding Map
    # API will get Segment QoS Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentQoSProfileBindingMap, Fixnum, Hash)>] SegmentQoSProfileBindingMap data, response status code and response headers
    def get_segment_qo_s_binding_0_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_segment_qo_s_binding_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.get_segment_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#get_segment_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port QoS Profile Binding Maps
    # API will list all Port QoS Profile Binding Maps in current port id. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortQoSProfileBindingMapListResult]
    def list_infra_port_qo_s_bindings(segment_id, port_id, opts = {})
      data, _status_code, _headers = list_infra_port_qo_s_bindings_with_http_info(segment_id, port_id, opts)
      data
    end

    # List Port QoS Profile Binding Maps
    # API will list all Port QoS Profile Binding Maps in current port id. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortQoSProfileBindingMapListResult, Fixnum, Hash)>] PortQoSProfileBindingMapListResult data, response status code and response headers
    def list_infra_port_qo_s_bindings_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_port_qo_s_bindings ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_port_qo_s_bindings"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_port_qo_s_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_port_qo_s_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_port_qo_s_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#list_infra_port_qo_s_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port QoS Profile Binding Maps
    # API will list all Port QoS Profile Binding Maps in current port id. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortQoSProfileBindingMapListResult]
    def list_infra_port_qo_s_bindings_0(segment_id, port_id, opts = {})
      data, _status_code, _headers = list_infra_port_qo_s_bindings_0_with_http_info(segment_id, port_id, opts)
      data
    end

    # List Port QoS Profile Binding Maps
    # API will list all Port QoS Profile Binding Maps in current port id. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortQoSProfileBindingMapListResult, Fixnum, Hash)>] PortQoSProfileBindingMapListResult data, response status code and response headers
    def list_infra_port_qo_s_bindings_0_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_port_qo_s_bindings_0 ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_port_qo_s_bindings_0"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_port_qo_s_bindings_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_port_qo_s_bindings_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_port_qo_s_bindings_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#list_infra_port_qo_s_bindings_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Segment QoS Profile Binding Maps
    # API will list all Segment QoS Profile Binding Maps in current segment id. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentQoSProfileBindingMapListResult]
    def list_infra_segment_qo_s_bindings(segment_id, opts = {})
      data, _status_code, _headers = list_infra_segment_qo_s_bindings_with_http_info(segment_id, opts)
      data
    end

    # List Segment QoS Profile Binding Maps
    # API will list all Segment QoS Profile Binding Maps in current segment id. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentQoSProfileBindingMapListResult, Fixnum, Hash)>] SegmentQoSProfileBindingMapListResult data, response status code and response headers
    def list_infra_segment_qo_s_bindings_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_segment_qo_s_bindings ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_segment_qo_s_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_segment_qo_s_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_segment_qo_s_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/segment-qos-profile-binding-maps'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#list_infra_segment_qo_s_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Segment QoS Profile Binding Maps
    # API will list all Segment QoS Profile Binding Maps in current segment id. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentQoSProfileBindingMapListResult]
    def list_infra_segment_qo_s_bindings_0(segment_id, opts = {})
      data, _status_code, _headers = list_infra_segment_qo_s_bindings_0_with_http_info(segment_id, opts)
      data
    end

    # List Segment QoS Profile Binding Maps
    # API will list all Segment QoS Profile Binding Maps in current segment id. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentQoSProfileBindingMapListResult, Fixnum, Hash)>] SegmentQoSProfileBindingMapListResult data, response status code and response headers
    def list_infra_segment_qo_s_bindings_0_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_segment_qo_s_bindings_0 ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_segment_qo_s_bindings_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_segment_qo_s_bindings_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_infra_segment_qo_s_bindings_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-qos-profile-binding-maps'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#list_infra_segment_qo_s_bindings_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port QoS Profile Binding Maps
    # API will list all Port QoS Profile Binding Maps in current port id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortQoSProfileBindingMapListResult]
    def list_port_qo_s_bindings(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = list_port_qo_s_bindings_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # List Port QoS Profile Binding Maps
    # API will list all Port QoS Profile Binding Maps in current port id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortQoSProfileBindingMapListResult, Fixnum, Hash)>] PortQoSProfileBindingMapListResult data, response status code and response headers
    def list_port_qo_s_bindings_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#list_port_qo_s_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port QoS Profile Binding Maps
    # API will list all Port QoS Profile Binding Maps in current port id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortQoSProfileBindingMapListResult]
    def list_port_qo_s_bindings_0(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = list_port_qo_s_bindings_0_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # List Port QoS Profile Binding Maps
    # API will list all Port QoS Profile Binding Maps in current port id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortQoSProfileBindingMapListResult, Fixnum, Hash)>] PortQoSProfileBindingMapListResult data, response status code and response headers
    def list_port_qo_s_bindings_0_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings_0"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_port_qo_s_bindings_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#list_port_qo_s_bindings_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Segment QoS Profile Binding Maps
    # API will list all Segment QoS Profile Binding Maps in current segment id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentQoSProfileBindingMapListResult]
    def list_segment_qo_s_bindings(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = list_segment_qo_s_bindings_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List Segment QoS Profile Binding Maps
    # API will list all Segment QoS Profile Binding Maps in current segment id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentQoSProfileBindingMapListResult, Fixnum, Hash)>] SegmentQoSProfileBindingMapListResult data, response status code and response headers
    def list_segment_qo_s_bindings_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_segment_qo_s_bindings ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_segment_qo_s_bindings"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_segment_qo_s_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_segment_qo_s_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_segment_qo_s_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-qos-profile-binding-maps'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#list_segment_qo_s_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Segment QoS Profile Binding Maps
    # API will list all Segment QoS Profile Binding Maps in current segment id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentQoSProfileBindingMapListResult]
    def list_segment_qo_s_bindings_0(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = list_segment_qo_s_bindings_0_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List Segment QoS Profile Binding Maps
    # API will list all Segment QoS Profile Binding Maps in current segment id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentQoSProfileBindingMapListResult, Fixnum, Hash)>] SegmentQoSProfileBindingMapListResult data, response status code and response headers
    def list_segment_qo_s_bindings_0_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_segment_qo_s_bindings_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_segment_qo_s_bindings_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_segment_qo_s_bindings_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_segment_qo_s_bindings_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.list_segment_qo_s_bindings_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-qos-profile-binding-maps'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#list_segment_qo_s_bindings_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Port QoS Profile Binding Map
    # API will create Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_port_qo_s_binding(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      patch_infra_port_qo_s_binding_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts)
      nil
    end

    # Create Port QoS Profile Binding Map
    # API will create Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_port_qo_s_binding_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_port_qo_s_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_port_qo_s_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_port_qo_s_binding"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_port_qo_s_binding"
      end
      # verify the required parameter 'port_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_port_qo_s_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#patch_infra_port_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Port QoS Profile Binding Map
    # API will create Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_port_qo_s_binding_0(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      patch_infra_port_qo_s_binding_0_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts)
      nil
    end

    # Create Port QoS Profile Binding Map
    # API will create Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_port_qo_s_binding_0_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_port_qo_s_binding_0 ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_port_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#patch_infra_port_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Segment QoS Profile Binding Map
    # API will create segment QoS profile binding map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment_qo_s_binding(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      patch_infra_segment_qo_s_binding_with_http_info(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts)
      nil
    end

    # Create Segment QoS Profile Binding Map
    # API will create segment QoS profile binding map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_qo_s_binding_with_http_info(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_segment_qo_s_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_segment_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#patch_infra_segment_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Segment QoS Profile Binding Map
    # API will create segment QoS profile binding map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment_qo_s_binding_0(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      patch_infra_segment_qo_s_binding_0_with_http_info(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts)
      nil
    end

    # Create Segment QoS Profile Binding Map
    # API will create segment QoS profile binding map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_qo_s_binding_0_with_http_info(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_segment_qo_s_binding_0 ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_infra_segment_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#patch_infra_segment_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Port QoS Profile Binding Map
    # API will create Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_port_qo_s_binding(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      patch_port_qo_s_binding_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts)
      nil
    end

    # Create Port QoS Profile Binding Map
    # API will create Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_qo_s_binding_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding"
      end
      # verify the required parameter 'port_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#patch_port_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Port QoS Profile Binding Map
    # API will create Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_port_qo_s_binding_0(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      patch_port_qo_s_binding_0_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts)
      nil
    end

    # Create Port QoS Profile Binding Map
    # API will create Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_qo_s_binding_0_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_port_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#patch_port_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Segment QoS Profile Binding Map
    # API will create segment QoS profile binding map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_segment_qo_s_binding(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      patch_segment_qo_s_binding_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts)
      nil
    end

    # Create Segment QoS Profile Binding Map
    # API will create segment QoS profile binding map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_segment_qo_s_binding_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_segment_qo_s_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_segment_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#patch_segment_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Segment QoS Profile Binding Map
    # API will create segment QoS profile binding map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_segment_qo_s_binding_0(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      patch_segment_qo_s_binding_0_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts)
      nil
    end

    # Create Segment QoS Profile Binding Map
    # API will create segment QoS profile binding map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_segment_qo_s_binding_0_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_segment_qo_s_binding_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.patch_segment_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#patch_segment_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Port QoS Profile Binding Map
    # API will update Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PortQoSProfileBindingMap]
    def update_infra_port_qo_s_binding(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      data, _status_code, _headers = update_infra_port_qo_s_binding_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts)
      data
    end

    # Update Port QoS Profile Binding Map
    # API will update Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortQoSProfileBindingMap, Fixnum, Hash)>] PortQoSProfileBindingMap data, response status code and response headers
    def update_infra_port_qo_s_binding_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_port_qo_s_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_port_qo_s_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_port_qo_s_binding"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_port_qo_s_binding"
      end
      # verify the required parameter 'port_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_port_qo_s_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#update_infra_port_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Port QoS Profile Binding Map
    # API will update Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PortQoSProfileBindingMap]
    def update_infra_port_qo_s_binding_0(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      data, _status_code, _headers = update_infra_port_qo_s_binding_0_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts)
      data
    end

    # Update Port QoS Profile Binding Map
    # API will update Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortQoSProfileBindingMap, Fixnum, Hash)>] PortQoSProfileBindingMap data, response status code and response headers
    def update_infra_port_qo_s_binding_0_with_http_info(segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_port_qo_s_binding_0 ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_port_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#update_infra_port_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Segment QoS Profile Binding Map
    # API will update Segment QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentQoSProfileBindingMap]
    def update_infra_segment_qo_s_binding(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      data, _status_code, _headers = update_infra_segment_qo_s_binding_with_http_info(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts)
      data
    end

    # Update Segment QoS Profile Binding Map
    # API will update Segment QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentQoSProfileBindingMap, Fixnum, Hash)>] SegmentQoSProfileBindingMap data, response status code and response headers
    def update_infra_segment_qo_s_binding_with_http_info(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_segment_qo_s_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_segment_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#update_infra_segment_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Segment QoS Profile Binding Map
    # API will update Segment QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentQoSProfileBindingMap]
    def update_infra_segment_qo_s_binding_0(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      data, _status_code, _headers = update_infra_segment_qo_s_binding_0_with_http_info(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts)
      data
    end

    # Update Segment QoS Profile Binding Map
    # API will update Segment QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentQoSProfileBindingMap, Fixnum, Hash)>] SegmentQoSProfileBindingMap data, response status code and response headers
    def update_infra_segment_qo_s_binding_0_with_http_info(segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_segment_qo_s_binding_0 ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_infra_segment_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#update_infra_segment_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Port QoS Profile Binding Map
    # API will update Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PortQoSProfileBindingMap]
    def update_port_qo_s_binding(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      data, _status_code, _headers = update_port_qo_s_binding_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts)
      data
    end

    # Update Port QoS Profile Binding Map
    # API will update Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortQoSProfileBindingMap, Fixnum, Hash)>] PortQoSProfileBindingMap data, response status code and response headers
    def update_port_qo_s_binding_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding"
      end
      # verify the required parameter 'port_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#update_port_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Port QoS Profile Binding Map
    # API will update Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PortQoSProfileBindingMap]
    def update_port_qo_s_binding_0(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      data, _status_code, _headers = update_port_qo_s_binding_0_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts)
      data
    end

    # Update Port QoS Profile Binding Map
    # API will update Port QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_qos_profile_binding_map_id Port QoS Profile Binding Map ID
    # @param port_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortQoSProfileBindingMap, Fixnum, Hash)>] PortQoSProfileBindingMap data, response status code and response headers
    def update_port_qo_s_binding_0_with_http_info(tier_1_id, segment_id, port_id, port_qos_profile_binding_map_id, port_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding_0"
      end
      # verify the required parameter 'port_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_port_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-qos-profile-binding-maps/{port-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-qos-profile-binding-map-id' + '}', port_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#update_port_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Segment QoS Profile Binding Map
    # API will update Segment QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentQoSProfileBindingMap]
    def update_segment_qo_s_binding(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      data, _status_code, _headers = update_segment_qo_s_binding_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts)
      data
    end

    # Update Segment QoS Profile Binding Map
    # API will update Segment QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentQoSProfileBindingMap, Fixnum, Hash)>] SegmentQoSProfileBindingMap data, response status code and response headers
    def update_segment_qo_s_binding_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_segment_qo_s_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_segment_qo_s_binding"
      end
      # verify the required parameter 'segment_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_segment_qo_s_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#update_segment_qo_s_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Segment QoS Profile Binding Map
    # API will update Segment QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentQoSProfileBindingMap]
    def update_segment_qo_s_binding_0(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      data, _status_code, _headers = update_segment_qo_s_binding_0_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts)
      data
    end

    # Update Segment QoS Profile Binding Map
    # API will update Segment QoS Profile Binding Map. For objects with no binding maps, default profile is applied.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_qos_profile_binding_map_id Segment QoS Profile Binding Map ID
    # @param segment_qo_s_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentQoSProfileBindingMap, Fixnum, Hash)>] SegmentQoSProfileBindingMap data, response status code and response headers
    def update_segment_qo_s_binding_0_with_http_info(tier_1_id, segment_id, segment_qos_profile_binding_map_id, segment_qo_s_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_segment_qo_s_binding_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qos_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_qos_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qos_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_segment_qo_s_binding_0"
      end
      # verify the required parameter 'segment_qo_s_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_qo_s_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_qo_s_profile_binding_map' when calling PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi.update_segment_qo_s_binding_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-qos-profile-binding-maps/{segment-qos-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-qos-profile-binding-map-id' + '}', segment_qos_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_qo_s_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentQoSProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentsSegmentProfilesQOSProfileBindingApi#update_segment_qo_s_binding_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
