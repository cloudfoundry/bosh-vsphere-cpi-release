=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecurityServiceInsertionServiceChainsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create  or update service chain
    # Create or update Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceChain]
    def create_service_chain(service_chain_id, policy_service_chain, opts = {})
      data, _status_code, _headers = create_service_chain_with_http_info(service_chain_id, policy_service_chain, opts)
      data
    end

    # Create  or update service chain
    # Create or update Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceChain, Fixnum, Hash)>] PolicyServiceChain data, response status code and response headers
    def create_service_chain_with_http_info(service_chain_id, policy_service_chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.create_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySecurityServiceInsertionServiceChainsApi.create_service_chain"
      end
      # verify the required parameter 'policy_service_chain' is set
      if @api_client.config.client_side_validation && policy_service_chain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_chain' when calling PolicySecurityServiceInsertionServiceChainsApi.create_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_chain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#create_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create  or update service chain
    # Create or update Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceChain]
    def create_service_chain_0(service_chain_id, policy_service_chain, opts = {})
      data, _status_code, _headers = create_service_chain_0_with_http_info(service_chain_id, policy_service_chain, opts)
      data
    end

    # Create  or update service chain
    # Create or update Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceChain, Fixnum, Hash)>] PolicyServiceChain data, response status code and response headers
    def create_service_chain_0_with_http_info(service_chain_id, policy_service_chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.create_service_chain_0 ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySecurityServiceInsertionServiceChainsApi.create_service_chain_0"
      end
      # verify the required parameter 'policy_service_chain' is set
      if @api_client.config.client_side_validation && policy_service_chain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_chain' when calling PolicySecurityServiceInsertionServiceChainsApi.create_service_chain_0"
      end
      # resource path
      local_var_path = '/global-infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_chain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#create_service_chain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service chain
    # This API can be user to delete service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_chain(service_chain_id, opts = {})
      delete_policy_service_chain_with_http_info(service_chain_id, opts)
      nil
    end

    # Delete Service chain
    # This API can be user to delete service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_chain_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.delete_policy_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySecurityServiceInsertionServiceChainsApi.delete_policy_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#delete_policy_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service chain
    # This API can be user to delete service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_chain_0(service_chain_id, opts = {})
      delete_policy_service_chain_0_with_http_info(service_chain_id, opts)
      nil
    end

    # Delete Service chain
    # This API can be user to delete service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_chain_0_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.delete_policy_service_chain_0 ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySecurityServiceInsertionServiceChainsApi.delete_policy_service_chain_0"
      end
      # resource path
      local_var_path = '/global-infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#delete_policy_service_chain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all service chain mappings for given service profile.
    # List all service chain mappings in the system for the given service profile. If no explicit enforcement point is provided in the request, will return for default. Else, will return for specified points. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [ServiceChainMappingListResult]
    def list_policy_service_chain_mappings(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = list_policy_service_chain_mappings_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # List all service chain mappings for given service profile.
    # List all service chain mappings in the system for the given service profile. If no explicit enforcement point is provided in the request, will return for default. Else, will return for specified points. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(ServiceChainMappingListResult, Fixnum, Hash)>] ServiceChainMappingListResult data, response status code and response headers
    def list_policy_service_chain_mappings_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chain_mappings ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chain_mappings"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chain_mappings"
      end
      # resource path
      local_var_path = '/global-infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}/service-chain-mappings'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceChainMappingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#list_policy_service_chain_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all service chain mappings for given service profile.
    # List all service chain mappings in the system for the given service profile. If no explicit enforcement point is provided in the request, will return for default. Else, will return for specified points. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [ServiceChainMappingListResult]
    def list_policy_service_chain_mappings_0(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = list_policy_service_chain_mappings_0_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # List all service chain mappings for given service profile.
    # List all service chain mappings in the system for the given service profile. If no explicit enforcement point is provided in the request, will return for default. Else, will return for specified points. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(ServiceChainMappingListResult, Fixnum, Hash)>] ServiceChainMappingListResult data, response status code and response headers
    def list_policy_service_chain_mappings_0_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chain_mappings_0 ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chain_mappings_0"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chain_mappings_0"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}/service-chain-mappings'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceChainMappingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#list_policy_service_chain_mappings_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service chains
    # List all the service chains available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyServiceChainListResult]
    def list_policy_service_chains(opts = {})
      data, _status_code, _headers = list_policy_service_chains_with_http_info(opts)
      data
    end

    # List service chains
    # List all the service chains available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyServiceChainListResult, Fixnum, Hash)>] PolicyServiceChainListResult data, response status code and response headers
    def list_policy_service_chains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/service-chains'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChainListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#list_policy_service_chains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service chains
    # List all the service chains available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyServiceChainListResult]
    def list_policy_service_chains_0(opts = {})
      data, _status_code, _headers = list_policy_service_chains_0_with_http_info(opts)
      data
    end

    # List service chains
    # List all the service chains available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyServiceChainListResult, Fixnum, Hash)>] PolicyServiceChainListResult data, response status code and response headers
    def list_policy_service_chains_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chains_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chains_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionServiceChainsApi.list_policy_service_chains_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/service-chains'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChainListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#list_policy_service_chains_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service chain
    # Create Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_chain(service_chain_id, policy_service_chain, opts = {})
      patch_service_chain_with_http_info(service_chain_id, policy_service_chain, opts)
      nil
    end

    # Create service chain
    # Create Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_chain_with_http_info(service_chain_id, policy_service_chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.patch_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySecurityServiceInsertionServiceChainsApi.patch_service_chain"
      end
      # verify the required parameter 'policy_service_chain' is set
      if @api_client.config.client_side_validation && policy_service_chain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_chain' when calling PolicySecurityServiceInsertionServiceChainsApi.patch_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_chain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#patch_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service chain
    # Create Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_chain_0(service_chain_id, policy_service_chain, opts = {})
      patch_service_chain_0_with_http_info(service_chain_id, policy_service_chain, opts)
      nil
    end

    # Create service chain
    # Create Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_chain_0_with_http_info(service_chain_id, policy_service_chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.patch_service_chain_0 ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySecurityServiceInsertionServiceChainsApi.patch_service_chain_0"
      end
      # verify the required parameter 'policy_service_chain' is set
      if @api_client.config.client_side_validation && policy_service_chain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_chain' when calling PolicySecurityServiceInsertionServiceChainsApi.patch_service_chain_0"
      end
      # resource path
      local_var_path = '/global-infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_chain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#patch_service_chain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service chain
    # This API can be used to read service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceChain]
    def read_service_chain(service_chain_id, opts = {})
      data, _status_code, _headers = read_service_chain_with_http_info(service_chain_id, opts)
      data
    end

    # Read service chain
    # This API can be used to read service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceChain, Fixnum, Hash)>] PolicyServiceChain data, response status code and response headers
    def read_service_chain_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.read_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySecurityServiceInsertionServiceChainsApi.read_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#read_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service chain
    # This API can be used to read service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceChain]
    def read_service_chain_0(service_chain_id, opts = {})
      data, _status_code, _headers = read_service_chain_0_with_http_info(service_chain_id, opts)
      data
    end

    # Read service chain
    # This API can be used to read service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceChain, Fixnum, Hash)>] PolicyServiceChain data, response status code and response headers
    def read_service_chain_0_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.read_service_chain_0 ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySecurityServiceInsertionServiceChainsApi.read_service_chain_0"
      end
      # resource path
      local_var_path = '/global-infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#read_service_chain_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service paths for a given service chain
    # This API can be used to read service paths for a given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [ServicePathListResult]
    def read_service_path(service_chain_id, opts = {})
      data, _status_code, _headers = read_service_path_with_http_info(service_chain_id, opts)
      data
    end

    # Read service paths for a given service chain
    # This API can be used to read service paths for a given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(ServicePathListResult, Fixnum, Hash)>] ServicePathListResult data, response status code and response headers
    def read_service_path_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.read_service_path ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySecurityServiceInsertionServiceChainsApi.read_service_path"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}/service-paths'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServicePathListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#read_service_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service paths for a given service chain
    # This API can be used to read service paths for a given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [ServicePathListResult]
    def read_service_path_0(service_chain_id, opts = {})
      data, _status_code, _headers = read_service_path_0_with_http_info(service_chain_id, opts)
      data
    end

    # Read service paths for a given service chain
    # This API can be used to read service paths for a given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(ServicePathListResult, Fixnum, Hash)>] ServicePathListResult data, response status code and response headers
    def read_service_path_0_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionServiceChainsApi.read_service_path_0 ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySecurityServiceInsertionServiceChainsApi.read_service_path_0"
      end
      # resource path
      local_var_path = '/global-infra/service-chains/{service-chain-id}/service-paths'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServicePathListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionServiceChainsApi#read_service_path_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
