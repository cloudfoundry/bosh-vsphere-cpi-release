=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_draft(draft_id, opts = {})
      delete_draft_with_http_info(draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.delete_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.delete_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_draft_0(draft_id, opts = {})
      delete_draft_0_with_http_info(draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_draft_0_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.delete_draft_0 ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.delete_draft_0"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#delete_draft_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_aggregated_configuration_to_be_published_for_draft(draft_id, opts = {})
      data, _status_code, _headers = get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_aggregated_configuration_to_be_published_for_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_aggregated_configuration_to_be_published_for_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/aggregated'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#get_aggregated_configuration_to_be_published_for_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_aggregated_configuration_to_be_published_for_draft_0(draft_id, opts = {})
      data, _status_code, _headers = get_aggregated_configuration_to_be_published_for_draft_0_with_http_info(draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_aggregated_configuration_to_be_published_for_draft_0_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_aggregated_configuration_to_be_published_for_draft_0 ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_aggregated_configuration_to_be_published_for_draft_0"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/aggregated'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#get_aggregated_configuration_to_be_published_for_draft_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [PolicyDraftPaginatedAggregatedConfigurationResult]
    def get_policy_draft_paginated_aggregated_configuration_result(draft_id, opts = {})
      data, _status_code, _headers = get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts)
      data
    end

    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [Array<(PolicyDraftPaginatedAggregatedConfigurationResult, Fixnum, Hash)>] PolicyDraftPaginatedAggregatedConfigurationResult data, response status code and response headers
    def get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_policy_draft_paginated_aggregated_configuration_result ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_policy_draft_paginated_aggregated_configuration_result"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/aggregated_with_pagination'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftPaginatedAggregatedConfigurationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#get_policy_draft_paginated_aggregated_configuration_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [PolicyDraftPaginatedAggregatedConfigurationResult]
    def get_policy_draft_paginated_aggregated_configuration_result_0(draft_id, opts = {})
      data, _status_code, _headers = get_policy_draft_paginated_aggregated_configuration_result_0_with_http_info(draft_id, opts)
      data
    end

    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [Array<(PolicyDraftPaginatedAggregatedConfigurationResult, Fixnum, Hash)>] PolicyDraftPaginatedAggregatedConfigurationResult data, response status code and response headers
    def get_policy_draft_paginated_aggregated_configuration_result_0_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_policy_draft_paginated_aggregated_configuration_result_0 ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_policy_draft_paginated_aggregated_configuration_result_0"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/aggregated_with_pagination'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftPaginatedAggregatedConfigurationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#get_policy_draft_paginated_aggregated_configuration_result_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_preview_of_configuration_after_publish_of_draft(draft_id, opts = {})
      data, _status_code, _headers = get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_preview_of_configuration_after_publish_of_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_preview_of_configuration_after_publish_of_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/complete'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#get_preview_of_configuration_after_publish_of_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_preview_of_configuration_after_publish_of_draft_0(draft_id, opts = {})
      data, _status_code, _headers = get_preview_of_configuration_after_publish_of_draft_0_with_http_info(draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_preview_of_configuration_after_publish_of_draft_0_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_preview_of_configuration_after_publish_of_draft_0 ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.get_preview_of_configuration_after_publish_of_draft_0"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/complete'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#get_preview_of_configuration_after_publish_of_draft_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def list_drafts(opts = {})
      data, _status_code, _headers = list_drafts_with_http_info(opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def list_drafts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.list_drafts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.list_drafts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.list_drafts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/drafts'

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#list_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def list_drafts_0(opts = {})
      data, _status_code, _headers = list_drafts_0_with_http_info(opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def list_drafts_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.list_drafts_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.list_drafts_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.list_drafts_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/drafts'

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#list_drafts_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_draft(draft_id, policy_draft, opts = {})
      patch_draft_with_http_info(draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.patch_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.patch_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.patch_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#patch_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_draft_0(draft_id, policy_draft, opts = {})
      patch_draft_0_with_http_info(draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_draft_0_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.patch_draft_0 ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.patch_draft_0"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.patch_draft_0"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#patch_draft_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def publish_draft_publish(draft_id, infra, opts = {})
      publish_draft_publish_with_http_info(draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def publish_draft_publish_with_http_info(draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.publish_draft_publish ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.publish_draft_publish"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.publish_draft_publish"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}?action=publish'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#publish_draft_publish\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def publish_draft_publish_0(draft_id, infra, opts = {})
      publish_draft_publish_0_with_http_info(draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def publish_draft_publish_0_with_http_info(draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.publish_draft_publish_0 ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.publish_draft_publish_0"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.publish_draft_publish_0"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}?action=publish'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#publish_draft_publish_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def put_draft(draft_id, policy_draft, opts = {})
      data, _status_code, _headers = put_draft_with_http_info(draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def put_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.put_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.put_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.put_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#put_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def put_draft_0(draft_id, policy_draft, opts = {})
      data, _status_code, _headers = put_draft_0_with_http_info(draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def put_draft_0_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.put_draft_0 ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.put_draft_0"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.put_draft_0"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#put_draft_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def read_draft(draft_id, opts = {})
      data, _status_code, _headers = read_draft_with_http_info(draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def read_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.read_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.read_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#read_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def read_draft_0(draft_id, opts = {})
      data, _status_code, _headers = read_draft_0_with_http_info(draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def read_draft_0_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.read_draft_0 ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi.read_draft_0"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsDraftsApi#read_draft_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
