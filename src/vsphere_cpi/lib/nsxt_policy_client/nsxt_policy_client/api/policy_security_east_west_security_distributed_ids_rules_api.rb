=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecurityEastWestSecurityDistributedIdsRulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def create_or_update_ids_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = create_or_update_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def create_or_update_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#create_or_update_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def create_or_update_ids_rule_0(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = create_or_update_ids_rule_0_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def create_or_update_ids_rule_0_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_rule_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_rule_0"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_rule_0"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_rule_0"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_rule_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#create_or_update_ids_rule_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def create_or_update_ids_security_policy(domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = create_or_update_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def create_or_update_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#create_or_update_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def create_or_update_ids_security_policy_0(domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = create_or_update_ids_security_policy_0_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def create_or_update_ids_security_policy_0_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_security_policy_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_security_policy_0"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_security_policy_0"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.create_or_update_ids_security_policy_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#create_or_update_ids_security_policy_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_rule(domain_id, policy_id, rule_id, opts = {})
      delete_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      nil
    end

    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#delete_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_rule_0(domain_id, policy_id, rule_id, opts = {})
      delete_ids_rule_0_with_http_info(domain_id, policy_id, rule_id, opts)
      nil
    end

    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_rule_0_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_rule_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_rule_0"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_rule_0"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_rule_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#delete_ids_rule_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_security_policy(domain_id, policy_id, opts = {})
      delete_ids_security_policy_with_http_info(domain_id, policy_id, opts)
      nil
    end

    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_security_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#delete_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_security_policy_0(domain_id, policy_id, opts = {})
      delete_ids_security_policy_0_with_http_info(domain_id, policy_id, opts)
      nil
    end

    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_security_policy_0_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_security_policy_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_security_policy_0"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.delete_ids_security_policy_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#delete_ids_security_policy_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def get_ids_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#get_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def get_ids_rule_0(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_rule_0_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def get_ids_rule_0_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_rule_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_rule_0"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_rule_0"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_rule_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#get_ids_rule_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def get_ids_security_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = get_ids_security_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def get_ids_security_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#get_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def get_ids_security_policy_0(domain_id, policy_id, opts = {})
      data, _status_code, _headers = get_ids_security_policy_0_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def get_ids_security_policy_0_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_security_policy_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_security_policy_0"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.get_ids_security_policy_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#get_ids_security_policy_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def list_ids_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = list_ids_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def list_ids_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#list_ids_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def list_ids_rules_0(domain_id, policy_id, opts = {})
      data, _status_code, _headers = list_ids_rules_0_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def list_ids_rules_0_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_rules_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_rules_0"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_rules_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_rules_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_rules_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#list_ids_rules_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSecurityPolicyListResult]
    def list_ids_security_policies(domain_id, opts = {})
      data, _status_code, _headers = list_ids_security_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSecurityPolicyListResult, Fixnum, Hash)>] IdsSecurityPolicyListResult data, response status code and response headers
    def list_ids_security_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_security_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#list_ids_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSecurityPolicyListResult]
    def list_ids_security_policies_0(domain_id, opts = {})
      data, _status_code, _headers = list_ids_security_policies_0_with_http_info(domain_id, opts)
      data
    end

    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSecurityPolicyListResult, Fixnum, Hash)>] IdsSecurityPolicyListResult data, response status code and response headers
    def list_ids_security_policies_0_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_security_policies_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_security_policies_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_security_policies_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.list_ids_security_policies_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#list_ids_security_policies_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      patch_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      nil
    end

    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#patch_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_rule_0(domain_id, policy_id, rule_id, ids_rule, opts = {})
      patch_ids_rule_0_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      nil
    end

    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_rule_0_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_rule_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_rule_0"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_rule_0"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_rule_0"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_rule_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#patch_ids_rule_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_security_policy(domain_id, policy_id, ids_security_policy, opts = {})
      patch_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      nil
    end

    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#patch_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_security_policy_0(domain_id, policy_id, ids_security_policy, opts = {})
      patch_ids_security_policy_0_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      nil
    end

    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_security_policy_0_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_security_policy_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_security_policy_0"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_security_policy_0"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.patch_ids_security_policy_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#patch_ids_security_policy_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsRule]
    def revise_ids_rule_revise(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = revise_ids_rule_revise_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def revise_ids_rule_revise_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_rule_revise ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_rule_revise"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_rule_revise"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_rule_revise"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_rule_revise"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#revise_ids_rule_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsRule]
    def revise_ids_rule_revise_0(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = revise_ids_rule_revise_0_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def revise_ids_rule_revise_0_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_rule_revise_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_rule_revise_0"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_rule_revise_0"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_rule_revise_0"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_rule_revise_0"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#revise_ids_rule_revise_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsSecurityPolicy]
    def revise_ids_security_policy_revise(domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = revise_ids_security_policy_revise_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def revise_ids_security_policy_revise_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_security_policy_revise ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_security_policy_revise"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_security_policy_revise"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_security_policy_revise"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#revise_ids_security_policy_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsSecurityPolicy]
    def revise_ids_security_policy_revise_0(domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = revise_ids_security_policy_revise_0_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def revise_ids_security_policy_revise_0_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_security_policy_revise_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_security_policy_revise_0"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_security_policy_revise_0"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling PolicySecurityEastWestSecurityDistributedIdsRulesApi.revise_ids_security_policy_revise_0"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesApi#revise_ids_security_policy_revise_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
