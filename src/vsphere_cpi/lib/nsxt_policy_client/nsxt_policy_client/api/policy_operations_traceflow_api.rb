=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicyOperationsTraceflowApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete traceflow config
    # Delete traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_traceflow_config(traceflow_id, opts = {})
      delete_traceflow_config_with_http_info(traceflow_id, opts)
      nil
    end

    # Delete traceflow config
    # Delete traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_traceflow_config_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.delete_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.delete_traceflow_config"
      end
      # resource path
      local_var_path = '/global-infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#delete_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete traceflow config
    # Delete traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_traceflow_config_0(traceflow_id, opts = {})
      delete_traceflow_config_0_with_http_info(traceflow_id, opts)
      nil
    end

    # Delete traceflow config
    # Delete traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_traceflow_config_0_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.delete_traceflow_config_0 ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.delete_traceflow_config_0"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#delete_traceflow_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TraceflowConfig for infra
    # Paginated list of all TraceflowConfig for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TraceflowConfigListResult]
    def list_traceflow_config(opts = {})
      data, _status_code, _headers = list_traceflow_config_with_http_info(opts)
      data
    end

    # List TraceflowConfig for infra
    # Paginated list of all TraceflowConfig for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TraceflowConfigListResult, Fixnum, Hash)>] TraceflowConfigListResult data, response status code and response headers
    def list_traceflow_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.list_traceflow_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsTraceflowApi.list_traceflow_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsTraceflowApi.list_traceflow_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/traceflows'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#list_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TraceflowConfig for infra
    # Paginated list of all TraceflowConfig for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TraceflowConfigListResult]
    def list_traceflow_config_0(opts = {})
      data, _status_code, _headers = list_traceflow_config_0_with_http_info(opts)
      data
    end

    # List TraceflowConfig for infra
    # Paginated list of all TraceflowConfig for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TraceflowConfigListResult, Fixnum, Hash)>] TraceflowConfigListResult data, response status code and response headers
    def list_traceflow_config_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.list_traceflow_config_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsTraceflowApi.list_traceflow_config_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsTraceflowApi.list_traceflow_config_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/traceflows'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#list_traceflow_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow observations
    # Read traceflow observations for id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity.
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [TraceflowObservationListResult]
    def list_traceflow_observations(traceflow_id, opts = {})
      data, _status_code, _headers = list_traceflow_observations_with_http_info(traceflow_id, opts)
      data
    end

    # Read traceflow observations
    # Read traceflow observations for id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity.
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(TraceflowObservationListResult, Fixnum, Hash)>] TraceflowObservationListResult data, response status code and response headers
    def list_traceflow_observations_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.list_traceflow_observations ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.list_traceflow_observations"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}/observations'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowObservationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#list_traceflow_observations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow observations
    # Read traceflow observations for id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity.
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [TraceflowObservationListResult]
    def list_traceflow_observations_0(traceflow_id, opts = {})
      data, _status_code, _headers = list_traceflow_observations_0_with_http_info(traceflow_id, opts)
      data
    end

    # Read traceflow observations
    # Read traceflow observations for id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity.
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(TraceflowObservationListResult, Fixnum, Hash)>] TraceflowObservationListResult data, response status code and response headers
    def list_traceflow_observations_0_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.list_traceflow_observations_0 ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.list_traceflow_observations_0"
      end
      # resource path
      local_var_path = '/global-infra/traceflows/{traceflow-id}/observations'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowObservationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#list_traceflow_observations_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_traceflow_config(traceflow_id, traceflow_config, opts = {})
      patch_traceflow_config_with_http_info(traceflow_id, traceflow_config, opts)
      nil
    end

    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_traceflow_config_with_http_info(traceflow_id, traceflow_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.patch_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.patch_traceflow_config"
      end
      # verify the required parameter 'traceflow_config' is set
      if @api_client.config.client_side_validation && traceflow_config.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_config' when calling PolicyOperationsTraceflowApi.patch_traceflow_config"
      end
      # resource path
      local_var_path = '/global-infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(traceflow_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#patch_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_traceflow_config_0(traceflow_id, traceflow_config, opts = {})
      patch_traceflow_config_0_with_http_info(traceflow_id, traceflow_config, opts)
      nil
    end

    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_traceflow_config_0_with_http_info(traceflow_id, traceflow_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.patch_traceflow_config_0 ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.patch_traceflow_config_0"
      end
      # verify the required parameter 'traceflow_config' is set
      if @api_client.config.client_side_validation && traceflow_config.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_config' when calling PolicyOperationsTraceflowApi.patch_traceflow_config_0"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(traceflow_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#patch_traceflow_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow config
    # Read traceflow config with id traceflow-id. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [TraceflowConfig]
    def read_traceflow_config(traceflow_id, opts = {})
      data, _status_code, _headers = read_traceflow_config_with_http_info(traceflow_id, opts)
      data
    end

    # Read traceflow config
    # Read traceflow config with id traceflow-id. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def read_traceflow_config_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.read_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.read_traceflow_config"
      end
      # resource path
      local_var_path = '/global-infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#read_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow config
    # Read traceflow config with id traceflow-id. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [TraceflowConfig]
    def read_traceflow_config_0(traceflow_id, opts = {})
      data, _status_code, _headers = read_traceflow_config_0_with_http_info(traceflow_id, opts)
      data
    end

    # Read traceflow config
    # Read traceflow config with id traceflow-id. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def read_traceflow_config_0_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.read_traceflow_config_0 ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.read_traceflow_config_0"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#read_traceflow_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow status
    # Read traceflow status with id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Traceflow]
    def read_traceflow_status(traceflow_id, opts = {})
      data, _status_code, _headers = read_traceflow_status_with_http_info(traceflow_id, opts)
      data
    end

    # Read traceflow status
    # Read traceflow status with id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(Traceflow, Fixnum, Hash)>] Traceflow data, response status code and response headers
    def read_traceflow_status_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.read_traceflow_status ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.read_traceflow_status"
      end
      # resource path
      local_var_path = '/global-infra/traceflows/{traceflow-id}/status'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Traceflow')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#read_traceflow_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow status
    # Read traceflow status with id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Traceflow]
    def read_traceflow_status_0(traceflow_id, opts = {})
      data, _status_code, _headers = read_traceflow_status_0_with_http_info(traceflow_id, opts)
      data
    end

    # Read traceflow status
    # Read traceflow status with id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(Traceflow, Fixnum, Hash)>] Traceflow data, response status code and response headers
    def read_traceflow_status_0_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.read_traceflow_status_0 ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.read_traceflow_status_0"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}/status'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Traceflow')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#read_traceflow_status_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart traceflow with same set of parameters used during create/update traceflow
    # This will retrace even if current traceflow has observations. Current observations will be lost. Traceflow configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [TraceflowConfig]
    def restart_traceflow(traceflow_id, opts = {})
      data, _status_code, _headers = restart_traceflow_with_http_info(traceflow_id, opts)
      data
    end

    # Restart traceflow with same set of parameters used during create/update traceflow
    # This will retrace even if current traceflow has observations. Current observations will be lost. Traceflow configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def restart_traceflow_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.restart_traceflow ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.restart_traceflow"
      end
      # resource path
      local_var_path = '/global-infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#restart_traceflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart traceflow with same set of parameters used during create/update traceflow
    # This will retrace even if current traceflow has observations. Current observations will be lost. Traceflow configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [TraceflowConfig]
    def restart_traceflow_0(traceflow_id, opts = {})
      data, _status_code, _headers = restart_traceflow_0_with_http_info(traceflow_id, opts)
      data
    end

    # Restart traceflow with same set of parameters used during create/update traceflow
    # This will retrace even if current traceflow has observations. Current observations will be lost. Traceflow configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def restart_traceflow_0_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.restart_traceflow_0 ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.restart_traceflow_0"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#restart_traceflow_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [TraceflowConfig]
    def update_traceflow_config(traceflow_id, traceflow_config, opts = {})
      data, _status_code, _headers = update_traceflow_config_with_http_info(traceflow_id, traceflow_config, opts)
      data
    end

    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def update_traceflow_config_with_http_info(traceflow_id, traceflow_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.update_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.update_traceflow_config"
      end
      # verify the required parameter 'traceflow_config' is set
      if @api_client.config.client_side_validation && traceflow_config.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_config' when calling PolicyOperationsTraceflowApi.update_traceflow_config"
      end
      # resource path
      local_var_path = '/global-infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(traceflow_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#update_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [TraceflowConfig]
    def update_traceflow_config_0(traceflow_id, traceflow_config, opts = {})
      data, _status_code, _headers = update_traceflow_config_0_with_http_info(traceflow_id, traceflow_config, opts)
      data
    end

    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def update_traceflow_config_0_with_http_info(traceflow_id, traceflow_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsTraceflowApi.update_traceflow_config_0 ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling PolicyOperationsTraceflowApi.update_traceflow_config_0"
      end
      # verify the required parameter 'traceflow_config' is set
      if @api_client.config.client_side_validation && traceflow_config.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_config' when calling PolicyOperationsTraceflowApi.update_traceflow_config_0"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(traceflow_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsTraceflowApi#update_traceflow_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
