=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get mirror stack status for Group Monitoring Profile Binding Map.
    # API will get mirror stack status by Group Monitoring Profile Binding Map 
    # @param domain_id 
    # @param group_id 
    # @param group_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MirrorStackStatusListResult]
    def get_group_monitoring_binding_mirror_stack_status(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_group_monitoring_binding_mirror_stack_status_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get mirror stack status for Group Monitoring Profile Binding Map.
    # API will get mirror stack status by Group Monitoring Profile Binding Map 
    # @param domain_id 
    # @param group_id 
    # @param group_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MirrorStackStatusListResult, Fixnum, Hash)>] MirrorStackStatusListResult data, response status code and response headers
    def get_group_monitoring_binding_mirror_stack_status_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}/mirror-stack-status'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MirrorStackStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi#get_group_monitoring_binding_mirror_stack_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get mirror stack status for Group Monitoring Profile Binding Map.
    # API will get mirror stack status by Group Monitoring Profile Binding Map 
    # @param domain_id 
    # @param group_id 
    # @param group_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MirrorStackStatusListResult]
    def get_group_monitoring_binding_mirror_stack_status_0(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_group_monitoring_binding_mirror_stack_status_0_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get mirror stack status for Group Monitoring Profile Binding Map.
    # API will get mirror stack status by Group Monitoring Profile Binding Map 
    # @param domain_id 
    # @param group_id 
    # @param group_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MirrorStackStatusListResult, Fixnum, Hash)>] MirrorStackStatusListResult data, response status code and response headers
    def get_group_monitoring_binding_mirror_stack_status_0_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status_0"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status_0"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_group_monitoring_binding_mirror_stack_status_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}/mirror-stack-status'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MirrorStackStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi#get_group_monitoring_binding_mirror_stack_status_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get mirror stack status for Infra Port Monitoring Profile Binding Map
    # API will get Infra Port Monitoring Profile Binding Map mirror stack status. 
    # @param infra_segment_id 
    # @param infra_port_id 
    # @param port_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MirrorStackStatusListResult]
    def get_infra_port_monitoring_binding_mirror_stack_status(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_port_monitoring_binding_mirror_stack_status_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get mirror stack status for Infra Port Monitoring Profile Binding Map
    # API will get Infra Port Monitoring Profile Binding Map mirror stack status. 
    # @param infra_segment_id 
    # @param infra_port_id 
    # @param port_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MirrorStackStatusListResult, Fixnum, Hash)>] MirrorStackStatusListResult data, response status code and response headers
    def get_infra_port_monitoring_binding_mirror_stack_status_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}/mirror-stack-status'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MirrorStackStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi#get_infra_port_monitoring_binding_mirror_stack_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get mirror stack status for Infra Port Monitoring Profile Binding Map
    # API will get Infra Port Monitoring Profile Binding Map mirror stack status. 
    # @param infra_segment_id 
    # @param infra_port_id 
    # @param port_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MirrorStackStatusListResult]
    def get_infra_port_monitoring_binding_mirror_stack_status_0(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_port_monitoring_binding_mirror_stack_status_0_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get mirror stack status for Infra Port Monitoring Profile Binding Map
    # API will get Infra Port Monitoring Profile Binding Map mirror stack status. 
    # @param infra_segment_id 
    # @param infra_port_id 
    # @param port_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MirrorStackStatusListResult, Fixnum, Hash)>] MirrorStackStatusListResult data, response status code and response headers
    def get_infra_port_monitoring_binding_mirror_stack_status_0_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status_0 ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status_0"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status_0"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_port_monitoring_binding_mirror_stack_status_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}/mirror-stack-status'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MirrorStackStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi#get_infra_port_monitoring_binding_mirror_stack_status_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Infra Segment Monitoring Profile Binding Map
    # API will get Infra Segment Monitoring Profile Binding Map mirror stack status. 
    # @param infra_segment_id 
    # @param segment_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MirrorStackStatusListResult]
    def get_infra_segment_monitoring_binding_mirror_stack_status(infra_segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_segment_monitoring_binding_mirror_stack_status_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get Infra Segment Monitoring Profile Binding Map
    # API will get Infra Segment Monitoring Profile Binding Map mirror stack status. 
    # @param infra_segment_id 
    # @param segment_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MirrorStackStatusListResult, Fixnum, Hash)>] MirrorStackStatusListResult data, response status code and response headers
    def get_infra_segment_monitoring_binding_mirror_stack_status_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_segment_monitoring_binding_mirror_stack_status ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_segment_monitoring_binding_mirror_stack_status"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_segment_monitoring_binding_mirror_stack_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_segment_monitoring_binding_mirror_stack_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_segment_monitoring_binding_mirror_stack_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}/mirror-stack-status'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MirrorStackStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi#get_infra_segment_monitoring_binding_mirror_stack_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Infra Segment Monitoring Profile Binding Map
    # API will get Infra Segment Monitoring Profile Binding Map mirror stack status. 
    # @param infra_segment_id 
    # @param segment_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MirrorStackStatusListResult]
    def get_infra_segment_monitoring_binding_mirror_stack_status_0(infra_segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_segment_monitoring_binding_mirror_stack_status_0_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get Infra Segment Monitoring Profile Binding Map
    # API will get Infra Segment Monitoring Profile Binding Map mirror stack status. 
    # @param infra_segment_id 
    # @param segment_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MirrorStackStatusListResult, Fixnum, Hash)>] MirrorStackStatusListResult data, response status code and response headers
    def get_infra_segment_monitoring_binding_mirror_stack_status_0_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_segment_monitoring_binding_mirror_stack_status_0 ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_segment_monitoring_binding_mirror_stack_status_0"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_segment_monitoring_binding_mirror_stack_status_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_segment_monitoring_binding_mirror_stack_status_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_infra_segment_monitoring_binding_mirror_stack_status_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/segments/{infra-segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}/mirror-stack-status'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MirrorStackStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi#get_infra_segment_monitoring_binding_mirror_stack_status_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get mirror stack status for Port Monitoring Profile Binding Map
    # API will get mirror stack status by Port Monitoring Profile Binding Map. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param port_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MirrorStackStatusListResult]
    def get_port_monitoring_binding_mirror_stack_status(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_port_monitoring_binding_mirror_stack_status_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get mirror stack status for Port Monitoring Profile Binding Map
    # API will get mirror stack status by Port Monitoring Profile Binding Map. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param port_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MirrorStackStatusListResult, Fixnum, Hash)>] MirrorStackStatusListResult data, response status code and response headers
    def get_port_monitoring_binding_mirror_stack_status_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}/mirror-stack-status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MirrorStackStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi#get_port_monitoring_binding_mirror_stack_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get mirror stack status for Port Monitoring Profile Binding Map
    # API will get mirror stack status by Port Monitoring Profile Binding Map. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param port_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MirrorStackStatusListResult]
    def get_port_monitoring_binding_mirror_stack_status_0(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_port_monitoring_binding_mirror_stack_status_0_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get mirror stack status for Port Monitoring Profile Binding Map
    # API will get mirror stack status by Port Monitoring Profile Binding Map. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param port_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MirrorStackStatusListResult, Fixnum, Hash)>] MirrorStackStatusListResult data, response status code and response headers
    def get_port_monitoring_binding_mirror_stack_status_0_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status_0"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status_0"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_port_monitoring_binding_mirror_stack_status_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}/mirror-stack-status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MirrorStackStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi#get_port_monitoring_binding_mirror_stack_status_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get mirror stack status for Segment Monitoring Profile Binding Map
    # API will get mirror stack status by Segment Monitoring Profile Binding Map. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MirrorStackStatusListResult]
    def get_segment_monitoring_binding_mirror_stack_status(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_segment_monitoring_binding_mirror_stack_status_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get mirror stack status for Segment Monitoring Profile Binding Map
    # API will get mirror stack status by Segment Monitoring Profile Binding Map. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MirrorStackStatusListResult, Fixnum, Hash)>] MirrorStackStatusListResult data, response status code and response headers
    def get_segment_monitoring_binding_mirror_stack_status_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}/mirror-stack-status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MirrorStackStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi#get_segment_monitoring_binding_mirror_stack_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get mirror stack status for Segment Monitoring Profile Binding Map
    # API will get mirror stack status by Segment Monitoring Profile Binding Map. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MirrorStackStatusListResult]
    def get_segment_monitoring_binding_mirror_stack_status_0(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_segment_monitoring_binding_mirror_stack_status_0_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get mirror stack status for Segment Monitoring Profile Binding Map
    # API will get mirror stack status by Segment Monitoring Profile Binding Map. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_monitoring_profile_binding_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Binding map path enforcemnt point path to remote L3 mirror session
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MirrorStackStatusListResult, Fixnum, Hash)>] MirrorStackStatusListResult data, response status code and response headers
    def get_segment_monitoring_binding_mirror_stack_status_0_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status_0"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status_0"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi.get_segment_monitoring_binding_mirror_stack_status_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}/mirror-stack-status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MirrorStackStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingConnectivitySegmentSegmentProfilesMonitoringProfileBindingApi#get_segment_monitoring_binding_mirror_stack_status_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
