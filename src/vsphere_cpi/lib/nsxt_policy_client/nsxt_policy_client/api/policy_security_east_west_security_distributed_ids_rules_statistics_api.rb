=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get IDS/IPS rule statistics
    # Get statistics of a IDS/IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def get_ids_rule_statistics(domain_id, ids_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts)
      data
    end

    # Get IDS/IPS rule statistics
    # Get statistics of a IDS/IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi.get_ids_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi.get_ids_rule_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi.get_ids_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi.get_ids_rule_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi#get_ids_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS/IPS rule statistics
    # Get statistics of a IDS/IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def get_ids_rule_statistics_0(domain_id, ids_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_rule_statistics_0_with_http_info(domain_id, ids_policy_id, rule_id, opts)
      data
    end

    # Get IDS/IPS rule statistics
    # Get statistics of a IDS/IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def get_ids_rule_statistics_0_with_http_info(domain_id, ids_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi.get_ids_rule_statistics_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi.get_ids_rule_statistics_0"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi.get_ids_rule_statistics_0"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi.get_ids_rule_statistics_0"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi#get_ids_rule_statistics_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset IDS/IPS rule statistics
    # Sets IDS/IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category (default to IDPSDFW)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def reset_ids_rule_stats_reset(opts = {})
      reset_ids_rule_stats_reset_with_http_info(opts)
      nil
    end

    # Reset IDS/IPS rule statistics
    # Sets IDS/IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_ids_rule_stats_reset_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi.reset_ids_rule_stats_reset ...'
      end
      if @api_client.config.client_side_validation && opts[:'category'] && !['IDPSDFW'].include?(opts[:'category'])
        fail ArgumentError, 'invalid value for "category", must be one of IDPSDFW'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi#reset_ids_rule_stats_reset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset IDS/IPS rule statistics
    # Sets IDS/IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category (default to IDPSDFW)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def reset_ids_rule_stats_reset_0(opts = {})
      reset_ids_rule_stats_reset_0_with_http_info(opts)
      nil
    end

    # Reset IDS/IPS rule statistics
    # Sets IDS/IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_ids_rule_stats_reset_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi.reset_ids_rule_stats_reset_0 ...'
      end
      if @api_client.config.client_side_validation && opts[:'category'] && !['IDPSDFW'].include?(opts[:'category'])
        fail ArgumentError, 'invalid value for "category", must be one of IDPSDFW'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedIdsRulesStatisticsApi#reset_ids_rule_stats_reset_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
