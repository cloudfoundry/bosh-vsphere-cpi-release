=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete PolicyUrlCategorizationConfig
    # Delete PolicyUrlCategorizationConfig. If deleted, the URL categorization will be disabled for that edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      delete_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts)
      nil
    end

    # Delete PolicyUrlCategorizationConfig
    # Delete PolicyUrlCategorizationConfig. If deleted, the URL categorization will be disabled for that edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.delete_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.delete_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.delete_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.delete_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.delete_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#delete_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete PolicyUrlCategorizationConfig
    # Delete PolicyUrlCategorizationConfig. If deleted, the URL categorization will be disabled for that edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_url_categorization_config_0(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      delete_policy_url_categorization_config_0_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts)
      nil
    end

    # Delete PolicyUrlCategorizationConfig
    # Delete PolicyUrlCategorizationConfig. If deleted, the URL categorization will be disabled for that edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_url_categorization_config_0_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.delete_policy_url_categorization_config_0 ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.delete_policy_url_categorization_config_0"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.delete_policy_url_categorization_config_0"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.delete_policy_url_categorization_config_0"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.delete_policy_url_categorization_config_0"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#delete_policy_url_categorization_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyUrlCategorizationConfig
    # Gets a PolicyUrlCategorizationConfig. This returns the details of the config like whether the URL categorization is enabled or disabled, the id of the context profiles which are used to filter the categories, and the update frequency of the data from the cloud. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def get_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      data, _status_code, _headers = get_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts)
      data
    end

    # Get PolicyUrlCategorizationConfig
    # Gets a PolicyUrlCategorizationConfig. This returns the details of the config like whether the URL categorization is enabled or disabled, the id of the context profiles which are used to filter the categories, and the update frequency of the data from the cloud. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def get_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.get_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.get_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.get_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.get_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.get_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#get_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyUrlCategorizationConfig
    # Gets a PolicyUrlCategorizationConfig. This returns the details of the config like whether the URL categorization is enabled or disabled, the id of the context profiles which are used to filter the categories, and the update frequency of the data from the cloud. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def get_policy_url_categorization_config_0(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      data, _status_code, _headers = get_policy_url_categorization_config_0_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts)
      data
    end

    # Get PolicyUrlCategorizationConfig
    # Gets a PolicyUrlCategorizationConfig. This returns the details of the config like whether the URL categorization is enabled or disabled, the id of the context profiles which are used to filter the categories, and the update frequency of the data from the cloud. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def get_policy_url_categorization_config_0_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.get_policy_url_categorization_config_0 ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.get_policy_url_categorization_config_0"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.get_policy_url_categorization_config_0"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.get_policy_url_categorization_config_0"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.get_policy_url_categorization_config_0"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#get_policy_url_categorization_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of URL categories.
    # Gets the list of categories. This will provide all the supported categories along with their ids. Few examples of these categories are Shopping, Social Networks, Streaming sites, etc. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyUrlCategoryListResult]
    def list_policy_url_categories(opts = {})
      data, _status_code, _headers = list_policy_url_categories_with_http_info(opts)
      data
    end

    # Get the list of URL categories.
    # Gets the list of categories. This will provide all the supported categories along with their ids. Few examples of these categories are Shopping, Social Networks, Streaming sites, etc. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyUrlCategoryListResult, Fixnum, Hash)>] PolicyUrlCategoryListResult data, response status code and response headers
    def list_policy_url_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_categories ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_categories, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_categories, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/url-categories'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategoryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#list_policy_url_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of URL categories.
    # Gets the list of categories. This will provide all the supported categories along with their ids. Few examples of these categories are Shopping, Social Networks, Streaming sites, etc. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyUrlCategoryListResult]
    def list_policy_url_categories_0(opts = {})
      data, _status_code, _headers = list_policy_url_categories_0_with_http_info(opts)
      data
    end

    # Get the list of URL categories.
    # Gets the list of categories. This will provide all the supported categories along with their ids. Few examples of these categories are Shopping, Social Networks, Streaming sites, etc. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyUrlCategoryListResult, Fixnum, Hash)>] PolicyUrlCategoryListResult data, response status code and response headers
    def list_policy_url_categories_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_categories_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_categories_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_categories_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/url-categories'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategoryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#list_policy_url_categories_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of reputation severity
    # Gets the list of reputation severities. This will provide all the supported severities along with their ids, min and max reputaitons. The min_reputation and max_reputation specify the range of the reputations which belong to a particular severity. For instance, any reputation between 1 to 20 belongs to the severity 'High Risk'. Similary a reputation between 81 to 100 belong to the severity 'Trustworthy'. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyUrlReputationSeverityListResult]
    def list_policy_url_reputation_severities(opts = {})
      data, _status_code, _headers = list_policy_url_reputation_severities_with_http_info(opts)
      data
    end

    # Get the list of reputation severity
    # Gets the list of reputation severities. This will provide all the supported severities along with their ids, min and max reputaitons. The min_reputation and max_reputation specify the range of the reputations which belong to a particular severity. For instance, any reputation between 1 to 20 belongs to the severity &#39;High Risk&#39;. Similary a reputation between 81 to 100 belong to the severity &#39;Trustworthy&#39;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyUrlReputationSeverityListResult, Fixnum, Hash)>] PolicyUrlReputationSeverityListResult data, response status code and response headers
    def list_policy_url_reputation_severities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_reputation_severities ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_reputation_severities, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_reputation_severities, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/url-reputation-severities'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlReputationSeverityListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#list_policy_url_reputation_severities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of reputation severity
    # Gets the list of reputation severities. This will provide all the supported severities along with their ids, min and max reputaitons. The min_reputation and max_reputation specify the range of the reputations which belong to a particular severity. For instance, any reputation between 1 to 20 belongs to the severity 'High Risk'. Similary a reputation between 81 to 100 belong to the severity 'Trustworthy'. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyUrlReputationSeverityListResult]
    def list_policy_url_reputation_severities_0(opts = {})
      data, _status_code, _headers = list_policy_url_reputation_severities_0_with_http_info(opts)
      data
    end

    # Get the list of reputation severity
    # Gets the list of reputation severities. This will provide all the supported severities along with their ids, min and max reputaitons. The min_reputation and max_reputation specify the range of the reputations which belong to a particular severity. For instance, any reputation between 1 to 20 belongs to the severity &#39;High Risk&#39;. Similary a reputation between 81 to 100 belong to the severity &#39;Trustworthy&#39;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyUrlReputationSeverityListResult, Fixnum, Hash)>] PolicyUrlReputationSeverityListResult data, response status code and response headers
    def list_policy_url_reputation_severities_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_reputation_severities_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_reputation_severities_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.list_policy_url_reputation_severities_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/url-reputation-severities'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlReputationSeverityListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#list_policy_url_reputation_severities_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will enable or disable URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def patch_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      data, _status_code, _headers = patch_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts)
      data
    end

    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will enable or disable URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def patch_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'policy_url_categorization_config' is set
      if @api_client.config.client_side_validation && policy_url_categorization_config.nil?
        fail ArgumentError, "Missing the required parameter 'policy_url_categorization_config' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_url_categorization_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#patch_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will enable or disable URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def patch_policy_url_categorization_config_0(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      data, _status_code, _headers = patch_policy_url_categorization_config_0_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts)
      data
    end

    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will enable or disable URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def patch_policy_url_categorization_config_0_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config_0 ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config_0"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config_0"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config_0"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config_0"
      end
      # verify the required parameter 'policy_url_categorization_config' is set
      if @api_client.config.client_side_validation && policy_url_categorization_config.nil?
        fail ArgumentError, "Missing the required parameter 'policy_url_categorization_config' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.patch_policy_url_categorization_config_0"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_url_categorization_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#patch_policy_url_categorization_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will enable or disable URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def put_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      data, _status_code, _headers = put_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts)
      data
    end

    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will enable or disable URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def put_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'policy_url_categorization_config' is set
      if @api_client.config.client_side_validation && policy_url_categorization_config.nil?
        fail ArgumentError, "Missing the required parameter 'policy_url_categorization_config' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_url_categorization_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#put_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will enable or disable URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def put_policy_url_categorization_config_0(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      data, _status_code, _headers = put_policy_url_categorization_config_0_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts)
      data
    end

    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will enable or disable URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def put_policy_url_categorization_config_0_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config_0 ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config_0"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config_0"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config_0"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config_0"
      end
      # verify the required parameter 'policy_url_categorization_config' is set
      if @api_client.config.client_side_validation && policy_url_categorization_config.nil?
        fail ArgumentError, "Missing the required parameter 'policy_url_categorization_config' when calling PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi.put_policy_url_categorization_config_0"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_url_categorization_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallUrlCategorizationApi#put_policy_url_categorization_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
