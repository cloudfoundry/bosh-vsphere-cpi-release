=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won't get deleted. 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_policy_firewall_scheduler(firewall_scheduler_id, opts = {})
      delete_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts)
      nil
    end

    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won&#39;t get deleted. 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.delete_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.delete_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/global-infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi#delete_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won't get deleted. 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_policy_firewall_scheduler_0(firewall_scheduler_id, opts = {})
      delete_policy_firewall_scheduler_0_with_http_info(firewall_scheduler_id, opts)
      nil
    end

    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won&#39;t get deleted. 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_scheduler_0_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.delete_policy_firewall_scheduler_0 ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.delete_policy_firewall_scheduler_0"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi#delete_policy_firewall_scheduler_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def get_policy_firewall_scheduler(firewall_scheduler_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts)
      data
    end

    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.get_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.get_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/global-infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi#get_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def get_policy_firewall_scheduler_0(firewall_scheduler_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_scheduler_0_with_http_info(firewall_scheduler_id, opts)
      data
    end

    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def get_policy_firewall_scheduler_0_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.get_policy_firewall_scheduler_0 ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.get_policy_firewall_scheduler_0"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi#get_policy_firewall_scheduler_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSchedulerListResult]
    def list_policy_firewall_schedulers(opts = {})
      data, _status_code, _headers = list_policy_firewall_schedulers_with_http_info(opts)
      data
    end

    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSchedulerListResult, Fixnum, Hash)>] PolicyFirewallSchedulerListResult data, response status code and response headers
    def list_policy_firewall_schedulers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.list_policy_firewall_schedulers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.list_policy_firewall_schedulers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.list_policy_firewall_schedulers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-schedulers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSchedulerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi#list_policy_firewall_schedulers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSchedulerListResult]
    def list_policy_firewall_schedulers_0(opts = {})
      data, _status_code, _headers = list_policy_firewall_schedulers_0_with_http_info(opts)
      data
    end

    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSchedulerListResult, Fixnum, Hash)>] PolicyFirewallSchedulerListResult data, response status code and response headers
    def list_policy_firewall_schedulers_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.list_policy_firewall_schedulers_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.list_policy_firewall_schedulers_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.list_policy_firewall_schedulers_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/firewall-schedulers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSchedulerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi#list_policy_firewall_schedulers_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_scheduler(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      patch_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts)
      nil
    end

    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.patch_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.patch_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/global-infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi#patch_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_scheduler_0(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      patch_policy_firewall_scheduler_0_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts)
      nil
    end

    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_scheduler_0_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.patch_policy_firewall_scheduler_0 ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.patch_policy_firewall_scheduler_0"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.patch_policy_firewall_scheduler_0"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi#patch_policy_firewall_scheduler_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def update_policy_firewall_scheduler(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      data, _status_code, _headers = update_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts)
      data
    end

    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def update_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.update_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.update_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.update_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/global-infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi#update_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def update_policy_firewall_scheduler_0(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      data, _status_code, _headers = update_policy_firewall_scheduler_0_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts)
      data
    end

    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def update_policy_firewall_scheduler_0_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.update_policy_firewall_scheduler_0 ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.update_policy_firewall_scheduler_0"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi.update_policy_firewall_scheduler_0"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityEastWestSecurityDistributedFirewallSettingsFirewallSchedulerApi#update_policy_firewall_scheduler_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
