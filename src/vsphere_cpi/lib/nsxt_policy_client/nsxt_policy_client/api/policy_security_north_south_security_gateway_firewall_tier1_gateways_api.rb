=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier1_gateway_firewall(tier_1_id, opts = {})
      data, _status_code, _headers = view_tier1_gateway_firewall_with_http_info(tier_1_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier1_gateway_firewall_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi.view_tier1_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi.view_tier1_gateway_firewall"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi#view_tier1_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier1_gateway_firewall_0(tier_1_id, opts = {})
      data, _status_code, _headers = view_tier1_gateway_firewall_0_with_http_info(tier_1_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier1_gateway_firewall_0_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi.view_tier1_gateway_firewall_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi.view_tier1_gateway_firewall_0"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi#view_tier1_gateway_firewall_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier1_locale_services_gateway_firewall(tier_1_id, locale_services_id, opts = {})
      data, _status_code, _headers = view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi.view_tier1_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi.view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi.view_tier1_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi#view_tier1_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier1_locale_services_gateway_firewall_0(tier_1_id, locale_services_id, opts = {})
      data, _status_code, _headers = view_tier1_locale_services_gateway_firewall_0_with_http_info(tier_1_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier1_locale_services_gateway_firewall_0_with_http_info(tier_1_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi.view_tier1_locale_services_gateway_firewall_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi.view_tier1_locale_services_gateway_firewall_0"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi.view_tier1_locale_services_gateway_firewall_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityNorthSouthSecurityGatewayFirewallTier1GatewaysApi#view_tier1_locale_services_gateway_firewall_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
