=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicyOperationsIPFIXSwitchIPFIXCollectorsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or Replace IPFIX collector profile
    # Create or Replace IPFIX collector profile. IPFIX data will be sent to IPFIX collector. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [IPFIXL2CollectorProfile]
    def create_or_replace_ipfixl2_collector_profile(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      data, _status_code, _headers = create_or_replace_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts)
      data
    end

    # Create or Replace IPFIX collector profile
    # Create or Replace IPFIX collector profile. IPFIX data will be sent to IPFIX collector. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(IPFIXL2CollectorProfile, Fixnum, Hash)>] IPFIXL2CollectorProfile data, response status code and response headers
    def create_or_replace_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.create_or_replace_ipfixl2_collector_profile ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.create_or_replace_ipfixl2_collector_profile"
      end
      # verify the required parameter 'ipfixl2_collector_profile' is set
      if @api_client.config.client_side_validation && ipfixl2_collector_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixl2_collector_profile' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.create_or_replace_ipfixl2_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixl2_collector_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2CollectorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#create_or_replace_ipfixl2_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IPFIX collector profile
    # Create or Replace IPFIX collector profile. IPFIX data will be sent to IPFIX collector. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [IPFIXL2CollectorProfile]
    def create_or_replace_ipfixl2_collector_profile_0(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      data, _status_code, _headers = create_or_replace_ipfixl2_collector_profile_0_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts)
      data
    end

    # Create or Replace IPFIX collector profile
    # Create or Replace IPFIX collector profile. IPFIX data will be sent to IPFIX collector. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(IPFIXL2CollectorProfile, Fixnum, Hash)>] IPFIXL2CollectorProfile data, response status code and response headers
    def create_or_replace_ipfixl2_collector_profile_0_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.create_or_replace_ipfixl2_collector_profile_0 ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.create_or_replace_ipfixl2_collector_profile_0"
      end
      # verify the required parameter 'ipfixl2_collector_profile' is set
      if @api_client.config.client_side_validation && ipfixl2_collector_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixl2_collector_profile' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.create_or_replace_ipfixl2_collector_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixl2_collector_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2CollectorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#create_or_replace_ipfixl2_collector_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX Switch Collection Instance
    # API deletes IPFIX Switch Collection Instance.Flow forwarding to selected collector will be stopped. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ipfix_switch_collection_instance(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      delete_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts)
      nil
    end

    # Delete IPFIX Switch Collection Instance
    # API deletes IPFIX Switch Collection Instance.Flow forwarding to selected collector will be stopped. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.delete_ipfix_switch_collection_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.delete_ipfix_switch_collection_instance"
      end
      # verify the required parameter 'ipfix_switch_collection_instance_id' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.delete_ipfix_switch_collection_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'ipfix-switch-collection-instance-id' + '}', ipfix_switch_collection_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#delete_ipfix_switch_collection_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX Switch Collection Instance
    # API deletes IPFIX Switch Collection Instance.Flow forwarding to selected collector will be stopped. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ipfix_switch_collection_instance_0(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      delete_ipfix_switch_collection_instance_0_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts)
      nil
    end

    # Delete IPFIX Switch Collection Instance
    # API deletes IPFIX Switch Collection Instance.Flow forwarding to selected collector will be stopped. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfix_switch_collection_instance_0_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.delete_ipfix_switch_collection_instance_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.delete_ipfix_switch_collection_instance_0"
      end
      # verify the required parameter 'ipfix_switch_collection_instance_id' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.delete_ipfix_switch_collection_instance_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'ipfix-switch-collection-instance-id' + '}', ipfix_switch_collection_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#delete_ipfix_switch_collection_instance_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX Collector profile
    # API deletes IPFIX collector profile. Flow forwarding to collector will be stopped. 
    # @param ipfix_l2_collector_profile_id IPFIX collector Profile id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_ipfixl2_collector_profile(ipfix_l2_collector_profile_id, opts = {})
      delete_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, opts)
      nil
    end

    # Delete IPFIX Collector profile
    # API deletes IPFIX collector profile. Flow forwarding to collector will be stopped. 
    # @param ipfix_l2_collector_profile_id IPFIX collector Profile id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.delete_ipfixl2_collector_profile ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.delete_ipfixl2_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#delete_ipfixl2_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX Collector profile
    # API deletes IPFIX collector profile. Flow forwarding to collector will be stopped. 
    # @param ipfix_l2_collector_profile_id IPFIX collector Profile id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_ipfixl2_collector_profile_0(ipfix_l2_collector_profile_id, opts = {})
      delete_ipfixl2_collector_profile_0_with_http_info(ipfix_l2_collector_profile_id, opts)
      nil
    end

    # Delete IPFIX Collector profile
    # API deletes IPFIX collector profile. Flow forwarding to collector will be stopped. 
    # @param ipfix_l2_collector_profile_id IPFIX collector Profile id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfixl2_collector_profile_0_with_http_info(ipfix_l2_collector_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.delete_ipfixl2_collector_profile_0 ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.delete_ipfixl2_collector_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#delete_ipfixl2_collector_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX Switch Collection Instances
    # API provides list IPFIX Switch collection instances available on selected logical switch. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXSwitchCollectionInstanceListResult]
    def list_ipfix_switch_collection_instances(tier_1_id, opts = {})
      data, _status_code, _headers = list_ipfix_switch_collection_instances_with_http_info(tier_1_id, opts)
      data
    end

    # List IPFIX Switch Collection Instances
    # API provides list IPFIX Switch collection instances available on selected logical switch. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXSwitchCollectionInstanceListResult, Fixnum, Hash)>] IPFIXSwitchCollectionInstanceListResult data, response status code and response headers
    def list_ipfix_switch_collection_instances_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfix_switch_collection_instances ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfix_switch_collection_instances"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfix_switch_collection_instances, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfix_switch_collection_instances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXSwitchCollectionInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#list_ipfix_switch_collection_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX Switch Collection Instances
    # API provides list IPFIX Switch collection instances available on selected logical switch. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXSwitchCollectionInstanceListResult]
    def list_ipfix_switch_collection_instances_0(tier_1_id, opts = {})
      data, _status_code, _headers = list_ipfix_switch_collection_instances_0_with_http_info(tier_1_id, opts)
      data
    end

    # List IPFIX Switch Collection Instances
    # API provides list IPFIX Switch collection instances available on selected logical switch. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXSwitchCollectionInstanceListResult, Fixnum, Hash)>] IPFIXSwitchCollectionInstanceListResult data, response status code and response headers
    def list_ipfix_switch_collection_instances_0_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfix_switch_collection_instances_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfix_switch_collection_instances_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfix_switch_collection_instances_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfix_switch_collection_instances_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXSwitchCollectionInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#list_ipfix_switch_collection_instances_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX Collector profiles.
    # API will provide list of all IPFIX collector profiles and their details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXL2CollectorProfileListResult]
    def list_ipfixl2_collector_profiles(opts = {})
      data, _status_code, _headers = list_ipfixl2_collector_profiles_with_http_info(opts)
      data
    end

    # List IPFIX Collector profiles.
    # API will provide list of all IPFIX collector profiles and their details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXL2CollectorProfileListResult, Fixnum, Hash)>] IPFIXL2CollectorProfileListResult data, response status code and response headers
    def list_ipfixl2_collector_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfixl2_collector_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfixl2_collector_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfixl2_collector_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipfix-l2-collector-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2CollectorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#list_ipfixl2_collector_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX Collector profiles.
    # API will provide list of all IPFIX collector profiles and their details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXL2CollectorProfileListResult]
    def list_ipfixl2_collector_profiles_0(opts = {})
      data, _status_code, _headers = list_ipfixl2_collector_profiles_0_with_http_info(opts)
      data
    end

    # List IPFIX Collector profiles.
    # API will provide list of all IPFIX collector profiles and their details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXL2CollectorProfileListResult, Fixnum, Hash)>] IPFIXL2CollectorProfileListResult data, response status code and response headers
    def list_ipfixl2_collector_profiles_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfixl2_collector_profiles_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfixl2_collector_profiles_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.list_ipfixl2_collector_profiles_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/ipfix-l2-collector-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2CollectorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#list_ipfixl2_collector_profiles_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IPFIX switch collection instance
    # Create a new IPFIX switch collection instance if the IPFIX switch collection instance  with given id does not already exist. If the IPFIX switch collection instance with the given id already exists, patch with the existing IPFIX switch collection instance. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param ipfix_switch_collection_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ipfix_switch_collection_instance(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts = {})
      patch_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts)
      nil
    end

    # Patch IPFIX switch collection instance
    # Create a new IPFIX switch collection instance if the IPFIX switch collection instance  with given id does not already exist. If the IPFIX switch collection instance with the given id already exists, patch with the existing IPFIX switch collection instance. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param ipfix_switch_collection_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfix_switch_collection_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfix_switch_collection_instance"
      end
      # verify the required parameter 'ipfix_switch_collection_instance_id' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfix_switch_collection_instance"
      end
      # verify the required parameter 'ipfix_switch_collection_instance' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfix_switch_collection_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'ipfix-switch-collection-instance-id' + '}', ipfix_switch_collection_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfix_switch_collection_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#patch_ipfix_switch_collection_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IPFIX switch collection instance
    # Create a new IPFIX switch collection instance if the IPFIX switch collection instance  with given id does not already exist. If the IPFIX switch collection instance with the given id already exists, patch with the existing IPFIX switch collection instance. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param ipfix_switch_collection_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ipfix_switch_collection_instance_0(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts = {})
      patch_ipfix_switch_collection_instance_0_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts)
      nil
    end

    # Patch IPFIX switch collection instance
    # Create a new IPFIX switch collection instance if the IPFIX switch collection instance  with given id does not already exist. If the IPFIX switch collection instance with the given id already exists, patch with the existing IPFIX switch collection instance. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param ipfix_switch_collection_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfix_switch_collection_instance_0_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfix_switch_collection_instance_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfix_switch_collection_instance_0"
      end
      # verify the required parameter 'ipfix_switch_collection_instance_id' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfix_switch_collection_instance_0"
      end
      # verify the required parameter 'ipfix_switch_collection_instance' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfix_switch_collection_instance_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'ipfix-switch-collection-instance-id' + '}', ipfix_switch_collection_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfix_switch_collection_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#patch_ipfix_switch_collection_instance_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IPFIX collector profile
    # Create a new IPFIX collector profile if the IPFIX collector profile with given id does not already exist. If the IPFIX collector profile with the given id already exists, patch with the existing IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_ipfixl2_collector_profile(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      patch_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts)
      nil
    end

    # Patch IPFIX collector profile
    # Create a new IPFIX collector profile if the IPFIX collector profile with given id does not already exist. If the IPFIX collector profile with the given id already exists, patch with the existing IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfixl2_collector_profile ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfixl2_collector_profile"
      end
      # verify the required parameter 'ipfixl2_collector_profile' is set
      if @api_client.config.client_side_validation && ipfixl2_collector_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixl2_collector_profile' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfixl2_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixl2_collector_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#patch_ipfixl2_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IPFIX collector profile
    # Create a new IPFIX collector profile if the IPFIX collector profile with given id does not already exist. If the IPFIX collector profile with the given id already exists, patch with the existing IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_ipfixl2_collector_profile_0(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      patch_ipfixl2_collector_profile_0_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts)
      nil
    end

    # Patch IPFIX collector profile
    # Create a new IPFIX collector profile if the IPFIX collector profile with given id does not already exist. If the IPFIX collector profile with the given id already exists, patch with the existing IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfixl2_collector_profile_0_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfixl2_collector_profile_0 ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfixl2_collector_profile_0"
      end
      # verify the required parameter 'ipfixl2_collector_profile' is set
      if @api_client.config.client_side_validation && ipfixl2_collector_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixl2_collector_profile' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.patch_ipfixl2_collector_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixl2_collector_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#patch_ipfixl2_collector_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX Switch Collection Instance
    # API will return details of IPFIX switch collection. If instance does not exist, it will return 404. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX switch collection id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXSwitchCollectionInstance]
    def read_ipfix_switch_collection_instance(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      data, _status_code, _headers = read_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts)
      data
    end

    # Get IPFIX Switch Collection Instance
    # API will return details of IPFIX switch collection. If instance does not exist, it will return 404. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX switch collection id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXSwitchCollectionInstance, Fixnum, Hash)>] IPFIXSwitchCollectionInstance data, response status code and response headers
    def read_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.read_ipfix_switch_collection_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.read_ipfix_switch_collection_instance"
      end
      # verify the required parameter 'ipfix_switch_collection_instance_id' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.read_ipfix_switch_collection_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'ipfix-switch-collection-instance-id' + '}', ipfix_switch_collection_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXSwitchCollectionInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#read_ipfix_switch_collection_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX Switch Collection Instance
    # API will return details of IPFIX switch collection. If instance does not exist, it will return 404. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX switch collection id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXSwitchCollectionInstance]
    def read_ipfix_switch_collection_instance_0(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      data, _status_code, _headers = read_ipfix_switch_collection_instance_0_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts)
      data
    end

    # Get IPFIX Switch Collection Instance
    # API will return details of IPFIX switch collection. If instance does not exist, it will return 404. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/ipfix-l2-profiles 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX switch collection id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXSwitchCollectionInstance, Fixnum, Hash)>] IPFIXSwitchCollectionInstance data, response status code and response headers
    def read_ipfix_switch_collection_instance_0_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.read_ipfix_switch_collection_instance_0 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.read_ipfix_switch_collection_instance_0"
      end
      # verify the required parameter 'ipfix_switch_collection_instance_id' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.read_ipfix_switch_collection_instance_0"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'ipfix-switch-collection-instance-id' + '}', ipfix_switch_collection_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXSwitchCollectionInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#read_ipfix_switch_collection_instance_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX Collector profile
    # API will return details of IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXL2CollectorProfile]
    def read_ipfixl2_collector_profile(ipfix_l2_collector_profile_id, opts = {})
      data, _status_code, _headers = read_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, opts)
      data
    end

    # Get IPFIX Collector profile
    # API will return details of IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXL2CollectorProfile, Fixnum, Hash)>] IPFIXL2CollectorProfile data, response status code and response headers
    def read_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.read_ipfixl2_collector_profile ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.read_ipfixl2_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2CollectorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#read_ipfixl2_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX Collector profile
    # API will return details of IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXL2CollectorProfile]
    def read_ipfixl2_collector_profile_0(ipfix_l2_collector_profile_id, opts = {})
      data, _status_code, _headers = read_ipfixl2_collector_profile_0_with_http_info(ipfix_l2_collector_profile_id, opts)
      data
    end

    # Get IPFIX Collector profile
    # API will return details of IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXL2CollectorProfile, Fixnum, Hash)>] IPFIXL2CollectorProfile data, response status code and response headers
    def read_ipfixl2_collector_profile_0_with_http_info(ipfix_l2_collector_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.read_ipfixl2_collector_profile_0 ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling PolicyOperationsIPFIXSwitchIPFIXCollectorsApi.read_ipfixl2_collector_profile_0"
      end
      # resource path
      local_var_path = '/global-infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2CollectorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsIPFIXSwitchIPFIXCollectorsApi#read_ipfixl2_collector_profile_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
