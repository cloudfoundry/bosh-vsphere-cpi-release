=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicyInfraFederationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or fully replace Global Manager Config
    # Create or fully replace a Global Manager Config. Revision is optional for creation and required for update. 
    # @param global_manager_config 
    # @param [Hash] opts the optional parameters
    # @return [GlobalManagerConfig]
    def create_or_update_global_manager_config(global_manager_config, opts = {})
      data, _status_code, _headers = create_or_update_global_manager_config_with_http_info(global_manager_config, opts)
      data
    end

    # Create or fully replace Global Manager Config
    # Create or fully replace a Global Manager Config. Revision is optional for creation and required for update. 
    # @param global_manager_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalManagerConfig, Fixnum, Hash)>] GlobalManagerConfig data, response status code and response headers
    def create_or_update_global_manager_config_with_http_info(global_manager_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraFederationApi.create_or_update_global_manager_config ...'
      end
      # verify the required parameter 'global_manager_config' is set
      if @api_client.config.client_side_validation && global_manager_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_config' when calling PolicyInfraFederationApi.create_or_update_global_manager_config"
      end
      # resource path
      local_var_path = '/infra/global-manager-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_manager_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalManagerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraFederationApi#create_or_update_global_manager_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace Global Manager Config
    # Create or fully replace a Global Manager Config. Revision is optional for creation and required for update. 
    # @param global_manager_config 
    # @param [Hash] opts the optional parameters
    # @return [GlobalManagerConfig]
    def create_or_update_global_manager_config_0(global_manager_config, opts = {})
      data, _status_code, _headers = create_or_update_global_manager_config_0_with_http_info(global_manager_config, opts)
      data
    end

    # Create or fully replace Global Manager Config
    # Create or fully replace a Global Manager Config. Revision is optional for creation and required for update. 
    # @param global_manager_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalManagerConfig, Fixnum, Hash)>] GlobalManagerConfig data, response status code and response headers
    def create_or_update_global_manager_config_0_with_http_info(global_manager_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraFederationApi.create_or_update_global_manager_config_0 ...'
      end
      # verify the required parameter 'global_manager_config' is set
      if @api_client.config.client_side_validation && global_manager_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_config' when calling PolicyInfraFederationApi.create_or_update_global_manager_config_0"
      end
      # resource path
      local_var_path = '/global-infra/global-manager-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_manager_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalManagerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraFederationApi#create_or_update_global_manager_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch Global Manager Config
    # Create or patch a Global Manager Config 
    # @param global_manager_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_global_manager_config(global_manager_config, opts = {})
      patch_global_manager_config_with_http_info(global_manager_config, opts)
      nil
    end

    # Create or patch Global Manager Config
    # Create or patch a Global Manager Config 
    # @param global_manager_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_global_manager_config_with_http_info(global_manager_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraFederationApi.patch_global_manager_config ...'
      end
      # verify the required parameter 'global_manager_config' is set
      if @api_client.config.client_side_validation && global_manager_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_config' when calling PolicyInfraFederationApi.patch_global_manager_config"
      end
      # resource path
      local_var_path = '/infra/global-manager-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_manager_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraFederationApi#patch_global_manager_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch Global Manager Config
    # Create or patch a Global Manager Config 
    # @param global_manager_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_global_manager_config_0(global_manager_config, opts = {})
      patch_global_manager_config_0_with_http_info(global_manager_config, opts)
      nil
    end

    # Create or patch Global Manager Config
    # Create or patch a Global Manager Config 
    # @param global_manager_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_global_manager_config_0_with_http_info(global_manager_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraFederationApi.patch_global_manager_config_0 ...'
      end
      # verify the required parameter 'global_manager_config' is set
      if @api_client.config.client_side_validation && global_manager_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_config' when calling PolicyInfraFederationApi.patch_global_manager_config_0"
      end
      # resource path
      local_var_path = '/global-infra/global-manager-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_manager_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraFederationApi#patch_global_manager_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Global Manager config along with sensitive data
    # Read a Global Manager config along with sensitive data. For example - rtep_config.ibgp_password 
    # @param [Hash] opts the optional parameters
    # @return [GlobalManagerConfig]
    def read_global_manager_config_with_sensitive_data_show_sensitive_data(opts = {})
      data, _status_code, _headers = read_global_manager_config_with_sensitive_data_show_sensitive_data_with_http_info(opts)
      data
    end

    # Read Global Manager config along with sensitive data
    # Read a Global Manager config along with sensitive data. For example - rtep_config.ibgp_password 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalManagerConfig, Fixnum, Hash)>] GlobalManagerConfig data, response status code and response headers
    def read_global_manager_config_with_sensitive_data_show_sensitive_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraFederationApi.read_global_manager_config_with_sensitive_data_show_sensitive_data ...'
      end
      # resource path
      local_var_path = '/infra/global-manager-config?action=show-sensitive-data'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalManagerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraFederationApi#read_global_manager_config_with_sensitive_data_show_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Global Manager config along with sensitive data
    # Read a Global Manager config along with sensitive data. For example - rtep_config.ibgp_password 
    # @param [Hash] opts the optional parameters
    # @return [GlobalManagerConfig]
    def read_global_manager_config_with_sensitive_data_show_sensitive_data_0(opts = {})
      data, _status_code, _headers = read_global_manager_config_with_sensitive_data_show_sensitive_data_0_with_http_info(opts)
      data
    end

    # Read Global Manager config along with sensitive data
    # Read a Global Manager config along with sensitive data. For example - rtep_config.ibgp_password 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalManagerConfig, Fixnum, Hash)>] GlobalManagerConfig data, response status code and response headers
    def read_global_manager_config_with_sensitive_data_show_sensitive_data_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraFederationApi.read_global_manager_config_with_sensitive_data_show_sensitive_data_0 ...'
      end
      # resource path
      local_var_path = '/global-infra/global-manager-config?action=show-sensitive-data'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalManagerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraFederationApi#read_global_manager_config_with_sensitive_data_show_sensitive_data_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
