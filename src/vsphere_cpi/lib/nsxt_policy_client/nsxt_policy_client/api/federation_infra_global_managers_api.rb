=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class FederationInfraGlobalManagersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or fully replace a Global Manager under infra
    # Create or fully replace Global Manager under Infra. Revision is optional for creation and required for update. Global Manager id 'self' is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param global_manager 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Indciates force switchover to Active
    # @return [GlobalManager]
    def create_or_update_infra_global_manager(global_manager_id, global_manager, opts = {})
      data, _status_code, _headers = create_or_update_infra_global_manager_with_http_info(global_manager_id, global_manager, opts)
      data
    end

    # Create or fully replace a Global Manager under infra
    # Create or fully replace Global Manager under Infra. Revision is optional for creation and required for update. Global Manager id &#39;self&#39; is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param global_manager 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Indciates force switchover to Active
    # @return [Array<(GlobalManager, Fixnum, Hash)>] GlobalManager data, response status code and response headers
    def create_or_update_infra_global_manager_with_http_info(global_manager_id, global_manager, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.create_or_update_infra_global_manager ...'
      end
      # verify the required parameter 'global_manager_id' is set
      if @api_client.config.client_side_validation && global_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_id' when calling FederationInfraGlobalManagersApi.create_or_update_infra_global_manager"
      end
      # verify the required parameter 'global_manager' is set
      if @api_client.config.client_side_validation && global_manager.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager' when calling FederationInfraGlobalManagersApi.create_or_update_infra_global_manager"
      end
      # resource path
      local_var_path = '/infra/global-managers/{global-manager-id}'.sub('{' + 'global-manager-id' + '}', global_manager_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_manager)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalManager')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#create_or_update_infra_global_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace a Global Manager under infra
    # Create or fully replace Global Manager under Infra. Revision is optional for creation and required for update. Global Manager id 'self' is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param global_manager 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Indciates force switchover to Active
    # @return [GlobalManager]
    def create_or_update_infra_global_manager_0(global_manager_id, global_manager, opts = {})
      data, _status_code, _headers = create_or_update_infra_global_manager_0_with_http_info(global_manager_id, global_manager, opts)
      data
    end

    # Create or fully replace a Global Manager under infra
    # Create or fully replace Global Manager under Infra. Revision is optional for creation and required for update. Global Manager id &#39;self&#39; is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param global_manager 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Indciates force switchover to Active
    # @return [Array<(GlobalManager, Fixnum, Hash)>] GlobalManager data, response status code and response headers
    def create_or_update_infra_global_manager_0_with_http_info(global_manager_id, global_manager, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.create_or_update_infra_global_manager_0 ...'
      end
      # verify the required parameter 'global_manager_id' is set
      if @api_client.config.client_side_validation && global_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_id' when calling FederationInfraGlobalManagersApi.create_or_update_infra_global_manager_0"
      end
      # verify the required parameter 'global_manager' is set
      if @api_client.config.client_side_validation && global_manager.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager' when calling FederationInfraGlobalManagersApi.create_or_update_infra_global_manager_0"
      end
      # resource path
      local_var_path = '/global-infra/global-managers/{global-manager-id}'.sub('{' + 'global-manager-id' + '}', global_manager_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_manager)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalManager')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#create_or_update_infra_global_manager_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Global Manager under Infra
    # Delete a particular global manager under Infra. Global Manager id 'self' is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_global_manager(global_manager_id, opts = {})
      delete_infra_global_manager_with_http_info(global_manager_id, opts)
      nil
    end

    # Delete a Global Manager under Infra
    # Delete a particular global manager under Infra. Global Manager id &#39;self&#39; is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_global_manager_with_http_info(global_manager_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.delete_infra_global_manager ...'
      end
      # verify the required parameter 'global_manager_id' is set
      if @api_client.config.client_side_validation && global_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_id' when calling FederationInfraGlobalManagersApi.delete_infra_global_manager"
      end
      # resource path
      local_var_path = '/infra/global-managers/{global-manager-id}'.sub('{' + 'global-manager-id' + '}', global_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#delete_infra_global_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Global Manager under Infra
    # Delete a particular global manager under Infra. Global Manager id 'self' is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_global_manager_0(global_manager_id, opts = {})
      delete_infra_global_manager_0_with_http_info(global_manager_id, opts)
      nil
    end

    # Delete a Global Manager under Infra
    # Delete a particular global manager under Infra. Global Manager id &#39;self&#39; is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_global_manager_0_with_http_info(global_manager_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.delete_infra_global_manager_0 ...'
      end
      # verify the required parameter 'global_manager_id' is set
      if @api_client.config.client_side_validation && global_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_id' when calling FederationInfraGlobalManagersApi.delete_infra_global_manager_0"
      end
      # resource path
      local_var_path = '/global-infra/global-managers/{global-manager-id}'.sub('{' + 'global-manager-id' + '}', global_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#delete_infra_global_manager_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Upgrade summary
    # API will return high level summary of Upgrade across various sites. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :current_version Filter on site current_version
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FederationUpgradeSummaryListResult]
    def get_federation_upgrade_summary(opts = {})
      data, _status_code, _headers = get_federation_upgrade_summary_with_http_info(opts)
      data
    end

    # Get Upgrade summary
    # API will return high level summary of Upgrade across various sites. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :current_version Filter on site current_version
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FederationUpgradeSummaryListResult, Fixnum, Hash)>] FederationUpgradeSummaryListResult data, response status code and response headers
    def get_federation_upgrade_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.get_federation_upgrade_summary ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FederationInfraGlobalManagersApi.get_federation_upgrade_summary, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FederationInfraGlobalManagersApi.get_federation_upgrade_summary, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/upgrade-summary'

      # query parameters
      query_params = {}
      query_params[:'current_version'] = opts[:'current_version'] if !opts[:'current_version'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FederationUpgradeSummaryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#get_federation_upgrade_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Upgrade summary
    # API will return high level summary of Upgrade across various sites. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :current_version Filter on site current_version
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FederationUpgradeSummaryListResult]
    def get_federation_upgrade_summary_0(opts = {})
      data, _status_code, _headers = get_federation_upgrade_summary_0_with_http_info(opts)
      data
    end

    # Get Upgrade summary
    # API will return high level summary of Upgrade across various sites. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :current_version Filter on site current_version
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FederationUpgradeSummaryListResult, Fixnum, Hash)>] FederationUpgradeSummaryListResult data, response status code and response headers
    def get_federation_upgrade_summary_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.get_federation_upgrade_summary_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FederationInfraGlobalManagersApi.get_federation_upgrade_summary_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FederationInfraGlobalManagersApi.get_federation_upgrade_summary_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/upgrade-summary'

      # query parameters
      query_params = {}
      query_params[:'current_version'] = opts[:'current_version'] if !opts[:'current_version'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FederationUpgradeSummaryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#get_federation_upgrade_summary_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global Managers
    # List Global Managers under Infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalManagerListResult]
    def list_infra_global_managers(opts = {})
      data, _status_code, _headers = list_infra_global_managers_with_http_info(opts)
      data
    end

    # List Global Managers
    # List Global Managers under Infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalManagerListResult, Fixnum, Hash)>] GlobalManagerListResult data, response status code and response headers
    def list_infra_global_managers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.list_infra_global_managers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FederationInfraGlobalManagersApi.list_infra_global_managers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FederationInfraGlobalManagersApi.list_infra_global_managers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/global-managers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalManagerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#list_infra_global_managers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global Managers
    # List Global Managers under Infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalManagerListResult]
    def list_infra_global_managers_0(opts = {})
      data, _status_code, _headers = list_infra_global_managers_0_with_http_info(opts)
      data
    end

    # List Global Managers
    # List Global Managers under Infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalManagerListResult, Fixnum, Hash)>] GlobalManagerListResult data, response status code and response headers
    def list_infra_global_managers_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.list_infra_global_managers_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FederationInfraGlobalManagersApi.list_infra_global_managers_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FederationInfraGlobalManagersApi.list_infra_global_managers_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/global-managers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalManagerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#list_infra_global_managers_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a Global Manager
    # Create or patch a Global Manager under Infra. Global Manager id 'self' is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param global_manager 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Indciates force switchover to Active
    # @return [nil]
    def patch_infra_global_manager(global_manager_id, global_manager, opts = {})
      patch_infra_global_manager_with_http_info(global_manager_id, global_manager, opts)
      nil
    end

    # Create or patch a Global Manager
    # Create or patch a Global Manager under Infra. Global Manager id &#39;self&#39; is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param global_manager 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Indciates force switchover to Active
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_global_manager_with_http_info(global_manager_id, global_manager, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.patch_infra_global_manager ...'
      end
      # verify the required parameter 'global_manager_id' is set
      if @api_client.config.client_side_validation && global_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_id' when calling FederationInfraGlobalManagersApi.patch_infra_global_manager"
      end
      # verify the required parameter 'global_manager' is set
      if @api_client.config.client_side_validation && global_manager.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager' when calling FederationInfraGlobalManagersApi.patch_infra_global_manager"
      end
      # resource path
      local_var_path = '/infra/global-managers/{global-manager-id}'.sub('{' + 'global-manager-id' + '}', global_manager_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_manager)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#patch_infra_global_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a Global Manager
    # Create or patch a Global Manager under Infra. Global Manager id 'self' is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param global_manager 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Indciates force switchover to Active
    # @return [nil]
    def patch_infra_global_manager_0(global_manager_id, global_manager, opts = {})
      patch_infra_global_manager_0_with_http_info(global_manager_id, global_manager, opts)
      nil
    end

    # Create or patch a Global Manager
    # Create or patch a Global Manager under Infra. Global Manager id &#39;self&#39; is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param global_manager 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Indciates force switchover to Active
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_global_manager_0_with_http_info(global_manager_id, global_manager, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.patch_infra_global_manager_0 ...'
      end
      # verify the required parameter 'global_manager_id' is set
      if @api_client.config.client_side_validation && global_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_id' when calling FederationInfraGlobalManagersApi.patch_infra_global_manager_0"
      end
      # verify the required parameter 'global_manager' is set
      if @api_client.config.client_side_validation && global_manager.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager' when calling FederationInfraGlobalManagersApi.patch_infra_global_manager_0"
      end
      # resource path
      local_var_path = '/global-infra/global-managers/{global-manager-id}'.sub('{' + 'global-manager-id' + '}', global_manager_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_manager)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#patch_infra_global_manager_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Global Manager
    # Retrieve information about a particular configured global manager. Global Manager id 'self' is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [GlobalManager]
    def read_infra_global_manager(global_manager_id, opts = {})
      data, _status_code, _headers = read_infra_global_manager_with_http_info(global_manager_id, opts)
      data
    end

    # Read a Global Manager
    # Retrieve information about a particular configured global manager. Global Manager id &#39;self&#39; is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalManager, Fixnum, Hash)>] GlobalManager data, response status code and response headers
    def read_infra_global_manager_with_http_info(global_manager_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.read_infra_global_manager ...'
      end
      # verify the required parameter 'global_manager_id' is set
      if @api_client.config.client_side_validation && global_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_id' when calling FederationInfraGlobalManagersApi.read_infra_global_manager"
      end
      # resource path
      local_var_path = '/infra/global-managers/{global-manager-id}'.sub('{' + 'global-manager-id' + '}', global_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalManager')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#read_infra_global_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Global Manager
    # Retrieve information about a particular configured global manager. Global Manager id 'self' is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [GlobalManager]
    def read_infra_global_manager_0(global_manager_id, opts = {})
      data, _status_code, _headers = read_infra_global_manager_0_with_http_info(global_manager_id, opts)
      data
    end

    # Read a Global Manager
    # Retrieve information about a particular configured global manager. Global Manager id &#39;self&#39; is reserved and can be used for referring to local logged in Global Manager. Example - /infra/global-managers/self 
    # @param global_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalManager, Fixnum, Hash)>] GlobalManager data, response status code and response headers
    def read_infra_global_manager_0_with_http_info(global_manager_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraGlobalManagersApi.read_infra_global_manager_0 ...'
      end
      # verify the required parameter 'global_manager_id' is set
      if @api_client.config.client_side_validation && global_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'global_manager_id' when calling FederationInfraGlobalManagersApi.read_infra_global_manager_0"
      end
      # resource path
      local_var_path = '/global-infra/global-managers/{global-manager-id}'.sub('{' + 'global-manager-id' + '}', global_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalManager')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraGlobalManagersApi#read_infra_global_manager_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
