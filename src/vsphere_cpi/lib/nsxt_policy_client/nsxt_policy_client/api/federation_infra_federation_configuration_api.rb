=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class FederationInfraFederationConfigurationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List overridden resources
    # List overridden resources
    # @param [Hash] opts the optional parameters
    # @option opts [String] :intent_path Global resource path
    # @option opts [String] :site_path Site path
    # @return [OverriddenResourceListResult]
    def list_overridden_resources(opts = {})
      data, _status_code, _headers = list_overridden_resources_with_http_info(opts)
      data
    end

    # List overridden resources
    # List overridden resources
    # @param [Hash] opts the optional parameters
    # @option opts [String] :intent_path Global resource path
    # @option opts [String] :site_path Site path
    # @return [Array<(OverriddenResourceListResult, Fixnum, Hash)>] OverriddenResourceListResult data, response status code and response headers
    def list_overridden_resources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraFederationConfigurationApi.list_overridden_resources ...'
      end
      # resource path
      local_var_path = '/global-infra/overridden-resources'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = opts[:'intent_path'] if !opts[:'intent_path'].nil?
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OverriddenResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraFederationConfigurationApi#list_overridden_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List overridden resources
    # List overridden resources
    # @param [Hash] opts the optional parameters
    # @option opts [String] :intent_path Global resource path
    # @option opts [String] :site_path Site path
    # @return [OverriddenResourceListResult]
    def list_overridden_resources_0(opts = {})
      data, _status_code, _headers = list_overridden_resources_0_with_http_info(opts)
      data
    end

    # List overridden resources
    # List overridden resources
    # @param [Hash] opts the optional parameters
    # @option opts [String] :intent_path Global resource path
    # @option opts [String] :site_path Site path
    # @return [Array<(OverriddenResourceListResult, Fixnum, Hash)>] OverriddenResourceListResult data, response status code and response headers
    def list_overridden_resources_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraFederationConfigurationApi.list_overridden_resources_0 ...'
      end
      # resource path
      local_var_path = '/infra/overridden-resources'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = opts[:'intent_path'] if !opts[:'intent_path'].nil?
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OverriddenResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraFederationConfigurationApi#list_overridden_resources_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read federation config
    # Read a federation config from Global Manager.
    # @param [Hash] opts the optional parameters
    # @return [FederationConfig]
    def read_federation_config(opts = {})
      data, _status_code, _headers = read_federation_config_with_http_info(opts)
      data
    end

    # Read federation config
    # Read a federation config from Global Manager.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FederationConfig, Fixnum, Hash)>] FederationConfig data, response status code and response headers
    def read_federation_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraFederationConfigurationApi.read_federation_config ...'
      end
      # resource path
      local_var_path = '/global-infra/federation-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FederationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraFederationConfigurationApi#read_federation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read federation config
    # Read a federation config from Global Manager.
    # @param [Hash] opts the optional parameters
    # @return [FederationConfig]
    def read_federation_config_0(opts = {})
      data, _status_code, _headers = read_federation_config_0_with_http_info(opts)
      data
    end

    # Read federation config
    # Read a federation config from Global Manager.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FederationConfig, Fixnum, Hash)>] FederationConfig data, response status code and response headers
    def read_federation_config_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FederationInfraFederationConfigurationApi.read_federation_config_0 ...'
      end
      # resource path
      local_var_path = '/infra/federation-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FederationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FederationInfraFederationConfigurationApi#read_federation_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
