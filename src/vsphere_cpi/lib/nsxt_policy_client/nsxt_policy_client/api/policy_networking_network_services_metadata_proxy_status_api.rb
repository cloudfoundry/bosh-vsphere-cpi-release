=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicyNetworkingNetworkServicesMetadataProxyStatusApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [PolicyMetadataProxyStatistics]
    def read_metadata_proxy_statistics(metadata_proxy_id, opts = {})
      data, _status_code, _headers = read_metadata_proxy_statistics_with_http_info(metadata_proxy_id, opts)
      data
    end

    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyMetadataProxyStatistics, Fixnum, Hash)>] PolicyMetadataProxyStatistics data, response status code and response headers
    def read_metadata_proxy_statistics_with_http_info(metadata_proxy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesMetadataProxyStatusApi.read_metadata_proxy_statistics ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling PolicyNetworkingNetworkServicesMetadataProxyStatusApi.read_metadata_proxy_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/metadata-proxies/{metadata-proxy-id}/statistics'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyMetadataProxyStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesMetadataProxyStatusApi#read_metadata_proxy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [PolicyMetadataProxyStatistics]
    def read_metadata_proxy_statistics_0(metadata_proxy_id, opts = {})
      data, _status_code, _headers = read_metadata_proxy_statistics_0_with_http_info(metadata_proxy_id, opts)
      data
    end

    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyMetadataProxyStatistics, Fixnum, Hash)>] PolicyMetadataProxyStatistics data, response status code and response headers
    def read_metadata_proxy_statistics_0_with_http_info(metadata_proxy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesMetadataProxyStatusApi.read_metadata_proxy_statistics_0 ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling PolicyNetworkingNetworkServicesMetadataProxyStatusApi.read_metadata_proxy_statistics_0"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/metadata-proxies/{metadata-proxy-id}/statistics'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyMetadataProxyStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesMetadataProxyStatusApi#read_metadata_proxy_statistics_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [PolicyMetadataProxyStatus]
    def read_metadata_proxy_status(metadata_proxy_id, opts = {})
      data, _status_code, _headers = read_metadata_proxy_status_with_http_info(metadata_proxy_id, opts)
      data
    end

    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyMetadataProxyStatus, Fixnum, Hash)>] PolicyMetadataProxyStatus data, response status code and response headers
    def read_metadata_proxy_status_with_http_info(metadata_proxy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesMetadataProxyStatusApi.read_metadata_proxy_status ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling PolicyNetworkingNetworkServicesMetadataProxyStatusApi.read_metadata_proxy_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/metadata-proxies/{metadata-proxy-id}/status'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyMetadataProxyStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesMetadataProxyStatusApi#read_metadata_proxy_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [PolicyMetadataProxyStatus]
    def read_metadata_proxy_status_0(metadata_proxy_id, opts = {})
      data, _status_code, _headers = read_metadata_proxy_status_0_with_http_info(metadata_proxy_id, opts)
      data
    end

    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyMetadataProxyStatus, Fixnum, Hash)>] PolicyMetadataProxyStatus data, response status code and response headers
    def read_metadata_proxy_status_0_with_http_info(metadata_proxy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyNetworkingNetworkServicesMetadataProxyStatusApi.read_metadata_proxy_status_0 ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling PolicyNetworkingNetworkServicesMetadataProxyStatusApi.read_metadata_proxy_status_0"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/metadata-proxies/{metadata-proxy-id}/status'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyMetadataProxyStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyNetworkingNetworkServicesMetadataProxyStatusApi#read_metadata_proxy_status_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
