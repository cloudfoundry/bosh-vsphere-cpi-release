=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module NSXTPolicy
  class PolicySecurityServiceInsertionRedirectionPoliciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [RedirectionPolicy]
    def create_or_update_redirection_policy(domain_id, redirection_policy_id, redirection_policy, opts = {})
      data, _status_code, _headers = create_or_update_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts)
      data
    end

    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionPolicy, Fixnum, Hash)>] RedirectionPolicy data, response status code and response headers
    def create_or_update_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_policy"
      end
      # verify the required parameter 'redirection_policy' is set
      if @api_client.config.client_side_validation && redirection_policy.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#create_or_update_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [RedirectionPolicy]
    def create_or_update_redirection_policy_0(domain_id, redirection_policy_id, redirection_policy, opts = {})
      data, _status_code, _headers = create_or_update_redirection_policy_0_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts)
      data
    end

    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionPolicy, Fixnum, Hash)>] RedirectionPolicy data, response status code and response headers
    def create_or_update_redirection_policy_0_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_policy_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_policy_0"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_policy_0"
      end
      # verify the required parameter 'redirection_policy' is set
      if @api_client.config.client_side_validation && redirection_policy.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_policy_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#create_or_update_redirection_policy_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy,prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/<domain-id>/redirection-policies/<red-policy-id> 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [RedirectionRule]
    def create_or_update_redirection_rule(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      data, _status_code, _headers = create_or_update_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts)
      data
    end

    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy,prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/redirection-policies/&lt;red-policy-id&gt; 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionRule, Fixnum, Hash)>] RedirectionRule data, response status code and response headers
    def create_or_update_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_rule"
      end
      # verify the required parameter 'redirection_rule' is set
      if @api_client.config.client_side_validation && redirection_rule.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_rule' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#create_or_update_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy,prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/<domain-id>/redirection-policies/<red-policy-id> 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [RedirectionRule]
    def create_or_update_redirection_rule_0(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      data, _status_code, _headers = create_or_update_redirection_rule_0_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts)
      data
    end

    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy,prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/redirection-policies/&lt;red-policy-id&gt; 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionRule, Fixnum, Hash)>] RedirectionRule data, response status code and response headers
    def create_or_update_redirection_rule_0_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_rule_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_rule_0"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_rule_0"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_rule_0"
      end
      # verify the required parameter 'redirection_rule' is set
      if @api_client.config.client_side_validation && redirection_rule.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_rule' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.create_or_update_redirection_rule_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#create_or_update_redirection_rule_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete redirection policy
    # Delete redirection policy.
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_redirection_policy(domain_id, redirection_policy_id, opts = {})
      delete_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts)
      nil
    end

    # Delete redirection policy
    # Delete redirection policy.
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#delete_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete redirection policy
    # Delete redirection policy.
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_redirection_policy_0(domain_id, redirection_policy_id, opts = {})
      delete_redirection_policy_0_with_http_info(domain_id, redirection_policy_id, opts)
      nil
    end

    # Delete redirection policy
    # Delete redirection policy.
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_redirection_policy_0_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_policy_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_policy_0"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_policy_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#delete_redirection_policy_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete RedirectionRule
    # Delete RedirectionRule
    # @param domain_id Domain ID
    # @param redirection_policy_id Redirection Map ID
    # @param rule_id RedirectionRule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_redirection_rule(domain_id, redirection_policy_id, rule_id, opts = {})
      delete_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts)
      nil
    end

    # Delete RedirectionRule
    # Delete RedirectionRule
    # @param domain_id Domain ID
    # @param redirection_policy_id Redirection Map ID
    # @param rule_id RedirectionRule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#delete_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete RedirectionRule
    # Delete RedirectionRule
    # @param domain_id Domain ID
    # @param redirection_policy_id Redirection Map ID
    # @param rule_id RedirectionRule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_redirection_rule_0(domain_id, redirection_policy_id, rule_id, opts = {})
      delete_redirection_rule_0_with_http_info(domain_id, redirection_policy_id, rule_id, opts)
      nil
    end

    # Delete RedirectionRule
    # Delete RedirectionRule
    # @param domain_id Domain ID
    # @param redirection_policy_id Redirection Map ID
    # @param rule_id RedirectionRule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_redirection_rule_0_with_http_info(domain_id, redirection_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_rule_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_rule_0"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_rule_0"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.delete_redirection_rule_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#delete_redirection_rule_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List redirection policys for a domain
    # List redirection policys for a domain
    # @param domain_id Domain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RedirectionPolicyListResult]
    def list_redirection_policies(domain_id, opts = {})
      data, _status_code, _headers = list_redirection_policies_with_http_info(domain_id, opts)
      data
    end

    # List redirection policys for a domain
    # List redirection policys for a domain
    # @param domain_id Domain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RedirectionPolicyListResult, Fixnum, Hash)>] RedirectionPolicyListResult data, response status code and response headers
    def list_redirection_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#list_redirection_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List redirection policys for a domain
    # List redirection policys for a domain
    # @param domain_id Domain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RedirectionPolicyListResult]
    def list_redirection_policies_0(domain_id, opts = {})
      data, _status_code, _headers = list_redirection_policies_0_with_http_info(domain_id, opts)
      data
    end

    # List redirection policys for a domain
    # List redirection policys for a domain
    # @param domain_id Domain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RedirectionPolicyListResult, Fixnum, Hash)>] RedirectionPolicyListResult data, response status code and response headers
    def list_redirection_policies_0_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/redirection-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#list_redirection_policies_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List redirection policys
    # List all redirection policys across all domains ordered by precedence. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RedirectionPolicyListResult]
    def list_redirection_policies_across_all_domains(opts = {})
      data, _status_code, _headers = list_redirection_policies_across_all_domains_with_http_info(opts)
      data
    end

    # List redirection policys
    # List all redirection policys across all domains ordered by precedence. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RedirectionPolicyListResult, Fixnum, Hash)>] RedirectionPolicyListResult data, response status code and response headers
    def list_redirection_policies_across_all_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies_across_all_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies_across_all_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies_across_all_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/redirection-policies'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#list_redirection_policies_across_all_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List redirection policys
    # List all redirection policys across all domains ordered by precedence. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RedirectionPolicyListResult]
    def list_redirection_policies_across_all_domains_0(opts = {})
      data, _status_code, _headers = list_redirection_policies_across_all_domains_0_with_http_info(opts)
      data
    end

    # List redirection policys
    # List all redirection policys across all domains ordered by precedence. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RedirectionPolicyListResult, Fixnum, Hash)>] RedirectionPolicyListResult data, response status code and response headers
    def list_redirection_policies_across_all_domains_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies_across_all_domains_0 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies_across_all_domains_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_policies_across_all_domains_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/redirection-policies'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#list_redirection_policies_across_all_domains_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RedirectionRuleListResult]
    def list_redirection_rules(domain_id, redirection_policy_id, opts = {})
      data, _status_code, _headers = list_redirection_rules_with_http_info(domain_id, redirection_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RedirectionRuleListResult, Fixnum, Hash)>] RedirectionRuleListResult data, response status code and response headers
    def list_redirection_rules_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_rules"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#list_redirection_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RedirectionRuleListResult]
    def list_redirection_rules_0(domain_id, redirection_policy_id, opts = {})
      data, _status_code, _headers = list_redirection_rules_0_with_http_info(domain_id, redirection_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RedirectionRuleListResult, Fixnum, Hash)>] RedirectionRuleListResult data, response status code and response headers
    def list_redirection_rules_0_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_rules_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_rules_0"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_rules_0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_rules_0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.list_redirection_rules_0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#list_redirection_rules_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_redirection_policy(domain_id, redirection_policy_id, redirection_policy, opts = {})
      patch_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts)
      nil
    end

    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_policy"
      end
      # verify the required parameter 'redirection_policy' is set
      if @api_client.config.client_side_validation && redirection_policy.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#patch_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_redirection_policy_0(domain_id, redirection_policy_id, redirection_policy, opts = {})
      patch_redirection_policy_0_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts)
      nil
    end

    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_redirection_policy_0_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_policy_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_policy_0"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_policy_0"
      end
      # verify the required parameter 'redirection_policy' is set
      if @api_client.config.client_side_validation && redirection_policy.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_policy_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#patch_redirection_policy_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/<domain-id>/redirection-policies/<red-policy-id> 
    # @param domain_id Domain id
    # @param redirection_policy_id RedirectionPolicy id
    # @param rule_id rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_redirection_rule(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      patch_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts)
      nil
    end

    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/redirection-policies/&lt;red-policy-id&gt; 
    # @param domain_id Domain id
    # @param redirection_policy_id RedirectionPolicy id
    # @param rule_id rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_rule"
      end
      # verify the required parameter 'redirection_rule' is set
      if @api_client.config.client_side_validation && redirection_rule.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_rule' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#patch_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/<domain-id>/redirection-policies/<red-policy-id> 
    # @param domain_id Domain id
    # @param redirection_policy_id RedirectionPolicy id
    # @param rule_id rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_redirection_rule_0(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      patch_redirection_rule_0_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts)
      nil
    end

    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/redirection-policies/&lt;red-policy-id&gt; 
    # @param domain_id Domain id
    # @param redirection_policy_id RedirectionPolicy id
    # @param rule_id rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_redirection_rule_0_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_rule_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_rule_0"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_rule_0"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_rule_0"
      end
      # verify the required parameter 'redirection_rule' is set
      if @api_client.config.client_side_validation && redirection_rule.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_rule' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.patch_redirection_rule_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#patch_redirection_rule_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read redirection policy
    # Read redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [RedirectionPolicy]
    def read_redirection_policy(domain_id, redirection_policy_id, opts = {})
      data, _status_code, _headers = read_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts)
      data
    end

    # Read redirection policy
    # Read redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionPolicy, Fixnum, Hash)>] RedirectionPolicy data, response status code and response headers
    def read_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#read_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read redirection policy
    # Read redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [RedirectionPolicy]
    def read_redirection_policy_0(domain_id, redirection_policy_id, opts = {})
      data, _status_code, _headers = read_redirection_policy_0_with_http_info(domain_id, redirection_policy_id, opts)
      data
    end

    # Read redirection policy
    # Read redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionPolicy, Fixnum, Hash)>] RedirectionPolicy data, response status code and response headers
    def read_redirection_policy_0_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_policy_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_policy_0"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_policy_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#read_redirection_policy_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @return [RedirectionRule]
    def read_redirection_rule(domain_id, redirection_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionRule, Fixnum, Hash)>] RedirectionRule data, response status code and response headers
    def read_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#read_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @return [RedirectionRule]
    def read_redirection_rule_0(domain_id, redirection_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_redirection_rule_0_with_http_info(domain_id, redirection_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionRule, Fixnum, Hash)>] RedirectionRule data, response status code and response headers
    def read_redirection_rule_0_with_http_info(domain_id, redirection_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_rule_0 ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_rule_0"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_rule_0"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySecurityServiceInsertionRedirectionPoliciesApi.read_redirection_rule_0"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityServiceInsertionRedirectionPoliciesApi#read_redirection_rule_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
