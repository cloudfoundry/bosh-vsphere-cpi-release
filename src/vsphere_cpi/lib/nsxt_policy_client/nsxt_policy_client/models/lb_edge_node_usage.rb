=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module NSXTPolicy
  # The capacity contains basic information and load balancer entity usages and capacity for the given edge node. 
  class LBEdgeNodeUsage
    # The property identifies the load balancer node usage type. 
    attr_accessor :resource_type

    # The property identifies the node path for load balancer node usage. For example, node_path=/infra/sites/default/enforcement-points/default /edge-clusters/85175e0b-4d74-461d-83e1-f3b785adef9c/edge-nodes /86e077c0-449f-11e9-87c8-02004eb37029. 
    attr_accessor :node_path

    # The count of medium load balancer services configured on the node. 
    attr_accessor :current_medium_load_balancer_count

    # The remaining count of xlarge load balancer services which can be configured on the given edge node. 
    attr_accessor :remaining_xlarge_load_balancer_count

    # The severity calculation is based on current credit usage percentage of load balancer for one node. 
    attr_accessor :severity

    # Pool member capacity means maximum number of pool members which can be configured on the given edge node. 
    attr_accessor :pool_member_capacity

    # The count of virtual servers configured on the node. 
    attr_accessor :current_virtual_server_count

    # The count of xlarge load balancer services configured on the node. 
    attr_accessor :current_xlarge_load_balancer_count

    # The count of pools configured on the node. 
    attr_accessor :current_pool_count

    # The remaining count of small load balancer services which can be configured on the given edge node. 
    attr_accessor :remaining_small_load_balancer_count

    # The count of pool members configured on the node. 
    attr_accessor :current_pool_member_count

    # The load balancer credit capacity means the maximum credits which can be used for load balancer configuration for the given edge node. 
    attr_accessor :load_balancer_credit_capacity

    # The path of edge cluster which contains the edge node. 
    attr_accessor :edge_cluster_path

    # The current load balancer credits means the current credits used on the node. For example, configuring a medium load balancer on a node consumes 10 credits. If there are 2 medium instances configured on a node, the current credit number is 2 * 10 = 20. 
    attr_accessor :current_load_balancer_credits

    # The remaining count of large load balancer services which can be configured on the given edge node. 
    attr_accessor :remaining_large_load_balancer_count

    # The count of large load balancer services configured on the node. 
    attr_accessor :current_large_load_balancer_count

    # The form factor of the given edge node. 
    attr_accessor :form_factor

    # The usage percentage of the edge node for load balancer. The value is the larger value between load balancer credit usage percentage and pool member usage percentage for the edge node. 
    attr_accessor :usage_percentage

    # The count of small load balancer services configured on the node. 
    attr_accessor :current_small_load_balancer_count

    # The remaining count of medium load balancer services which can be configured on the given edge node. 
    attr_accessor :remaining_medium_load_balancer_count

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'resource_type' => :'resource_type',
        :'node_path' => :'node_path',
        :'current_medium_load_balancer_count' => :'current_medium_load_balancer_count',
        :'remaining_xlarge_load_balancer_count' => :'remaining_xlarge_load_balancer_count',
        :'severity' => :'severity',
        :'pool_member_capacity' => :'pool_member_capacity',
        :'current_virtual_server_count' => :'current_virtual_server_count',
        :'current_xlarge_load_balancer_count' => :'current_xlarge_load_balancer_count',
        :'current_pool_count' => :'current_pool_count',
        :'remaining_small_load_balancer_count' => :'remaining_small_load_balancer_count',
        :'current_pool_member_count' => :'current_pool_member_count',
        :'load_balancer_credit_capacity' => :'load_balancer_credit_capacity',
        :'edge_cluster_path' => :'edge_cluster_path',
        :'current_load_balancer_credits' => :'current_load_balancer_credits',
        :'remaining_large_load_balancer_count' => :'remaining_large_load_balancer_count',
        :'current_large_load_balancer_count' => :'current_large_load_balancer_count',
        :'form_factor' => :'form_factor',
        :'usage_percentage' => :'usage_percentage',
        :'current_small_load_balancer_count' => :'current_small_load_balancer_count',
        :'remaining_medium_load_balancer_count' => :'remaining_medium_load_balancer_count'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'resource_type' => :'String',
        :'node_path' => :'String',
        :'current_medium_load_balancer_count' => :'Integer',
        :'remaining_xlarge_load_balancer_count' => :'Integer',
        :'severity' => :'String',
        :'pool_member_capacity' => :'Integer',
        :'current_virtual_server_count' => :'Integer',
        :'current_xlarge_load_balancer_count' => :'Integer',
        :'current_pool_count' => :'Integer',
        :'remaining_small_load_balancer_count' => :'Integer',
        :'current_pool_member_count' => :'Integer',
        :'load_balancer_credit_capacity' => :'Integer',
        :'edge_cluster_path' => :'String',
        :'current_load_balancer_credits' => :'Integer',
        :'remaining_large_load_balancer_count' => :'Integer',
        :'current_large_load_balancer_count' => :'Integer',
        :'form_factor' => :'String',
        :'usage_percentage' => :'Float',
        :'current_small_load_balancer_count' => :'Integer',
        :'remaining_medium_load_balancer_count' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'node_path')
        self.node_path = attributes[:'node_path']
      end

      if attributes.has_key?(:'current_medium_load_balancer_count')
        self.current_medium_load_balancer_count = attributes[:'current_medium_load_balancer_count']
      end

      if attributes.has_key?(:'remaining_xlarge_load_balancer_count')
        self.remaining_xlarge_load_balancer_count = attributes[:'remaining_xlarge_load_balancer_count']
      end

      if attributes.has_key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.has_key?(:'pool_member_capacity')
        self.pool_member_capacity = attributes[:'pool_member_capacity']
      end

      if attributes.has_key?(:'current_virtual_server_count')
        self.current_virtual_server_count = attributes[:'current_virtual_server_count']
      end

      if attributes.has_key?(:'current_xlarge_load_balancer_count')
        self.current_xlarge_load_balancer_count = attributes[:'current_xlarge_load_balancer_count']
      end

      if attributes.has_key?(:'current_pool_count')
        self.current_pool_count = attributes[:'current_pool_count']
      end

      if attributes.has_key?(:'remaining_small_load_balancer_count')
        self.remaining_small_load_balancer_count = attributes[:'remaining_small_load_balancer_count']
      end

      if attributes.has_key?(:'current_pool_member_count')
        self.current_pool_member_count = attributes[:'current_pool_member_count']
      end

      if attributes.has_key?(:'load_balancer_credit_capacity')
        self.load_balancer_credit_capacity = attributes[:'load_balancer_credit_capacity']
      end

      if attributes.has_key?(:'edge_cluster_path')
        self.edge_cluster_path = attributes[:'edge_cluster_path']
      end

      if attributes.has_key?(:'current_load_balancer_credits')
        self.current_load_balancer_credits = attributes[:'current_load_balancer_credits']
      end

      if attributes.has_key?(:'remaining_large_load_balancer_count')
        self.remaining_large_load_balancer_count = attributes[:'remaining_large_load_balancer_count']
      end

      if attributes.has_key?(:'current_large_load_balancer_count')
        self.current_large_load_balancer_count = attributes[:'current_large_load_balancer_count']
      end

      if attributes.has_key?(:'form_factor')
        self.form_factor = attributes[:'form_factor']
      end

      if attributes.has_key?(:'usage_percentage')
        self.usage_percentage = attributes[:'usage_percentage']
      end

      if attributes.has_key?(:'current_small_load_balancer_count')
        self.current_small_load_balancer_count = attributes[:'current_small_load_balancer_count']
      end

      if attributes.has_key?(:'remaining_medium_load_balancer_count')
        self.remaining_medium_load_balancer_count = attributes[:'remaining_medium_load_balancer_count']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      if @node_path.nil?
        invalid_properties.push('invalid value for "node_path", node_path cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @resource_type.nil?
      return false if @node_path.nil?
      severity_validator = EnumAttributeValidator.new('String', ['GREEN', 'ORANGE', 'RED'])
      return false unless severity_validator.valid?(@severity)
      form_factor_validator = EnumAttributeValidator.new('String', ['SMALL_VIRTUAL_MACHINE', 'MEDIUM_VIRTUAL_MACHINE', 'LARGE_VIRTUAL_MACHINE', 'XLARGE_VIRTUAL_MACHINE', 'PHYSICAL_MACHINE'])
      return false unless form_factor_validator.valid?(@form_factor)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] severity Object to be assigned
    def severity=(severity)
      validator = EnumAttributeValidator.new('String', ['GREEN', 'ORANGE', 'RED'])
      unless validator.valid?(severity)
        fail ArgumentError, 'invalid value for "severity", must be one of #{validator.allowable_values}.'
      end
      @severity = severity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] form_factor Object to be assigned
    def form_factor=(form_factor)
      validator = EnumAttributeValidator.new('String', ['SMALL_VIRTUAL_MACHINE', 'MEDIUM_VIRTUAL_MACHINE', 'LARGE_VIRTUAL_MACHINE', 'XLARGE_VIRTUAL_MACHINE', 'PHYSICAL_MACHINE'])
      unless validator.valid?(form_factor)
        fail ArgumentError, 'invalid value for "form_factor", must be one of #{validator.allowable_values}.'
      end
      @form_factor = form_factor
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          resource_type == o.resource_type &&
          node_path == o.node_path &&
          current_medium_load_balancer_count == o.current_medium_load_balancer_count &&
          remaining_xlarge_load_balancer_count == o.remaining_xlarge_load_balancer_count &&
          severity == o.severity &&
          pool_member_capacity == o.pool_member_capacity &&
          current_virtual_server_count == o.current_virtual_server_count &&
          current_xlarge_load_balancer_count == o.current_xlarge_load_balancer_count &&
          current_pool_count == o.current_pool_count &&
          remaining_small_load_balancer_count == o.remaining_small_load_balancer_count &&
          current_pool_member_count == o.current_pool_member_count &&
          load_balancer_credit_capacity == o.load_balancer_credit_capacity &&
          edge_cluster_path == o.edge_cluster_path &&
          current_load_balancer_credits == o.current_load_balancer_credits &&
          remaining_large_load_balancer_count == o.remaining_large_load_balancer_count &&
          current_large_load_balancer_count == o.current_large_load_balancer_count &&
          form_factor == o.form_factor &&
          usage_percentage == o.usage_percentage &&
          current_small_load_balancer_count == o.current_small_load_balancer_count &&
          remaining_medium_load_balancer_count == o.remaining_medium_load_balancer_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [resource_type, node_path, current_medium_load_balancer_count, remaining_xlarge_load_balancer_count, severity, pool_member_capacity, current_virtual_server_count, current_xlarge_load_balancer_count, current_pool_count, remaining_small_load_balancer_count, current_pool_member_count, load_balancer_credit_capacity, edge_cluster_path, current_load_balancer_credits, remaining_large_load_balancer_count, current_large_load_balancer_count, form_factor, usage_percentage, current_small_load_balancer_count, remaining_medium_load_balancer_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXTPolicy.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
