=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module NSXTPolicy
  # OSPF Interface configuration.
  class PolicyInterfaceOspfConfig
    # Specifies the number of seconds that router must wait before it declares a OSPF neighbor router down because it has not received OSPF hello packet. OSPF dead interval should be minimum 3 times greater than the hello interval 
    attr_accessor :dead_interval

    # Attache Tier0 Interface to specified OSPF Area. all peers. 
    attr_accessor :ospf_area

    # Specifies the interval between the hello packets that OSPF sends on this interface. OSPF hello interval should be less than the dead interval 
    attr_accessor :hello_interval

    # Enable/Disable OSPF to register for BFD event. Use FALSE to disable BFD. 
    attr_accessor :enable_bfd

    # enable/disable OSPF on the interface. If enabled flag not specified, defailt is disable OSPF. 
    attr_accessor :enabled

    # Configure OSPF networkt type, default is BROADCAST network type 
    attr_accessor :network_type

    # This filed is valid only if enable_bfd is set to TRUE. If enable_bfd flag is set to TRUE, this profile will be applied to all OSPF peers in this interface. If this field is empty, bfd_path will refer to Tier-0 global BFD profile. 
    attr_accessor :bfd_path

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'dead_interval' => :'dead_interval',
        :'ospf_area' => :'ospf_area',
        :'hello_interval' => :'hello_interval',
        :'enable_bfd' => :'enable_bfd',
        :'enabled' => :'enabled',
        :'network_type' => :'network_type',
        :'bfd_path' => :'bfd_path'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'dead_interval' => :'Integer',
        :'ospf_area' => :'String',
        :'hello_interval' => :'Integer',
        :'enable_bfd' => :'BOOLEAN',
        :'enabled' => :'BOOLEAN',
        :'network_type' => :'String',
        :'bfd_path' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'dead_interval')
        self.dead_interval = attributes[:'dead_interval']
      else
        self.dead_interval = 40
      end

      if attributes.has_key?(:'ospf_area')
        self.ospf_area = attributes[:'ospf_area']
      end

      if attributes.has_key?(:'hello_interval')
        self.hello_interval = attributes[:'hello_interval']
      else
        self.hello_interval = 10
      end

      if attributes.has_key?(:'enable_bfd')
        self.enable_bfd = attributes[:'enable_bfd']
      end

      if attributes.has_key?(:'enabled')
        self.enabled = attributes[:'enabled']
      else
        self.enabled = false
      end

      if attributes.has_key?(:'network_type')
        self.network_type = attributes[:'network_type']
      else
        self.network_type = 'BROADCAST'
      end

      if attributes.has_key?(:'bfd_path')
        self.bfd_path = attributes[:'bfd_path']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@dead_interval.nil? && @dead_interval > 65535
        invalid_properties.push('invalid value for "dead_interval", must be smaller than or equal to 65535.')
      end

      if !@dead_interval.nil? && @dead_interval < 3
        invalid_properties.push('invalid value for "dead_interval", must be greater than or equal to 3.')
      end

      if @ospf_area.nil?
        invalid_properties.push('invalid value for "ospf_area", ospf_area cannot be nil.')
      end

      if !@hello_interval.nil? && @hello_interval > 21845
        invalid_properties.push('invalid value for "hello_interval", must be smaller than or equal to 21845.')
      end

      if !@hello_interval.nil? && @hello_interval < 1
        invalid_properties.push('invalid value for "hello_interval", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@dead_interval.nil? && @dead_interval > 65535
      return false if !@dead_interval.nil? && @dead_interval < 3
      return false if @ospf_area.nil?
      return false if !@hello_interval.nil? && @hello_interval > 21845
      return false if !@hello_interval.nil? && @hello_interval < 1
      network_type_validator = EnumAttributeValidator.new('String', ['BROADCAST', 'P2P'])
      return false unless network_type_validator.valid?(@network_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] dead_interval Value to be assigned
    def dead_interval=(dead_interval)
      if !dead_interval.nil? && dead_interval > 65535
        fail ArgumentError, 'invalid value for "dead_interval", must be smaller than or equal to 65535.'
      end

      if !dead_interval.nil? && dead_interval < 3
        fail ArgumentError, 'invalid value for "dead_interval", must be greater than or equal to 3.'
      end

      @dead_interval = dead_interval
    end

    # Custom attribute writer method with validation
    # @param [Object] hello_interval Value to be assigned
    def hello_interval=(hello_interval)
      if !hello_interval.nil? && hello_interval > 21845
        fail ArgumentError, 'invalid value for "hello_interval", must be smaller than or equal to 21845.'
      end

      if !hello_interval.nil? && hello_interval < 1
        fail ArgumentError, 'invalid value for "hello_interval", must be greater than or equal to 1.'
      end

      @hello_interval = hello_interval
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_type Object to be assigned
    def network_type=(network_type)
      validator = EnumAttributeValidator.new('String', ['BROADCAST', 'P2P'])
      unless validator.valid?(network_type)
        fail ArgumentError, 'invalid value for "network_type", must be one of #{validator.allowable_values}.'
      end
      @network_type = network_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          dead_interval == o.dead_interval &&
          ospf_area == o.ospf_area &&
          hello_interval == o.hello_interval &&
          enable_bfd == o.enable_bfd &&
          enabled == o.enabled &&
          network_type == o.network_type &&
          bfd_path == o.bfd_path
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [dead_interval, ospf_area, hello_interval, enable_bfd, enabled, network_type, bfd_path].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXTPolicy.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
