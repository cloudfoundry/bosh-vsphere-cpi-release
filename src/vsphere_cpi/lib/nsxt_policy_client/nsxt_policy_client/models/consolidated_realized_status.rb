=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module NSXTPolicy
  # Consolidated Realized Status of an intent object across enforcement points. 
  class ConsolidatedRealizedStatus
    # Intent path of object, forward slashes must be escaped using %2F. 
    attr_accessor :intent_path

    # Represent highest intent version across all realized objects
    attr_accessor :intent_version

    # Aggregated Realization state of this object
    attr_accessor :publish_status

    # Consolidated Realized Status across enforcement points.
    attr_accessor :consolidated_status

    # List of Consolidated Realized Status per enforcement point.
    attr_accessor :consolidated_status_per_enforcement_point

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'intent_path' => :'intent_path',
        :'intent_version' => :'intent_version',
        :'publish_status' => :'publish_status',
        :'consolidated_status' => :'consolidated_status',
        :'consolidated_status_per_enforcement_point' => :'consolidated_status_per_enforcement_point'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'intent_path' => :'String',
        :'intent_version' => :'String',
        :'publish_status' => :'String',
        :'consolidated_status' => :'ConsolidatedStatus',
        :'consolidated_status_per_enforcement_point' => :'Array<ConsolidatedStatusPerEnforcementPoint>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'intent_path')
        self.intent_path = attributes[:'intent_path']
      end

      if attributes.has_key?(:'intent_version')
        self.intent_version = attributes[:'intent_version']
      end

      if attributes.has_key?(:'publish_status')
        self.publish_status = attributes[:'publish_status']
      end

      if attributes.has_key?(:'consolidated_status')
        self.consolidated_status = attributes[:'consolidated_status']
      end

      if attributes.has_key?(:'consolidated_status_per_enforcement_point')
        if (value = attributes[:'consolidated_status_per_enforcement_point']).is_a?(Array)
          self.consolidated_status_per_enforcement_point = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @publish_status.nil?
        invalid_properties.push('invalid value for "publish_status", publish_status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @publish_status.nil?
      publish_status_validator = EnumAttributeValidator.new('String', ['UNAVAILABLE', 'UNREALIZED', 'REALIZED', 'ERROR'])
      return false unless publish_status_validator.valid?(@publish_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] publish_status Object to be assigned
    def publish_status=(publish_status)
      validator = EnumAttributeValidator.new('String', ['UNAVAILABLE', 'UNREALIZED', 'REALIZED', 'ERROR'])
      unless validator.valid?(publish_status)
        fail ArgumentError, 'invalid value for "publish_status", must be one of #{validator.allowable_values}.'
      end
      @publish_status = publish_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          intent_path == o.intent_path &&
          intent_version == o.intent_version &&
          publish_status == o.publish_status &&
          consolidated_status == o.consolidated_status &&
          consolidated_status_per_enforcement_point == o.consolidated_status_per_enforcement_point
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [intent_path, intent_version, publish_status, consolidated_status, consolidated_status_per_enforcement_point].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXTPolicy.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
