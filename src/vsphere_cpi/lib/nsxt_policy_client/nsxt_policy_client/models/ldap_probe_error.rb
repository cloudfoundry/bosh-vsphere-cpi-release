=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module NSXTPolicy
  # Detail about one error encountered during a probe.
  class LdapProbeError
    # The cause of the error.  BASE_DN_NOT_FOUND: The configured base DN does not exist on the     LDAP server or is not readable. BIND_DN_AND_PASSWORD_REQUIRED: This server is configured to     require a bind DN and password. Please add these to your     LDAP server configuration. BIND_DN_INVALID: The bind DN or username provided is not valid     on the LDAP server. Check that the bind DN is correct.     This error may also indicate that the base DN in your     configuration is incorrect. CERTIFICATE_HOSTNAME_MISMATCH_ERROR: The hostname configured for     the LDAP server does not match the hostname in the server's     certificate subject or alternative subject names. Be sure     that the hostname you configure in NSX Manager matches one     of those names. CERTIFICATE_MISMATCH_ERROR: The certificate presented by the     LDAP server did not match the certificate in the configuration     on the NSX Manager. CONNECTION_REFUSED: The connection was refused when contacting the     LDAP server. Ensure that the LDAP server is running and that     you are using the correct ip/hostname. CONNECTION_TIMEOUT: The connection timed out when contacting     the LDAP server. Check the hostname/ip and any firewalls     between the NSX Manager and the LDAP server. GENERAL_ERROR: An undetermined error occurred. INVALID_CONFIGURED_CERTIFICATE: The certificate configured for     this LDAP server is invalid and could not be decoded. Check     that the PEM-formatted certificate you provided is correct. INVALID_CREDENTIALS: The username and/or password are incorrect. SSL_HANDSHAKE_ERROR: An error occurred while establishing a secure     connection with the LDAP server. Check that the LDAP server's     certificate is correct, and that it is using an SSL/TLS     cipher suite that is compatible with the NSX Manager.     This error can also occur if the hostname you have configured     for the LDAP server does not match any of the hostnames in     the Subject Alternative Name records in the server     certificate. STARTTLS_FAILED: Unable to use StartTLS to upgrade the connection     to use TLS. Ensure that the LDAP server supports TLS and if     not, use LDAP or LDAPS as the protocol. UNKNOWN_HOST: The hostname of the LDAP server could not be     resolved. 
    attr_accessor :error_type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'error_type' => :'error_type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'error_type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'error_type')
        self.error_type = attributes[:'error_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      error_type_validator = EnumAttributeValidator.new('String', ['BASE_DN_NOT_FOUND', 'BIND_DN_AND_PASSWORD_REQUIRED', 'BIND_DN_INVALID', 'CERTIFICATE_HOSTNAME_MISMATCH_ERROR', 'CERTIFICATE_MISMATCH_ERROR', 'CONNECTION_REFUSED', 'CONNECTION_TIMEOUT', 'GENERAL_ERROR', 'INVALID_CONFIGURED_CERTIFICATE', 'INVALID_CREDENTIALS', 'SSL_HANDSHAKE_ERROR', 'STARTTLS_FAILED', 'UNKNOWN_HOST'])
      return false unless error_type_validator.valid?(@error_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error_type Object to be assigned
    def error_type=(error_type)
      validator = EnumAttributeValidator.new('String', ['BASE_DN_NOT_FOUND', 'BIND_DN_AND_PASSWORD_REQUIRED', 'BIND_DN_INVALID', 'CERTIFICATE_HOSTNAME_MISMATCH_ERROR', 'CERTIFICATE_MISMATCH_ERROR', 'CONNECTION_REFUSED', 'CONNECTION_TIMEOUT', 'GENERAL_ERROR', 'INVALID_CONFIGURED_CERTIFICATE', 'INVALID_CREDENTIALS', 'SSL_HANDSHAKE_ERROR', 'STARTTLS_FAILED', 'UNKNOWN_HOST'])
      unless validator.valid?(error_type)
        fail ArgumentError, 'invalid value for "error_type", must be one of #{validator.allowable_values}.'
      end
      @error_type = error_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          error_type == o.error_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [error_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXTPolicy.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
