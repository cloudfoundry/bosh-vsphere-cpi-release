=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module NSXTPolicy
  # Intrusion Detection System Signature . 
  class IdsSignature
    # Link to this resource
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    # Schema for this resource
    attr_accessor :_schema

    # The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.
    attr_accessor :_revision

    # Indicates system owned resource
    attr_accessor :_system_owned

    # Defaults to ID if not set
    attr_accessor :display_name

    # Description of this resource
    attr_accessor :description

    # Opaque identifiers meaningful to the API user
    attr_accessor :tags

    # ID of the user who created this resource
    attr_accessor :_create_user

    # Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity. 
    attr_accessor :_protection

    # Timestamp of resource creation
    attr_accessor :_create_time

    # Timestamp of last modification
    attr_accessor :_last_modified_time

    # ID of the user who last modified this resource
    attr_accessor :_last_modified_user

    # Unique identifier of this resource
    attr_accessor :id

    # The type of this resource.
    attr_accessor :resource_type

    # Absolute path of this object
    attr_accessor :path

    # Path of its parent
    attr_accessor :parent_path

    # This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites. 
    attr_accessor :unique_id

    # Path relative from its parent
    attr_accessor :relative_path

    # subtree for this type within policy tree containing nested elements. 
    attr_accessor :children

    # Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties. 
    attr_accessor :overridden

    # Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects. 
    attr_accessor :marked_for_delete

    # Source-destination direction.
    attr_accessor :direction

    # Flag which tells whether the signature is enabled or not. 
    attr_accessor :enable

    # Protocol used in the packet analysis.
    attr_accessor :protocol

    # Class type of Signature. 
    attr_accessor :class_type

    # Flow established from server, from client etc. 
    attr_accessor :flow

    # Signature action. 
    attr_accessor :action

    # Vendor assigned classification tag.
    attr_accessor :tag

    # Represents the internal categories a signature belongs to. 
    attr_accessor :categories

    # Signature name. 
    attr_accessor :name

    # Signature cvssv3 score. 
    attr_accessor :cvssv3

    # Signature cvssv2 score. 
    attr_accessor :cvssv2

    # Represents the severity of the Signature. 
    attr_accessor :severity

    # Represents revision of the Signature. 
    attr_accessor :signature_revision

    # Performance impact of the signature.
    attr_accessor :performance_impact

    # Product affected by this signature. 
    attr_accessor :product_affected

    # Signature vendor set severity of the signature rule.
    attr_accessor :signature_severity

    # Family of the malware tracked in the signature.
    attr_accessor :malware_family

    # List of mitre attack URLs pertaining to signature 
    attr_accessor :urls

    # Signature policy.
    attr_accessor :policy

    # Target of the signature. 
    attr_accessor :attack_target

    # Represents the Signature's id. 
    attr_accessor :signature_id

    # CVE score 
    attr_accessor :cves

    # Signature type.
    attr_accessor :type

    # Represents the cvss value of a Signature. The value is derived from cvssv3 or cvssv2 score. NONE     means cvssv3/cvssv2 score as 0.0 LOW      means cvssv3/cvssv2 score as 0.1-3.9 MEDIUM   means cvssv3/cvssv2 score as 4.0-6.9 HIGH     means cvssv3/cvssv2 score as 7.0-8.9 CRITICAL means cvssv3/cvssv2 score as 9.0-10.0 
    attr_accessor :cvss

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'_revision' => :'_revision',
        :'_system_owned' => :'_system_owned',
        :'display_name' => :'display_name',
        :'description' => :'description',
        :'tags' => :'tags',
        :'_create_user' => :'_create_user',
        :'_protection' => :'_protection',
        :'_create_time' => :'_create_time',
        :'_last_modified_time' => :'_last_modified_time',
        :'_last_modified_user' => :'_last_modified_user',
        :'id' => :'id',
        :'resource_type' => :'resource_type',
        :'path' => :'path',
        :'parent_path' => :'parent_path',
        :'unique_id' => :'unique_id',
        :'relative_path' => :'relative_path',
        :'children' => :'children',
        :'overridden' => :'overridden',
        :'marked_for_delete' => :'marked_for_delete',
        :'direction' => :'direction',
        :'enable' => :'enable',
        :'protocol' => :'protocol',
        :'class_type' => :'class_type',
        :'flow' => :'flow',
        :'action' => :'action',
        :'tag' => :'tag',
        :'categories' => :'categories',
        :'name' => :'name',
        :'cvssv3' => :'cvssv3',
        :'cvssv2' => :'cvssv2',
        :'severity' => :'severity',
        :'signature_revision' => :'signature_revision',
        :'performance_impact' => :'performance_impact',
        :'product_affected' => :'product_affected',
        :'signature_severity' => :'signature_severity',
        :'malware_family' => :'malware_family',
        :'urls' => :'urls',
        :'policy' => :'policy',
        :'attack_target' => :'attack_target',
        :'signature_id' => :'signature_id',
        :'cves' => :'cves',
        :'type' => :'type',
        :'cvss' => :'cvss'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'_revision' => :'Integer',
        :'_system_owned' => :'BOOLEAN',
        :'display_name' => :'String',
        :'description' => :'String',
        :'tags' => :'Array<Tag>',
        :'_create_user' => :'String',
        :'_protection' => :'String',
        :'_create_time' => :'Integer',
        :'_last_modified_time' => :'Integer',
        :'_last_modified_user' => :'String',
        :'id' => :'String',
        :'resource_type' => :'String',
        :'path' => :'String',
        :'parent_path' => :'String',
        :'unique_id' => :'String',
        :'relative_path' => :'String',
        :'children' => :'Array<ChildPolicyConfigResource>',
        :'overridden' => :'BOOLEAN',
        :'marked_for_delete' => :'BOOLEAN',
        :'direction' => :'String',
        :'enable' => :'BOOLEAN',
        :'protocol' => :'String',
        :'class_type' => :'String',
        :'flow' => :'String',
        :'action' => :'String',
        :'tag' => :'Array<String>',
        :'categories' => :'Array<String>',
        :'name' => :'String',
        :'cvssv3' => :'String',
        :'cvssv2' => :'String',
        :'severity' => :'String',
        :'signature_revision' => :'String',
        :'performance_impact' => :'String',
        :'product_affected' => :'String',
        :'signature_severity' => :'String',
        :'malware_family' => :'String',
        :'urls' => :'Array<String>',
        :'policy' => :'Array<String>',
        :'attack_target' => :'String',
        :'signature_id' => :'String',
        :'cves' => :'Array<String>',
        :'type' => :'Array<String>',
        :'cvss' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'_revision')
        self._revision = attributes[:'_revision']
      end

      if attributes.has_key?(:'_system_owned')
        self._system_owned = attributes[:'_system_owned']
      end

      if attributes.has_key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.has_key?(:'_create_user')
        self._create_user = attributes[:'_create_user']
      end

      if attributes.has_key?(:'_protection')
        self._protection = attributes[:'_protection']
      end

      if attributes.has_key?(:'_create_time')
        self._create_time = attributes[:'_create_time']
      end

      if attributes.has_key?(:'_last_modified_time')
        self._last_modified_time = attributes[:'_last_modified_time']
      end

      if attributes.has_key?(:'_last_modified_user')
        self._last_modified_user = attributes[:'_last_modified_user']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.has_key?(:'parent_path')
        self.parent_path = attributes[:'parent_path']
      end

      if attributes.has_key?(:'unique_id')
        self.unique_id = attributes[:'unique_id']
      end

      if attributes.has_key?(:'relative_path')
        self.relative_path = attributes[:'relative_path']
      end

      if attributes.has_key?(:'children')
        if (value = attributes[:'children']).is_a?(Array)
          self.children = value
        end
      end

      if attributes.has_key?(:'overridden')
        self.overridden = attributes[:'overridden']
      else
        self.overridden = false
      end

      if attributes.has_key?(:'marked_for_delete')
        self.marked_for_delete = attributes[:'marked_for_delete']
      else
        self.marked_for_delete = false
      end

      if attributes.has_key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.has_key?(:'enable')
        self.enable = attributes[:'enable']
      end

      if attributes.has_key?(:'protocol')
        self.protocol = attributes[:'protocol']
      end

      if attributes.has_key?(:'class_type')
        self.class_type = attributes[:'class_type']
      end

      if attributes.has_key?(:'flow')
        self.flow = attributes[:'flow']
      end

      if attributes.has_key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.has_key?(:'tag')
        if (value = attributes[:'tag']).is_a?(Array)
          self.tag = value
        end
      end

      if attributes.has_key?(:'categories')
        if (value = attributes[:'categories']).is_a?(Array)
          self.categories = value
        end
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'cvssv3')
        self.cvssv3 = attributes[:'cvssv3']
      end

      if attributes.has_key?(:'cvssv2')
        self.cvssv2 = attributes[:'cvssv2']
      end

      if attributes.has_key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.has_key?(:'signature_revision')
        self.signature_revision = attributes[:'signature_revision']
      end

      if attributes.has_key?(:'performance_impact')
        self.performance_impact = attributes[:'performance_impact']
      end

      if attributes.has_key?(:'product_affected')
        self.product_affected = attributes[:'product_affected']
      end

      if attributes.has_key?(:'signature_severity')
        self.signature_severity = attributes[:'signature_severity']
      end

      if attributes.has_key?(:'malware_family')
        self.malware_family = attributes[:'malware_family']
      end

      if attributes.has_key?(:'urls')
        if (value = attributes[:'urls']).is_a?(Array)
          self.urls = value
        end
      end

      if attributes.has_key?(:'policy')
        if (value = attributes[:'policy']).is_a?(Array)
          self.policy = value
        end
      end

      if attributes.has_key?(:'attack_target')
        self.attack_target = attributes[:'attack_target']
      end

      if attributes.has_key?(:'signature_id')
        self.signature_id = attributes[:'signature_id']
      end

      if attributes.has_key?(:'cves')
        if (value = attributes[:'cves']).is_a?(Array)
          self.cves = value
        end
      end

      if attributes.has_key?(:'type')
        if (value = attributes[:'type']).is_a?(Array)
          self.type = value
        end
      end

      if attributes.has_key?(:'cvss')
        self.cvss = attributes[:'cvss']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@display_name.nil? && @display_name.to_s.length > 255
        invalid_properties.push('invalid value for "display_name", the character length must be smaller than or equal to 255.')
      end

      if !@description.nil? && @description.to_s.length > 1024
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 1024.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@display_name.nil? && @display_name.to_s.length > 255
      return false if !@description.nil? && @description.to_s.length > 1024
      cvss_validator = EnumAttributeValidator.new('String', ['NONE', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL'])
      return false unless cvss_validator.valid?(@cvss)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if !display_name.nil? && display_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "display_name", the character length must be smaller than or equal to 255.'
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 1024
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 1024.'
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cvss Object to be assigned
    def cvss=(cvss)
      validator = EnumAttributeValidator.new('String', ['NONE', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL'])
      unless validator.valid?(cvss)
        fail ArgumentError, 'invalid value for "cvss", must be one of #{validator.allowable_values}.'
      end
      @cvss = cvss
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          _revision == o._revision &&
          _system_owned == o._system_owned &&
          display_name == o.display_name &&
          description == o.description &&
          tags == o.tags &&
          _create_user == o._create_user &&
          _protection == o._protection &&
          _create_time == o._create_time &&
          _last_modified_time == o._last_modified_time &&
          _last_modified_user == o._last_modified_user &&
          id == o.id &&
          resource_type == o.resource_type &&
          path == o.path &&
          parent_path == o.parent_path &&
          unique_id == o.unique_id &&
          relative_path == o.relative_path &&
          children == o.children &&
          overridden == o.overridden &&
          marked_for_delete == o.marked_for_delete &&
          direction == o.direction &&
          enable == o.enable &&
          protocol == o.protocol &&
          class_type == o.class_type &&
          flow == o.flow &&
          action == o.action &&
          tag == o.tag &&
          categories == o.categories &&
          name == o.name &&
          cvssv3 == o.cvssv3 &&
          cvssv2 == o.cvssv2 &&
          severity == o.severity &&
          signature_revision == o.signature_revision &&
          performance_impact == o.performance_impact &&
          product_affected == o.product_affected &&
          signature_severity == o.signature_severity &&
          malware_family == o.malware_family &&
          urls == o.urls &&
          policy == o.policy &&
          attack_target == o.attack_target &&
          signature_id == o.signature_id &&
          cves == o.cves &&
          type == o.type &&
          cvss == o.cvss
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, _revision, _system_owned, display_name, description, tags, _create_user, _protection, _create_time, _last_modified_time, _last_modified_user, id, resource_type, path, parent_path, unique_id, relative_path, children, overridden, marked_for_delete, direction, enable, protocol, class_type, flow, action, tag, categories, name, cvssv3, cvssv2, severity, signature_revision, performance_impact, product_affected, signature_severity, malware_family, urls, policy, attack_target, signature_id, cves, type, cvss].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXTPolicy.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
