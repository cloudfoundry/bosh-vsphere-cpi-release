=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 3.1.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module NSXTPolicy
  # Set criteria for route map entry
  class RouteMapEntrySet
    # For incoming and import route_maps on receiving both v6 global and v6 link-local address for the route, prefer to use the global address as the next hop. By default, it prefers the link-local next hop. 
    attr_accessor :prefer_global_v6_next_hop

    # Multi exit descriminator (MED) is a hint to BGP neighbors about the preferred path into an autonomous system (AS) that has multiple entry points. A lower MED value is preferred over a higher value. 
    attr_accessor :med

    # Local preference indicates the degree of preference for one BGP route over other BGP routes. The path with highest local preference is preferred. 
    attr_accessor :local_preference

    # Weight is used to select a route when multiple routes are available to the same network. Route with the highest weight is preferred. 
    attr_accessor :weight

    # AS path prepend to influence route selection. 
    attr_accessor :as_path_prepend

    # Set BGP regular or large community for matching routes. A maximum of one value for each community type separated by space. Well-known community name, community value in aa:nn (2byte:2byte) format for regular community and community value in aa:bb:nn (4byte:4byte:4byte) format for large community are supported. 
    attr_accessor :community

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'prefer_global_v6_next_hop' => :'prefer_global_v6_next_hop',
        :'med' => :'med',
        :'local_preference' => :'local_preference',
        :'weight' => :'weight',
        :'as_path_prepend' => :'as_path_prepend',
        :'community' => :'community'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'prefer_global_v6_next_hop' => :'BOOLEAN',
        :'med' => :'Integer',
        :'local_preference' => :'Integer',
        :'weight' => :'Integer',
        :'as_path_prepend' => :'String',
        :'community' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'prefer_global_v6_next_hop')
        self.prefer_global_v6_next_hop = attributes[:'prefer_global_v6_next_hop']
      end

      if attributes.has_key?(:'med')
        self.med = attributes[:'med']
      end

      if attributes.has_key?(:'local_preference')
        self.local_preference = attributes[:'local_preference']
      else
        self.local_preference = 100
      end

      if attributes.has_key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.has_key?(:'as_path_prepend')
        self.as_path_prepend = attributes[:'as_path_prepend']
      end

      if attributes.has_key?(:'community')
        self.community = attributes[:'community']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@med.nil? && @med > 4294967295
        invalid_properties.push('invalid value for "med", must be smaller than or equal to 4294967295.')
      end

      if !@med.nil? && @med < 0
        invalid_properties.push('invalid value for "med", must be greater than or equal to 0.')
      end

      if !@local_preference.nil? && @local_preference > 4294967295
        invalid_properties.push('invalid value for "local_preference", must be smaller than or equal to 4294967295.')
      end

      if !@weight.nil? && @weight > 65535
        invalid_properties.push('invalid value for "weight", must be smaller than or equal to 65535.')
      end

      if !@weight.nil? && @weight < 0
        invalid_properties.push('invalid value for "weight", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@med.nil? && @med > 4294967295
      return false if !@med.nil? && @med < 0
      return false if !@local_preference.nil? && @local_preference > 4294967295
      return false if !@weight.nil? && @weight > 65535
      return false if !@weight.nil? && @weight < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] med Value to be assigned
    def med=(med)
      if !med.nil? && med > 4294967295
        fail ArgumentError, 'invalid value for "med", must be smaller than or equal to 4294967295.'
      end

      if !med.nil? && med < 0
        fail ArgumentError, 'invalid value for "med", must be greater than or equal to 0.'
      end

      @med = med
    end

    # Custom attribute writer method with validation
    # @param [Object] local_preference Value to be assigned
    def local_preference=(local_preference)
      if !local_preference.nil? && local_preference > 4294967295
        fail ArgumentError, 'invalid value for "local_preference", must be smaller than or equal to 4294967295.'
      end

      @local_preference = local_preference
    end

    # Custom attribute writer method with validation
    # @param [Object] weight Value to be assigned
    def weight=(weight)
      if !weight.nil? && weight > 65535
        fail ArgumentError, 'invalid value for "weight", must be smaller than or equal to 65535.'
      end

      if !weight.nil? && weight < 0
        fail ArgumentError, 'invalid value for "weight", must be greater than or equal to 0.'
      end

      @weight = weight
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          prefer_global_v6_next_hop == o.prefer_global_v6_next_hop &&
          med == o.med &&
          local_preference == o.local_preference &&
          weight == o.weight &&
          as_path_prepend == o.as_path_prepend &&
          community == o.community
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [prefer_global_v6_next_hop, med, local_preference, weight, as_path_prepend, community].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXTPolicy.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
