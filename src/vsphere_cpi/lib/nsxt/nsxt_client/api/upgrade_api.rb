=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.3.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module NSXT
  class UpgradeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add upgrade units to specified upgrade unit group
    # Add upgrade units to specified upgrade unit group
    # @param group_id 
    # @param upgrade_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeUnitList]
    def add_upgrade_units_to_group_add_upgrade_units(group_id, upgrade_unit_list, opts = {})
      data, _status_code, _headers = add_upgrade_units_to_group_add_upgrade_units_with_http_info(group_id, upgrade_unit_list, opts)
      return data
    end

    # Add upgrade units to specified upgrade unit group
    # Add upgrade units to specified upgrade unit group
    # @param group_id 
    # @param upgrade_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeUnitList, Fixnum, Hash)>] UpgradeUnitList data, response status code and response headers
    def add_upgrade_units_to_group_add_upgrade_units_with_http_info(group_id, upgrade_unit_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.add_upgrade_units_to_group_add_upgrade_units ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UpgradeApi.add_upgrade_units_to_group_add_upgrade_units"
      end
      # verify the required parameter 'upgrade_unit_list' is set
      if @api_client.config.client_side_validation && upgrade_unit_list.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_unit_list' when calling UpgradeApi.add_upgrade_units_to_group_add_upgrade_units"
      end
      # resource path
      local_var_path = "/upgrade/upgrade-unit-groups/{group-id}?action=add_upgrade_units".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_unit_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#add_upgrade_units_to_group_add_upgrade_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Continue upgrade
    # Continue upgrade
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip Skip to upgrade of next component. (default to false)
    # @return [nil]
    def continue_upgrade_continue(opts = {})
      continue_upgrade_continue_with_http_info(opts)
      return nil
    end

    # Continue upgrade
    # Continue upgrade
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip Skip to upgrade of next component.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def continue_upgrade_continue_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.continue_upgrade_continue ..."
      end
      # resource path
      local_var_path = "/upgrade/plan?action=continue"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#continue_upgrade_continue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a group
    # Create a group
    # @param upgrade_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeUnitGroup]
    def create_upgrade_unit_group(upgrade_unit_group, opts = {})
      data, _status_code, _headers = create_upgrade_unit_group_with_http_info(upgrade_unit_group, opts)
      return data
    end

    # Create a group
    # Create a group
    # @param upgrade_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeUnitGroup, Fixnum, Hash)>] UpgradeUnitGroup data, response status code and response headers
    def create_upgrade_unit_group_with_http_info(upgrade_unit_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.create_upgrade_unit_group ..."
      end
      # verify the required parameter 'upgrade_unit_group' is set
      if @api_client.config.client_side_validation && upgrade_unit_group.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_unit_group' when calling UpgradeApi.create_upgrade_unit_group"
      end
      # resource path
      local_var_path = "/upgrade/upgrade-unit-groups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_unit_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#create_upgrade_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the upgrade unit group
    # Delete the upgrade unit group
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_upgrade_unit_group(group_id, opts = {})
      delete_upgrade_unit_group_with_http_info(group_id, opts)
      return nil
    end

    # Delete the upgrade unit group
    # Delete the upgrade unit group
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_upgrade_unit_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.delete_upgrade_unit_group ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UpgradeApi.delete_upgrade_unit_group"
      end
      # resource path
      local_var_path = "/upgrade/upgrade-unit-groups/{group-id}".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#delete_upgrade_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch upgrade bundle from given url
    # Fetch upgrade bundle from given url
    # @param upgrade_bundle_fetch_request 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeBundleId]
    def fetch_upgrade_bundle_from_url(upgrade_bundle_fetch_request, opts = {})
      data, _status_code, _headers = fetch_upgrade_bundle_from_url_with_http_info(upgrade_bundle_fetch_request, opts)
      return data
    end

    # Fetch upgrade bundle from given url
    # Fetch upgrade bundle from given url
    # @param upgrade_bundle_fetch_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeBundleId, Fixnum, Hash)>] UpgradeBundleId data, response status code and response headers
    def fetch_upgrade_bundle_from_url_with_http_info(upgrade_bundle_fetch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.fetch_upgrade_bundle_from_url ..."
      end
      # verify the required parameter 'upgrade_bundle_fetch_request' is set
      if @api_client.config.client_side_validation && upgrade_bundle_fetch_request.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_bundle_fetch_request' when calling UpgradeApi.fetch_upgrade_bundle_from_url"
      end
      # resource path
      local_var_path = "/upgrade/bundles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_bundle_fetch_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeBundleId')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#fetch_upgrade_bundle_from_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of nodes across all types
    # Get list of nodes across all types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which nodes will be filtered
    # @option opts [String] :component_version Component version based on which nodes will be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [NodeInfoListResult]
    def get_nodes(opts = {})
      data, _status_code, _headers = get_nodes_with_http_info(opts)
      return data
    end

    # Get list of nodes across all types
    # Get list of nodes across all types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which nodes will be filtered
    # @option opts [String] :component_version Component version based on which nodes will be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(NodeInfoListResult, Fixnum, Hash)>] NodeInfoListResult data, response status code and response headers
    def get_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_nodes ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_nodes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_nodes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/upgrade/nodes"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'component_version'] = opts[:'component_version'] if !opts[:'component_version'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get summary of nodes
    # Get summary of nodes
    # @param [Hash] opts the optional parameters
    # @return [NodeSummaryList]
    def get_nodes_summary(opts = {})
      data, _status_code, _headers = get_nodes_summary_with_http_info(opts)
      return data
    end

    # Get summary of nodes
    # Get summary of nodes
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeSummaryList, Fixnum, Hash)>] NodeSummaryList data, response status code and response headers
    def get_nodes_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_nodes_summary ..."
      end
      # resource path
      local_var_path = "/upgrade/nodes-summary"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_nodes_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get uploaded upgrade bundle information
    # Get uploaded upgrade bundle information 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeBundleInfo]
    def get_upgrade_bundle_info(bundle_id, opts = {})
      data, _status_code, _headers = get_upgrade_bundle_info_with_http_info(bundle_id, opts)
      return data
    end

    # Get uploaded upgrade bundle information
    # Get uploaded upgrade bundle information 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeBundleInfo, Fixnum, Hash)>] UpgradeBundleInfo data, response status code and response headers
    def get_upgrade_bundle_info_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_bundle_info ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling UpgradeApi.get_upgrade_bundle_info"
      end
      # resource path
      local_var_path = "/upgrade/bundles/{bundle-id}".sub('{' + 'bundle-id' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeBundleInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_bundle_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get uploaded upgrade bundle upload status
    # Get uploaded upgrade bundle upload status 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeBundleUploadStatus]
    def get_upgrade_bundle_upload_status(bundle_id, opts = {})
      data, _status_code, _headers = get_upgrade_bundle_upload_status_with_http_info(bundle_id, opts)
      return data
    end

    # Get uploaded upgrade bundle upload status
    # Get uploaded upgrade bundle upload status 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeBundleUploadStatus, Fixnum, Hash)>] UpgradeBundleUploadStatus data, response status code and response headers
    def get_upgrade_bundle_upload_status_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_bundle_upload_status ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling UpgradeApi.get_upgrade_bundle_upload_status"
      end
      # resource path
      local_var_path = "/upgrade/bundles/{bundle-id}/upload-status".sub('{' + 'bundle-id' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeBundleUploadStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_bundle_upload_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get upgrade history
    # Get upgrade history
    # @param [Hash] opts the optional parameters
    # @return [UpgradeHistoryList]
    def get_upgrade_history(opts = {})
      data, _status_code, _headers = get_upgrade_history_with_http_info(opts)
      return data
    end

    # Get upgrade history
    # Get upgrade history
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeHistoryList, Fixnum, Hash)>] UpgradeHistoryList data, response status code and response headers
    def get_upgrade_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_history ..."
      end
      # resource path
      local_var_path = "/upgrade/history"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeHistoryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get upgrade plan settings for the component
    # Get the upgrade plan settings for the component. 
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [UpgradePlanSettings]
    def get_upgrade_plan_settings(component_type, opts = {})
      data, _status_code, _headers = get_upgrade_plan_settings_with_http_info(component_type, opts)
      return data
    end

    # Get upgrade plan settings for the component
    # Get the upgrade plan settings for the component. 
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradePlanSettings, Fixnum, Hash)>] UpgradePlanSettings data, response status code and response headers
    def get_upgrade_plan_settings_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_plan_settings ..."
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling UpgradeApi.get_upgrade_plan_settings"
      end
      # resource path
      local_var_path = "/upgrade/plan/{component_type}/settings".sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradePlanSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_plan_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get upgrade status summary
    # Get upgrade status summary
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade units to be filtered
    # @option opts [String] :selection_status Flag to indicate whether to return status for only selected, only deselected or both type of upgrade units (default to ALL)
    # @option opts [BOOLEAN] :show_history Get upgrade activity for a given component
    # @return [UpgradeStatus]
    def get_upgrade_status_summary(opts = {})
      data, _status_code, _headers = get_upgrade_status_summary_with_http_info(opts)
      return data
    end

    # Get upgrade status summary
    # Get upgrade status summary
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade units to be filtered
    # @option opts [String] :selection_status Flag to indicate whether to return status for only selected, only deselected or both type of upgrade units
    # @option opts [BOOLEAN] :show_history Get upgrade activity for a given component
    # @return [Array<(UpgradeStatus, Fixnum, Hash)>] UpgradeStatus data, response status code and response headers
    def get_upgrade_status_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_status_summary ..."
      end
      if @api_client.config.client_side_validation && opts[:'selection_status'] && !['SELECTED', 'DESELECTED', 'ALL'].include?(opts[:'selection_status'])
        fail ArgumentError, 'invalid value for "selection_status", must be one of SELECTED, DESELECTED, ALL'
      end
      # resource path
      local_var_path = "/upgrade/status-summary"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'selection_status'] = opts[:'selection_status'] if !opts[:'selection_status'].nil?
      query_params[:'show_history'] = opts[:'show_history'] if !opts[:'show_history'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_status_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get upgrade summary
    # Get upgrade summary
    # @param [Hash] opts the optional parameters
    # @return [UpgradeSummary]
    def get_upgrade_summary(opts = {})
      data, _status_code, _headers = get_upgrade_summary_with_http_info(opts)
      return data
    end

    # Get upgrade summary
    # Get upgrade summary
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeSummary, Fixnum, Hash)>] UpgradeSummary data, response status code and response headers
    def get_upgrade_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_summary ..."
      end
      # resource path
      local_var_path = "/upgrade/summary"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific upgrade unit
    # Get a specific upgrade unit
    # @param upgrade_unit_id 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeUnit]
    def get_upgrade_unit(upgrade_unit_id, opts = {})
      data, _status_code, _headers = get_upgrade_unit_with_http_info(upgrade_unit_id, opts)
      return data
    end

    # Get a specific upgrade unit
    # Get a specific upgrade unit
    # @param upgrade_unit_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeUnit, Fixnum, Hash)>] UpgradeUnit data, response status code and response headers
    def get_upgrade_unit_with_http_info(upgrade_unit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_unit ..."
      end
      # verify the required parameter 'upgrade_unit_id' is set
      if @api_client.config.client_side_validation && upgrade_unit_id.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_unit_id' when calling UpgradeApi.get_upgrade_unit"
      end
      # resource path
      local_var_path = "/upgrade/upgrade-units/{upgrade-unit-id}".sub('{' + 'upgrade-unit-id' + '}', upgrade_unit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_unit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get upgrade units aggregate-info
    # Get upgrade units aggregate-info
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade units to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :group_id Identifier of group based on which upgrade units to be filtered
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only upgrade units with errors (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :metadata Metadata about upgrade unit to filter on
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :selection_status Flag to indicate whether to return only selected, only deselected or both type of upgrade units (default to ALL)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [UpgradeUnitAggregateInfoListResult]
    def get_upgrade_unit_aggregate_info(opts = {})
      data, _status_code, _headers = get_upgrade_unit_aggregate_info_with_http_info(opts)
      return data
    end

    # Get upgrade units aggregate-info
    # Get upgrade units aggregate-info
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade units to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :group_id Identifier of group based on which upgrade units to be filtered
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only upgrade units with errors
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :metadata Metadata about upgrade unit to filter on
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :selection_status Flag to indicate whether to return only selected, only deselected or both type of upgrade units
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(UpgradeUnitAggregateInfoListResult, Fixnum, Hash)>] UpgradeUnitAggregateInfoListResult data, response status code and response headers
    def get_upgrade_unit_aggregate_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_unit_aggregate_info ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_unit_aggregate_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_unit_aggregate_info, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'selection_status'] && !['SELECTED', 'DESELECTED', 'ALL'].include?(opts[:'selection_status'])
        fail ArgumentError, 'invalid value for "selection_status", must be one of SELECTED, DESELECTED, ALL'
      end
      # resource path
      local_var_path = "/upgrade/upgrade-units/aggregate-info"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'has_errors'] = opts[:'has_errors'] if !opts[:'has_errors'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'selection_status'] = opts[:'selection_status'] if !opts[:'selection_status'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitAggregateInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_unit_aggregate_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return upgrade unit group information
    # Return upgrade unit group information
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :summary Flag indicating whether to return the summary (default to false)
    # @return [UpgradeUnitGroup]
    def get_upgrade_unit_group(group_id, opts = {})
      data, _status_code, _headers = get_upgrade_unit_group_with_http_info(group_id, opts)
      return data
    end

    # Return upgrade unit group information
    # Return upgrade unit group information
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :summary Flag indicating whether to return the summary
    # @return [Array<(UpgradeUnitGroup, Fixnum, Hash)>] UpgradeUnitGroup data, response status code and response headers
    def get_upgrade_unit_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_unit_group ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UpgradeApi.get_upgrade_unit_group"
      end
      # resource path
      local_var_path = "/upgrade/upgrade-unit-groups/{group-id}".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return aggregate information of all upgrade unit groups
    # Return aggregate information of all upgrade unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary (default to false)
    # @option opts [BOOLEAN] :sync Synchronize before returning upgrade unit groups (default to false)
    # @return [UpgradeUnitGroupAggregateInfoListResult]
    def get_upgrade_unit_group_aggregate_info(opts = {})
      data, _status_code, _headers = get_upgrade_unit_group_aggregate_info_with_http_info(opts)
      return data
    end

    # Return aggregate information of all upgrade unit groups
    # Return aggregate information of all upgrade unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary
    # @option opts [BOOLEAN] :sync Synchronize before returning upgrade unit groups
    # @return [Array<(UpgradeUnitGroupAggregateInfoListResult, Fixnum, Hash)>] UpgradeUnitGroupAggregateInfoListResult data, response status code and response headers
    def get_upgrade_unit_group_aggregate_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_unit_group_aggregate_info ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_unit_group_aggregate_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_unit_group_aggregate_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/upgrade/upgrade-unit-groups/aggregate-info"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?
      query_params[:'sync'] = opts[:'sync'] if !opts[:'sync'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroupAggregateInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_unit_group_aggregate_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get upgrade status for group
    # Get upgrade status for group
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only upgrade units with errors (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [UpgradeUnitStatusListResult]
    def get_upgrade_unit_group_status(group_id, opts = {})
      data, _status_code, _headers = get_upgrade_unit_group_status_with_http_info(group_id, opts)
      return data
    end

    # Get upgrade status for group
    # Get upgrade status for group
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only upgrade units with errors
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(UpgradeUnitStatusListResult, Fixnum, Hash)>] UpgradeUnitStatusListResult data, response status code and response headers
    def get_upgrade_unit_group_status_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_unit_group_status ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UpgradeApi.get_upgrade_unit_group_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_unit_group_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_unit_group_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/upgrade/upgrade-unit-groups/{group-id}/status".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'has_errors'] = opts[:'has_errors'] if !opts[:'has_errors'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_unit_group_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return information of all upgrade unit groups
    # Return information of all upgrade unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary (default to false)
    # @option opts [BOOLEAN] :sync Synchronize before returning upgrade unit groups (default to false)
    # @return [UpgradeUnitGroupListResult]
    def get_upgrade_unit_groups(opts = {})
      data, _status_code, _headers = get_upgrade_unit_groups_with_http_info(opts)
      return data
    end

    # Return information of all upgrade unit groups
    # Return information of all upgrade unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary
    # @option opts [BOOLEAN] :sync Synchronize before returning upgrade unit groups
    # @return [Array<(UpgradeUnitGroupListResult, Fixnum, Hash)>] UpgradeUnitGroupListResult data, response status code and response headers
    def get_upgrade_unit_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_unit_groups ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_unit_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_unit_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/upgrade/upgrade-unit-groups"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?
      query_params[:'sync'] = opts[:'sync'] if !opts[:'sync'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_unit_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get upgrade status for upgrade unit groups
    # Get upgrade status for upgrade unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [UpgradeUnitGroupStatusListResult]
    def get_upgrade_unit_groups_status(opts = {})
      data, _status_code, _headers = get_upgrade_unit_groups_status_with_http_info(opts)
      return data
    end

    # Get upgrade status for upgrade unit groups
    # Get upgrade status for upgrade unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(UpgradeUnitGroupStatusListResult, Fixnum, Hash)>] UpgradeUnitGroupStatusListResult data, response status code and response headers
    def get_upgrade_unit_groups_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_unit_groups_status ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_unit_groups_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_unit_groups_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/upgrade/upgrade-unit-groups-status"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroupStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_unit_groups_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get upgrade units
    # Get upgrade units
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade units to be filtered
    # @option opts [String] :current_version Current version of upgrade unit based on which upgrade units to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :group_id UUID of group based on which upgrade units to be filtered
    # @option opts [BOOLEAN] :has_warnings Flag to indicate whether to return only upgrade units with warnings (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :metadata Metadata about upgrade unit to filter on
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :upgrade_unit_type Upgrade unit type based on which upgrade units to be filtered
    # @return [UpgradeUnitListResult]
    def get_upgrade_units(opts = {})
      data, _status_code, _headers = get_upgrade_units_with_http_info(opts)
      return data
    end

    # Get upgrade units
    # Get upgrade units
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade units to be filtered
    # @option opts [String] :current_version Current version of upgrade unit based on which upgrade units to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :group_id UUID of group based on which upgrade units to be filtered
    # @option opts [BOOLEAN] :has_warnings Flag to indicate whether to return only upgrade units with warnings
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :metadata Metadata about upgrade unit to filter on
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :upgrade_unit_type Upgrade unit type based on which upgrade units to be filtered
    # @return [Array<(UpgradeUnitListResult, Fixnum, Hash)>] UpgradeUnitListResult data, response status code and response headers
    def get_upgrade_units_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_units ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_units, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_units, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/upgrade/upgrade-units"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'current_version'] = opts[:'current_version'] if !opts[:'current_version'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'has_warnings'] = opts[:'has_warnings'] if !opts[:'has_warnings'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'upgrade_unit_type'] = opts[:'upgrade_unit_type'] if !opts[:'upgrade_unit_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get upgrade units stats
    # Get upgrade units stats
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :sync Synchronize before returning upgrade unit stats (default to false)
    # @return [UpgradeUnitTypeStatsList]
    def get_upgrade_units_stats(opts = {})
      data, _status_code, _headers = get_upgrade_units_stats_with_http_info(opts)
      return data
    end

    # Get upgrade units stats
    # Get upgrade units stats
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :sync Synchronize before returning upgrade unit stats
    # @return [Array<(UpgradeUnitTypeStatsList, Fixnum, Hash)>] UpgradeUnitTypeStatsList data, response status code and response headers
    def get_upgrade_units_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_upgrade_units_stats ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_units_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling UpgradeApi.get_upgrade_units_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/upgrade/upgrade-units-stats"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sync'] = opts[:'sync'] if !opts[:'sync'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitTypeStatsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_units_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the version whitelist
    # Get whitelist of versions for different components
    # @param [Hash] opts the optional parameters
    # @return [AcceptableComponentVersionList]
    def get_version_whitelist(opts = {})
      data, _status_code, _headers = get_version_whitelist_with_http_info(opts)
      return data
    end

    # Get the version whitelist
    # Get whitelist of versions for different components
    # @param [Hash] opts the optional parameters
    # @return [Array<(AcceptableComponentVersionList, Fixnum, Hash)>] AcceptableComponentVersionList data, response status code and response headers
    def get_version_whitelist_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_version_whitelist ..."
      end
      # resource path
      local_var_path = "/upgrade/version-whitelist"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AcceptableComponentVersionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_version_whitelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the version whitelist for the specified component
    # Get whitelist of versions for a component. Component can include HOST, EDGE, CCP, MP
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [AcceptableComponentVersion]
    def get_version_whitelist_by_component(component_type, opts = {})
      data, _status_code, _headers = get_version_whitelist_by_component_with_http_info(component_type, opts)
      return data
    end

    # Get the version whitelist for the specified component
    # Get whitelist of versions for a component. Component can include HOST, EDGE, CCP, MP
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AcceptableComponentVersion, Fixnum, Hash)>] AcceptableComponentVersion data, response status code and response headers
    def get_version_whitelist_by_component_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.get_version_whitelist_by_component ..."
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling UpgradeApi.get_version_whitelist_by_component"
      end
      # resource path
      local_var_path = "/upgrade/version-whitelist/{component_type}".sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AcceptableComponentVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_version_whitelist_by_component\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pause upgrade
    # Pause upgrade
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pause_upgrade_pause(opts = {})
      pause_upgrade_pause_with_http_info(opts)
      return nil
    end

    # Pause upgrade
    # Pause upgrade
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def pause_upgrade_pause_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.pause_upgrade_pause ..."
      end
      # resource path
      local_var_path = "/upgrade/plan?action=pause"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#pause_upgrade_pause\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorder upgrade unit group
    # Reorder upgrade unit group
    # @param group_id 
    # @param reorder_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reorder_upgrade_unit_group_reorder(group_id, reorder_request, opts = {})
      reorder_upgrade_unit_group_reorder_with_http_info(group_id, reorder_request, opts)
      return nil
    end

    # Reorder upgrade unit group
    # Reorder upgrade unit group
    # @param group_id 
    # @param reorder_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reorder_upgrade_unit_group_reorder_with_http_info(group_id, reorder_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.reorder_upgrade_unit_group_reorder ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UpgradeApi.reorder_upgrade_unit_group_reorder"
      end
      # verify the required parameter 'reorder_request' is set
      if @api_client.config.client_side_validation && reorder_request.nil?
        fail ArgumentError, "Missing the required parameter 'reorder_request' when calling UpgradeApi.reorder_upgrade_unit_group_reorder"
      end
      # resource path
      local_var_path = "/upgrade/upgrade-unit-groups/{group-id}?action=reorder".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reorder_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#reorder_upgrade_unit_group_reorder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorder an upgrade unit within the upgrade unit group
    # Reorder an upgrade unit within the upgrade unit group
    # @param group_id 
    # @param upgrade_unit_id 
    # @param reorder_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reorder_upgrade_unit_reorder(group_id, upgrade_unit_id, reorder_request, opts = {})
      reorder_upgrade_unit_reorder_with_http_info(group_id, upgrade_unit_id, reorder_request, opts)
      return nil
    end

    # Reorder an upgrade unit within the upgrade unit group
    # Reorder an upgrade unit within the upgrade unit group
    # @param group_id 
    # @param upgrade_unit_id 
    # @param reorder_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reorder_upgrade_unit_reorder_with_http_info(group_id, upgrade_unit_id, reorder_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.reorder_upgrade_unit_reorder ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UpgradeApi.reorder_upgrade_unit_reorder"
      end
      # verify the required parameter 'upgrade_unit_id' is set
      if @api_client.config.client_side_validation && upgrade_unit_id.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_unit_id' when calling UpgradeApi.reorder_upgrade_unit_reorder"
      end
      # verify the required parameter 'reorder_request' is set
      if @api_client.config.client_side_validation && reorder_request.nil?
        fail ArgumentError, "Missing the required parameter 'reorder_request' when calling UpgradeApi.reorder_upgrade_unit_reorder"
      end
      # resource path
      local_var_path = "/upgrade/upgrade-unit-groups/{group-id}/upgrade-unit/{upgrade-unit-id}?action=reorder".sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'upgrade-unit-id' + '}', upgrade_unit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reorder_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#reorder_upgrade_unit_reorder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset upgrade plan to default plan
    # Reset the upgrade plan to default plan. User has an option to change the default plan. But if after making changes, user wants to go back to the default plan, this is the way to do so. 
    # @param component_type Component type
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_upgrade_plan_reset(component_type, opts = {})
      reset_upgrade_plan_reset_with_http_info(component_type, opts)
      return nil
    end

    # Reset upgrade plan to default plan
    # Reset the upgrade plan to default plan. User has an option to change the default plan. But if after making changes, user wants to go back to the default plan, this is the way to do so. 
    # @param component_type Component type
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_upgrade_plan_reset_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.reset_upgrade_plan_reset ..."
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling UpgradeApi.reset_upgrade_plan_reset"
      end
      # resource path
      local_var_path = "/upgrade/plan?action=reset"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = component_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#reset_upgrade_plan_reset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start upgrade
    # Start upgrade
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def start_upgrade_start(opts = {})
      start_upgrade_start_with_http_info(opts)
      return nil
    end

    # Start upgrade
    # Start upgrade
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def start_upgrade_start_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.start_upgrade_start ..."
      end
      # resource path
      local_var_path = "/upgrade/plan?action=start"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#start_upgrade_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upgrade the upgrade coordinator.
    # Upgrade the upgrade coordinator.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def trigger_uc_upgrade_upgrade_uc(opts = {})
      trigger_uc_upgrade_upgrade_uc_with_http_info(opts)
      return nil
    end

    # Upgrade the upgrade coordinator.
    # Upgrade the upgrade coordinator.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def trigger_uc_upgrade_upgrade_uc_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.trigger_uc_upgrade_upgrade_uc ..."
      end
      # resource path
      local_var_path = "/upgrade?action=upgrade_uc"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#trigger_uc_upgrade_upgrade_uc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update upgrade plan settings for the component
    # Update the upgrade plan settings for the component. 
    # @param component_type 
    # @param upgrade_plan_settings 
    # @param [Hash] opts the optional parameters
    # @return [UpgradePlanSettings]
    def update_upgrade_plan_settings(component_type, upgrade_plan_settings, opts = {})
      data, _status_code, _headers = update_upgrade_plan_settings_with_http_info(component_type, upgrade_plan_settings, opts)
      return data
    end

    # Update upgrade plan settings for the component
    # Update the upgrade plan settings for the component. 
    # @param component_type 
    # @param upgrade_plan_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradePlanSettings, Fixnum, Hash)>] UpgradePlanSettings data, response status code and response headers
    def update_upgrade_plan_settings_with_http_info(component_type, upgrade_plan_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.update_upgrade_plan_settings ..."
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling UpgradeApi.update_upgrade_plan_settings"
      end
      # verify the required parameter 'upgrade_plan_settings' is set
      if @api_client.config.client_side_validation && upgrade_plan_settings.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_plan_settings' when calling UpgradeApi.update_upgrade_plan_settings"
      end
      # resource path
      local_var_path = "/upgrade/plan/{component_type}/settings".sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_plan_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradePlanSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#update_upgrade_plan_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the upgrade unit group
    # Update the upgrade unit group
    # @param group_id 
    # @param upgrade_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeUnitGroup]
    def update_upgrade_unit_group(group_id, upgrade_unit_group, opts = {})
      data, _status_code, _headers = update_upgrade_unit_group_with_http_info(group_id, upgrade_unit_group, opts)
      return data
    end

    # Update the upgrade unit group
    # Update the upgrade unit group
    # @param group_id 
    # @param upgrade_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeUnitGroup, Fixnum, Hash)>] UpgradeUnitGroup data, response status code and response headers
    def update_upgrade_unit_group_with_http_info(group_id, upgrade_unit_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.update_upgrade_unit_group ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UpgradeApi.update_upgrade_unit_group"
      end
      # verify the required parameter 'upgrade_unit_group' is set
      if @api_client.config.client_side_validation && upgrade_unit_group.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_unit_group' when calling UpgradeApi.update_upgrade_unit_group"
      end
      # resource path
      local_var_path = "/upgrade/upgrade-unit-groups/{group-id}".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_unit_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#update_upgrade_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the version whitelist for the specified component type
    # Update the version whitelist for the specified component type (HOST, EDGE, CCP, MP).
    # @param component_type 
    # @param version_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_version_whitelist(component_type, version_list, opts = {})
      update_version_whitelist_with_http_info(component_type, version_list, opts)
      return nil
    end

    # Update the version whitelist for the specified component type
    # Update the version whitelist for the specified component type (HOST, EDGE, CCP, MP).
    # @param component_type 
    # @param version_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_version_whitelist_with_http_info(component_type, version_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.update_version_whitelist ..."
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling UpgradeApi.update_version_whitelist"
      end
      # verify the required parameter 'version_list' is set
      if @api_client.config.client_side_validation && version_list.nil?
        fail ArgumentError, "Missing the required parameter 'version_list' when calling UpgradeApi.update_version_whitelist"
      end
      # resource path
      local_var_path = "/upgrade/version-whitelist/{component_type}".sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(version_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#update_version_whitelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upgrade selected units
    # Upgrade selected units
    # @param upgrade_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upgrade_selected_units_upgrade_selected_units(upgrade_unit_list, opts = {})
      upgrade_selected_units_upgrade_selected_units_with_http_info(upgrade_unit_list, opts)
      return nil
    end

    # Upgrade selected units
    # Upgrade selected units
    # @param upgrade_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upgrade_selected_units_upgrade_selected_units_with_http_info(upgrade_unit_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpgradeApi.upgrade_selected_units_upgrade_selected_units ..."
      end
      # verify the required parameter 'upgrade_unit_list' is set
      if @api_client.config.client_side_validation && upgrade_unit_list.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_unit_list' when calling UpgradeApi.upgrade_selected_units_upgrade_selected_units"
      end
      # resource path
      local_var_path = "/upgrade/plan?action=upgrade_selected_units"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_unit_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#upgrade_selected_units_upgrade_selected_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
