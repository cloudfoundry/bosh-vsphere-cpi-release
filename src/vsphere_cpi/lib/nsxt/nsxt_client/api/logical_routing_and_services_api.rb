=begin
#NSX API

#VMware NSX REST API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module NSXT
  class LogicalRoutingAndServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add a new BGP Neighbor on a Logical Router
    # Add a new BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param bgp_neighbor 
    # @param [Hash] opts the optional parameters
    # @return [BgpNeighbor]
    def add_bgp_neighbor(logical_router_id, bgp_neighbor, opts = {})
      data, _status_code, _headers = add_bgp_neighbor_with_http_info(logical_router_id, bgp_neighbor, opts)
      return data
    end

    # Add a new BGP Neighbor on a Logical Router
    # Add a new BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param bgp_neighbor 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpNeighbor, Fixnum, Hash)>] BgpNeighbor data, response status code and response headers
    def add_bgp_neighbor_with_http_info(logical_router_id, bgp_neighbor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.add_bgp_neighbor ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.add_bgp_neighbor"
      end
      # verify the required parameter 'bgp_neighbor' is set
      if @api_client.config.client_side_validation && bgp_neighbor.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_neighbor' when calling LogicalRoutingAndServicesApi.add_bgp_neighbor"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/bgp/neighbors".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bgp_neighbor)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighbor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#add_bgp_neighbor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add IPPrefixList on a Logical Router
    # Adds a new IPPrefixList on a Logical Router 
    # @param logical_router_id 
    # @param ip_prefix_list 
    # @param [Hash] opts the optional parameters
    # @return [IPPrefixList]
    def add_ip_prefix_list(logical_router_id, ip_prefix_list, opts = {})
      data, _status_code, _headers = add_ip_prefix_list_with_http_info(logical_router_id, ip_prefix_list, opts)
      return data
    end

    # Add IPPrefixList on a Logical Router
    # Adds a new IPPrefixList on a Logical Router 
    # @param logical_router_id 
    # @param ip_prefix_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPPrefixList, Fixnum, Hash)>] IPPrefixList data, response status code and response headers
    def add_ip_prefix_list_with_http_info(logical_router_id, ip_prefix_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.add_ip_prefix_list ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.add_ip_prefix_list"
      end
      # verify the required parameter 'ip_prefix_list' is set
      if @api_client.config.client_side_validation && ip_prefix_list.nil?
        fail ArgumentError, "Missing the required parameter 'ip_prefix_list' when calling LogicalRoutingAndServicesApi.add_ip_prefix_list"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/ip-prefix-lists".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_prefix_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPPrefixList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#add_ip_prefix_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a NAT rule in a specific logical router
    # Add a NAT rule in a specific logical router. 
    # @param logical_router_id 
    # @param nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [NatRule]
    def add_nat_rule(logical_router_id, nat_rule, opts = {})
      data, _status_code, _headers = add_nat_rule_with_http_info(logical_router_id, nat_rule, opts)
      return data
    end

    # Add a NAT rule in a specific logical router
    # Add a NAT rule in a specific logical router. 
    # @param logical_router_id 
    # @param nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NatRule, Fixnum, Hash)>] NatRule data, response status code and response headers
    def add_nat_rule_with_http_info(logical_router_id, nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.add_nat_rule ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.add_nat_rule"
      end
      # verify the required parameter 'nat_rule' is set
      if @api_client.config.client_side_validation && nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule' when calling LogicalRoutingAndServicesApi.add_nat_rule"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/nat/rules".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#add_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add RouteMap on a Logical Router
    # Adds a new RouteMap on a Logical Router 
    # @param logical_router_id 
    # @param route_map 
    # @param [Hash] opts the optional parameters
    # @return [RouteMap]
    def add_route_map(logical_router_id, route_map, opts = {})
      data, _status_code, _headers = add_route_map_with_http_info(logical_router_id, route_map, opts)
      return data
    end

    # Add RouteMap on a Logical Router
    # Adds a new RouteMap on a Logical Router 
    # @param logical_router_id 
    # @param route_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RouteMap, Fixnum, Hash)>] RouteMap data, response status code and response headers
    def add_route_map_with_http_info(logical_router_id, route_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.add_route_map ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.add_route_map"
      end
      # verify the required parameter 'route_map' is set
      if @api_client.config.client_side_validation && route_map.nil?
        fail ArgumentError, "Missing the required parameter 'route_map' when calling LogicalRoutingAndServicesApi.add_route_map"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/route-maps".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(route_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RouteMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#add_route_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Static Routes on a Logical Router
    # Adds a new static route on a Logical Router 
    # @param logical_router_id 
    # @param static_route 
    # @param [Hash] opts the optional parameters
    # @return [StaticRoute]
    def add_static_route(logical_router_id, static_route, opts = {})
      data, _status_code, _headers = add_static_route_with_http_info(logical_router_id, static_route, opts)
      return data
    end

    # Add Static Routes on a Logical Router
    # Adds a new static route on a Logical Router 
    # @param logical_router_id 
    # @param static_route 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticRoute, Fixnum, Hash)>] StaticRoute data, response status code and response headers
    def add_static_route_with_http_info(logical_router_id, static_route, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.add_static_route ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.add_static_route"
      end
      # verify the required parameter 'static_route' is set
      if @api_client.config.client_side_validation && static_route.nil?
        fail ArgumentError, "Missing the required parameter 'static_route' when calling LogicalRoutingAndServicesApi.add_static_route"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/static-routes".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_route)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#add_static_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a DHCP Relay Service
    # Creates a dhcp relay service. 
    # @param dhcp_relay_service 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayService]
    def create_dhcp_relay(dhcp_relay_service, opts = {})
      data, _status_code, _headers = create_dhcp_relay_with_http_info(dhcp_relay_service, opts)
      return data
    end

    # Create a DHCP Relay Service
    # Creates a dhcp relay service. 
    # @param dhcp_relay_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayService, Fixnum, Hash)>] DhcpRelayService data, response status code and response headers
    def create_dhcp_relay_with_http_info(dhcp_relay_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.create_dhcp_relay ..."
      end
      # verify the required parameter 'dhcp_relay_service' is set
      if @api_client.config.client_side_validation && dhcp_relay_service.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_service' when calling LogicalRoutingAndServicesApi.create_dhcp_relay"
      end
      # resource path
      local_var_path = "/dhcp/relays"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#create_dhcp_relay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a DHCP Relay Profile
    # Creates a dhcp relay profile. 
    # @param dhcp_relay_profile 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayProfile]
    def create_dhcp_relay_profile(dhcp_relay_profile, opts = {})
      data, _status_code, _headers = create_dhcp_relay_profile_with_http_info(dhcp_relay_profile, opts)
      return data
    end

    # Create a DHCP Relay Profile
    # Creates a dhcp relay profile. 
    # @param dhcp_relay_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayProfile, Fixnum, Hash)>] DhcpRelayProfile data, response status code and response headers
    def create_dhcp_relay_profile_with_http_info(dhcp_relay_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.create_dhcp_relay_profile ..."
      end
      # verify the required parameter 'dhcp_relay_profile' is set
      if @api_client.config.client_side_validation && dhcp_relay_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_profile' when calling LogicalRoutingAndServicesApi.create_dhcp_relay_profile"
      end
      # resource path
      local_var_path = "/dhcp/relay-profiles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#create_dhcp_relay_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Logical Router
    # Creates a logical router. The required parameters are router_type (TIER0 or TIER1) and edge_cluster_id (TIER0 only). Optional parameters include internal and external transit network addresses. 
    # @param logical_router 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouter]
    def create_logical_router(logical_router, opts = {})
      data, _status_code, _headers = create_logical_router_with_http_info(logical_router, opts)
      return data
    end

    # Create a Logical Router
    # Creates a logical router. The required parameters are router_type (TIER0 or TIER1) and edge_cluster_id (TIER0 only). Optional parameters include internal and external transit network addresses. 
    # @param logical_router 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouter, Fixnum, Hash)>] LogicalRouter data, response status code and response headers
    def create_logical_router_with_http_info(logical_router, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.create_logical_router ..."
      end
      # verify the required parameter 'logical_router' is set
      if @api_client.config.client_side_validation && logical_router.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router' when calling LogicalRoutingAndServicesApi.create_logical_router"
      end
      # resource path
      local_var_path = "/logical-routers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_router)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouter')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#create_logical_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Logical Router Port
    # Creates a logical router port. The required parameters include resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort); and logical_router_id (the router to which each logical router port is assigned). The service_bindings parameter is optional. 
    # @param logical_router_port 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouterPort]
    def create_logical_router_port(logical_router_port, opts = {})
      data, _status_code, _headers = create_logical_router_port_with_http_info(logical_router_port, opts)
      return data
    end

    # Create a Logical Router Port
    # Creates a logical router port. The required parameters include resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort); and logical_router_id (the router to which each logical router port is assigned). The service_bindings parameter is optional. 
    # @param logical_router_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouterPort, Fixnum, Hash)>] LogicalRouterPort data, response status code and response headers
    def create_logical_router_port_with_http_info(logical_router_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.create_logical_router_port ..."
      end
      # verify the required parameter 'logical_router_port' is set
      if @api_client.config.client_side_validation && logical_router_port.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port' when calling LogicalRoutingAndServicesApi.create_logical_router_port"
      end
      # resource path
      local_var_path = "/logical-router-ports"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_router_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#create_logical_router_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Logical Router Service
    # Creates a service that can be applied to one or more logical router ports. For some service types, you must create a service-profile before you can create a service. 
    # @param logical_service 
    # @param [Hash] opts the optional parameters
    # @return [LogicalService]
    def create_service(logical_service, opts = {})
      data, _status_code, _headers = create_service_with_http_info(logical_service, opts)
      return data
    end

    # Create a Logical Router Service
    # Creates a service that can be applied to one or more logical router ports. For some service types, you must create a service-profile before you can create a service. 
    # @param logical_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalService, Fixnum, Hash)>] LogicalService data, response status code and response headers
    def create_service_with_http_info(logical_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.create_service ..."
      end
      # verify the required parameter 'logical_service' is set
      if @api_client.config.client_side_validation && logical_service.nil?
        fail ArgumentError, "Missing the required parameter 'logical_service' when calling LogicalRoutingAndServicesApi.create_service"
      end
      # resource path
      local_var_path = "/services"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#create_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Service Profile
    # Creates a service profile, which can then be used to create a service. Services are then applied to one or more logical router ports. 
    # @param service_profile 
    # @param [Hash] opts the optional parameters
    # @return [ServiceProfile]
    def create_service_profile(service_profile, opts = {})
      data, _status_code, _headers = create_service_profile_with_http_info(service_profile, opts)
      return data
    end

    # Create a Service Profile
    # Creates a service profile, which can then be used to create a service. Services are then applied to one or more logical router ports. 
    # @param service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceProfile, Fixnum, Hash)>] ServiceProfile data, response status code and response headers
    def create_service_profile_with_http_info(service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.create_service_profile ..."
      end
      # verify the required parameter 'service_profile' is set
      if @api_client.config.client_side_validation && service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile' when calling LogicalRoutingAndServicesApi.create_service_profile"
      end
      # resource path
      local_var_path = "/service-profiles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#create_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a static hop BFD peer
    # Creates a BFD peer for static route. The required parameters includes peer IP address. 
    # @param logical_router_id 
    # @param static_hop_bfd_peer 
    # @param [Hash] opts the optional parameters
    # @return [StaticHopBfdPeer]
    def create_static_hop_bfd_peer(logical_router_id, static_hop_bfd_peer, opts = {})
      data, _status_code, _headers = create_static_hop_bfd_peer_with_http_info(logical_router_id, static_hop_bfd_peer, opts)
      return data
    end

    # Create a static hop BFD peer
    # Creates a BFD peer for static route. The required parameters includes peer IP address. 
    # @param logical_router_id 
    # @param static_hop_bfd_peer 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticHopBfdPeer, Fixnum, Hash)>] StaticHopBfdPeer data, response status code and response headers
    def create_static_hop_bfd_peer_with_http_info(logical_router_id, static_hop_bfd_peer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.create_static_hop_bfd_peer ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.create_static_hop_bfd_peer"
      end
      # verify the required parameter 'static_hop_bfd_peer' is set
      if @api_client.config.client_side_validation && static_hop_bfd_peer.nil?
        fail ArgumentError, "Missing the required parameter 'static_hop_bfd_peer' when calling LogicalRoutingAndServicesApi.create_static_hop_bfd_peer"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/static-routes/bfd-peers".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_hop_bfd_peer)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticHopBfdPeer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#create_static_hop_bfd_peer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific BGP Neighbor on a Logical Router
    # Delete a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bgp_neighbor(logical_router_id, id, opts = {})
      delete_bgp_neighbor_with_http_info(logical_router_id, id, opts)
      return nil
    end

    # Delete a specific BGP Neighbor on a Logical Router
    # Delete a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bgp_neighbor_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_bgp_neighbor ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.delete_bgp_neighbor"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.delete_bgp_neighbor"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_bgp_neighbor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a DHCP Relay Service
    # Deletes the specified dhcp relay service.
    # @param relay_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_relay(relay_id, opts = {})
      delete_dhcp_relay_with_http_info(relay_id, opts)
      return nil
    end

    # Delete a DHCP Relay Service
    # Deletes the specified dhcp relay service.
    # @param relay_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_relay_with_http_info(relay_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_dhcp_relay ..."
      end
      # verify the required parameter 'relay_id' is set
      if @api_client.config.client_side_validation && relay_id.nil?
        fail ArgumentError, "Missing the required parameter 'relay_id' when calling LogicalRoutingAndServicesApi.delete_dhcp_relay"
      end
      # resource path
      local_var_path = "/dhcp/relays/{relay-id}".sub('{' + 'relay-id' + '}', relay_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_dhcp_relay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a DHCP Relay Profile
    # Deletes the specified dhcp relay profile.
    # @param relay_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_relay_profile(relay_profile_id, opts = {})
      delete_dhcp_relay_profile_with_http_info(relay_profile_id, opts)
      return nil
    end

    # Delete a DHCP Relay Profile
    # Deletes the specified dhcp relay profile.
    # @param relay_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_relay_profile_with_http_info(relay_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_dhcp_relay_profile ..."
      end
      # verify the required parameter 'relay_profile_id' is set
      if @api_client.config.client_side_validation && relay_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'relay_profile_id' when calling LogicalRoutingAndServicesApi.delete_dhcp_relay_profile"
      end
      # resource path
      local_var_path = "/dhcp/relay-profiles/{relay-profile-id}".sub('{' + 'relay-profile-id' + '}', relay_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_dhcp_relay_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific IPPrefixList on a Logical Router
    # Deletes a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ip_prefix_list(logical_router_id, id, opts = {})
      delete_ip_prefix_list_with_http_info(logical_router_id, id, opts)
      return nil
    end

    # Delete a specific IPPrefixList on a Logical Router
    # Deletes a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_prefix_list_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_ip_prefix_list ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.delete_ip_prefix_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.delete_ip_prefix_list"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/ip-prefix-lists/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_ip_prefix_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Logical Router
    # Deletes the specified logical router. You must delete associated logical router ports before you can delete a logical router. Otherwise use force delete which will delete all related ports and other entities associated with that LR. To force delete logical router pass force=true in query param. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_logical_router(logical_router_id, opts = {})
      delete_logical_router_with_http_info(logical_router_id, opts)
      return nil
    end

    # Delete a Logical Router
    # Deletes the specified logical router. You must delete associated logical router ports before you can delete a logical router. Otherwise use force delete which will delete all related ports and other entities associated with that LR. To force delete logical router pass force&#x3D;true in query param. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_logical_router_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_logical_router ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.delete_logical_router"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_logical_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Logical Router Port
    # Deletes the specified logical router port. You must delete logical router ports before you can delete the associated logical router. To Delete Tier0 router link port you must have to delete attached tier1 router link port, otherwise pass \"force=true\" as query param to force delete the Tier0 router link port. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_logical_router_port(logical_router_port_id, opts = {})
      delete_logical_router_port_with_http_info(logical_router_port_id, opts)
      return nil
    end

    # Delete a Logical Router Port
    # Deletes the specified logical router port. You must delete logical router ports before you can delete the associated logical router. To Delete Tier0 router link port you must have to delete attached tier1 router link port, otherwise pass \&quot;force&#x3D;true\&quot; as query param to force delete the Tier0 router link port. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_logical_router_port_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_logical_router_port ..."
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling LogicalRoutingAndServicesApi.delete_logical_router_port"
      end
      # resource path
      local_var_path = "/logical-router-ports/{logical-router-port-id}".sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_logical_router_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Logical Router Port
    # Deletes the specified logical router port. You must delete logical router ports before you can delete the associated logical router. To Delete Tier0 router link port you must have to delete attached tier1 router link port, otherwise pass 'force=true' as query param to force delete the Tier0 router link port.  
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_logical_router_ports(opts = {})
      delete_logical_router_ports_with_http_info(opts)
      return nil
    end

    # Delete a Logical Router Port
    # Deletes the specified logical router port. You must delete logical router ports before you can delete the associated logical router. To Delete Tier0 router link port you must have to delete attached tier1 router link port, otherwise pass &#39;force&#x3D;true&#39; as query param to force delete the Tier0 router link port.  
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_logical_router_ports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_logical_router_ports ..."
      end
      # resource path
      local_var_path = "/logical-router-ports"

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_logical_router_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific NAT rule from a logical router
    # Delete a specific NAT rule from a logical router 
    # @param logical_router_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_nat_rule(logical_router_id, rule_id, opts = {})
      delete_nat_rule_with_http_info(logical_router_id, rule_id, opts)
      return nil
    end

    # Delete a specific NAT rule from a logical router
    # Delete a specific NAT rule from a logical router 
    # @param logical_router_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_nat_rule_with_http_info(logical_router_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_nat_rule ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.delete_nat_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling LogicalRoutingAndServicesApi.delete_nat_rule"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/nat/rules/{rule-id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific RouteMap on a Logical Router
    # Deletes a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_route_map(logical_router_id, id, opts = {})
      delete_route_map_with_http_info(logical_router_id, id, opts)
      return nil
    end

    # Delete a specific RouteMap on a Logical Router
    # Deletes a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_route_map_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_route_map ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.delete_route_map"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.delete_route_map"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/route-maps/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_route_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Logical Router Service
    # Deletes the specified logical router service.
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service(service_id, opts = {})
      delete_service_with_http_info(service_id, opts)
      return nil
    end

    # Delete a Logical Router Service
    # Deletes the specified logical router service.
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_service ..."
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LogicalRoutingAndServicesApi.delete_service"
      end
      # resource path
      local_var_path = "/services/{service-id}".sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Service Profile
    # Deletes the specified service profile.
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_profile(service_profile_id, opts = {})
      delete_service_profile_with_http_info(service_profile_id, opts)
      return nil
    end

    # Delete a Service Profile
    # Deletes the specified service profile.
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_profile_with_http_info(service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_service_profile ..."
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling LogicalRoutingAndServicesApi.delete_service_profile"
      end
      # resource path
      local_var_path = "/service-profiles/{service-profile-id}".sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specified static route BFD peer cofigured on a specified logical router
    # Deletes the specified BFD peer present on specified logical router. 
    # @param logical_router_id 
    # @param bfd_peer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_static_hop_bfd_peer(logical_router_id, bfd_peer_id, opts = {})
      delete_static_hop_bfd_peer_with_http_info(logical_router_id, bfd_peer_id, opts)
      return nil
    end

    # Delete a specified static route BFD peer cofigured on a specified logical router
    # Deletes the specified BFD peer present on specified logical router. 
    # @param logical_router_id 
    # @param bfd_peer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_static_hop_bfd_peer_with_http_info(logical_router_id, bfd_peer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_static_hop_bfd_peer ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.delete_static_hop_bfd_peer"
      end
      # verify the required parameter 'bfd_peer_id' is set
      if @api_client.config.client_side_validation && bfd_peer_id.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_peer_id' when calling LogicalRoutingAndServicesApi.delete_static_hop_bfd_peer"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/static-routes/bfd-peers/{bfd-peer-id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'bfd-peer-id' + '}', bfd_peer_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_static_hop_bfd_peer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific Static Route on a Logical Router
    # Deletes a specific static route on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_static_route(logical_router_id, id, opts = {})
      delete_static_route_with_http_info(logical_router_id, id, opts)
      return nil
    end

    # Delete a specific Static Route on a Logical Router
    # Deletes a specific static route on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_static_route_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.delete_static_route ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.delete_static_route"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.delete_static_route"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/static-routes/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#delete_static_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the status of all the BGP neighbors for the Logical Router of the given id
    # Returns the status of all the BGP neighbors for the Logical Router of the given id. To get BGP neighbors status for the logical router from particular node, parameter \"transport_node_id=<transportnode_id>\" needs to be specified. The query parameter \"source=cached\" is not supported.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id Transport node id
    # @return [BgpNeighborsStatusListResult]
    def get_bgp_neighbors_status(logical_router_id, opts = {})
      data, _status_code, _headers = get_bgp_neighbors_status_with_http_info(logical_router_id, opts)
      return data
    end

    # Get the status of all the BGP neighbors for the Logical Router of the given id
    # Returns the status of all the BGP neighbors for the Logical Router of the given id. To get BGP neighbors status for the logical router from particular node, parameter \&quot;transport_node_id&#x3D;&lt;transportnode_id&gt;\&quot; needs to be specified. The query parameter \&quot;source&#x3D;cached\&quot; is not supported.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id Transport node id
    # @return [Array<(BgpNeighborsStatusListResult, Fixnum, Hash)>] BgpNeighborsStatusListResult data, response status code and response headers
    def get_bgp_neighbors_status_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_bgp_neighbors_status ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.get_bgp_neighbors_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.get_bgp_neighbors_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.get_bgp_neighbors_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/bgp/neighbors/status".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighborsStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_bgp_neighbors_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get FIB table on a specified node for a logical router
    # Returns the FIB for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. To filter the result by network address, paramter \"network_prefix=<a.b.c.d/mask>\" needs to be specified. The query parameter \"source=cached\" is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [String] :network_prefix IPv4 CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTable]
    def get_logical_router_forwarding_table(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_forwarding_table_with_http_info(logical_router_id, transport_node_id, opts)
      return data
    end

    # Get FIB table on a specified node for a logical router
    # Returns the FIB for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. To filter the result by network address, paramter \&quot;network_prefix&#x3D;&lt;a.b.c.d/mask&gt;\&quot; needs to be specified. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [String] :network_prefix IPv4 CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTable, Fixnum, Hash)>] LogicalRouterRouteTable data, response status code and response headers
    def get_logical_router_forwarding_table_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_logical_router_forwarding_table ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.get_logical_router_forwarding_table"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling LogicalRoutingAndServicesApi.get_logical_router_forwarding_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.get_logical_router_forwarding_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.get_logical_router_forwarding_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/forwarding-table".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_logical_router_forwarding_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get FIB table on a specified node for a logical router
    # Returns the FIB table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. To filter the result by network address, paramter \"network_prefix=<a.b.c.d/mask>\" needs to be specified. The query parameter \"source=cached\" is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :network_prefix IPv4 CIDR Block
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTableInCsvFormat]
    def get_logical_router_forwarding_table_in_csv_format_csv(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_forwarding_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts)
      return data
    end

    # Get FIB table on a specified node for a logical router
    # Returns the FIB table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. To filter the result by network address, paramter \&quot;network_prefix&#x3D;&lt;a.b.c.d/mask&gt;\&quot; needs to be specified. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :network_prefix IPv4 CIDR Block
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTableInCsvFormat, Fixnum, Hash)>] LogicalRouterRouteTableInCsvFormat data, response status code and response headers
    def get_logical_router_forwarding_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_logical_router_forwarding_table_in_csv_format_csv ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.get_logical_router_forwarding_table_in_csv_format_csv"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling LogicalRoutingAndServicesApi.get_logical_router_forwarding_table_in_csv_format_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/forwarding-table?format=csv".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_logical_router_forwarding_table_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the ARP table for the Logical Router Port of the given id
    # Returns ARP table for the Logical Router Port of the given id, on a node if a query parameter \"transport_node_id=<transport-node-id>\" is given. The transport_node_id parameter is mandatory if the router port is not uplink type. The query parameter \"source=cached\" is not supported. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [LogicalRouterPortArpTable]
    def get_logical_router_port_arp_table(logical_router_port_id, opts = {})
      data, _status_code, _headers = get_logical_router_port_arp_table_with_http_info(logical_router_port_id, opts)
      return data
    end

    # Get the ARP table for the Logical Router Port of the given id
    # Returns ARP table for the Logical Router Port of the given id, on a node if a query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given. The transport_node_id parameter is mandatory if the router port is not uplink type. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(LogicalRouterPortArpTable, Fixnum, Hash)>] LogicalRouterPortArpTable data, response status code and response headers
    def get_logical_router_port_arp_table_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_logical_router_port_arp_table ..."
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling LogicalRoutingAndServicesApi.get_logical_router_port_arp_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.get_logical_router_port_arp_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.get_logical_router_port_arp_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-router-ports/{logical-router-port-id}/arp-table".sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPortArpTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_logical_router_port_arp_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the ARP table for the Logical Router Port of the given id
    # Returns ARP table in CSV format for the Logical Router Port of the given id, on a node if a query parameter \"transport_node_id=<transport-node-id>\" is given. The transport_node_id parameter is mandatory if the router port is not uplink type. The query parameter \"source=cached\" is not supported. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [LogicalRouterPortArpTableInCsvFormat]
    def get_logical_router_port_arp_table_in_csv_format_csv(logical_router_port_id, opts = {})
      data, _status_code, _headers = get_logical_router_port_arp_table_in_csv_format_csv_with_http_info(logical_router_port_id, opts)
      return data
    end

    # Get the ARP table for the Logical Router Port of the given id
    # Returns ARP table in CSV format for the Logical Router Port of the given id, on a node if a query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given. The transport_node_id parameter is mandatory if the router port is not uplink type. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(LogicalRouterPortArpTableInCsvFormat, Fixnum, Hash)>] LogicalRouterPortArpTableInCsvFormat data, response status code and response headers
    def get_logical_router_port_arp_table_in_csv_format_csv_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_logical_router_port_arp_table_in_csv_format_csv ..."
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling LogicalRoutingAndServicesApi.get_logical_router_port_arp_table_in_csv_format_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-router-ports/{logical-router-port-id}/arp-table?format=csv".sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPortArpTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_logical_router_port_arp_table_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the statistics of a specified logical router port on all or a specified node
    # Returns the statistics for the Logical Router Port. If query parameter \"transport_node_id=<transport-node-id>\" is given,  only the statistics from the given node for the logical router port will be returned. Otherwise the statistics from each node for the same logical router port will be returned. The transport_node_id is mandatory if the router port is not uplink type. The query parameter \"source=realtime\" is not supported. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [LogicalRouterPortStatistics]
    def get_logical_router_port_statistics(logical_router_port_id, opts = {})
      data, _status_code, _headers = get_logical_router_port_statistics_with_http_info(logical_router_port_id, opts)
      return data
    end

    # Get the statistics of a specified logical router port on all or a specified node
    # Returns the statistics for the Logical Router Port. If query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given,  only the statistics from the given node for the logical router port will be returned. Otherwise the statistics from each node for the same logical router port will be returned. The transport_node_id is mandatory if the router port is not uplink type. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(LogicalRouterPortStatistics, Fixnum, Hash)>] LogicalRouterPortStatistics data, response status code and response headers
    def get_logical_router_port_statistics_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_logical_router_port_statistics ..."
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling LogicalRoutingAndServicesApi.get_logical_router_port_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-router-ports/{logical-router-port-id}/statistics".sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_logical_router_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the statistics summary of a specified logical router port
    # Returns the summation of statistics from all nodes for the Specified Logical Router Port. The query parameter \"source=realtime\" is not supported. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterPortStatisticsSummary]
    def get_logical_router_port_statistics_summary(logical_router_port_id, opts = {})
      data, _status_code, _headers = get_logical_router_port_statistics_summary_with_http_info(logical_router_port_id, opts)
      return data
    end

    # Get the statistics summary of a specified logical router port
    # Returns the summation of statistics from all nodes for the Specified Logical Router Port. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterPortStatisticsSummary, Fixnum, Hash)>] LogicalRouterPortStatisticsSummary data, response status code and response headers
    def get_logical_router_port_statistics_summary_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_logical_router_port_statistics_summary ..."
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling LogicalRoutingAndServicesApi.get_logical_router_port_statistics_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-router-ports/{logical-router-port-id}/statistics/summary".sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPortStatisticsSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_logical_router_port_statistics_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get route table on a given node for a logical router
    # Deprecated - Please use /logical-routers/<logical-router-id>/routing/routing-table for RIB and /logical-routers/<logical-router-id>/routing/forwarding-table for FIB. Returns the route table for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. The query parameter \"source=cached\" is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTable]
    def get_logical_router_route_table(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_route_table_with_http_info(logical_router_id, transport_node_id, opts)
      return data
    end

    # Get route table on a given node for a logical router
    # Deprecated - Please use /logical-routers/&lt;logical-router-id&gt;/routing/routing-table for RIB and /logical-routers/&lt;logical-router-id&gt;/routing/forwarding-table for FIB. Returns the route table for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTable, Fixnum, Hash)>] LogicalRouterRouteTable data, response status code and response headers
    def get_logical_router_route_table_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_logical_router_route_table ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.get_logical_router_route_table"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling LogicalRoutingAndServicesApi.get_logical_router_route_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.get_logical_router_route_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.get_logical_router_route_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/route-table".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_logical_router_route_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get route table on a node for a logical router
    # Deprecated - Please use /logical-routers/<logical-router-id>/routing/routing-table for RIB and /logical-routers/<logical-router-id>/routing/forwarding-table for FIB. Returns the route table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. The query parameter \"source=cached\" is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTableInCsvFormat]
    def get_logical_router_route_table_in_csv_format_csv(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_route_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts)
      return data
    end

    # Get route table on a node for a logical router
    # Deprecated - Please use /logical-routers/&lt;logical-router-id&gt;/routing/routing-table for RIB and /logical-routers/&lt;logical-router-id&gt;/routing/forwarding-table for FIB. Returns the route table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTableInCsvFormat, Fixnum, Hash)>] LogicalRouterRouteTableInCsvFormat data, response status code and response headers
    def get_logical_router_route_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_logical_router_route_table_in_csv_format_csv ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.get_logical_router_route_table_in_csv_format_csv"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling LogicalRoutingAndServicesApi.get_logical_router_route_table_in_csv_format_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/route-table?format=csv".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_logical_router_route_table_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get RIB table on a specified node for a logical router
    # Returns the route table(RIB) for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. To filter the result by network address, parameter \"network_prefix=<a.b.c.d/mask>\" needs to be specified. To filter the result by route source, parameter \"route_source=<source_type>\" needs to be specified where source_type can be BGP, STATIC, CONNECTED, NSX_STATIC, TIER1_NAT or TIER0_NAT. It is also possible to filter the RIB table using both network address and route source filter together. The query parameter \"source=cached\" is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [String] :network_prefix IPv4 CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :route_source To filter the RIB table based on the source from which route is learned.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTable]
    def get_logical_router_routing_table(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_routing_table_with_http_info(logical_router_id, transport_node_id, opts)
      return data
    end

    # Get RIB table on a specified node for a logical router
    # Returns the route table(RIB) for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. To filter the result by network address, parameter \&quot;network_prefix&#x3D;&lt;a.b.c.d/mask&gt;\&quot; needs to be specified. To filter the result by route source, parameter \&quot;route_source&#x3D;&lt;source_type&gt;\&quot; needs to be specified where source_type can be BGP, STATIC, CONNECTED, NSX_STATIC, TIER1_NAT or TIER0_NAT. It is also possible to filter the RIB table using both network address and route source filter together. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [String] :network_prefix IPv4 CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :route_source To filter the RIB table based on the source from which route is learned.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTable, Fixnum, Hash)>] LogicalRouterRouteTable data, response status code and response headers
    def get_logical_router_routing_table_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_logical_router_routing_table ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.get_logical_router_routing_table"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling LogicalRoutingAndServicesApi.get_logical_router_routing_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.get_logical_router_routing_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.get_logical_router_routing_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'route_source'] && !['BGP', 'STATIC', 'CONNECTED'].include?(opts[:'route_source'])
        fail ArgumentError, 'invalid value for "route_source", must be one of BGP, STATIC, CONNECTED'
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/routing-table".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'route_source'] = opts[:'route_source'] if !opts[:'route_source'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_logical_router_routing_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get RIB table on a specified node for a logical router
    # Returns the route table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. To filter the result by network address, paramter \"network_prefix=<a.b.c.d/mask>\" needs to be specified. To filter the result by route source, parameter \"route_source=<source_type>\" needs to be specified where source_type can be BGP, STATIC, CONNECTED, NSX_STATIC, TIER1_NAT or TIER0_NAT. It is also possible to filter the RIB table using both network address and route source filter together. The query parameter \"source=cached\" is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :network_prefix IPv4 CIDR Block
    # @option opts [String] :route_source To filter the RIB table based on the source from which route is learned.
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTableInCsvFormat]
    def get_logical_router_routing_table_in_csv_format_csv(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_routing_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts)
      return data
    end

    # Get RIB table on a specified node for a logical router
    # Returns the route table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. To filter the result by network address, paramter \&quot;network_prefix&#x3D;&lt;a.b.c.d/mask&gt;\&quot; needs to be specified. To filter the result by route source, parameter \&quot;route_source&#x3D;&lt;source_type&gt;\&quot; needs to be specified where source_type can be BGP, STATIC, CONNECTED, NSX_STATIC, TIER1_NAT or TIER0_NAT. It is also possible to filter the RIB table using both network address and route source filter together. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :network_prefix IPv4 CIDR Block
    # @option opts [String] :route_source To filter the RIB table based on the source from which route is learned.
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTableInCsvFormat, Fixnum, Hash)>] LogicalRouterRouteTableInCsvFormat data, response status code and response headers
    def get_logical_router_routing_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_logical_router_routing_table_in_csv_format_csv ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.get_logical_router_routing_table_in_csv_format_csv"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling LogicalRoutingAndServicesApi.get_logical_router_routing_table_in_csv_format_csv"
      end
      if @api_client.config.client_side_validation && opts[:'route_source'] && !['BGP', 'STATIC', 'CONNECTED'].include?(opts[:'route_source'])
        fail ArgumentError, 'invalid value for "route_source", must be one of BGP, STATIC, CONNECTED'
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/routing-table?format=csv".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'route_source'] = opts[:'route_source'] if !opts[:'route_source'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_logical_router_routing_table_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the status for the Logical Router of the given id
    # Returns status for the Logical Router of the given id.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterStatus]
    def get_logical_router_status(logical_router_id, opts = {})
      data, _status_code, _headers = get_logical_router_status_with_http_info(logical_router_id, opts)
      return data
    end

    # Get the status for the Logical Router of the given id
    # Returns status for the Logical Router of the given id.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterStatus, Fixnum, Hash)>] LogicalRouterStatus data, response status code and response headers
    def get_logical_router_status_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_logical_router_status ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.get_logical_router_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/status".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_logical_router_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific NAT rule from a given logical router
    # Get a specific NAT rule from a given logical router 
    # @param logical_router_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [NatRule]
    def get_nat_rule(logical_router_id, rule_id, opts = {})
      data, _status_code, _headers = get_nat_rule_with_http_info(logical_router_id, rule_id, opts)
      return data
    end

    # Get a specific NAT rule from a given logical router
    # Get a specific NAT rule from a given logical router 
    # @param logical_router_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NatRule, Fixnum, Hash)>] NatRule data, response status code and response headers
    def get_nat_rule_with_http_info(logical_router_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_nat_rule ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.get_nat_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling LogicalRoutingAndServicesApi.get_nat_rule"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/nat/rules/{rule-id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the statistics of all rules of the logical router
    # Returns the summation of statistics for all rules from all nodes for the Specified Logical Router. Also gives the per transport node statistics for provided logical router. The query parameter \"source=realtime\" is not supported. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NatStatisticsPerLogicalRouter]
    def get_nat_statistics_per_logical_router(logical_router_id, opts = {})
      data, _status_code, _headers = get_nat_statistics_per_logical_router_with_http_info(logical_router_id, opts)
      return data
    end

    # Get the statistics of all rules of the logical router
    # Returns the summation of statistics for all rules from all nodes for the Specified Logical Router. Also gives the per transport node statistics for provided logical router. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NatStatisticsPerLogicalRouter, Fixnum, Hash)>] NatStatisticsPerLogicalRouter data, response status code and response headers
    def get_nat_statistics_per_logical_router_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_nat_statistics_per_logical_router ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.get_nat_statistics_per_logical_router"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/nat/rules/statistics".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NatStatisticsPerLogicalRouter')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_nat_statistics_per_logical_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the statistics of a specified logical router NAT Rule
    # Returns the summation of statistics from all nodes for the Specified Logical Router NAT Rule. Query parameter \"source=realtime\" is the only supported source. 
    # @param logical_router_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NatStatisticsPerRule]
    def get_nat_statistics_per_rule(logical_router_id, rule_id, opts = {})
      data, _status_code, _headers = get_nat_statistics_per_rule_with_http_info(logical_router_id, rule_id, opts)
      return data
    end

    # Get the statistics of a specified logical router NAT Rule
    # Returns the summation of statistics from all nodes for the Specified Logical Router NAT Rule. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param logical_router_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NatStatisticsPerRule, Fixnum, Hash)>] NatStatisticsPerRule data, response status code and response headers
    def get_nat_statistics_per_rule_with_http_info(logical_router_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_nat_statistics_per_rule ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.get_nat_statistics_per_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling LogicalRoutingAndServicesApi.get_nat_statistics_per_rule"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/nat/rules/{rule-id}/statistics".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NatStatisticsPerRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_nat_statistics_per_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get statistics for all logical router NAT rules on a transport node
    # Returns the summation of statistics for all rules from all logical routers which are present on given transport node. Only cached statistics are supported. The query parameter \"source=realtime\" is not supported. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NatStatisticsPerTransportNode]
    def get_nat_statistics_per_transport_node(node_id, opts = {})
      data, _status_code, _headers = get_nat_statistics_per_transport_node_with_http_info(node_id, opts)
      return data
    end

    # Get statistics for all logical router NAT rules on a transport node
    # Returns the summation of statistics for all rules from all logical routers which are present on given transport node. Only cached statistics are supported. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NatStatisticsPerTransportNode, Fixnum, Hash)>] NatStatisticsPerTransportNode data, response status code and response headers
    def get_nat_statistics_per_transport_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.get_nat_statistics_per_transport_node ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling LogicalRoutingAndServicesApi.get_nat_statistics_per_transport_node"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/transport-nodes/{node-id}/statistics/nat-rules".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NatStatisticsPerTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#get_nat_statistics_per_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Paginated list of BGP Neighbors on a Logical Router
    # Paginated list of BGP Neighbors on a Logical Router 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [BgpNeighborListResult]
    def list_bgp_neighbors(logical_router_id, opts = {})
      data, _status_code, _headers = list_bgp_neighbors_with_http_info(logical_router_id, opts)
      return data
    end

    # Paginated list of BGP Neighbors on a Logical Router
    # Paginated list of BGP Neighbors on a Logical Router 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(BgpNeighborListResult, Fixnum, Hash)>] BgpNeighborListResult data, response status code and response headers
    def list_bgp_neighbors_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_bgp_neighbors ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.list_bgp_neighbors"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_bgp_neighbors, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_bgp_neighbors, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/bgp/neighbors".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighborListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_bgp_neighbors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List All DHCP Relay Profiles
    # Returns information about all dhcp relay profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpRelayProfileListResult]
    def list_dhcp_relay_profiles(opts = {})
      data, _status_code, _headers = list_dhcp_relay_profiles_with_http_info(opts)
      return data
    end

    # List All DHCP Relay Profiles
    # Returns information about all dhcp relay profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpRelayProfileListResult, Fixnum, Hash)>] DhcpRelayProfileListResult data, response status code and response headers
    def list_dhcp_relay_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_dhcp_relay_profiles ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_dhcp_relay_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_dhcp_relay_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/dhcp/relay-profiles"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_dhcp_relay_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all DHCP Relay Services
    # Returns information about all configured dhcp relay services. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpRelayServiceListResult]
    def list_dhcp_relays(opts = {})
      data, _status_code, _headers = list_dhcp_relays_with_http_info(opts)
      return data
    end

    # List all DHCP Relay Services
    # Returns information about all configured dhcp relay services. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpRelayServiceListResult, Fixnum, Hash)>] DhcpRelayServiceListResult data, response status code and response headers
    def list_dhcp_relays_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_dhcp_relays ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_dhcp_relays, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_dhcp_relays, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/dhcp/relays"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_dhcp_relays\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Paginated List of IPPrefixLists
    # Paginated List of IPPrefixLists
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPPrefixListListResult]
    def list_ip_prefix_lists(logical_router_id, opts = {})
      data, _status_code, _headers = list_ip_prefix_lists_with_http_info(logical_router_id, opts)
      return data
    end

    # Paginated List of IPPrefixLists
    # Paginated List of IPPrefixLists
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPPrefixListListResult, Fixnum, Hash)>] IPPrefixListListResult data, response status code and response headers
    def list_ip_prefix_lists_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_ip_prefix_lists ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.list_ip_prefix_lists"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_ip_prefix_lists, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_ip_prefix_lists, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/ip-prefix-lists".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPPrefixListListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_ip_prefix_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Logical Router Ports
    # Returns information about all logical router ports. Information includes the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort); logical_router_id (the router to which each logical router port is assigned); and any service_bindings (such as DHCP relay service). The GET request can include a query parameter (logical_router_id or logical_switch_id). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [String] :logical_router_id Logical Router identifier
    # @option opts [String] :logical_switch_id Logical Switch identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :resource_type Resource types of logical router port
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LogicalRouterPortListResult]
    def list_logical_router_ports(opts = {})
      data, _status_code, _headers = list_logical_router_ports_with_http_info(opts)
      return data
    end

    # List Logical Router Ports
    # Returns information about all logical router ports. Information includes the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort); logical_router_id (the router to which each logical router port is assigned); and any service_bindings (such as DHCP relay service). The GET request can include a query parameter (logical_router_id or logical_switch_id). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [String] :logical_router_id Logical Router identifier
    # @option opts [String] :logical_switch_id Logical Switch identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :resource_type Resource types of logical router port
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LogicalRouterPortListResult, Fixnum, Hash)>] LogicalRouterPortListResult data, response status code and response headers
    def list_logical_router_ports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_logical_router_ports ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_logical_router_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_logical_router_ports, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'resource_type'] && !['LogicalRouterUpLinkPort', 'LogicalRouterDownLinkPort', 'LogicalRouterLinkPortOnTIER0', 'LogicalRouterLinkPortOnTIER1', 'LogicalRouterLoopbackPort'].include?(opts[:'resource_type'])
        fail ArgumentError, 'invalid value for "resource_type", must be one of LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPortOnTIER0, LogicalRouterLinkPortOnTIER1, LogicalRouterLoopbackPort'
      end
      # resource path
      local_var_path = "/logical-router-ports"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'logical_router_id'] = opts[:'logical_router_id'] if !opts[:'logical_router_id'].nil?
      query_params[:'logical_switch_id'] = opts[:'logical_switch_id'] if !opts[:'logical_switch_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_logical_router_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Logical Routers
    # Returns information about all logical routers, including the UUID, internal and external transit network addresses, and the router type (TIER0 or TIER1). You can get information for only TIER0 routers or only the TIER1 routers by including the router_type query parameter. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :router_type Type of Logical Router
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LogicalRouterListResult]
    def list_logical_routers(opts = {})
      data, _status_code, _headers = list_logical_routers_with_http_info(opts)
      return data
    end

    # List Logical Routers
    # Returns information about all logical routers, including the UUID, internal and external transit network addresses, and the router type (TIER0 or TIER1). You can get information for only TIER0 routers or only the TIER1 routers by including the router_type query parameter. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :router_type Type of Logical Router
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LogicalRouterListResult, Fixnum, Hash)>] LogicalRouterListResult data, response status code and response headers
    def list_logical_routers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_logical_routers ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_logical_routers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_logical_routers, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'router_type'] && !['TIER0', 'TIER1'].include?(opts[:'router_type'])
        fail ArgumentError, 'invalid value for "router_type", must be one of TIER0, TIER1'
      end
      # resource path
      local_var_path = "/logical-routers"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'router_type'] = opts[:'router_type'] if !opts[:'router_type'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_logical_routers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List NAT rules of the logical router
    # Returns paginated list of all user defined NAT rules of the specific logical router 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [NatRuleListResult]
    def list_nat_rules(logical_router_id, opts = {})
      data, _status_code, _headers = list_nat_rules_with_http_info(logical_router_id, opts)
      return data
    end

    # List NAT rules of the logical router
    # Returns paginated list of all user defined NAT rules of the specific logical router 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(NatRuleListResult, Fixnum, Hash)>] NatRuleListResult data, response status code and response headers
    def list_nat_rules_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_nat_rules ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.list_nat_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_nat_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_nat_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/nat/rules".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_nat_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Paginated List of RouteMaps
    # Paginated List of RouteMaps
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RouteMapListResult]
    def list_route_maps(logical_router_id, opts = {})
      data, _status_code, _headers = list_route_maps_with_http_info(logical_router_id, opts)
      return data
    end

    # Paginated List of RouteMaps
    # Paginated List of RouteMaps
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RouteMapListResult, Fixnum, Hash)>] RouteMapListResult data, response status code and response headers
    def list_route_maps_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_route_maps ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.list_route_maps"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_route_maps, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_route_maps, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/route-maps".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RouteMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_route_maps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List All Service Profiles
    # Returns information about all service profiles. A service profile is a configuration that you can use to create a service, which is then applied to one or more logical router ports. Currently, only the DhcpRelayProfile is supported. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :resource_type 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceProfileListResult]
    def list_service_profiles(opts = {})
      data, _status_code, _headers = list_service_profiles_with_http_info(opts)
      return data
    end

    # List All Service Profiles
    # Returns information about all service profiles. A service profile is a configuration that you can use to create a service, which is then applied to one or more logical router ports. Currently, only the DhcpRelayProfile is supported. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :resource_type 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceProfileListResult, Fixnum, Hash)>] ServiceProfileListResult data, response status code and response headers
    def list_service_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_service_profiles ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_service_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_service_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/service-profiles"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_service_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all Logical Router Services
    # Returns information about all configured logical router services that can be applied to one or more logical router ports. You must create a service-profile before you can create a service. Currently, only DhcpRelayService is supported. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :resource_type 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LogicalServiceListResult]
    def list_services(opts = {})
      data, _status_code, _headers = list_services_with_http_info(opts)
      return data
    end

    # List all Logical Router Services
    # Returns information about all configured logical router services that can be applied to one or more logical router ports. You must create a service-profile before you can create a service. Currently, only DhcpRelayService is supported. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :resource_type 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LogicalServiceListResult, Fixnum, Hash)>] LogicalServiceListResult data, response status code and response headers
    def list_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_services ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/services"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List static routes BFD Peers
    # Returns information about all BFD peers created on specified logical router for static routes. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [StaticHopBfdPeerListResult]
    def list_static_hop_bfd_peers(logical_router_id, opts = {})
      data, _status_code, _headers = list_static_hop_bfd_peers_with_http_info(logical_router_id, opts)
      return data
    end

    # List static routes BFD Peers
    # Returns information about all BFD peers created on specified logical router for static routes. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(StaticHopBfdPeerListResult, Fixnum, Hash)>] StaticHopBfdPeerListResult data, response status code and response headers
    def list_static_hop_bfd_peers_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_static_hop_bfd_peers ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.list_static_hop_bfd_peers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_static_hop_bfd_peers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_static_hop_bfd_peers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/static-routes/bfd-peers".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticHopBfdPeerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_static_hop_bfd_peers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Paginated List of Static Routes
    # Returns information about configured static routes, including the network address and next hops for each static route. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [StaticRouteListResult]
    def list_static_routes(logical_router_id, opts = {})
      data, _status_code, _headers = list_static_routes_with_http_info(logical_router_id, opts)
      return data
    end

    # Paginated List of Static Routes
    # Returns information about configured static routes, including the network address and next hops for each static route. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(StaticRouteListResult, Fixnum, Hash)>] StaticRouteListResult data, response status code and response headers
    def list_static_routes_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.list_static_routes ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.list_static_routes"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_static_routes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalRoutingAndServicesApi.list_static_routes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/static-routes".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRouteListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#list_static_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reprocesses a logical router configuration and publish updates to controller
    # Reprocess logical router configuration and configuration of related entities like logical router ports, static routing, etc. Any missing Updates are published to controller. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def re_process_logical_router_reprocess(logical_router_id, opts = {})
      re_process_logical_router_reprocess_with_http_info(logical_router_id, opts)
      return nil
    end

    # Reprocesses a logical router configuration and publish updates to controller
    # Reprocess logical router configuration and configuration of related entities like logical router ports, static routing, etc. Any missing Updates are published to controller. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def re_process_logical_router_reprocess_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.re_process_logical_router_reprocess ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.re_process_logical_router_reprocess"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}?action=reprocess".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#re_process_logical_router_reprocess\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the Advertisement Rules on a Logical Router
    # Returns the advertisement rule list for the specified TIER1 logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [AdvertiseRuleList]
    def read_advertise_rule_list(logical_router_id, opts = {})
      data, _status_code, _headers = read_advertise_rule_list_with_http_info(logical_router_id, opts)
      return data
    end

    # Read the Advertisement Rules on a Logical Router
    # Returns the advertisement rule list for the specified TIER1 logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdvertiseRuleList, Fixnum, Hash)>] AdvertiseRuleList data, response status code and response headers
    def read_advertise_rule_list_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_advertise_rule_list ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_advertise_rule_list"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/advertisement/rules".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdvertiseRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_advertise_rule_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the Advertisement Configuration on a Logical Router
    # Returns information about the routes to be advertised by the specified TIER1 logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [AdvertisementConfig]
    def read_advertisement_config(logical_router_id, opts = {})
      data, _status_code, _headers = read_advertisement_config_with_http_info(logical_router_id, opts)
      return data
    end

    # Read the Advertisement Configuration on a Logical Router
    # Returns information about the routes to be advertised by the specified TIER1 logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdvertisementConfig, Fixnum, Hash)>] AdvertisementConfig data, response status code and response headers
    def read_advertisement_config_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_advertisement_config ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_advertisement_config"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/advertisement".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdvertisementConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_advertisement_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the BGP Configuration on a Logical Router
    # Returns information about the BGP configuration on a specified logical router. Information includes whether or not the BGP configuration is enabled, the AS number, and whether or not graceful restart is enabled. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [BgpConfig]
    def read_bgp_config(logical_router_id, opts = {})
      data, _status_code, _headers = read_bgp_config_with_http_info(logical_router_id, opts)
      return data
    end

    # Read the BGP Configuration on a Logical Router
    # Returns information about the BGP configuration on a specified logical router. Information includes whether or not the BGP configuration is enabled, the AS number, and whether or not graceful restart is enabled. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpConfig, Fixnum, Hash)>] BgpConfig data, response status code and response headers
    def read_bgp_config_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_bgp_config ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_bgp_config"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/bgp".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_bgp_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a specific BGP Neighbor on a Logical Router
    # Read a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [BgpNeighbor]
    def read_bgp_neighbor(logical_router_id, id, opts = {})
      data, _status_code, _headers = read_bgp_neighbor_with_http_info(logical_router_id, id, opts)
      return data
    end

    # Read a specific BGP Neighbor on a Logical Router
    # Read a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpNeighbor, Fixnum, Hash)>] BgpNeighbor data, response status code and response headers
    def read_bgp_neighbor_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_bgp_neighbor ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_bgp_neighbor"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.read_bgp_neighbor"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighbor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_bgp_neighbor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the debug information for the logical router
    # API to download below information as text which will be used for debugging and troubleshooting. 1) Logical router sub-components and ports. 2) Routing configuration as sent to central control plane. 3) TIER1 advertised network information. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def read_debug_info_text(logical_router_id, opts = {})
      data, _status_code, _headers = read_debug_info_text_with_http_info(logical_router_id, opts)
      return data
    end

    # Read the debug information for the logical router
    # API to download below information as text which will be used for debugging and troubleshooting. 1) Logical router sub-components and ports. 2) Routing configuration as sent to central control plane. 3) TIER1 advertised network information. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def read_debug_info_text_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_debug_info_text ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_debug_info_text"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/debug-info?format=text".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_debug_info_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a DHCP Relay Service
    # Returns the dhcp relay service information.
    # @param relay_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayService]
    def read_dhcp_relay(relay_id, opts = {})
      data, _status_code, _headers = read_dhcp_relay_with_http_info(relay_id, opts)
      return data
    end

    # Read a DHCP Relay Service
    # Returns the dhcp relay service information.
    # @param relay_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayService, Fixnum, Hash)>] DhcpRelayService data, response status code and response headers
    def read_dhcp_relay_with_http_info(relay_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_dhcp_relay ..."
      end
      # verify the required parameter 'relay_id' is set
      if @api_client.config.client_side_validation && relay_id.nil?
        fail ArgumentError, "Missing the required parameter 'relay_id' when calling LogicalRoutingAndServicesApi.read_dhcp_relay"
      end
      # resource path
      local_var_path = "/dhcp/relays/{relay-id}".sub('{' + 'relay-id' + '}', relay_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_dhcp_relay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a DHCP Relay Profile
    # Returns information about the specified dhcp relay profile.
    # @param relay_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayProfile]
    def read_dhcp_relay_profile(relay_profile_id, opts = {})
      data, _status_code, _headers = read_dhcp_relay_profile_with_http_info(relay_profile_id, opts)
      return data
    end

    # Read a DHCP Relay Profile
    # Returns information about the specified dhcp relay profile.
    # @param relay_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayProfile, Fixnum, Hash)>] DhcpRelayProfile data, response status code and response headers
    def read_dhcp_relay_profile_with_http_info(relay_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_dhcp_relay_profile ..."
      end
      # verify the required parameter 'relay_profile_id' is set
      if @api_client.config.client_side_validation && relay_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'relay_profile_id' when calling LogicalRoutingAndServicesApi.read_dhcp_relay_profile"
      end
      # resource path
      local_var_path = "/dhcp/relay-profiles/{relay-profile-id}".sub('{' + 'relay-profile-id' + '}', relay_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_dhcp_relay_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific IPPrefixList on a Logical Router
    # Read a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [IPPrefixList]
    def read_ip_prefix_list(logical_router_id, id, opts = {})
      data, _status_code, _headers = read_ip_prefix_list_with_http_info(logical_router_id, id, opts)
      return data
    end

    # Get a specific IPPrefixList on a Logical Router
    # Read a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPPrefixList, Fixnum, Hash)>] IPPrefixList data, response status code and response headers
    def read_ip_prefix_list_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_ip_prefix_list ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_ip_prefix_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.read_ip_prefix_list"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/ip-prefix-lists/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPPrefixList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_ip_prefix_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read Logical Router
    # Returns information about the specified logical router.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouter]
    def read_logical_router(logical_router_id, opts = {})
      data, _status_code, _headers = read_logical_router_with_http_info(logical_router_id, opts)
      return data
    end

    # Read Logical Router
    # Returns information about the specified logical router.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouter, Fixnum, Hash)>] LogicalRouter data, response status code and response headers
    def read_logical_router_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_logical_router ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_logical_router"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouter')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_logical_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read Logical Router Port
    # Returns information about the specified logical router port.
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouterPort]
    def read_logical_router_port(logical_router_port_id, opts = {})
      data, _status_code, _headers = read_logical_router_port_with_http_info(logical_router_port_id, opts)
      return data
    end

    # Read Logical Router Port
    # Returns information about the specified logical router port.
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouterPort, Fixnum, Hash)>] LogicalRouterPort data, response status code and response headers
    def read_logical_router_port_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_logical_router_port ..."
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling LogicalRoutingAndServicesApi.read_logical_router_port"
      end
      # resource path
      local_var_path = "/logical-router-ports/{logical-router-port-id}".sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_logical_router_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the Redistribution Configuration on a Logical Router
    # Returns information about configured route redistribution for the specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [RedistributionConfig]
    def read_redistribution_config(logical_router_id, opts = {})
      data, _status_code, _headers = read_redistribution_config_with_http_info(logical_router_id, opts)
      return data
    end

    # Read the Redistribution Configuration on a Logical Router
    # Returns information about configured route redistribution for the specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedistributionConfig, Fixnum, Hash)>] RedistributionConfig data, response status code and response headers
    def read_redistribution_config_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_redistribution_config ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_redistribution_config"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/redistribution".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedistributionConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_redistribution_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read All the Redistribution Rules on a Logical Router
    # Returns all the route redistribution rules for the specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [RedistributionRuleList]
    def read_redistribution_rule_list(logical_router_id, opts = {})
      data, _status_code, _headers = read_redistribution_rule_list_with_http_info(logical_router_id, opts)
      return data
    end

    # Read All the Redistribution Rules on a Logical Router
    # Returns all the route redistribution rules for the specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedistributionRuleList, Fixnum, Hash)>] RedistributionRuleList data, response status code and response headers
    def read_redistribution_rule_list_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_redistribution_rule_list ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_redistribution_rule_list"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/redistribution/rules".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedistributionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_redistribution_rule_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific RouteMap on a Logical Router
    # Read a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [RouteMap]
    def read_route_map(logical_router_id, id, opts = {})
      data, _status_code, _headers = read_route_map_with_http_info(logical_router_id, id, opts)
      return data
    end

    # Get a specific RouteMap on a Logical Router
    # Read a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RouteMap, Fixnum, Hash)>] RouteMap data, response status code and response headers
    def read_route_map_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_route_map ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_route_map"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.read_route_map"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/route-maps/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RouteMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_route_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the Routing BFD Configuration
    # Returns the BFD configuration for all routing BFD peers. This will be inherited |   by all BFD peers for LogicalRouter unless overriden while configuring the Peer. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [BfdConfig]
    def read_routing_bfd_config(logical_router_id, opts = {})
      data, _status_code, _headers = read_routing_bfd_config_with_http_info(logical_router_id, opts)
      return data
    end

    # Read the Routing BFD Configuration
    # Returns the BFD configuration for all routing BFD peers. This will be inherited |   by all BFD peers for LogicalRouter unless overriden while configuring the Peer. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BfdConfig, Fixnum, Hash)>] BfdConfig data, response status code and response headers
    def read_routing_bfd_config_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_routing_bfd_config ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_routing_bfd_config"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/bfd-config".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BfdConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_routing_bfd_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the Routing Configuration
    # Returns the routing configuration for a specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [RoutingConfig]
    def read_routing_config(logical_router_id, opts = {})
      data, _status_code, _headers = read_routing_config_with_http_info(logical_router_id, opts)
      return data
    end

    # Read the Routing Configuration
    # Returns the routing configuration for a specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoutingConfig, Fixnum, Hash)>] RoutingConfig data, response status code and response headers
    def read_routing_config_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_routing_config ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_routing_config"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_routing_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a Logical Router Service
    # Returns information about the specified service.
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalService]
    def read_service(service_id, opts = {})
      data, _status_code, _headers = read_service_with_http_info(service_id, opts)
      return data
    end

    # Read a Logical Router Service
    # Returns information about the specified service.
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalService, Fixnum, Hash)>] LogicalService data, response status code and response headers
    def read_service_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_service ..."
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LogicalRoutingAndServicesApi.read_service"
      end
      # resource path
      local_var_path = "/services/{service-id}".sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a Service Profile
    # Returns information about the specified service profile.
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceProfile]
    def read_service_profile(service_profile_id, opts = {})
      data, _status_code, _headers = read_service_profile_with_http_info(service_profile_id, opts)
      return data
    end

    # Read a Service Profile
    # Returns information about the specified service profile.
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceProfile, Fixnum, Hash)>] ServiceProfile data, response status code and response headers
    def read_service_profile_with_http_info(service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_service_profile ..."
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling LogicalRoutingAndServicesApi.read_service_profile"
      end
      # resource path
      local_var_path = "/service-profiles/{service-profile-id}".sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a static route BFD peer
    # Read the BFD peer having specified ID. 
    # @param logical_router_id 
    # @param bfd_peer_id 
    # @param [Hash] opts the optional parameters
    # @return [StaticHopBfdPeer]
    def read_static_hop_bfd_peer(logical_router_id, bfd_peer_id, opts = {})
      data, _status_code, _headers = read_static_hop_bfd_peer_with_http_info(logical_router_id, bfd_peer_id, opts)
      return data
    end

    # Read a static route BFD peer
    # Read the BFD peer having specified ID. 
    # @param logical_router_id 
    # @param bfd_peer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticHopBfdPeer, Fixnum, Hash)>] StaticHopBfdPeer data, response status code and response headers
    def read_static_hop_bfd_peer_with_http_info(logical_router_id, bfd_peer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_static_hop_bfd_peer ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_static_hop_bfd_peer"
      end
      # verify the required parameter 'bfd_peer_id' is set
      if @api_client.config.client_side_validation && bfd_peer_id.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_peer_id' when calling LogicalRoutingAndServicesApi.read_static_hop_bfd_peer"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/static-routes/bfd-peers/{bfd-peer-id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'bfd-peer-id' + '}', bfd_peer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticHopBfdPeer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_static_hop_bfd_peer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific Static Route on a Logical Router
    # Read a specific static routes on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [StaticRoute]
    def read_static_route(logical_router_id, id, opts = {})
      data, _status_code, _headers = read_static_route_with_http_info(logical_router_id, id, opts)
      return data
    end

    # Get a specific Static Route on a Logical Router
    # Read a specific static routes on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticRoute, Fixnum, Hash)>] StaticRoute data, response status code and response headers
    def read_static_route_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.read_static_route ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.read_static_route"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.read_static_route"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/static-routes/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#read_static_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unset/Delete password property on specific BGP Neighbor on Logical Router
    # Unset/Delete the password property on the specific BGP Neighbor. No other property of the BgpNeighbor can be updated using this API 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @return [BgpNeighbor]
    def un_set_password_on_bgp_neighbor(logical_router_id, id, opts = {})
      data, _status_code, _headers = un_set_password_on_bgp_neighbor_with_http_info(logical_router_id, id, opts)
      return data
    end

    # Unset/Delete password property on specific BGP Neighbor on Logical Router
    # Unset/Delete the password property on the specific BGP Neighbor. No other property of the BgpNeighbor can be updated using this API 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @return [Array<(BgpNeighbor, Fixnum, Hash)>] BgpNeighbor data, response status code and response headers
    def un_set_password_on_bgp_neighbor_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.un_set_password_on_bgp_neighbor ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.un_set_password_on_bgp_neighbor"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.un_set_password_on_bgp_neighbor"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['clear_password'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of clear_password'
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighbor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#un_set_password_on_bgp_neighbor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the Advertisement Rules on a Logical Router
    # Modifies the advertisement rules on the specified logical router. The PUT request must include all the rules with the networks parameter. Modifiable parameters are networks, display_name, and description. Set the rules list to empty to delete/clear all rules. 
    # @param logical_router_id 
    # @param advertise_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [AdvertiseRuleList]
    def update_advertise_rule_list(logical_router_id, advertise_rule_list, opts = {})
      data, _status_code, _headers = update_advertise_rule_list_with_http_info(logical_router_id, advertise_rule_list, opts)
      return data
    end

    # Update the Advertisement Rules on a Logical Router
    # Modifies the advertisement rules on the specified logical router. The PUT request must include all the rules with the networks parameter. Modifiable parameters are networks, display_name, and description. Set the rules list to empty to delete/clear all rules. 
    # @param logical_router_id 
    # @param advertise_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdvertiseRuleList, Fixnum, Hash)>] AdvertiseRuleList data, response status code and response headers
    def update_advertise_rule_list_with_http_info(logical_router_id, advertise_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_advertise_rule_list ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_advertise_rule_list"
      end
      # verify the required parameter 'advertise_rule_list' is set
      if @api_client.config.client_side_validation && advertise_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'advertise_rule_list' when calling LogicalRoutingAndServicesApi.update_advertise_rule_list"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/advertisement/rules".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(advertise_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdvertiseRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_advertise_rule_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the Advertisement Configuration on a Logical Router
    # Modifies the route advertisement configuration on the specified logical router. 
    # @param logical_router_id 
    # @param advertisement_config 
    # @param [Hash] opts the optional parameters
    # @return [AdvertisementConfig]
    def update_advertisement_config(logical_router_id, advertisement_config, opts = {})
      data, _status_code, _headers = update_advertisement_config_with_http_info(logical_router_id, advertisement_config, opts)
      return data
    end

    # Update the Advertisement Configuration on a Logical Router
    # Modifies the route advertisement configuration on the specified logical router. 
    # @param logical_router_id 
    # @param advertisement_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdvertisementConfig, Fixnum, Hash)>] AdvertisementConfig data, response status code and response headers
    def update_advertisement_config_with_http_info(logical_router_id, advertisement_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_advertisement_config ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_advertisement_config"
      end
      # verify the required parameter 'advertisement_config' is set
      if @api_client.config.client_side_validation && advertisement_config.nil?
        fail ArgumentError, "Missing the required parameter 'advertisement_config' when calling LogicalRoutingAndServicesApi.update_advertisement_config"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/advertisement".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(advertisement_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdvertisementConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_advertisement_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the BGP Configuration on a Logical Router
    # Modifies the BGP configuration on a specified TIER0 logical router. Modifiable parameters include enabled, graceful_restart, as_number. 
    # @param logical_router_id 
    # @param bgp_config 
    # @param [Hash] opts the optional parameters
    # @return [BgpConfig]
    def update_bgp_config(logical_router_id, bgp_config, opts = {})
      data, _status_code, _headers = update_bgp_config_with_http_info(logical_router_id, bgp_config, opts)
      return data
    end

    # Update the BGP Configuration on a Logical Router
    # Modifies the BGP configuration on a specified TIER0 logical router. Modifiable parameters include enabled, graceful_restart, as_number. 
    # @param logical_router_id 
    # @param bgp_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpConfig, Fixnum, Hash)>] BgpConfig data, response status code and response headers
    def update_bgp_config_with_http_info(logical_router_id, bgp_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_bgp_config ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_bgp_config"
      end
      # verify the required parameter 'bgp_config' is set
      if @api_client.config.client_side_validation && bgp_config.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_config' when calling LogicalRoutingAndServicesApi.update_bgp_config"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/bgp".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bgp_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_bgp_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific BGP Neighbor on a Logical Router
    # Update a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param bgp_neighbor 
    # @param [Hash] opts the optional parameters
    # @return [BgpNeighbor]
    def update_bgp_neighbor(logical_router_id, id, bgp_neighbor, opts = {})
      data, _status_code, _headers = update_bgp_neighbor_with_http_info(logical_router_id, id, bgp_neighbor, opts)
      return data
    end

    # Update a specific BGP Neighbor on a Logical Router
    # Update a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param bgp_neighbor 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpNeighbor, Fixnum, Hash)>] BgpNeighbor data, response status code and response headers
    def update_bgp_neighbor_with_http_info(logical_router_id, id, bgp_neighbor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_bgp_neighbor ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_bgp_neighbor"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.update_bgp_neighbor"
      end
      # verify the required parameter 'bgp_neighbor' is set
      if @api_client.config.client_side_validation && bgp_neighbor.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_neighbor' when calling LogicalRoutingAndServicesApi.update_bgp_neighbor"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bgp_neighbor)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighbor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_bgp_neighbor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a DHCP Relay Service
    # Modifies the specified dhcp relay service. 
    # @param relay_id 
    # @param dhcp_relay_service 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayService]
    def update_dhcp_relay(relay_id, dhcp_relay_service, opts = {})
      data, _status_code, _headers = update_dhcp_relay_with_http_info(relay_id, dhcp_relay_service, opts)
      return data
    end

    # Update a DHCP Relay Service
    # Modifies the specified dhcp relay service. 
    # @param relay_id 
    # @param dhcp_relay_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayService, Fixnum, Hash)>] DhcpRelayService data, response status code and response headers
    def update_dhcp_relay_with_http_info(relay_id, dhcp_relay_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_dhcp_relay ..."
      end
      # verify the required parameter 'relay_id' is set
      if @api_client.config.client_side_validation && relay_id.nil?
        fail ArgumentError, "Missing the required parameter 'relay_id' when calling LogicalRoutingAndServicesApi.update_dhcp_relay"
      end
      # verify the required parameter 'dhcp_relay_service' is set
      if @api_client.config.client_side_validation && dhcp_relay_service.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_service' when calling LogicalRoutingAndServicesApi.update_dhcp_relay"
      end
      # resource path
      local_var_path = "/dhcp/relays/{relay-id}".sub('{' + 'relay-id' + '}', relay_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_dhcp_relay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a DHCP Relay Profile
    # Modifies the specified dhcp relay profile. 
    # @param relay_profile_id 
    # @param dhcp_relay_profile 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayProfile]
    def update_dhcp_relay_profile(relay_profile_id, dhcp_relay_profile, opts = {})
      data, _status_code, _headers = update_dhcp_relay_profile_with_http_info(relay_profile_id, dhcp_relay_profile, opts)
      return data
    end

    # Update a DHCP Relay Profile
    # Modifies the specified dhcp relay profile. 
    # @param relay_profile_id 
    # @param dhcp_relay_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayProfile, Fixnum, Hash)>] DhcpRelayProfile data, response status code and response headers
    def update_dhcp_relay_profile_with_http_info(relay_profile_id, dhcp_relay_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_dhcp_relay_profile ..."
      end
      # verify the required parameter 'relay_profile_id' is set
      if @api_client.config.client_side_validation && relay_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'relay_profile_id' when calling LogicalRoutingAndServicesApi.update_dhcp_relay_profile"
      end
      # verify the required parameter 'dhcp_relay_profile' is set
      if @api_client.config.client_side_validation && dhcp_relay_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_profile' when calling LogicalRoutingAndServicesApi.update_dhcp_relay_profile"
      end
      # resource path
      local_var_path = "/dhcp/relay-profiles/{relay-profile-id}".sub('{' + 'relay-profile-id' + '}', relay_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_dhcp_relay_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific IPPrefixList on a Logical Router
    # Update a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param ip_prefix_list 
    # @param [Hash] opts the optional parameters
    # @return [IPPrefixList]
    def update_ip_prefix_list(logical_router_id, id, ip_prefix_list, opts = {})
      data, _status_code, _headers = update_ip_prefix_list_with_http_info(logical_router_id, id, ip_prefix_list, opts)
      return data
    end

    # Update a specific IPPrefixList on a Logical Router
    # Update a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param ip_prefix_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPPrefixList, Fixnum, Hash)>] IPPrefixList data, response status code and response headers
    def update_ip_prefix_list_with_http_info(logical_router_id, id, ip_prefix_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_ip_prefix_list ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_ip_prefix_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.update_ip_prefix_list"
      end
      # verify the required parameter 'ip_prefix_list' is set
      if @api_client.config.client_side_validation && ip_prefix_list.nil?
        fail ArgumentError, "Missing the required parameter 'ip_prefix_list' when calling LogicalRoutingAndServicesApi.update_ip_prefix_list"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/ip-prefix-lists/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_prefix_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPPrefixList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_ip_prefix_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Logical Router
    # Modifies the specified logical router. Modifiable attributes include the internal_transit_network, external_transit_networks, and edge_cluster_id (for TIER0 routers). 
    # @param logical_router_id 
    # @param logical_router 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouter]
    def update_logical_router(logical_router_id, logical_router, opts = {})
      data, _status_code, _headers = update_logical_router_with_http_info(logical_router_id, logical_router, opts)
      return data
    end

    # Update a Logical Router
    # Modifies the specified logical router. Modifiable attributes include the internal_transit_network, external_transit_networks, and edge_cluster_id (for TIER0 routers). 
    # @param logical_router_id 
    # @param logical_router 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouter, Fixnum, Hash)>] LogicalRouter data, response status code and response headers
    def update_logical_router_with_http_info(logical_router_id, logical_router, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_logical_router ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_logical_router"
      end
      # verify the required parameter 'logical_router' is set
      if @api_client.config.client_side_validation && logical_router.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router' when calling LogicalRoutingAndServicesApi.update_logical_router"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_router)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouter')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_logical_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Logical Router Port
    # Modifies the specified logical router port. Required parameters include the resource_type and logical_router_id. Modifiable parameters include the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort), logical_router_id (to reassign the port to a different router), and service_bindings. 
    # @param logical_router_port_id 
    # @param logical_router_port 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouterPort]
    def update_logical_router_port(logical_router_port_id, logical_router_port, opts = {})
      data, _status_code, _headers = update_logical_router_port_with_http_info(logical_router_port_id, logical_router_port, opts)
      return data
    end

    # Update a Logical Router Port
    # Modifies the specified logical router port. Required parameters include the resource_type and logical_router_id. Modifiable parameters include the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort), logical_router_id (to reassign the port to a different router), and service_bindings. 
    # @param logical_router_port_id 
    # @param logical_router_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouterPort, Fixnum, Hash)>] LogicalRouterPort data, response status code and response headers
    def update_logical_router_port_with_http_info(logical_router_port_id, logical_router_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_logical_router_port ..."
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling LogicalRoutingAndServicesApi.update_logical_router_port"
      end
      # verify the required parameter 'logical_router_port' is set
      if @api_client.config.client_side_validation && logical_router_port.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port' when calling LogicalRoutingAndServicesApi.update_logical_router_port"
      end
      # resource path
      local_var_path = "/logical-router-ports/{logical-router-port-id}".sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_router_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_logical_router_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific NAT rule from a given logical router
    # Update a specific NAT rule from a given logical router. 
    # @param logical_router_id 
    # @param rule_id 
    # @param nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [NatRule]
    def update_nat_rule(logical_router_id, rule_id, nat_rule, opts = {})
      data, _status_code, _headers = update_nat_rule_with_http_info(logical_router_id, rule_id, nat_rule, opts)
      return data
    end

    # Update a specific NAT rule from a given logical router
    # Update a specific NAT rule from a given logical router. 
    # @param logical_router_id 
    # @param rule_id 
    # @param nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NatRule, Fixnum, Hash)>] NatRule data, response status code and response headers
    def update_nat_rule_with_http_info(logical_router_id, rule_id, nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_nat_rule ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_nat_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling LogicalRoutingAndServicesApi.update_nat_rule"
      end
      # verify the required parameter 'nat_rule' is set
      if @api_client.config.client_side_validation && nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule' when calling LogicalRoutingAndServicesApi.update_nat_rule"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/nat/rules/{rule-id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the Redistribution Configuration on a Logical Router
    # Modifies existing route redistribution rules for the specified TIER0 logical router. 
    # @param logical_router_id 
    # @param redistribution_config 
    # @param [Hash] opts the optional parameters
    # @return [RedistributionConfig]
    def update_redistribution_config(logical_router_id, redistribution_config, opts = {})
      data, _status_code, _headers = update_redistribution_config_with_http_info(logical_router_id, redistribution_config, opts)
      return data
    end

    # Update the Redistribution Configuration on a Logical Router
    # Modifies existing route redistribution rules for the specified TIER0 logical router. 
    # @param logical_router_id 
    # @param redistribution_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedistributionConfig, Fixnum, Hash)>] RedistributionConfig data, response status code and response headers
    def update_redistribution_config_with_http_info(logical_router_id, redistribution_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_redistribution_config ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_redistribution_config"
      end
      # verify the required parameter 'redistribution_config' is set
      if @api_client.config.client_side_validation && redistribution_config.nil?
        fail ArgumentError, "Missing the required parameter 'redistribution_config' when calling LogicalRoutingAndServicesApi.update_redistribution_config"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/redistribution".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redistribution_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedistributionConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_redistribution_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update All the Redistribution Rules on a Logical Router
    # Modifies all route redistribution rules for the specified TIER0 logical router. Set the rules list to empty to delete/clear all rules. 
    # @param logical_router_id 
    # @param redistribution_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [RedistributionRuleList]
    def update_redistribution_rule_list(logical_router_id, redistribution_rule_list, opts = {})
      data, _status_code, _headers = update_redistribution_rule_list_with_http_info(logical_router_id, redistribution_rule_list, opts)
      return data
    end

    # Update All the Redistribution Rules on a Logical Router
    # Modifies all route redistribution rules for the specified TIER0 logical router. Set the rules list to empty to delete/clear all rules. 
    # @param logical_router_id 
    # @param redistribution_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedistributionRuleList, Fixnum, Hash)>] RedistributionRuleList data, response status code and response headers
    def update_redistribution_rule_list_with_http_info(logical_router_id, redistribution_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_redistribution_rule_list ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_redistribution_rule_list"
      end
      # verify the required parameter 'redistribution_rule_list' is set
      if @api_client.config.client_side_validation && redistribution_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'redistribution_rule_list' when calling LogicalRoutingAndServicesApi.update_redistribution_rule_list"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/redistribution/rules".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redistribution_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedistributionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_redistribution_rule_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific RouteMap on a Logical Router
    # Update a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param route_map 
    # @param [Hash] opts the optional parameters
    # @return [RouteMap]
    def update_route_map(logical_router_id, id, route_map, opts = {})
      data, _status_code, _headers = update_route_map_with_http_info(logical_router_id, id, route_map, opts)
      return data
    end

    # Update a specific RouteMap on a Logical Router
    # Update a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param route_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RouteMap, Fixnum, Hash)>] RouteMap data, response status code and response headers
    def update_route_map_with_http_info(logical_router_id, id, route_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_route_map ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_route_map"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.update_route_map"
      end
      # verify the required parameter 'route_map' is set
      if @api_client.config.client_side_validation && route_map.nil?
        fail ArgumentError, "Missing the required parameter 'route_map' when calling LogicalRoutingAndServicesApi.update_route_map"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/route-maps/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(route_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RouteMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_route_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the BFD Configuration for BFD peers for routing
    # Modifies the BFD configuration for routing BFD peers. Note - the configuration |   changes apply only to those routing BFD peers for which the BFD configuration has |   not been overridden at Peer level. 
    # @param logical_router_id 
    # @param bfd_config 
    # @param [Hash] opts the optional parameters
    # @return [BfdConfig]
    def update_routing_bfd_config(logical_router_id, bfd_config, opts = {})
      data, _status_code, _headers = update_routing_bfd_config_with_http_info(logical_router_id, bfd_config, opts)
      return data
    end

    # Update the BFD Configuration for BFD peers for routing
    # Modifies the BFD configuration for routing BFD peers. Note - the configuration |   changes apply only to those routing BFD peers for which the BFD configuration has |   not been overridden at Peer level. 
    # @param logical_router_id 
    # @param bfd_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BfdConfig, Fixnum, Hash)>] BfdConfig data, response status code and response headers
    def update_routing_bfd_config_with_http_info(logical_router_id, bfd_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_routing_bfd_config ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_routing_bfd_config"
      end
      # verify the required parameter 'bfd_config' is set
      if @api_client.config.client_side_validation && bfd_config.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_config' when calling LogicalRoutingAndServicesApi.update_routing_bfd_config"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/bfd-config".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bfd_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BfdConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_routing_bfd_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the Routing Configuration
    # Modifies the routing configuration for a specified logical router. 
    # @param logical_router_id 
    # @param routing_config 
    # @param [Hash] opts the optional parameters
    # @return [RoutingConfig]
    def update_routing_config(logical_router_id, routing_config, opts = {})
      data, _status_code, _headers = update_routing_config_with_http_info(logical_router_id, routing_config, opts)
      return data
    end

    # Update the Routing Configuration
    # Modifies the routing configuration for a specified logical router. 
    # @param logical_router_id 
    # @param routing_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoutingConfig, Fixnum, Hash)>] RoutingConfig data, response status code and response headers
    def update_routing_config_with_http_info(logical_router_id, routing_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_routing_config ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_routing_config"
      end
      # verify the required parameter 'routing_config' is set
      if @api_client.config.client_side_validation && routing_config.nil?
        fail ArgumentError, "Missing the required parameter 'routing_config' when calling LogicalRoutingAndServicesApi.update_routing_config"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(routing_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_routing_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Logical Router Service
    # Modifies the specified logical router service. The resource_type parameter is required. The modifiable parameters depend on the service type. 
    # @param service_id 
    # @param logical_service 
    # @param [Hash] opts the optional parameters
    # @return [LogicalService]
    def update_service(service_id, logical_service, opts = {})
      data, _status_code, _headers = update_service_with_http_info(service_id, logical_service, opts)
      return data
    end

    # Update a Logical Router Service
    # Modifies the specified logical router service. The resource_type parameter is required. The modifiable parameters depend on the service type. 
    # @param service_id 
    # @param logical_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalService, Fixnum, Hash)>] LogicalService data, response status code and response headers
    def update_service_with_http_info(service_id, logical_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_service ..."
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LogicalRoutingAndServicesApi.update_service"
      end
      # verify the required parameter 'logical_service' is set
      if @api_client.config.client_side_validation && logical_service.nil?
        fail ArgumentError, "Missing the required parameter 'logical_service' when calling LogicalRoutingAndServicesApi.update_service"
      end
      # resource path
      local_var_path = "/services/{service-id}".sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Service Profile
    # Modifies the specified service profile. The PUT request must include the resource_type parameters. Modifiable parameters include description and display_name. Other parameters might be modifiable, depending on the specified service type. 
    # @param service_profile_id 
    # @param service_profile 
    # @param [Hash] opts the optional parameters
    # @return [ServiceProfile]
    def update_service_profile(service_profile_id, service_profile, opts = {})
      data, _status_code, _headers = update_service_profile_with_http_info(service_profile_id, service_profile, opts)
      return data
    end

    # Update a Service Profile
    # Modifies the specified service profile. The PUT request must include the resource_type parameters. Modifiable parameters include description and display_name. Other parameters might be modifiable, depending on the specified service type. 
    # @param service_profile_id 
    # @param service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceProfile, Fixnum, Hash)>] ServiceProfile data, response status code and response headers
    def update_service_profile_with_http_info(service_profile_id, service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_service_profile ..."
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling LogicalRoutingAndServicesApi.update_service_profile"
      end
      # verify the required parameter 'service_profile' is set
      if @api_client.config.client_side_validation && service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile' when calling LogicalRoutingAndServicesApi.update_service_profile"
      end
      # resource path
      local_var_path = "/service-profiles/{service-profile-id}".sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a static route BFD peer
    # Modifies the static route BFD peer. Modifiable parameters includes peer IP, enable flag and configuration of the BFD peer. 
    # @param logical_router_id 
    # @param bfd_peer_id 
    # @param static_hop_bfd_peer 
    # @param [Hash] opts the optional parameters
    # @return [StaticHopBfdPeer]
    def update_static_hop_bfd_peer(logical_router_id, bfd_peer_id, static_hop_bfd_peer, opts = {})
      data, _status_code, _headers = update_static_hop_bfd_peer_with_http_info(logical_router_id, bfd_peer_id, static_hop_bfd_peer, opts)
      return data
    end

    # Update a static route BFD peer
    # Modifies the static route BFD peer. Modifiable parameters includes peer IP, enable flag and configuration of the BFD peer. 
    # @param logical_router_id 
    # @param bfd_peer_id 
    # @param static_hop_bfd_peer 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticHopBfdPeer, Fixnum, Hash)>] StaticHopBfdPeer data, response status code and response headers
    def update_static_hop_bfd_peer_with_http_info(logical_router_id, bfd_peer_id, static_hop_bfd_peer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_static_hop_bfd_peer ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_static_hop_bfd_peer"
      end
      # verify the required parameter 'bfd_peer_id' is set
      if @api_client.config.client_side_validation && bfd_peer_id.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_peer_id' when calling LogicalRoutingAndServicesApi.update_static_hop_bfd_peer"
      end
      # verify the required parameter 'static_hop_bfd_peer' is set
      if @api_client.config.client_side_validation && static_hop_bfd_peer.nil?
        fail ArgumentError, "Missing the required parameter 'static_hop_bfd_peer' when calling LogicalRoutingAndServicesApi.update_static_hop_bfd_peer"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/static-routes/bfd-peers/{bfd-peer-id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'bfd-peer-id' + '}', bfd_peer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_hop_bfd_peer)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticHopBfdPeer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_static_hop_bfd_peer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific Static Route Rule on a Logical Router
    # Update a specific static route on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param static_route 
    # @param [Hash] opts the optional parameters
    # @return [StaticRoute]
    def update_static_route(logical_router_id, id, static_route, opts = {})
      data, _status_code, _headers = update_static_route_with_http_info(logical_router_id, id, static_route, opts)
      return data
    end

    # Update a specific Static Route Rule on a Logical Router
    # Update a specific static route on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param static_route 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticRoute, Fixnum, Hash)>] StaticRoute data, response status code and response headers
    def update_static_route_with_http_info(logical_router_id, id, static_route, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalRoutingAndServicesApi.update_static_route ..."
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling LogicalRoutingAndServicesApi.update_static_route"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogicalRoutingAndServicesApi.update_static_route"
      end
      # verify the required parameter 'static_route' is set
      if @api_client.config.client_side_validation && static_route.nil?
        fail ArgumentError, "Missing the required parameter 'static_route' when calling LogicalRoutingAndServicesApi.update_static_route"
      end
      # resource path
      local_var_path = "/logical-routers/{logical-router-id}/routing/static-routes/{id}".sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_route)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalRoutingAndServicesApi#update_static_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
