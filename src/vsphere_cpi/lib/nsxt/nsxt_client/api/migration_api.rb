=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.3.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module NSXT
  class MigrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add migration units to specified migration unit group
    # Add migration units to specified migration unit group
    # @param group_id 
    # @param migration_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [MigrationUnitList]
    def add_migration_units_to_group_add_migration_units(group_id, migration_unit_list, opts = {})
      data, _status_code, _headers = add_migration_units_to_group_add_migration_units_with_http_info(group_id, migration_unit_list, opts)
      return data
    end

    # Add migration units to specified migration unit group
    # Add migration units to specified migration unit group
    # @param group_id 
    # @param migration_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationUnitList, Fixnum, Hash)>] MigrationUnitList data, response status code and response headers
    def add_migration_units_to_group_add_migration_units_with_http_info(group_id, migration_unit_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.add_migration_units_to_group_add_migration_units ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MigrationApi.add_migration_units_to_group_add_migration_units"
      end
      # verify the required parameter 'migration_unit_list' is set
      if @api_client.config.client_side_validation && migration_unit_list.nil?
        fail ArgumentError, "Missing the required parameter 'migration_unit_list' when calling MigrationApi.add_migration_units_to_group_add_migration_units"
      end
      # resource path
      local_var_path = "/migration/migration-unit-groups/{group-id}?action=add_migration_units".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_unit_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#add_migration_units_to_group_add_migration_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Continue migration
    # Continue migration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip Skip to migration of next component. (default to false)
    # @return [nil]
    def continue_migration_continue(opts = {})
      continue_migration_continue_with_http_info(opts)
      return nil
    end

    # Continue migration
    # Continue migration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip Skip to migration of next component.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def continue_migration_continue_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.continue_migration_continue ..."
      end
      # resource path
      local_var_path = "/migration/plan?action=continue"

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#continue_migration_continue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a group
    # Create a group
    # @param migration_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [MigrationUnitGroup]
    def create_migration_unit_group(migration_unit_group, opts = {})
      data, _status_code, _headers = create_migration_unit_group_with_http_info(migration_unit_group, opts)
      return data
    end

    # Create a group
    # Create a group
    # @param migration_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationUnitGroup, Fixnum, Hash)>] MigrationUnitGroup data, response status code and response headers
    def create_migration_unit_group_with_http_info(migration_unit_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.create_migration_unit_group ..."
      end
      # verify the required parameter 'migration_unit_group' is set
      if @api_client.config.client_side_validation && migration_unit_group.nil?
        fail ArgumentError, "Missing the required parameter 'migration_unit_group' when calling MigrationApi.create_migration_unit_group"
      end
      # resource path
      local_var_path = "/migration/migration-unit-groups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_unit_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#create_migration_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the migration unit group
    # Delete the migration unit group
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_migration_unit_group(group_id, opts = {})
      delete_migration_unit_group_with_http_info(group_id, opts)
      return nil
    end

    # Delete the migration unit group
    # Delete the migration unit group
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_migration_unit_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.delete_migration_unit_group ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MigrationApi.delete_migration_unit_group"
      end
      # resource path
      local_var_path = "/migration/migration-unit-groups/{group-id}".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#delete_migration_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch migration bundle from given url
    # Fetch migration bundle from given url
    # @param migration_bundle_fetch_request 
    # @param [Hash] opts the optional parameters
    # @return [MigrationBundleId]
    def fetch_migration_bundle_from_url(migration_bundle_fetch_request, opts = {})
      data, _status_code, _headers = fetch_migration_bundle_from_url_with_http_info(migration_bundle_fetch_request, opts)
      return data
    end

    # Fetch migration bundle from given url
    # Fetch migration bundle from given url
    # @param migration_bundle_fetch_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationBundleId, Fixnum, Hash)>] MigrationBundleId data, response status code and response headers
    def fetch_migration_bundle_from_url_with_http_info(migration_bundle_fetch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.fetch_migration_bundle_from_url ..."
      end
      # verify the required parameter 'migration_bundle_fetch_request' is set
      if @api_client.config.client_side_validation && migration_bundle_fetch_request.nil?
        fail ArgumentError, "Missing the required parameter 'migration_bundle_fetch_request' when calling MigrationApi.fetch_migration_bundle_from_url"
      end
      # resource path
      local_var_path = "/migration/bundles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_bundle_fetch_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationBundleId')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#fetch_migration_bundle_from_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # NSX-V feedback details
    # NSX-V feedback details
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MigrationFeedbackRequestListResult]
    def get_feedback_requests(opts = {})
      data, _status_code, _headers = get_feedback_requests_with_http_info(opts)
      return data
    end

    # NSX-V feedback details
    # NSX-V feedback details
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MigrationFeedbackRequestListResult, Fixnum, Hash)>] MigrationFeedbackRequestListResult data, response status code and response headers
    def get_feedback_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_feedback_requests ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_feedback_requests, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_feedback_requests, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/migration/feedback-requests"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationFeedbackRequestListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_feedback_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get uploaded migration bundle information
    # Get uploaded migration bundle information 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [MigrationBundleInfo]
    def get_migration_bundle_info(bundle_id, opts = {})
      data, _status_code, _headers = get_migration_bundle_info_with_http_info(bundle_id, opts)
      return data
    end

    # Get uploaded migration bundle information
    # Get uploaded migration bundle information 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationBundleInfo, Fixnum, Hash)>] MigrationBundleInfo data, response status code and response headers
    def get_migration_bundle_info_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_bundle_info ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling MigrationApi.get_migration_bundle_info"
      end
      # resource path
      local_var_path = "/migration/bundles/{bundle-id}".sub('{' + 'bundle-id' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationBundleInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_bundle_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get uploaded migration bundle upload status
    # Get uploaded migration bundle upload status 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [MigrationBundleUploadStatus]
    def get_migration_bundle_upload_status(bundle_id, opts = {})
      data, _status_code, _headers = get_migration_bundle_upload_status_with_http_info(bundle_id, opts)
      return data
    end

    # Get uploaded migration bundle upload status
    # Get uploaded migration bundle upload status 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationBundleUploadStatus, Fixnum, Hash)>] MigrationBundleUploadStatus data, response status code and response headers
    def get_migration_bundle_upload_status_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_bundle_upload_status ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling MigrationApi.get_migration_bundle_upload_status"
      end
      # resource path
      local_var_path = "/migration/bundles/{bundle-id}/upload-status".sub('{' + 'bundle-id' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationBundleUploadStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_bundle_upload_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of nodes across all types
    # Get list of nodes across all types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which nodes will be filtered
    # @option opts [String] :component_version Component version based on which nodes will be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [NodeInfoListResult]
    def get_migration_nodes(opts = {})
      data, _status_code, _headers = get_migration_nodes_with_http_info(opts)
      return data
    end

    # Get list of nodes across all types
    # Get list of nodes across all types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which nodes will be filtered
    # @option opts [String] :component_version Component version based on which nodes will be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(NodeInfoListResult, Fixnum, Hash)>] NodeInfoListResult data, response status code and response headers
    def get_migration_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_nodes ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_nodes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_nodes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/migration/nodes"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'component_version'] = opts[:'component_version'] if !opts[:'component_version'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get summary of nodes
    # Get summary of nodes
    # @param [Hash] opts the optional parameters
    # @return [NodeSummaryList]
    def get_migration_nodes_summary(opts = {})
      data, _status_code, _headers = get_migration_nodes_summary_with_http_info(opts)
      return data
    end

    # Get summary of nodes
    # Get summary of nodes
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeSummaryList, Fixnum, Hash)>] NodeSummaryList data, response status code and response headers
    def get_migration_nodes_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_nodes_summary ..."
      end
      # resource path
      local_var_path = "/migration/nodes-summary"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_nodes_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get migration plan settings for the component
    # Get the migration plan settings for the component. 
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [MigrationPlanSettings]
    def get_migration_plan_settings(component_type, opts = {})
      data, _status_code, _headers = get_migration_plan_settings_with_http_info(component_type, opts)
      return data
    end

    # Get migration plan settings for the component
    # Get the migration plan settings for the component. 
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationPlanSettings, Fixnum, Hash)>] MigrationPlanSettings data, response status code and response headers
    def get_migration_plan_settings_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_plan_settings ..."
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling MigrationApi.get_migration_plan_settings"
      end
      # resource path
      local_var_path = "/migration/plan/{component_type}/settings".sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationPlanSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_plan_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get migration status summary
    # Get migration status summary
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration units to be filtered
    # @return [MigrationStatus]
    def get_migration_status_summary(opts = {})
      data, _status_code, _headers = get_migration_status_summary_with_http_info(opts)
      return data
    end

    # Get migration status summary
    # Get migration status summary
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration units to be filtered
    # @return [Array<(MigrationStatus, Fixnum, Hash)>] MigrationStatus data, response status code and response headers
    def get_migration_status_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_status_summary ..."
      end
      # resource path
      local_var_path = "/migration/status-summary"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_status_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get migration summary
    # Get migration summary
    # @param [Hash] opts the optional parameters
    # @return [MigrationSummary]
    def get_migration_summary(opts = {})
      data, _status_code, _headers = get_migration_summary_with_http_info(opts)
      return data
    end

    # Get migration summary
    # Get migration summary
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationSummary, Fixnum, Hash)>] MigrationSummary data, response status code and response headers
    def get_migration_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_summary ..."
      end
      # resource path
      local_var_path = "/migration/summary"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific migration unit
    # Get a specific migration unit
    # @param migration_unit_id 
    # @param [Hash] opts the optional parameters
    # @return [MigrationUnit]
    def get_migration_unit(migration_unit_id, opts = {})
      data, _status_code, _headers = get_migration_unit_with_http_info(migration_unit_id, opts)
      return data
    end

    # Get a specific migration unit
    # Get a specific migration unit
    # @param migration_unit_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationUnit, Fixnum, Hash)>] MigrationUnit data, response status code and response headers
    def get_migration_unit_with_http_info(migration_unit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_unit ..."
      end
      # verify the required parameter 'migration_unit_id' is set
      if @api_client.config.client_side_validation && migration_unit_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_unit_id' when calling MigrationApi.get_migration_unit"
      end
      # resource path
      local_var_path = "/migration/migration-units/{migration-unit-id}".sub('{' + 'migration-unit-id' + '}', migration_unit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_unit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get migration units aggregate-info
    # Get migration units aggregate-info
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration units to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :group_id Identifier of group based on which migration units to be filtered
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only migration units with errors (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :metadata Metadata about migration unit to filter on
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :selection_status Flag to indicate whether to return only selected, only deselected or both type of migration units (default to ALL)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MigrationUnitAggregateInfoListResult]
    def get_migration_unit_aggregate_info(opts = {})
      data, _status_code, _headers = get_migration_unit_aggregate_info_with_http_info(opts)
      return data
    end

    # Get migration units aggregate-info
    # Get migration units aggregate-info
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration units to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :group_id Identifier of group based on which migration units to be filtered
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only migration units with errors
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :metadata Metadata about migration unit to filter on
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :selection_status Flag to indicate whether to return only selected, only deselected or both type of migration units
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MigrationUnitAggregateInfoListResult, Fixnum, Hash)>] MigrationUnitAggregateInfoListResult data, response status code and response headers
    def get_migration_unit_aggregate_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_unit_aggregate_info ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_unit_aggregate_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_unit_aggregate_info, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'selection_status'] && !['SELECTED', 'DESELECTED', 'ALL'].include?(opts[:'selection_status'])
        fail ArgumentError, 'invalid value for "selection_status", must be one of SELECTED, DESELECTED, ALL'
      end
      # resource path
      local_var_path = "/migration/migration-units/aggregate-info"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'has_errors'] = opts[:'has_errors'] if !opts[:'has_errors'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'selection_status'] = opts[:'selection_status'] if !opts[:'selection_status'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitAggregateInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_unit_aggregate_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return migration unit group information
    # Return migration unit group information
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :summary Flag indicating whether to return the summary (default to false)
    # @return [MigrationUnitGroup]
    def get_migration_unit_group(group_id, opts = {})
      data, _status_code, _headers = get_migration_unit_group_with_http_info(group_id, opts)
      return data
    end

    # Return migration unit group information
    # Return migration unit group information
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :summary Flag indicating whether to return the summary
    # @return [Array<(MigrationUnitGroup, Fixnum, Hash)>] MigrationUnitGroup data, response status code and response headers
    def get_migration_unit_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_unit_group ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MigrationApi.get_migration_unit_group"
      end
      # resource path
      local_var_path = "/migration/migration-unit-groups/{group-id}".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return aggregate information of all migration unit groups
    # Return aggregate information of all migration unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary (default to false)
    # @option opts [BOOLEAN] :sync Synchronize before returning migration unit groups (default to false)
    # @return [MigrationUnitGroupAggregateInfoListResult]
    def get_migration_unit_group_aggregate_info(opts = {})
      data, _status_code, _headers = get_migration_unit_group_aggregate_info_with_http_info(opts)
      return data
    end

    # Return aggregate information of all migration unit groups
    # Return aggregate information of all migration unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary
    # @option opts [BOOLEAN] :sync Synchronize before returning migration unit groups
    # @return [Array<(MigrationUnitGroupAggregateInfoListResult, Fixnum, Hash)>] MigrationUnitGroupAggregateInfoListResult data, response status code and response headers
    def get_migration_unit_group_aggregate_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_unit_group_aggregate_info ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_unit_group_aggregate_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_unit_group_aggregate_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/migration/migration-unit-groups/aggregate-info"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?
      query_params[:'sync'] = opts[:'sync'] if !opts[:'sync'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroupAggregateInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_unit_group_aggregate_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get migration status for group
    # Get migration status for group
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only migration units with errors (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MigrationUnitStatusListResult]
    def get_migration_unit_group_status(group_id, opts = {})
      data, _status_code, _headers = get_migration_unit_group_status_with_http_info(group_id, opts)
      return data
    end

    # Get migration status for group
    # Get migration status for group
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only migration units with errors
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MigrationUnitStatusListResult, Fixnum, Hash)>] MigrationUnitStatusListResult data, response status code and response headers
    def get_migration_unit_group_status_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_unit_group_status ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MigrationApi.get_migration_unit_group_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_unit_group_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_unit_group_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/migration/migration-unit-groups/{group-id}/status".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'has_errors'] = opts[:'has_errors'] if !opts[:'has_errors'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_unit_group_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return information of all migration unit groups
    # Return information of all migration unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary (default to false)
    # @option opts [BOOLEAN] :sync Synchronize before returning migration unit groups (default to false)
    # @return [MigrationUnitGroupListResult]
    def get_migration_unit_groups(opts = {})
      data, _status_code, _headers = get_migration_unit_groups_with_http_info(opts)
      return data
    end

    # Return information of all migration unit groups
    # Return information of all migration unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary
    # @option opts [BOOLEAN] :sync Synchronize before returning migration unit groups
    # @return [Array<(MigrationUnitGroupListResult, Fixnum, Hash)>] MigrationUnitGroupListResult data, response status code and response headers
    def get_migration_unit_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_unit_groups ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_unit_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_unit_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/migration/migration-unit-groups"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?
      query_params[:'sync'] = opts[:'sync'] if !opts[:'sync'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_unit_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get migration status for migration unit groups
    # Get migration status for migration unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MigrationUnitGroupStatusListResult]
    def get_migration_unit_groups_status(opts = {})
      data, _status_code, _headers = get_migration_unit_groups_status_with_http_info(opts)
      return data
    end

    # Get migration status for migration unit groups
    # Get migration status for migration unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MigrationUnitGroupStatusListResult, Fixnum, Hash)>] MigrationUnitGroupStatusListResult data, response status code and response headers
    def get_migration_unit_groups_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_unit_groups_status ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_unit_groups_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_unit_groups_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/migration/migration-unit-groups-status"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroupStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_unit_groups_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get migration units
    # Get migration units
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration units to be filtered
    # @option opts [String] :current_version Current version of migration unit based on which migration units to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :group_id UUID of group based on which migration units to be filtered
    # @option opts [BOOLEAN] :has_warnings Flag to indicate whether to return only migration units with warnings (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :metadata Metadata about migration unit to filter on
    # @option opts [String] :migration_unit_type Migration unit type based on which migration units to be filtered
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MigrationUnitListResult]
    def get_migration_units(opts = {})
      data, _status_code, _headers = get_migration_units_with_http_info(opts)
      return data
    end

    # Get migration units
    # Get migration units
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration units to be filtered
    # @option opts [String] :current_version Current version of migration unit based on which migration units to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :group_id UUID of group based on which migration units to be filtered
    # @option opts [BOOLEAN] :has_warnings Flag to indicate whether to return only migration units with warnings
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :metadata Metadata about migration unit to filter on
    # @option opts [String] :migration_unit_type Migration unit type based on which migration units to be filtered
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MigrationUnitListResult, Fixnum, Hash)>] MigrationUnitListResult data, response status code and response headers
    def get_migration_units_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_units ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_units, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_units, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/migration/migration-units"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'current_version'] = opts[:'current_version'] if !opts[:'current_version'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'has_warnings'] = opts[:'has_warnings'] if !opts[:'has_warnings'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?
      query_params[:'migration_unit_type'] = opts[:'migration_unit_type'] if !opts[:'migration_unit_type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get migration units stats
    # Get migration units stats
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :sync Synchronize before returning migration unit stats (default to false)
    # @return [MigrationUnitTypeStatsList]
    def get_migration_units_stats(opts = {})
      data, _status_code, _headers = get_migration_units_stats_with_http_info(opts)
      return data
    end

    # Get migration units stats
    # Get migration units stats
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :sync Synchronize before returning migration unit stats
    # @return [Array<(MigrationUnitTypeStatsList, Fixnum, Hash)>] MigrationUnitTypeStatsList data, response status code and response headers
    def get_migration_units_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_migration_units_stats ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_units_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MigrationApi.get_migration_units_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/migration/migration-units-stats"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sync'] = opts[:'sync'] if !opts[:'sync'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitTypeStatsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_migration_units_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # NSX-V setup details
    # NSX-V setup details
    # @param [Hash] opts the optional parameters
    # @return [MigrationSetupInfo]
    def get_nsxv_setup_details(opts = {})
      data, _status_code, _headers = get_nsxv_setup_details_with_http_info(opts)
      return data
    end

    # NSX-V setup details
    # NSX-V setup details
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationSetupInfo, Fixnum, Hash)>] MigrationSetupInfo data, response status code and response headers
    def get_nsxv_setup_details_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.get_nsxv_setup_details ..."
      end
      # resource path
      local_var_path = "/migration/setup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationSetupInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#get_nsxv_setup_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pause migration
    # Pause migration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pause_migration_pause(opts = {})
      pause_migration_pause_with_http_info(opts)
      return nil
    end

    # Pause migration
    # Pause migration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def pause_migration_pause_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.pause_migration_pause ..."
      end
      # resource path
      local_var_path = "/migration/plan?action=pause"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#pause_migration_pause\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorder migration unit group
    # Reorder migration unit group
    # @param group_id 
    # @param reorder_migration_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reorder_migration_unit_group_reorder(group_id, reorder_migration_request, opts = {})
      reorder_migration_unit_group_reorder_with_http_info(group_id, reorder_migration_request, opts)
      return nil
    end

    # Reorder migration unit group
    # Reorder migration unit group
    # @param group_id 
    # @param reorder_migration_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reorder_migration_unit_group_reorder_with_http_info(group_id, reorder_migration_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.reorder_migration_unit_group_reorder ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MigrationApi.reorder_migration_unit_group_reorder"
      end
      # verify the required parameter 'reorder_migration_request' is set
      if @api_client.config.client_side_validation && reorder_migration_request.nil?
        fail ArgumentError, "Missing the required parameter 'reorder_migration_request' when calling MigrationApi.reorder_migration_unit_group_reorder"
      end
      # resource path
      local_var_path = "/migration/migration-unit-groups/{group-id}?action=reorder".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reorder_migration_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#reorder_migration_unit_group_reorder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorder an migration unit within the migration unit group
    # Reorder an migration unit within the migration unit group
    # @param group_id 
    # @param migration_unit_id 
    # @param reorder_migration_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reorder_migration_unit_reorder(group_id, migration_unit_id, reorder_migration_request, opts = {})
      reorder_migration_unit_reorder_with_http_info(group_id, migration_unit_id, reorder_migration_request, opts)
      return nil
    end

    # Reorder an migration unit within the migration unit group
    # Reorder an migration unit within the migration unit group
    # @param group_id 
    # @param migration_unit_id 
    # @param reorder_migration_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reorder_migration_unit_reorder_with_http_info(group_id, migration_unit_id, reorder_migration_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.reorder_migration_unit_reorder ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MigrationApi.reorder_migration_unit_reorder"
      end
      # verify the required parameter 'migration_unit_id' is set
      if @api_client.config.client_side_validation && migration_unit_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_unit_id' when calling MigrationApi.reorder_migration_unit_reorder"
      end
      # verify the required parameter 'reorder_migration_request' is set
      if @api_client.config.client_side_validation && reorder_migration_request.nil?
        fail ArgumentError, "Missing the required parameter 'reorder_migration_request' when calling MigrationApi.reorder_migration_unit_reorder"
      end
      # resource path
      local_var_path = "/migration/migration-unit-groups/{group-id}/migration-unit/{migration-unit-id}?action=reorder".sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'migration-unit-id' + '}', migration_unit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reorder_migration_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#reorder_migration_unit_reorder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset migration plan to default plan
    # Reset the migration plan to default plan. User has an option to change the default plan. But if after making changes, user wants to go back to the default plan, this is the way to do so. 
    # @param component_type Component type
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_migration_plan_reset(component_type, opts = {})
      reset_migration_plan_reset_with_http_info(component_type, opts)
      return nil
    end

    # Reset migration plan to default plan
    # Reset the migration plan to default plan. User has an option to change the default plan. But if after making changes, user wants to go back to the default plan, this is the way to do so. 
    # @param component_type Component type
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_migration_plan_reset_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.reset_migration_plan_reset ..."
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling MigrationApi.reset_migration_plan_reset"
      end
      # resource path
      local_var_path = "/migration/plan?action=reset"

      # query parameters
      query_params = {}
      query_params[:'component_type'] = component_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#reset_migration_plan_reset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start migration
    # Start migration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def start_migration_start(opts = {})
      start_migration_start_with_http_info(opts)
      return nil
    end

    # Start migration
    # Start migration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def start_migration_start_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.start_migration_start ..."
      end
      # resource path
      local_var_path = "/migration/plan?action=start"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#start_migration_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rollbabck migration
    # Rollbabck migration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def start_rollback_migration_rollback(opts = {})
      start_rollback_migration_rollback_with_http_info(opts)
      return nil
    end

    # Rollbabck migration
    # Rollbabck migration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def start_rollback_migration_rollback_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.start_rollback_migration_rollback ..."
      end
      # resource path
      local_var_path = "/migration/plan?action=rollback"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#start_rollback_migration_rollback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upgrade the migration coordinator.
    # Upgrade the migration coordinator.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def trigger_mc_upgrade_upgrade_mc(opts = {})
      trigger_mc_upgrade_upgrade_mc_with_http_info(opts)
      return nil
    end

    # Upgrade the migration coordinator.
    # Upgrade the migration coordinator.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def trigger_mc_upgrade_upgrade_mc_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.trigger_mc_upgrade_upgrade_mc ..."
      end
      # resource path
      local_var_path = "/migration?action=upgrade_mc"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#trigger_mc_upgrade_upgrade_mc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Migration feedback response
    # Migration feedback response
    # @param migration_feedback_response_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_feedback_response(migration_feedback_response_list, opts = {})
      update_feedback_response_with_http_info(migration_feedback_response_list, opts)
      return nil
    end

    # Migration feedback response
    # Migration feedback response
    # @param migration_feedback_response_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_feedback_response_with_http_info(migration_feedback_response_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.update_feedback_response ..."
      end
      # verify the required parameter 'migration_feedback_response_list' is set
      if @api_client.config.client_side_validation && migration_feedback_response_list.nil?
        fail ArgumentError, "Missing the required parameter 'migration_feedback_response_list' when calling MigrationApi.update_feedback_response"
      end
      # resource path
      local_var_path = "/migration/feedback-response"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_feedback_response_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#update_feedback_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update migration plan settings for the component
    # Update the migration plan settings for the component. 
    # @param component_type 
    # @param migration_plan_settings 
    # @param [Hash] opts the optional parameters
    # @return [MigrationPlanSettings]
    def update_migration_plan_settings(component_type, migration_plan_settings, opts = {})
      data, _status_code, _headers = update_migration_plan_settings_with_http_info(component_type, migration_plan_settings, opts)
      return data
    end

    # Update migration plan settings for the component
    # Update the migration plan settings for the component. 
    # @param component_type 
    # @param migration_plan_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationPlanSettings, Fixnum, Hash)>] MigrationPlanSettings data, response status code and response headers
    def update_migration_plan_settings_with_http_info(component_type, migration_plan_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.update_migration_plan_settings ..."
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling MigrationApi.update_migration_plan_settings"
      end
      # verify the required parameter 'migration_plan_settings' is set
      if @api_client.config.client_side_validation && migration_plan_settings.nil?
        fail ArgumentError, "Missing the required parameter 'migration_plan_settings' when calling MigrationApi.update_migration_plan_settings"
      end
      # resource path
      local_var_path = "/migration/plan/{component_type}/settings".sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_plan_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationPlanSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#update_migration_plan_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the migration unit group
    # Update the migration unit group
    # @param group_id 
    # @param migration_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [MigrationUnitGroup]
    def update_migration_unit_group(group_id, migration_unit_group, opts = {})
      data, _status_code, _headers = update_migration_unit_group_with_http_info(group_id, migration_unit_group, opts)
      return data
    end

    # Update the migration unit group
    # Update the migration unit group
    # @param group_id 
    # @param migration_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationUnitGroup, Fixnum, Hash)>] MigrationUnitGroup data, response status code and response headers
    def update_migration_unit_group_with_http_info(group_id, migration_unit_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.update_migration_unit_group ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MigrationApi.update_migration_unit_group"
      end
      # verify the required parameter 'migration_unit_group' is set
      if @api_client.config.client_side_validation && migration_unit_group.nil?
        fail ArgumentError, "Missing the required parameter 'migration_unit_group' when calling MigrationApi.update_migration_unit_group"
      end
      # resource path
      local_var_path = "/migration/migration-unit-groups/{group-id}".sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_unit_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#update_migration_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # NSX-V setup details
    # NSX-V setup details
    # @param migration_setup_info 
    # @param [Hash] opts the optional parameters
    # @return [MigrationSetupInfo]
    def update_nsxv_setup_details(migration_setup_info, opts = {})
      data, _status_code, _headers = update_nsxv_setup_details_with_http_info(migration_setup_info, opts)
      return data
    end

    # NSX-V setup details
    # NSX-V setup details
    # @param migration_setup_info 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationSetupInfo, Fixnum, Hash)>] MigrationSetupInfo data, response status code and response headers
    def update_nsxv_setup_details_with_http_info(migration_setup_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MigrationApi.update_nsxv_setup_details ..."
      end
      # verify the required parameter 'migration_setup_info' is set
      if @api_client.config.client_side_validation && migration_setup_info.nil?
        fail ArgumentError, "Missing the required parameter 'migration_setup_info' when calling MigrationApi.update_nsxv_setup_details"
      end
      # resource path
      local_var_path = "/migration/setup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_setup_info)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationSetupInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationApi#update_nsxv_setup_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
