=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.3.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module NSXT
  class VpnApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create custom local endpoint
    # Create custom IPSec local endpoint.
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNLocalEndpoint]
    def create_ip_sec_vpn_local_endpoint(ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = create_ip_sec_vpn_local_endpoint_with_http_info(ip_sec_vpn_local_endpoint, opts)
      return data
    end

    # Create custom local endpoint
    # Create custom IPSec local endpoint.
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNLocalEndpoint, Fixnum, Hash)>] IPSecVPNLocalEndpoint data, response status code and response headers
    def create_ip_sec_vpn_local_endpoint_with_http_info(ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.create_ip_sec_vpn_local_endpoint ..."
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling VpnApi.create_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = "/vpn/ipsec/local-endpoints"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#create_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create custom peer endpoint
    # Create custom IPSec peer endpoint.
    # @param ip_sec_vpn_peer_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNPeerEndpoint]
    def create_ip_sec_vpn_peer_end_point(ip_sec_vpn_peer_endpoint, opts = {})
      data, _status_code, _headers = create_ip_sec_vpn_peer_end_point_with_http_info(ip_sec_vpn_peer_endpoint, opts)
      return data
    end

    # Create custom peer endpoint
    # Create custom IPSec peer endpoint.
    # @param ip_sec_vpn_peer_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNPeerEndpoint, Fixnum, Hash)>] IPSecVPNPeerEndpoint data, response status code and response headers
    def create_ip_sec_vpn_peer_end_point_with_http_info(ip_sec_vpn_peer_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.create_ip_sec_vpn_peer_end_point ..."
      end
      # verify the required parameter 'ip_sec_vpn_peer_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_peer_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_peer_endpoint' when calling VpnApi.create_ip_sec_vpn_peer_end_point"
      end
      # resource path
      local_var_path = "/vpn/ipsec/peer-endpoints"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_peer_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNPeerEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#create_ip_sec_vpn_peer_end_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create VPN service
    # Create VPN service for given logical router.
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNService]
    def create_ip_sec_vpn_service(ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = create_ip_sec_vpn_service_with_http_info(ip_sec_vpn_service, opts)
      return data
    end

    # Create VPN service
    # Create VPN service for given logical router.
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNService, Fixnum, Hash)>] IPSecVPNService data, response status code and response headers
    def create_ip_sec_vpn_service_with_http_info(ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.create_ip_sec_vpn_service ..."
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling VpnApi.create_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = "/vpn/ipsec/services"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#create_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new VPN session
    # Create new VPN session.
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNSession]
    def create_ip_sec_vpn_session(ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_ip_sec_vpn_session_with_http_info(ip_sec_vpn_session, opts)
      return data
    end

    # Create new VPN session
    # Create new VPN session.
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNSession, Fixnum, Hash)>] IPSecVPNSession data, response status code and response headers
    def create_ip_sec_vpn_session_with_http_info(ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.create_ip_sec_vpn_session ..."
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling VpnApi.create_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = "/vpn/ipsec/sessions"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#create_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create custom IPSec tunnel profile
    # Create custom IPSec tunnel profile. IPSec tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. System will be provisioned with system owned non editable default IPSec tunnel profile. Any change in profile affects all sessions consuming this profile.
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNTunnelProfile]
    def create_ip_sec_vpn_tunnel_profile(ip_sec_vpn_tunnel_profile, opts = {})
      data, _status_code, _headers = create_ip_sec_vpn_tunnel_profile_with_http_info(ip_sec_vpn_tunnel_profile, opts)
      return data
    end

    # Create custom IPSec tunnel profile
    # Create custom IPSec tunnel profile. IPSec tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. System will be provisioned with system owned non editable default IPSec tunnel profile. Any change in profile affects all sessions consuming this profile.
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNTunnelProfile, Fixnum, Hash)>] IPSecVPNTunnelProfile data, response status code and response headers
    def create_ip_sec_vpn_tunnel_profile_with_http_info(ip_sec_vpn_tunnel_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.create_ip_sec_vpn_tunnel_profile ..."
      end
      # verify the required parameter 'ip_sec_vpn_tunnel_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_tunnel_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_tunnel_profile' when calling VpnApi.create_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/tunnel-profiles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_tunnel_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNTunnelProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#create_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create dead peer detection (DPD) profile
    # Create dead peer detection (DPD) profile. Any change in profile affects all sessions consuming this profile.
    # @param ip_sec_vpndpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNDPDProfile]
    def create_ip_sec_vpndpd_profile(ip_sec_vpndpd_profile, opts = {})
      data, _status_code, _headers = create_ip_sec_vpndpd_profile_with_http_info(ip_sec_vpndpd_profile, opts)
      return data
    end

    # Create dead peer detection (DPD) profile
    # Create dead peer detection (DPD) profile. Any change in profile affects all sessions consuming this profile.
    # @param ip_sec_vpndpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNDPDProfile, Fixnum, Hash)>] IPSecVPNDPDProfile data, response status code and response headers
    def create_ip_sec_vpndpd_profile_with_http_info(ip_sec_vpndpd_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.create_ip_sec_vpndpd_profile ..."
      end
      # verify the required parameter 'ip_sec_vpndpd_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpndpd_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpndpd_profile' when calling VpnApi.create_ip_sec_vpndpd_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/dpd-profiles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpndpd_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNDPDProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#create_ip_sec_vpndpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create custom internet key exchange (IKE) Profile
    # Create custom internet key exchange (IKE) Profile. IKE Profile is a reusable profile that captures IKE and phase one negotiation parameters. System will be pre provisioned with system owned non editable default IKE profile and suggested set of profiles that can be used for peering with popular remote peers like AWS VPN. User can create custom profiles as needed. Any change in profile affects all sessions consuming this profile.
    # @param ip_sec_vpnike_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNIKEProfile]
    def create_ip_sec_vpnike_profile(ip_sec_vpnike_profile, opts = {})
      data, _status_code, _headers = create_ip_sec_vpnike_profile_with_http_info(ip_sec_vpnike_profile, opts)
      return data
    end

    # Create custom internet key exchange (IKE) Profile
    # Create custom internet key exchange (IKE) Profile. IKE Profile is a reusable profile that captures IKE and phase one negotiation parameters. System will be pre provisioned with system owned non editable default IKE profile and suggested set of profiles that can be used for peering with popular remote peers like AWS VPN. User can create custom profiles as needed. Any change in profile affects all sessions consuming this profile.
    # @param ip_sec_vpnike_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNIKEProfile, Fixnum, Hash)>] IPSecVPNIKEProfile data, response status code and response headers
    def create_ip_sec_vpnike_profile_with_http_info(ip_sec_vpnike_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.create_ip_sec_vpnike_profile ..."
      end
      # verify the required parameter 'ip_sec_vpnike_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpnike_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpnike_profile' when calling VpnApi.create_ip_sec_vpnike_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/ike-profiles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpnike_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNIKEProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#create_ip_sec_vpnike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create L2VPN service
    # Create L2VPN service for a given logical router
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VpnService]
    def create_l2_vpn_service(l2_vpn_service, opts = {})
      data, _status_code, _headers = create_l2_vpn_service_with_http_info(l2_vpn_service, opts)
      return data
    end

    # Create L2VPN service
    # Create L2VPN service for a given logical router
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VpnService, Fixnum, Hash)>] L2VpnService data, response status code and response headers
    def create_l2_vpn_service_with_http_info(l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.create_l2_vpn_service ..."
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling VpnApi.create_l2_vpn_service"
      end
      # resource path
      local_var_path = "/vpn/l2vpn/services"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#create_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create L2VPN session
    # Create L2VPN session and bind to a L2VPNService
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VpnSession]
    def create_l2_vpn_session(l2_vpn_session, opts = {})
      data, _status_code, _headers = create_l2_vpn_session_with_http_info(l2_vpn_session, opts)
      return data
    end

    # Create L2VPN session
    # Create L2VPN session and bind to a L2VPNService
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VpnSession, Fixnum, Hash)>] L2VpnSession data, response status code and response headers
    def create_l2_vpn_session_with_http_info(l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.create_l2_vpn_session ..."
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling VpnApi.create_l2_vpn_session"
      end
      # resource path
      local_var_path = "/vpn/l2vpn/sessions"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#create_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete custom IPSec local endpoint
    # Delete custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ip_sec_vpn_local_endpoint(ipsec_vpn_local_endpoint_id, opts = {})
      delete_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, opts)
      return nil
    end

    # Delete custom IPSec local endpoint
    # Delete custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.delete_ip_sec_vpn_local_endpoint ..."
      end
      # verify the required parameter 'ipsec_vpn_local_endpoint_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_local_endpoint_id' when calling VpnApi.delete_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = "/vpn/ipsec/local-endpoints/{ipsec-vpn-local-endpoint-id}".sub('{' + 'ipsec-vpn-local-endpoint-id' + '}', ipsec_vpn_local_endpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#delete_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete custom IPSec VPN peer endpoint
    # Delete custom IPSec VPN peer endpoint. All references are strong references and dependent peer endpoints can not be deleted if being referenced.
    # @param ipsec_vpn_peer_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ip_sec_vpn_peer_endpoint(ipsec_vpn_peer_endpoint_id, opts = {})
      delete_ip_sec_vpn_peer_endpoint_with_http_info(ipsec_vpn_peer_endpoint_id, opts)
      return nil
    end

    # Delete custom IPSec VPN peer endpoint
    # Delete custom IPSec VPN peer endpoint. All references are strong references and dependent peer endpoints can not be deleted if being referenced.
    # @param ipsec_vpn_peer_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpn_peer_endpoint_with_http_info(ipsec_vpn_peer_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.delete_ip_sec_vpn_peer_endpoint ..."
      end
      # verify the required parameter 'ipsec_vpn_peer_endpoint_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_peer_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_peer_endpoint_id' when calling VpnApi.delete_ip_sec_vpn_peer_endpoint"
      end
      # resource path
      local_var_path = "/vpn/ipsec/peer-endpoints/{ipsec-vpn-peer-endpoint-id}".sub('{' + 'ipsec-vpn-peer-endpoint-id' + '}', ipsec_vpn_peer_endpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#delete_ip_sec_vpn_peer_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete IPSec VPN service
    # Delete IPSec VPN service for given router.
    # @param ipsec_vpn_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ip_sec_vpn_service(ipsec_vpn_service_id, opts = {})
      delete_ip_sec_vpn_service_with_http_info(ipsec_vpn_service_id, opts)
      return nil
    end

    # Delete IPSec VPN service
    # Delete IPSec VPN service for given router.
    # @param ipsec_vpn_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpn_service_with_http_info(ipsec_vpn_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.delete_ip_sec_vpn_service ..."
      end
      # verify the required parameter 'ipsec_vpn_service_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_service_id' when calling VpnApi.delete_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = "/vpn/ipsec/services/{ipsec-vpn-service-id}".sub('{' + 'ipsec-vpn-service-id' + '}', ipsec_vpn_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#delete_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ip_sec_vpn_session(ipsec_vpn_session_id, opts = {})
      delete_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, opts)
      return nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.delete_ip_sec_vpn_session ..."
      end
      # verify the required parameter 'ipsec_vpn_session_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_session_id' when calling VpnApi.delete_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = "/vpn/ipsec/sessions/{ipsec-vpn-session-id}".sub('{' + 'ipsec-vpn-session-id' + '}', ipsec_vpn_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#delete_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete custom IPSecTunnelProfile
    # Delete custom IPSec Tunnel Profile.
    # @param ipsec_vpn_tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ip_sec_vpn_tunnel_profile(ipsec_vpn_tunnel_profile_id, opts = {})
      delete_ip_sec_vpn_tunnel_profile_with_http_info(ipsec_vpn_tunnel_profile_id, opts)
      return nil
    end

    # Delete custom IPSecTunnelProfile
    # Delete custom IPSec Tunnel Profile.
    # @param ipsec_vpn_tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpn_tunnel_profile_with_http_info(ipsec_vpn_tunnel_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.delete_ip_sec_vpn_tunnel_profile ..."
      end
      # verify the required parameter 'ipsec_vpn_tunnel_profile_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_tunnel_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_tunnel_profile_id' when calling VpnApi.delete_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/tunnel-profiles/{ipsec-vpn-tunnel-profile-id}".sub('{' + 'ipsec-vpn-tunnel-profile-id' + '}', ipsec_vpn_tunnel_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#delete_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete dead peer detection (DPD) profile
    # Delete dead peer detection (DPD) profile.
    # @param ipsec_vpn_dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ip_sec_vpndpd_profile(ipsec_vpn_dpd_profile_id, opts = {})
      delete_ip_sec_vpndpd_profile_with_http_info(ipsec_vpn_dpd_profile_id, opts)
      return nil
    end

    # Delete dead peer detection (DPD) profile
    # Delete dead peer detection (DPD) profile.
    # @param ipsec_vpn_dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpndpd_profile_with_http_info(ipsec_vpn_dpd_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.delete_ip_sec_vpndpd_profile ..."
      end
      # verify the required parameter 'ipsec_vpn_dpd_profile_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_dpd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_dpd_profile_id' when calling VpnApi.delete_ip_sec_vpndpd_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/dpd-profiles/{ipsec-vpn-dpd-profile-id}".sub('{' + 'ipsec-vpn-dpd-profile-id' + '}', ipsec_vpn_dpd_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#delete_ip_sec_vpndpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete custom IKE Profile
    # Delete custom IKE Profile. Profile can not be deleted if profile has references to it.
    # @param ipsec_vpn_ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ip_sec_vpnike_profile(ipsec_vpn_ike_profile_id, opts = {})
      delete_ip_sec_vpnike_profile_with_http_info(ipsec_vpn_ike_profile_id, opts)
      return nil
    end

    # Delete custom IKE Profile
    # Delete custom IKE Profile. Profile can not be deleted if profile has references to it.
    # @param ipsec_vpn_ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpnike_profile_with_http_info(ipsec_vpn_ike_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.delete_ip_sec_vpnike_profile ..."
      end
      # verify the required parameter 'ipsec_vpn_ike_profile_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_ike_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_ike_profile_id' when calling VpnApi.delete_ip_sec_vpnike_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/ike-profiles/{ipsec-vpn-ike-profile-id}".sub('{' + 'ipsec-vpn-ike-profile-id' + '}', ipsec_vpn_ike_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#delete_ip_sec_vpnike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a L2VPN service
    # Delete a specific L2VPN service. If there are any L2VpnSessions on this L2VpnService, those needs to be deleted first.
    # @param l2vpn_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_l2_vpn_service(l2vpn_service_id, opts = {})
      delete_l2_vpn_service_with_http_info(l2vpn_service_id, opts)
      return nil
    end

    # Delete a L2VPN service
    # Delete a specific L2VPN service. If there are any L2VpnSessions on this L2VpnService, those needs to be deleted first.
    # @param l2vpn_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l2_vpn_service_with_http_info(l2vpn_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.delete_l2_vpn_service ..."
      end
      # verify the required parameter 'l2vpn_service_id' is set
      if @api_client.config.client_side_validation && l2vpn_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_service_id' when calling VpnApi.delete_l2_vpn_service"
      end
      # resource path
      local_var_path = "/vpn/l2vpn/services/{l2vpn-service-id}".sub('{' + 'l2vpn-service-id' + '}', l2vpn_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#delete_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a L2VPN session
    # Delete a specific L2VPN session. If there are any logical switch ports attached to it, those needs to be deleted first.
    # @param l2vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_l2_vpn_session(l2vpn_session_id, opts = {})
      delete_l2_vpn_session_with_http_info(l2vpn_session_id, opts)
      return nil
    end

    # Delete a L2VPN session
    # Delete a specific L2VPN session. If there are any logical switch ports attached to it, those needs to be deleted first.
    # @param l2vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l2_vpn_session_with_http_info(l2vpn_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.delete_l2_vpn_session ..."
      end
      # verify the required parameter 'l2vpn_session_id' is set
      if @api_client.config.client_side_validation && l2vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_session_id' when calling VpnApi.delete_l2_vpn_session"
      end
      # resource path
      local_var_path = "/vpn/l2vpn/sessions/{l2vpn-session-id}".sub('{' + 'l2vpn-session-id' + '}', l2vpn_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#delete_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom IPSec local endpoint
    # Get custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNLocalEndpoint]
    def get_ip_sec_vpn_local_endpoint(ipsec_vpn_local_endpoint_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, opts)
      return data
    end

    # Get custom IPSec local endpoint
    # Get custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNLocalEndpoint, Fixnum, Hash)>] IPSecVPNLocalEndpoint data, response status code and response headers
    def get_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpn_local_endpoint ..."
      end
      # verify the required parameter 'ipsec_vpn_local_endpoint_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_local_endpoint_id' when calling VpnApi.get_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = "/vpn/ipsec/local-endpoints/{ipsec-vpn-local-endpoint-id}".sub('{' + 'ipsec-vpn-local-endpoint-id' + '}', ipsec_vpn_local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSec VPN peer endpoint
    # Get custom IPSec VPN peer endpoint.
    # @param ipsec_vpn_peer_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNPeerEndpoint]
    def get_ip_sec_vpn_peer_endpoint(ipsec_vpn_peer_endpoint_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_peer_endpoint_with_http_info(ipsec_vpn_peer_endpoint_id, opts)
      return data
    end

    # Get IPSec VPN peer endpoint
    # Get custom IPSec VPN peer endpoint.
    # @param ipsec_vpn_peer_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNPeerEndpoint, Fixnum, Hash)>] IPSecVPNPeerEndpoint data, response status code and response headers
    def get_ip_sec_vpn_peer_endpoint_with_http_info(ipsec_vpn_peer_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpn_peer_endpoint ..."
      end
      # verify the required parameter 'ipsec_vpn_peer_endpoint_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_peer_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_peer_endpoint_id' when calling VpnApi.get_ip_sec_vpn_peer_endpoint"
      end
      # resource path
      local_var_path = "/vpn/ipsec/peer-endpoints/{ipsec-vpn-peer-endpoint-id}".sub('{' + 'ipsec-vpn-peer-endpoint-id' + '}', ipsec_vpn_peer_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNPeerEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpn_peer_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSec VPN peer endpoint with PSK
    # Get custom IPSec VPN peer endpoint with PSK.
    # @param ipsec_vpn_peer_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNPeerEndpoint]
    def get_ip_sec_vpn_peer_endpoint_with_psk_show_sensitive_data(ipsec_vpn_peer_endpoint_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_peer_endpoint_with_psk_show_sensitive_data_with_http_info(ipsec_vpn_peer_endpoint_id, opts)
      return data
    end

    # Get IPSec VPN peer endpoint with PSK
    # Get custom IPSec VPN peer endpoint with PSK.
    # @param ipsec_vpn_peer_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNPeerEndpoint, Fixnum, Hash)>] IPSecVPNPeerEndpoint data, response status code and response headers
    def get_ip_sec_vpn_peer_endpoint_with_psk_show_sensitive_data_with_http_info(ipsec_vpn_peer_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpn_peer_endpoint_with_psk_show_sensitive_data ..."
      end
      # verify the required parameter 'ipsec_vpn_peer_endpoint_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_peer_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_peer_endpoint_id' when calling VpnApi.get_ip_sec_vpn_peer_endpoint_with_psk_show_sensitive_data"
      end
      # resource path
      local_var_path = "/vpn/ipsec/peer-endpoints/{ipsec-vpn-peer-endpoint-id}?action=show-sensitive-data".sub('{' + 'ipsec-vpn-peer-endpoint-id' + '}', ipsec_vpn_peer_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNPeerEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpn_peer_endpoint_with_psk_show_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSec VPN service
    # Get IPSec VPN service for given logical router.
    # @param ipsec_vpn_service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNService]
    def get_ip_sec_vpn_service(ipsec_vpn_service_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_service_with_http_info(ipsec_vpn_service_id, opts)
      return data
    end

    # Get IPSec VPN service
    # Get IPSec VPN service for given logical router.
    # @param ipsec_vpn_service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNService, Fixnum, Hash)>] IPSecVPNService data, response status code and response headers
    def get_ip_sec_vpn_service_with_http_info(ipsec_vpn_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpn_service ..."
      end
      # verify the required parameter 'ipsec_vpn_service_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_service_id' when calling VpnApi.get_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = "/vpn/ipsec/services/{ipsec-vpn-service-id}".sub('{' + 'ipsec-vpn-service-id' + '}', ipsec_vpn_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch IPSec VPN session
    # Fetch IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNSession]
    def get_ip_sec_vpn_session(ipsec_vpn_session_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, opts)
      return data
    end

    # Fetch IPSec VPN session
    # Fetch IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNSession, Fixnum, Hash)>] IPSecVPNSession data, response status code and response headers
    def get_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpn_session ..."
      end
      # verify the required parameter 'ipsec_vpn_session_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_session_id' when calling VpnApi.get_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = "/vpn/ipsec/sessions/{ipsec-vpn-session-id}".sub('{' + 'ipsec-vpn-session-id' + '}', ipsec_vpn_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSec VPN session statistics
    # Get statistics of a vpn session across all tunnels and IKE session. Query parameter \"source=realtime\" is the only supported source.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [IPSecVPNSessionStatistics]
    def get_ip_sec_vpn_session_statistics(session_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_session_statistics_with_http_info(session_id, opts)
      return data
    end

    # Get IPSec VPN session statistics
    # Get statistics of a vpn session across all tunnels and IKE session. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(IPSecVPNSessionStatistics, Fixnum, Hash)>] IPSecVPNSessionStatistics data, response status code and response headers
    def get_ip_sec_vpn_session_statistics_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpn_session_statistics ..."
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling VpnApi.get_ip_sec_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/vpn/ipsec/sessions/{session-id}/statistics".sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # VPN session summary
    # VPN session summary gets summary per vpn sessions and IKE session. Query parameter source supports only cached mode.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_id Peer site id
    # @option opts [String] :source Data source type.
    # @return [IPSecVPNSessionSummary]
    def get_ip_sec_vpn_session_summary(opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_session_summary_with_http_info(opts)
      return data
    end

    # VPN session summary
    # VPN session summary gets summary per vpn sessions and IKE session. Query parameter source supports only cached mode.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_id Peer site id
    # @option opts [String] :source Data source type.
    # @return [Array<(IPSecVPNSessionSummary, Fixnum, Hash)>] IPSecVPNSessionSummary data, response status code and response headers
    def get_ip_sec_vpn_session_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpn_session_summary ..."
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/vpn/ipsec/sessions/summary"

      # query parameters
      query_params = {}
      query_params[:'site_id'] = opts[:'site_id'] if !opts[:'site_id'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSessionSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSec tunnel profile
    # Get custom IPSec Tunnel Profile.
    # @param ipsec_vpn_tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNTunnelProfile]
    def get_ip_sec_vpn_tunnel_profile(ipsec_vpn_tunnel_profile_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_tunnel_profile_with_http_info(ipsec_vpn_tunnel_profile_id, opts)
      return data
    end

    # Get IPSec tunnel profile
    # Get custom IPSec Tunnel Profile.
    # @param ipsec_vpn_tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNTunnelProfile, Fixnum, Hash)>] IPSecVPNTunnelProfile data, response status code and response headers
    def get_ip_sec_vpn_tunnel_profile_with_http_info(ipsec_vpn_tunnel_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpn_tunnel_profile ..."
      end
      # verify the required parameter 'ipsec_vpn_tunnel_profile_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_tunnel_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_tunnel_profile_id' when calling VpnApi.get_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/tunnel-profiles/{ipsec-vpn-tunnel-profile-id}".sub('{' + 'ipsec-vpn-tunnel-profile-id' + '}', ipsec_vpn_tunnel_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNTunnelProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSec dead peer detection (DPD) profile
    # Get IPSec dead peer detection (DPD) profile.
    # @param ipsec_vpn_dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNDPDProfile]
    def get_ip_sec_vpndpd_profile(ipsec_vpn_dpd_profile_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpndpd_profile_with_http_info(ipsec_vpn_dpd_profile_id, opts)
      return data
    end

    # Get IPSec dead peer detection (DPD) profile
    # Get IPSec dead peer detection (DPD) profile.
    # @param ipsec_vpn_dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNDPDProfile, Fixnum, Hash)>] IPSecVPNDPDProfile data, response status code and response headers
    def get_ip_sec_vpndpd_profile_with_http_info(ipsec_vpn_dpd_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpndpd_profile ..."
      end
      # verify the required parameter 'ipsec_vpn_dpd_profile_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_dpd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_dpd_profile_id' when calling VpnApi.get_ip_sec_vpndpd_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/dpd-profiles/{ipsec-vpn-dpd-profile-id}".sub('{' + 'ipsec-vpn-dpd-profile-id' + '}', ipsec_vpn_dpd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNDPDProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpndpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IKE Profile
    # Get custom IKE Profile, given the particular id.
    # @param ipsec_vpn_ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNIKEProfile]
    def get_ip_sec_vpnike_profile(ipsec_vpn_ike_profile_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpnike_profile_with_http_info(ipsec_vpn_ike_profile_id, opts)
      return data
    end

    # Get IKE Profile
    # Get custom IKE Profile, given the particular id.
    # @param ipsec_vpn_ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNIKEProfile, Fixnum, Hash)>] IPSecVPNIKEProfile data, response status code and response headers
    def get_ip_sec_vpnike_profile_with_http_info(ipsec_vpn_ike_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpnike_profile ..."
      end
      # verify the required parameter 'ipsec_vpn_ike_profile_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_ike_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_ike_profile_id' when calling VpnApi.get_ip_sec_vpnike_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/ike-profiles/{ipsec-vpn-ike-profile-id}".sub('{' + 'ipsec-vpn-ike-profile-id' + '}', ipsec_vpn_ike_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNIKEProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpnike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cumulative statistics for one IKE service instance
    # Cumulative statistics for one IKE service instance. Query parameter source supports only cached mode.
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [IPSecVPNIKEServiceSummary]
    def get_ip_sec_vpnike_service(service_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpnike_service_with_http_info(service_id, opts)
      return data
    end

    # Cumulative statistics for one IKE service instance
    # Cumulative statistics for one IKE service instance. Query parameter source supports only cached mode.
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(IPSecVPNIKEServiceSummary, Fixnum, Hash)>] IPSecVPNIKEServiceSummary data, response status code and response headers
    def get_ip_sec_vpnike_service_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpnike_service ..."
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling VpnApi.get_ip_sec_vpnike_service"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/vpn/services/{service-id}/summary".sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNIKEServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpnike_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSec VPN IKE session status
    # List status of IPSec session. Query parameter source supports both realtime and cached mode.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [IPSecVPNSessionStatus]
    def get_ip_sec_vpnike_session_status(session_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpnike_session_status_with_http_info(session_id, opts)
      return data
    end

    # Get IPSec VPN IKE session status
    # List status of IPSec session. Query parameter source supports both realtime and cached mode.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(IPSecVPNSessionStatus, Fixnum, Hash)>] IPSecVPNSessionStatus data, response status code and response headers
    def get_ip_sec_vpnike_session_status_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_ip_sec_vpnike_session_status ..."
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling VpnApi.get_ip_sec_vpnike_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/vpn/ipsec/sessions/{session-id}/status".sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_ip_sec_vpnike_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get L2VPN service
    # Get a specific L2VPN service
    # @param l2vpn_service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VpnService]
    def get_l2_vpn_service(l2vpn_service_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_service_with_http_info(l2vpn_service_id, opts)
      return data
    end

    # Get L2VPN service
    # Get a specific L2VPN service
    # @param l2vpn_service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VpnService, Fixnum, Hash)>] L2VpnService data, response status code and response headers
    def get_l2_vpn_service_with_http_info(l2vpn_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_l2_vpn_service ..."
      end
      # verify the required parameter 'l2vpn_service_id' is set
      if @api_client.config.client_side_validation && l2vpn_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_service_id' when calling VpnApi.get_l2_vpn_service"
      end
      # resource path
      local_var_path = "/vpn/l2vpn/services/{l2vpn-service-id}".sub('{' + 'l2vpn-service-id' + '}', l2vpn_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a L2VPN session
    # Get a specific L2VPN session
    # @param l2vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VpnSession]
    def get_l2_vpn_session(l2vpn_session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_with_http_info(l2vpn_session_id, opts)
      return data
    end

    # Get a L2VPN session
    # Get a specific L2VPN session
    # @param l2vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VpnSession, Fixnum, Hash)>] L2VpnSession data, response status code and response headers
    def get_l2_vpn_session_with_http_info(l2vpn_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_l2_vpn_session ..."
      end
      # verify the required parameter 'l2vpn_session_id' is set
      if @api_client.config.client_side_validation && l2vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_session_id' when calling VpnApi.get_l2_vpn_session"
      end
      # resource path
      local_var_path = "/vpn/l2vpn/sessions/{l2vpn-session-id}".sub('{' + 'l2vpn-session-id' + '}', l2vpn_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get peer codes for the L2VpnSession
    # Get peer codes for the L2VPN session to program the remote side of the tunnel.
    # @param l2vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VpnSessionPeerCodes]
    def get_l2_vpn_session_peer_codes(l2vpn_session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_peer_codes_with_http_info(l2vpn_session_id, opts)
      return data
    end

    # Get peer codes for the L2VpnSession
    # Get peer codes for the L2VPN session to program the remote side of the tunnel.
    # @param l2vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VpnSessionPeerCodes, Fixnum, Hash)>] L2VpnSessionPeerCodes data, response status code and response headers
    def get_l2_vpn_session_peer_codes_with_http_info(l2vpn_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_l2_vpn_session_peer_codes ..."
      end
      # verify the required parameter 'l2vpn_session_id' is set
      if @api_client.config.client_side_validation && l2vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_session_id' when calling VpnApi.get_l2_vpn_session_peer_codes"
      end
      # resource path
      local_var_path = "/vpn/l2vpn/sessions/{l2vpn-session-id}/peer-codes".sub('{' + 'l2vpn-session-id' + '}', l2vpn_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnSessionPeerCodes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_l2_vpn_session_peer_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get L2VPN session remote mac for logical switch
    # Get L2VPN session remote mac for logical switch.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :logical_switch_id logical switch identifier
    # @return [L2VPNSessionRemoteMacs]
    def get_l2_vpn_session_remote_macs_for_ls(session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_remote_macs_for_ls_with_http_info(session_id, opts)
      return data
    end

    # Get L2VPN session remote mac for logical switch
    # Get L2VPN session remote mac for logical switch.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :logical_switch_id logical switch identifier
    # @return [Array<(L2VPNSessionRemoteMacs, Fixnum, Hash)>] L2VPNSessionRemoteMacs data, response status code and response headers
    def get_l2_vpn_session_remote_macs_for_ls_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_l2_vpn_session_remote_macs_for_ls ..."
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling VpnApi.get_l2_vpn_session_remote_macs_for_ls"
      end
      # resource path
      local_var_path = "/vpn/l2vpn/sessions/{session-id}/remote-mac".sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'logical_switch_id'] = opts[:'logical_switch_id'] if !opts[:'logical_switch_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionRemoteMacs')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_l2_vpn_session_remote_macs_for_ls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get L2VPN session statistics
    # Get statistics of a L2VPN session. Query parameter source=realtime is the only supported source.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [L2VPNSessionStatistics]
    def get_l2_vpn_session_statistics(session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_statistics_with_http_info(session_id, opts)
      return data
    end

    # Get L2VPN session statistics
    # Get statistics of a L2VPN session. Query parameter source&#x3D;realtime is the only supported source.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(L2VPNSessionStatistics, Fixnum, Hash)>] L2VPNSessionStatistics data, response status code and response headers
    def get_l2_vpn_session_statistics_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_l2_vpn_session_statistics ..."
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling VpnApi.get_l2_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/vpn/l2vpn/sessions/{session-id}/statistics".sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_l2_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get L2VPN session status
    # Aggregated status of L2VPN session. Query parameter source=realtime|cached is supported.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [L2VPNSessionStatus]
    def get_l2_vpn_session_status(session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_status_with_http_info(session_id, opts)
      return data
    end

    # Get L2VPN session status
    # Aggregated status of L2VPN session. Query parameter source&#x3D;realtime|cached is supported.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(L2VPNSessionStatus, Fixnum, Hash)>] L2VPNSessionStatus data, response status code and response headers
    def get_l2_vpn_session_status_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_l2_vpn_session_status ..."
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling VpnApi.get_l2_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/vpn/l2vpn/sessions/{session-id}/status".sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_l2_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get status summary of all existing L2VPN sessions.
    # Load all the existing L2VPN sessions and return the status summary of all L2VPN sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [L2VPNSessionSummary]
    def get_l2_vpn_session_summary(opts = {})
      data, _status_code, _headers = get_l2_vpn_session_summary_with_http_info(opts)
      return data
    end

    # Get status summary of all existing L2VPN sessions.
    # Load all the existing L2VPN sessions and return the status summary of all L2VPN sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(L2VPNSessionSummary, Fixnum, Hash)>] L2VPNSessionSummary data, response status code and response headers
    def get_l2_vpn_session_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_l2_vpn_session_summary ..."
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/vpn/l2vpn/sessions/summary"

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_l2_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get VPN configuration for the peer site
    # API to download VPN configuration for the peer site. The configuration contains pre-shared key and secret; be careful when sharing or storing it.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_peer_config(ipsec_vpn_session_id, opts = {})
      data, _status_code, _headers = get_peer_config_with_http_info(ipsec_vpn_session_id, opts)
      return data
    end

    # Get VPN configuration for the peer site
    # API to download VPN configuration for the peer site. The configuration contains pre-shared key and secret; be careful when sharing or storing it.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_peer_config_with_http_info(ipsec_vpn_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.get_peer_config ..."
      end
      # verify the required parameter 'ipsec_vpn_session_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_session_id' when calling VpnApi.get_peer_config"
      end
      # resource path
      local_var_path = "/vpn/ipsec/sessions/{ipsec-vpn-session-id}/peer-config".sub('{' + 'ipsec-vpn-session-id' + '}', ipsec_vpn_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#get_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSec local endpoint list result
    # Get paginated list of all local endpoints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ipsec_vpn_service_id Id of the IPSec VPN service
    # @option opts [String] :logical_router_id Id of logical router
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVPNLocalEndpointListResult]
    def list_ip_sec_vpn_local_endpoints(opts = {})
      data, _status_code, _headers = list_ip_sec_vpn_local_endpoints_with_http_info(opts)
      return data
    end

    # Get IPSec local endpoint list result
    # Get paginated list of all local endpoints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ipsec_vpn_service_id Id of the IPSec VPN service
    # @option opts [String] :logical_router_id Id of logical router
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVPNLocalEndpointListResult, Fixnum, Hash)>] IPSecVPNLocalEndpointListResult data, response status code and response headers
    def list_ip_sec_vpn_local_endpoints_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.list_ip_sec_vpn_local_endpoints ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/vpn/ipsec/local-endpoints"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'ipsec_vpn_service_id'] = opts[:'ipsec_vpn_service_id'] if !opts[:'ipsec_vpn_service_id'].nil?
      query_params[:'logical_router_id'] = opts[:'logical_router_id'] if !opts[:'logical_router_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#list_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSecVPNPeerEndpoint List Result
    # Get paginated list of all peer endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVPNPeerEndpointListResult]
    def list_ip_sec_vpn_peer_endpoints(opts = {})
      data, _status_code, _headers = list_ip_sec_vpn_peer_endpoints_with_http_info(opts)
      return data
    end

    # Get IPSecVPNPeerEndpoint List Result
    # Get paginated list of all peer endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVPNPeerEndpointListResult, Fixnum, Hash)>] IPSecVPNPeerEndpointListResult data, response status code and response headers
    def list_ip_sec_vpn_peer_endpoints_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.list_ip_sec_vpn_peer_endpoints ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpn_peer_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpn_peer_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/vpn/ipsec/peer-endpoints"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNPeerEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#list_ip_sec_vpn_peer_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVPNServiceListResult]
    def list_ip_sec_vpn_services(opts = {})
      data, _status_code, _headers = list_ip_sec_vpn_services_with_http_info(opts)
      return data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVPNServiceListResult, Fixnum, Hash)>] IPSecVPNServiceListResult data, response status code and response headers
    def list_ip_sec_vpn_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.list_ip_sec_vpn_services ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/vpn/ipsec/services"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#list_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSec VPN session list result
    # Get paginated list of all IPSec VPN sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ipsec_vpn_service_id Id of the IPSec VPN service
    # @option opts [String] :logical_router_id Id of logical router
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :session_type Resource types of IPsec VPN session
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVPNSessionListResult]
    def list_ip_sec_vpn_sessions(opts = {})
      data, _status_code, _headers = list_ip_sec_vpn_sessions_with_http_info(opts)
      return data
    end

    # Get IPSec VPN session list result
    # Get paginated list of all IPSec VPN sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ipsec_vpn_service_id Id of the IPSec VPN service
    # @option opts [String] :logical_router_id Id of logical router
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :session_type Resource types of IPsec VPN session
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVPNSessionListResult, Fixnum, Hash)>] IPSecVPNSessionListResult data, response status code and response headers
    def list_ip_sec_vpn_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.list_ip_sec_vpn_sessions ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'session_type'] && !['PolicyBasedIPSecVPNSession', 'RouteBasedIPSecVPNSession'].include?(opts[:'session_type'])
        fail ArgumentError, 'invalid value for "session_type", must be one of PolicyBasedIPSecVPNSession, RouteBasedIPSecVPNSession'
      end
      # resource path
      local_var_path = "/vpn/ipsec/sessions"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'ipsec_vpn_service_id'] = opts[:'ipsec_vpn_service_id'] if !opts[:'ipsec_vpn_service_id'].nil?
      query_params[:'logical_router_id'] = opts[:'logical_router_id'] if !opts[:'logical_router_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'session_type'] = opts[:'session_type'] if !opts[:'session_type'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#list_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSecTunnelProfile List Result
    # Get paginated list of all IPSecTunnelProfiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVPNTunnelProfileListResult]
    def list_ip_sec_vpn_tunnel_profiles(opts = {})
      data, _status_code, _headers = list_ip_sec_vpn_tunnel_profiles_with_http_info(opts)
      return data
    end

    # Get IPSecTunnelProfile List Result
    # Get paginated list of all IPSecTunnelProfiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVPNTunnelProfileListResult, Fixnum, Hash)>] IPSecVPNTunnelProfileListResult data, response status code and response headers
    def list_ip_sec_vpn_tunnel_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.list_ip_sec_vpn_tunnel_profiles ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpn_tunnel_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpn_tunnel_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/vpn/ipsec/tunnel-profiles"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNTunnelProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#list_ip_sec_vpn_tunnel_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IPSec dead peer detection (DPD)  profile list result
    # Get paginated list of all dead peer detection (DPD) profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVPNDPDProfileListResult]
    def list_ip_sec_vpndpd_profiles(opts = {})
      data, _status_code, _headers = list_ip_sec_vpndpd_profiles_with_http_info(opts)
      return data
    end

    # Get IPSec dead peer detection (DPD)  profile list result
    # Get paginated list of all dead peer detection (DPD) profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVPNDPDProfileListResult, Fixnum, Hash)>] IPSecVPNDPDProfileListResult data, response status code and response headers
    def list_ip_sec_vpndpd_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.list_ip_sec_vpndpd_profiles ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpndpd_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpndpd_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/vpn/ipsec/dpd-profiles"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNDPDProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#list_ip_sec_vpndpd_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List IKE profiles
    # Get paginated list of all IKE Profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVPNIKEProfileListResult]
    def list_ip_sec_vpnike_profiles(opts = {})
      data, _status_code, _headers = list_ip_sec_vpnike_profiles_with_http_info(opts)
      return data
    end

    # List IKE profiles
    # Get paginated list of all IKE Profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVPNIKEProfileListResult, Fixnum, Hash)>] IPSecVPNIKEProfileListResult data, response status code and response headers
    def list_ip_sec_vpnike_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.list_ip_sec_vpnike_profiles ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpnike_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_ip_sec_vpnike_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/vpn/ipsec/ike-profiles"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNIKEProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#list_ip_sec_vpnike_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all L2VPN services
    # Get paginated list of all L2VPN services
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VpnServiceListResult]
    def list_l2_vpn_services(opts = {})
      data, _status_code, _headers = list_l2_vpn_services_with_http_info(opts)
      return data
    end

    # Get all L2VPN services
    # Get paginated list of all L2VPN services
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VpnServiceListResult, Fixnum, Hash)>] L2VpnServiceListResult data, response status code and response headers
    def list_l2_vpn_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.list_l2_vpn_services ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_l2_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_l2_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/vpn/l2vpn/services"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#list_l2_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all L2VPN sessions
    # Get paginated list of all L2VPN sessions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :l2vpn_service_id Id of the L2Vpn Service
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VpnSessionListResult]
    def list_l2_vpn_sessions(opts = {})
      data, _status_code, _headers = list_l2_vpn_sessions_with_http_info(opts)
      return data
    end

    # Get all L2VPN sessions
    # Get paginated list of all L2VPN sessions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :l2vpn_service_id Id of the L2Vpn Service
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VpnSessionListResult, Fixnum, Hash)>] L2VpnSessionListResult data, response status code and response headers
    def list_l2_vpn_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.list_l2_vpn_sessions ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VpnApi.list_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/vpn/l2vpn/sessions"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'l2vpn_service_id'] = opts[:'l2vpn_service_id'] if !opts[:'l2vpn_service_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#list_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset the statistics of the given VPN session
    # Reset the statistics of the given VPN session.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_ip_sec_vpn_session_statistics_reset(session_id, opts = {})
      reset_ip_sec_vpn_session_statistics_reset_with_http_info(session_id, opts)
      return nil
    end

    # Reset the statistics of the given VPN session
    # Reset the statistics of the given VPN session.
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_ip_sec_vpn_session_statistics_reset_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.reset_ip_sec_vpn_session_statistics_reset ..."
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling VpnApi.reset_ip_sec_vpn_session_statistics_reset"
      end
      # resource path
      local_var_path = "/vpn/ipsec/sessions/{session-id}/statistics?action=reset".sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#reset_ip_sec_vpn_session_statistics_reset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit custom IPSec local endpoint
    # Edit custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNLocalEndpoint]
    def update_ip_sec_vpn_local_endpoint(ipsec_vpn_local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = update_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      return data
    end

    # Edit custom IPSec local endpoint
    # Edit custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNLocalEndpoint, Fixnum, Hash)>] IPSecVPNLocalEndpoint data, response status code and response headers
    def update_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.update_ip_sec_vpn_local_endpoint ..."
      end
      # verify the required parameter 'ipsec_vpn_local_endpoint_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_local_endpoint_id' when calling VpnApi.update_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling VpnApi.update_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = "/vpn/ipsec/local-endpoints/{ipsec-vpn-local-endpoint-id}".sub('{' + 'ipsec-vpn-local-endpoint-id' + '}', ipsec_vpn_local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#update_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit custom IPSecPeerEndpoint
    # Edit custom IPSec peer endpoint. System owned endpoints are non editable.
    # @param ipsec_vpn_peer_endpoint_id 
    # @param ip_sec_vpn_peer_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNPeerEndpoint]
    def update_ip_sec_vpn_peer_endpoint(ipsec_vpn_peer_endpoint_id, ip_sec_vpn_peer_endpoint, opts = {})
      data, _status_code, _headers = update_ip_sec_vpn_peer_endpoint_with_http_info(ipsec_vpn_peer_endpoint_id, ip_sec_vpn_peer_endpoint, opts)
      return data
    end

    # Edit custom IPSecPeerEndpoint
    # Edit custom IPSec peer endpoint. System owned endpoints are non editable.
    # @param ipsec_vpn_peer_endpoint_id 
    # @param ip_sec_vpn_peer_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNPeerEndpoint, Fixnum, Hash)>] IPSecVPNPeerEndpoint data, response status code and response headers
    def update_ip_sec_vpn_peer_endpoint_with_http_info(ipsec_vpn_peer_endpoint_id, ip_sec_vpn_peer_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.update_ip_sec_vpn_peer_endpoint ..."
      end
      # verify the required parameter 'ipsec_vpn_peer_endpoint_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_peer_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_peer_endpoint_id' when calling VpnApi.update_ip_sec_vpn_peer_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_peer_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_peer_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_peer_endpoint' when calling VpnApi.update_ip_sec_vpn_peer_endpoint"
      end
      # resource path
      local_var_path = "/vpn/ipsec/peer-endpoints/{ipsec-vpn-peer-endpoint-id}".sub('{' + 'ipsec-vpn-peer-endpoint-id' + '}', ipsec_vpn_peer_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_peer_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNPeerEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#update_ip_sec_vpn_peer_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit IPSec VPN service
    # Edit IPSec VPN service for given logical router.
    # @param ipsec_vpn_service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNService]
    def update_ip_sec_vpn_service(ipsec_vpn_service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = update_ip_sec_vpn_service_with_http_info(ipsec_vpn_service_id, ip_sec_vpn_service, opts)
      return data
    end

    # Edit IPSec VPN service
    # Edit IPSec VPN service for given logical router.
    # @param ipsec_vpn_service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNService, Fixnum, Hash)>] IPSecVPNService data, response status code and response headers
    def update_ip_sec_vpn_service_with_http_info(ipsec_vpn_service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.update_ip_sec_vpn_service ..."
      end
      # verify the required parameter 'ipsec_vpn_service_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_service_id' when calling VpnApi.update_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling VpnApi.update_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = "/vpn/ipsec/services/{ipsec-vpn-service-id}".sub('{' + 'ipsec-vpn-service-id' + '}', ipsec_vpn_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#update_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit IPSec VPN session
    # Edit IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNSession]
    def update_ip_sec_vpn_session(ipsec_vpn_session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = update_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, ip_sec_vpn_session, opts)
      return data
    end

    # Edit IPSec VPN session
    # Edit IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNSession, Fixnum, Hash)>] IPSecVPNSession data, response status code and response headers
    def update_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.update_ip_sec_vpn_session ..."
      end
      # verify the required parameter 'ipsec_vpn_session_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_session_id' when calling VpnApi.update_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling VpnApi.update_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = "/vpn/ipsec/sessions/{ipsec-vpn-session-id}".sub('{' + 'ipsec-vpn-session-id' + '}', ipsec_vpn_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#update_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit custom IPSecTunnelProfile
    # Edit custom IPSec Tunnel Profile. System owned profiles are non editable.
    # @param ipsec_vpn_tunnel_profile_id 
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNTunnelProfile]
    def update_ip_sec_vpn_tunnel_profile(ipsec_vpn_tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts = {})
      data, _status_code, _headers = update_ip_sec_vpn_tunnel_profile_with_http_info(ipsec_vpn_tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts)
      return data
    end

    # Edit custom IPSecTunnelProfile
    # Edit custom IPSec Tunnel Profile. System owned profiles are non editable.
    # @param ipsec_vpn_tunnel_profile_id 
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNTunnelProfile, Fixnum, Hash)>] IPSecVPNTunnelProfile data, response status code and response headers
    def update_ip_sec_vpn_tunnel_profile_with_http_info(ipsec_vpn_tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.update_ip_sec_vpn_tunnel_profile ..."
      end
      # verify the required parameter 'ipsec_vpn_tunnel_profile_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_tunnel_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_tunnel_profile_id' when calling VpnApi.update_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'ip_sec_vpn_tunnel_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_tunnel_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_tunnel_profile' when calling VpnApi.update_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/tunnel-profiles/{ipsec-vpn-tunnel-profile-id}".sub('{' + 'ipsec-vpn-tunnel-profile-id' + '}', ipsec_vpn_tunnel_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_tunnel_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNTunnelProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#update_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit IPSec dead peer detection (DPD) profile
    # Edit IPSec dead peer detection (DPD) profile.
    # @param ipsec_vpn_dpd_profile_id 
    # @param ip_sec_vpndpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNDPDProfile]
    def update_ip_sec_vpndpd_profile(ipsec_vpn_dpd_profile_id, ip_sec_vpndpd_profile, opts = {})
      data, _status_code, _headers = update_ip_sec_vpndpd_profile_with_http_info(ipsec_vpn_dpd_profile_id, ip_sec_vpndpd_profile, opts)
      return data
    end

    # Edit IPSec dead peer detection (DPD) profile
    # Edit IPSec dead peer detection (DPD) profile.
    # @param ipsec_vpn_dpd_profile_id 
    # @param ip_sec_vpndpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNDPDProfile, Fixnum, Hash)>] IPSecVPNDPDProfile data, response status code and response headers
    def update_ip_sec_vpndpd_profile_with_http_info(ipsec_vpn_dpd_profile_id, ip_sec_vpndpd_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.update_ip_sec_vpndpd_profile ..."
      end
      # verify the required parameter 'ipsec_vpn_dpd_profile_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_dpd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_dpd_profile_id' when calling VpnApi.update_ip_sec_vpndpd_profile"
      end
      # verify the required parameter 'ip_sec_vpndpd_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpndpd_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpndpd_profile' when calling VpnApi.update_ip_sec_vpndpd_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/dpd-profiles/{ipsec-vpn-dpd-profile-id}".sub('{' + 'ipsec-vpn-dpd-profile-id' + '}', ipsec_vpn_dpd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpndpd_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNDPDProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#update_ip_sec_vpndpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit custom IKE Profile
    # Edit custom IKE Profile. System owned profiles are non editable.
    # @param ipsec_vpn_ike_profile_id 
    # @param ip_sec_vpnike_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNIKEProfile]
    def update_ip_sec_vpnike_profile(ipsec_vpn_ike_profile_id, ip_sec_vpnike_profile, opts = {})
      data, _status_code, _headers = update_ip_sec_vpnike_profile_with_http_info(ipsec_vpn_ike_profile_id, ip_sec_vpnike_profile, opts)
      return data
    end

    # Edit custom IKE Profile
    # Edit custom IKE Profile. System owned profiles are non editable.
    # @param ipsec_vpn_ike_profile_id 
    # @param ip_sec_vpnike_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNIKEProfile, Fixnum, Hash)>] IPSecVPNIKEProfile data, response status code and response headers
    def update_ip_sec_vpnike_profile_with_http_info(ipsec_vpn_ike_profile_id, ip_sec_vpnike_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.update_ip_sec_vpnike_profile ..."
      end
      # verify the required parameter 'ipsec_vpn_ike_profile_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_ike_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_ike_profile_id' when calling VpnApi.update_ip_sec_vpnike_profile"
      end
      # verify the required parameter 'ip_sec_vpnike_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpnike_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpnike_profile' when calling VpnApi.update_ip_sec_vpnike_profile"
      end
      # resource path
      local_var_path = "/vpn/ipsec/ike-profiles/{ipsec-vpn-ike-profile-id}".sub('{' + 'ipsec-vpn-ike-profile-id' + '}', ipsec_vpn_ike_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpnike_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNIKEProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#update_ip_sec_vpnike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a L2VPN service
    # Edit a specific L2VPN service
    # @param l2vpn_service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VpnService]
    def update_l2_vpn_service(l2vpn_service_id, l2_vpn_service, opts = {})
      data, _status_code, _headers = update_l2_vpn_service_with_http_info(l2vpn_service_id, l2_vpn_service, opts)
      return data
    end

    # Edit a L2VPN service
    # Edit a specific L2VPN service
    # @param l2vpn_service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VpnService, Fixnum, Hash)>] L2VpnService data, response status code and response headers
    def update_l2_vpn_service_with_http_info(l2vpn_service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.update_l2_vpn_service ..."
      end
      # verify the required parameter 'l2vpn_service_id' is set
      if @api_client.config.client_side_validation && l2vpn_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_service_id' when calling VpnApi.update_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling VpnApi.update_l2_vpn_service"
      end
      # resource path
      local_var_path = "/vpn/l2vpn/services/{l2vpn-service-id}".sub('{' + 'l2vpn-service-id' + '}', l2vpn_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#update_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a L2VPN session
    # Edit a specific L2VPN session
    # @param l2vpn_session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VpnSession]
    def update_l2_vpn_session(l2vpn_session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = update_l2_vpn_session_with_http_info(l2vpn_session_id, l2_vpn_session, opts)
      return data
    end

    # Edit a L2VPN session
    # Edit a specific L2VPN session
    # @param l2vpn_session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VpnSession, Fixnum, Hash)>] L2VpnSession data, response status code and response headers
    def update_l2_vpn_session_with_http_info(l2vpn_session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VpnApi.update_l2_vpn_session ..."
      end
      # verify the required parameter 'l2vpn_session_id' is set
      if @api_client.config.client_side_validation && l2vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_session_id' when calling VpnApi.update_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling VpnApi.update_l2_vpn_session"
      end
      # resource path
      local_var_path = "/vpn/l2vpn/sessions/{l2vpn-session-id}".sub('{' + 'l2vpn-session-id' + '}', l2vpn_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnApi#update_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
