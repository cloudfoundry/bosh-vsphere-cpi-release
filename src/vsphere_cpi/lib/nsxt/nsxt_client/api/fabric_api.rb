=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.3.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module NSXT
  class FabricApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Register compute manager with NSX
    # Registers compute manager with NSX. Inventory service will collect data from the registered compute manager 
    # @param compute_manager 
    # @param [Hash] opts the optional parameters
    # @return [ComputeManager]
    def add_compute_manager(compute_manager, opts = {})
      data, _status_code, _headers = add_compute_manager_with_http_info(compute_manager, opts)
      return data
    end

    # Register compute manager with NSX
    # Registers compute manager with NSX. Inventory service will collect data from the registered compute manager 
    # @param compute_manager 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeManager, Fixnum, Hash)>] ComputeManager data, response status code and response headers
    def add_compute_manager_with_http_info(compute_manager, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.add_compute_manager ..."
      end
      # verify the required parameter 'compute_manager' is set
      if @api_client.config.client_side_validation && compute_manager.nil?
        fail ArgumentError, "Missing the required parameter 'compute_manager' when calling FabricApi.add_compute_manager"
      end
      # resource path
      local_var_path = "/fabric/compute-managers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_manager)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeManager')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#add_compute_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register and Install NSX Components on a Node
    # Creates a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the <b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b> command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'. If the key is not present then generate a new key by running the following command and follow the instructions.  <b>ssh-keygen -t rsa</b>  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default 'id_rsa.pub'.  <b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b> 
    # @param node 
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def add_node(node, opts = {})
      data, _status_code, _headers = add_node_with_http_info(node, opts)
      return data
    end

    # Register and Install NSX Components on a Node
    # Creates a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the &lt;b&gt;openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout&lt;/b&gt; command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at &#39;/etc/ssh/ssh_host_rsa_key.pub&#39;. If the key is not present then generate a new key by running the following command and follow the instructions.  &lt;b&gt;ssh-keygen -t rsa&lt;/b&gt;  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default &#39;id_rsa.pub&#39;.  &lt;b&gt;awk &#39;{print $2}&#39; id_rsa.pub | base64 -d | sha256sum -b | sed &#39;s/ .*$//&#39; | xxd -r -p | base64&lt;/b&gt; 
    # @param node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def add_node_with_http_info(node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.add_node ..."
      end
      # verify the required parameter 'node' is set
      if @api_client.config.client_side_validation && node.nil?
        fail ArgumentError, "Missing the required parameter 'node' when calling FabricApi.add_node"
      end
      # resource path
      local_var_path = "/fabric/nodes"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#add_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a compute collection fabric template
    # Fabric templates are fabric configurations applied at the compute collection level. This configurations is used to decide what automated operations should be a run when a host membership changes.
    # @param compute_collection_fabric_template 
    # @param [Hash] opts the optional parameters
    # @return [ComputeCollectionFabricTemplate]
    def create_compute_collection_fabric_template(compute_collection_fabric_template, opts = {})
      data, _status_code, _headers = create_compute_collection_fabric_template_with_http_info(compute_collection_fabric_template, opts)
      return data
    end

    # Create a compute collection fabric template
    # Fabric templates are fabric configurations applied at the compute collection level. This configurations is used to decide what automated operations should be a run when a host membership changes.
    # @param compute_collection_fabric_template 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeCollectionFabricTemplate, Fixnum, Hash)>] ComputeCollectionFabricTemplate data, response status code and response headers
    def create_compute_collection_fabric_template_with_http_info(compute_collection_fabric_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.create_compute_collection_fabric_template ..."
      end
      # verify the required parameter 'compute_collection_fabric_template' is set
      if @api_client.config.client_side_validation && compute_collection_fabric_template.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_fabric_template' when calling FabricApi.create_compute_collection_fabric_template"
      end
      # resource path
      local_var_path = "/fabric/compute-collection-fabric-templates"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_collection_fabric_template)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeCollectionFabricTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#create_compute_collection_fabric_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes compute collection fabric template
    # Deletes compute collection fabric template for the given id
    # @param fabric_template_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_compute_collection_fabric_template(fabric_template_id, opts = {})
      delete_compute_collection_fabric_template_with_http_info(fabric_template_id, opts)
      return nil
    end

    # Deletes compute collection fabric template
    # Deletes compute collection fabric template for the given id
    # @param fabric_template_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_compute_collection_fabric_template_with_http_info(fabric_template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.delete_compute_collection_fabric_template ..."
      end
      # verify the required parameter 'fabric_template_id' is set
      if @api_client.config.client_side_validation && fabric_template_id.nil?
        fail ArgumentError, "Missing the required parameter 'fabric_template_id' when calling FabricApi.delete_compute_collection_fabric_template"
      end
      # resource path
      local_var_path = "/fabric/compute-collection-fabric-templates/{fabric-template-id}".sub('{' + 'fabric-template-id' + '}', fabric_template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#delete_compute_collection_fabric_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unregister a compute manager
    # Unregisters a specified compute manager 
    # @param compute_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_compute_manager(compute_manager_id, opts = {})
      delete_compute_manager_with_http_info(compute_manager_id, opts)
      return nil
    end

    # Unregister a compute manager
    # Unregisters a specified compute manager 
    # @param compute_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_compute_manager_with_http_info(compute_manager_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.delete_compute_manager ..."
      end
      # verify the required parameter 'compute_manager_id' is set
      if @api_client.config.client_side_validation && compute_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_manager_id' when calling FabricApi.delete_compute_manager"
      end
      # resource path
      local_var_path = "/fabric/compute-managers/{compute-manager-id}".sub('{' + 'compute-manager-id' + '}', compute_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#delete_compute_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Node
    # Removes a specified fabric node (host or edge). A fabric node may only be deleted when it is no longer referenced by a Transport Node. If unprepare_host option is set to false, the host will be deleted without uninstalling the NSX components from the host. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :unprepare_host Delete a host and uninstall NSX components (default to true)
    # @return [nil]
    def delete_node(node_id, opts = {})
      delete_node_with_http_info(node_id, opts)
      return nil
    end

    # Delete a Node
    # Removes a specified fabric node (host or edge). A fabric node may only be deleted when it is no longer referenced by a Transport Node. If unprepare_host option is set to false, the host will be deleted without uninstalling the NSX components from the host. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :unprepare_host Delete a host and uninstall NSX components
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.delete_node ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.delete_node"
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'unprepare_host'] = opts[:'unprepare_host'] if !opts[:'unprepare_host'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#delete_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get compute collection fabric template by id
    # Get compute collection fabric template for the given id
    # @param fabric_template_id 
    # @param [Hash] opts the optional parameters
    # @return [ComputeCollectionFabricTemplate]
    def get_compute_collection_fabric_template(fabric_template_id, opts = {})
      data, _status_code, _headers = get_compute_collection_fabric_template_with_http_info(fabric_template_id, opts)
      return data
    end

    # Get compute collection fabric template by id
    # Get compute collection fabric template for the given id
    # @param fabric_template_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeCollectionFabricTemplate, Fixnum, Hash)>] ComputeCollectionFabricTemplate data, response status code and response headers
    def get_compute_collection_fabric_template_with_http_info(fabric_template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.get_compute_collection_fabric_template ..."
      end
      # verify the required parameter 'fabric_template_id' is set
      if @api_client.config.client_side_validation && fabric_template_id.nil?
        fail ArgumentError, "Missing the required parameter 'fabric_template_id' when calling FabricApi.get_compute_collection_fabric_template"
      end
      # resource path
      local_var_path = "/fabric/compute-collection-fabric-templates/{fabric-template-id}".sub('{' + 'fabric-template-id' + '}', fabric_template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeCollectionFabricTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#get_compute_collection_fabric_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the realized state of a compute manager
    # Get the realized state of a compute manager
    # @param compute_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [ConfigurationState]
    def get_compute_manager_state(compute_manager_id, opts = {})
      data, _status_code, _headers = get_compute_manager_state_with_http_info(compute_manager_id, opts)
      return data
    end

    # Get the realized state of a compute manager
    # Get the realized state of a compute manager
    # @param compute_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfigurationState, Fixnum, Hash)>] ConfigurationState data, response status code and response headers
    def get_compute_manager_state_with_http_info(compute_manager_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.get_compute_manager_state ..."
      end
      # verify the required parameter 'compute_manager_id' is set
      if @api_client.config.client_side_validation && compute_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_manager_id' when calling FabricApi.get_compute_manager_state"
      end
      # resource path
      local_var_path = "/fabric/compute-managers/{compute-manager-id}/state".sub('{' + 'compute-manager-id' + '}', compute_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfigurationState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#get_compute_manager_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the module details of a Fabric Node
    # Get the module details of a Fabric Node
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [SoftwareModuleResult]
    def get_fabric_node_modules(node_id, opts = {})
      data, _status_code, _headers = get_fabric_node_modules_with_http_info(node_id, opts)
      return data
    end

    # Get the module details of a Fabric Node
    # Get the module details of a Fabric Node
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SoftwareModuleResult, Fixnum, Hash)>] SoftwareModuleResult data, response status code and response headers
    def get_fabric_node_modules_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.get_fabric_node_modules ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.get_fabric_node_modules"
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}/modules".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SoftwareModuleResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#get_fabric_node_modules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Realized State of a Fabric Node.
    # For edge nodes, returns the current install state when deployment is in progress, NODE_READY when deployment is complete and the failure state when deployment has failed. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [ConfigurationState]
    def get_fabric_node_state(node_id, opts = {})
      data, _status_code, _headers = get_fabric_node_state_with_http_info(node_id, opts)
      return data
    end

    # Get the Realized State of a Fabric Node.
    # For edge nodes, returns the current install state when deployment is in progress, NODE_READY when deployment is complete and the failure state when deployment has failed. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfigurationState, Fixnum, Hash)>] ConfigurationState data, response status code and response headers
    def get_fabric_node_state_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.get_fabric_node_state ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.get_fabric_node_state"
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}/state".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfigurationState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#get_fabric_node_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Prepares discovered Node for NSX
    # Prepares(hostprep) discovered node for NSX. NSX LCP bundles are installed on this discovered node.
    # @param node_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def host_prep_discovered_node_hostprep(node_ext_id, opts = {})
      data, _status_code, _headers = host_prep_discovered_node_hostprep_with_http_info(node_ext_id, opts)
      return data
    end

    # Prepares discovered Node for NSX
    # Prepares(hostprep) discovered node for NSX. NSX LCP bundles are installed on this discovered node.
    # @param node_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def host_prep_discovered_node_hostprep_with_http_info(node_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.host_prep_discovered_node_hostprep ..."
      end
      # verify the required parameter 'node_ext_id' is set
      if @api_client.config.client_side_validation && node_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_ext_id' when calling FabricApi.host_prep_discovered_node_hostprep"
      end
      # resource path
      local_var_path = "/fabric/discovered-nodes/{node-ext-id}?action=hostprep".sub('{' + 'node-ext-id' + '}', node_ext_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#host_prep_discovered_node_hostprep\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get compute collection fabric templates
    # Returns compute collection fabric templates
    # @param [Hash] opts the optional parameters
    # @option opts [String] :compute_collection_id Compute collection id
    # @return [ComputeCollectionFabricTemplateListResult]
    def list_compute_collection_fabric_templates(opts = {})
      data, _status_code, _headers = list_compute_collection_fabric_templates_with_http_info(opts)
      return data
    end

    # Get compute collection fabric templates
    # Returns compute collection fabric templates
    # @param [Hash] opts the optional parameters
    # @option opts [String] :compute_collection_id Compute collection id
    # @return [Array<(ComputeCollectionFabricTemplateListResult, Fixnum, Hash)>] ComputeCollectionFabricTemplateListResult data, response status code and response headers
    def list_compute_collection_fabric_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.list_compute_collection_fabric_templates ..."
      end
      # resource path
      local_var_path = "/fabric/compute-collection-fabric-templates"

      # query parameters
      query_params = {}
      query_params[:'compute_collection_id'] = opts[:'compute_collection_id'] if !opts[:'compute_collection_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeCollectionFabricTemplateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_compute_collection_fabric_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the Physical Network Interface for all discovered nodes
    # Returns list of physical network interfaces for all discovered nodes in compute collection. Interface information includes PNIC name, hostswitch name it's attached to(if any) and MAC address. 
    # @param cc_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [ComputeCollectionNetworkInterfacesListResult]
    def list_compute_collection_physical_network_interfaces(cc_ext_id, opts = {})
      data, _status_code, _headers = list_compute_collection_physical_network_interfaces_with_http_info(cc_ext_id, opts)
      return data
    end

    # List the Physical Network Interface for all discovered nodes
    # Returns list of physical network interfaces for all discovered nodes in compute collection. Interface information includes PNIC name, hostswitch name it&#39;s attached to(if any) and MAC address. 
    # @param cc_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeCollectionNetworkInterfacesListResult, Fixnum, Hash)>] ComputeCollectionNetworkInterfacesListResult data, response status code and response headers
    def list_compute_collection_physical_network_interfaces_with_http_info(cc_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.list_compute_collection_physical_network_interfaces ..."
      end
      # verify the required parameter 'cc_ext_id' is set
      if @api_client.config.client_side_validation && cc_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cc_ext_id' when calling FabricApi.list_compute_collection_physical_network_interfaces"
      end
      # resource path
      local_var_path = "/fabric/compute-collections/{cc-ext-id}/network/physical-interfaces".sub('{' + 'cc-ext-id' + '}', cc_ext_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeCollectionNetworkInterfacesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_compute_collection_physical_network_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the List of Compute Collections
    # Returns information about all compute collections.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cm_local_id Local Id of the compute collection in the Compute Manager
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :discovered_node_id Id of the discovered node which belongs to this Compute Collection 
    # @option opts [String] :display_name Name of the ComputeCollection in source compute manager
    # @option opts [String] :external_id External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC 
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Id of the fabric node created from a discovered node belonging to this Compute Collection 
    # @option opts [String] :origin_id Id of the compute manager from where this Compute Collection was discovered
    # @option opts [String] :origin_type ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers 
    # @option opts [String] :owner_id Id of the owner of compute collection in the Compute Manager
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ComputeCollectionListResult]
    def list_compute_collections(opts = {})
      data, _status_code, _headers = list_compute_collections_with_http_info(opts)
      return data
    end

    # Return the List of Compute Collections
    # Returns information about all compute collections.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cm_local_id Local Id of the compute collection in the Compute Manager
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :discovered_node_id Id of the discovered node which belongs to this Compute Collection 
    # @option opts [String] :display_name Name of the ComputeCollection in source compute manager
    # @option opts [String] :external_id External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC 
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Id of the fabric node created from a discovered node belonging to this Compute Collection 
    # @option opts [String] :origin_id Id of the compute manager from where this Compute Collection was discovered
    # @option opts [String] :origin_type ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers 
    # @option opts [String] :owner_id Id of the owner of compute collection in the Compute Manager
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ComputeCollectionListResult, Fixnum, Hash)>] ComputeCollectionListResult data, response status code and response headers
    def list_compute_collections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.list_compute_collections ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_compute_collections, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_compute_collections, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/fabric/compute-collections"

      # query parameters
      query_params = {}
      query_params[:'cm_local_id'] = opts[:'cm_local_id'] if !opts[:'cm_local_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'discovered_node_id'] = opts[:'discovered_node_id'] if !opts[:'discovered_node_id'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'node_id'] = opts[:'node_id'] if !opts[:'node_id'].nil?
      query_params[:'origin_id'] = opts[:'origin_id'] if !opts[:'origin_id'].nil?
      query_params[:'origin_type'] = opts[:'origin_type'] if !opts[:'origin_type'].nil?
      query_params[:'owner_id'] = opts[:'owner_id'] if !opts[:'owner_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeCollectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_compute_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the List of Compute managers
    # Returns information about all compute managers.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :origin_type Compute manager type like vCenter
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :server IP address or hostname of compute manager
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ComputeManagerListResult]
    def list_compute_managers(opts = {})
      data, _status_code, _headers = list_compute_managers_with_http_info(opts)
      return data
    end

    # Return the List of Compute managers
    # Returns information about all compute managers.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :origin_type Compute manager type like vCenter
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :server IP address or hostname of compute manager
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ComputeManagerListResult, Fixnum, Hash)>] ComputeManagerListResult data, response status code and response headers
    def list_compute_managers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.list_compute_managers ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_compute_managers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_compute_managers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/fabric/compute-managers"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'origin_type'] = opts[:'origin_type'] if !opts[:'origin_type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'server'] = opts[:'server'] if !opts[:'server'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeManagerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_compute_managers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the List of Discovered Nodes
    # Returns information about all discovered nodes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cm_local_id Local Id of the discovered node in the Compute Manager
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :display_name Display name of discovered node
    # @option opts [String] :external_id External id of the discovered node, ex. a mo-ref from VC
    # @option opts [String] :has_parent Discovered node has a parent compute collection or is a standalone host
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ip_address IP address of the discovered node
    # @option opts [String] :node_id Id of the fabric node created from the discovered node
    # @option opts [String] :node_type Discovered Node type like HostNode
    # @option opts [String] :origin_id Id of the compute manager from where this node was discovered
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :parent_compute_collection External id of the compute collection to which this node belongs
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DiscoveredNodeListResult]
    def list_discovered_nodes(opts = {})
      data, _status_code, _headers = list_discovered_nodes_with_http_info(opts)
      return data
    end

    # Return the List of Discovered Nodes
    # Returns information about all discovered nodes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cm_local_id Local Id of the discovered node in the Compute Manager
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :display_name Display name of discovered node
    # @option opts [String] :external_id External id of the discovered node, ex. a mo-ref from VC
    # @option opts [String] :has_parent Discovered node has a parent compute collection or is a standalone host
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ip_address IP address of the discovered node
    # @option opts [String] :node_id Id of the fabric node created from the discovered node
    # @option opts [String] :node_type Discovered Node type like HostNode
    # @option opts [String] :origin_id Id of the compute manager from where this node was discovered
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :parent_compute_collection External id of the compute collection to which this node belongs
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DiscoveredNodeListResult, Fixnum, Hash)>] DiscoveredNodeListResult data, response status code and response headers
    def list_discovered_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.list_discovered_nodes ..."
      end
      if @api_client.config.client_side_validation && opts[:'has_parent'] && !['true', 'false'].include?(opts[:'has_parent'])
        fail ArgumentError, 'invalid value for "has_parent", must be one of true, false'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_discovered_nodes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_discovered_nodes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/fabric/discovered-nodes"

      # query parameters
      query_params = {}
      query_params[:'cm_local_id'] = opts[:'cm_local_id'] if !opts[:'cm_local_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'has_parent'] = opts[:'has_parent'] if !opts[:'has_parent'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'ip_address'] = opts[:'ip_address'] if !opts[:'ip_address'].nil?
      query_params[:'node_id'] = opts[:'node_id'] if !opts[:'node_id'].nil?
      query_params[:'node_type'] = opts[:'node_type'] if !opts[:'node_type'].nil?
      query_params[:'origin_id'] = opts[:'origin_id'] if !opts[:'origin_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'parent_compute_collection'] = opts[:'parent_compute_collection'] if !opts[:'parent_compute_collection'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscoveredNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_discovered_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the specified node's Network Interfaces
    # Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfacePropertiesListResult]
    def list_fabric_node_interfaces(node_id, opts = {})
      data, _status_code, _headers = list_fabric_node_interfaces_with_http_info(node_id, opts)
      return data
    end

    # List the specified node&#39;s Network Interfaces
    # Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfacePropertiesListResult, Fixnum, Hash)>] NodeInterfacePropertiesListResult data, response status code and response headers
    def list_fabric_node_interfaces_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.list_fabric_node_interfaces ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.list_fabric_node_interfaces"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}/network/interfaces".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfacePropertiesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_fabric_node_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the List of Capabilities of a Single Node
    # Returns information about capabilities of a single fabric host node. Edge nodes do not have capabilities.
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [NodeCapabilitiesResult]
    def list_node_capabilities(node_id, opts = {})
      data, _status_code, _headers = list_node_capabilities_with_http_info(node_id, opts)
      return data
    end

    # Return the List of Capabilities of a Single Node
    # Returns information about capabilities of a single fabric host node. Edge nodes do not have capabilities.
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeCapabilitiesResult, Fixnum, Hash)>] NodeCapabilitiesResult data, response status code and response headers
    def list_node_capabilities_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.list_node_capabilities ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.list_node_capabilities"
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}/capabilities".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeCapabilitiesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_node_capabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the List of Nodes
    # Returns information about all fabric nodes (hosts and edges).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :discovered_node_id Id of the discovered node which was converted to create this node
    # @option opts [String] :display_name HostNode display name
    # @option opts [String] :external_id HostNode external id
    # @option opts [String] :hardware_id Hardware Id of the host
    # @option opts [String] :hypervisor_os_type HostNode&#39;s Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM.
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ip_address Management IP address of the node
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :resource_type Node type from &#39;HostNode&#39;, &#39;EdgeNode&#39;, &#39;PublicCloudGatewayNode&#39;
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [NodeListResult]
    def list_nodes(opts = {})
      data, _status_code, _headers = list_nodes_with_http_info(opts)
      return data
    end

    # Return the List of Nodes
    # Returns information about all fabric nodes (hosts and edges).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :discovered_node_id Id of the discovered node which was converted to create this node
    # @option opts [String] :display_name HostNode display name
    # @option opts [String] :external_id HostNode external id
    # @option opts [String] :hardware_id Hardware Id of the host
    # @option opts [String] :hypervisor_os_type HostNode&#39;s Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM.
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ip_address Management IP address of the node
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :resource_type Node type from &#39;HostNode&#39;, &#39;EdgeNode&#39;, &#39;PublicCloudGatewayNode&#39;
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(NodeListResult, Fixnum, Hash)>] NodeListResult data, response status code and response headers
    def list_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.list_nodes ..."
      end
      if @api_client.config.client_side_validation && opts[:'hypervisor_os_type'] && !['ESXI', 'RHELKVM', 'UBUNTUKVM', 'HYPERV', 'RHELCONTAINER', 'RHELSERVER', 'UBUNTUSERVER', 'CENTOSSERVER', 'CENTOSKVM'].include?(opts[:'hypervisor_os_type'])
        fail ArgumentError, 'invalid value for "hypervisor_os_type", must be one of ESXI, RHELKVM, UBUNTUKVM, HYPERV, RHELCONTAINER, RHELSERVER, UBUNTUSERVER, CENTOSSERVER, CENTOSKVM'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_nodes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_nodes, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'resource_type'] && !['HostNode', 'EdgeNode', 'PublicCloudGatewayNode'].include?(opts[:'resource_type'])
        fail ArgumentError, 'invalid value for "resource_type", must be one of HostNode, EdgeNode, PublicCloudGatewayNode'
      end
      # resource path
      local_var_path = "/fabric/nodes"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'discovered_node_id'] = opts[:'discovered_node_id'] if !opts[:'discovered_node_id'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'hardware_id'] = opts[:'hardware_id'] if !opts[:'hardware_id'].nil?
      query_params[:'hypervisor_os_type'] = opts[:'hypervisor_os_type'] if !opts[:'hypervisor_os_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'ip_address'] = opts[:'ip_address'] if !opts[:'ip_address'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the List of Virtual Network Interfaces (VIFs)
    # Returns information about all VIFs. A virtual network interface aggregates network interfaces into a logical interface unit that is indistinuishable from a physical network interface. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :host_id Id of the host where this vif is located.
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :lport_attachment_id LPort Attachment Id of the virtual network interface.
    # @option opts [String] :owner_vm_id External id of the virtual machine.
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :vm_id External id of the virtual machine.
    # @return [VirtualNetworkInterfaceListResult]
    def list_vifs(opts = {})
      data, _status_code, _headers = list_vifs_with_http_info(opts)
      return data
    end

    # Return the List of Virtual Network Interfaces (VIFs)
    # Returns information about all VIFs. A virtual network interface aggregates network interfaces into a logical interface unit that is indistinuishable from a physical network interface. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :host_id Id of the host where this vif is located.
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :lport_attachment_id LPort Attachment Id of the virtual network interface.
    # @option opts [String] :owner_vm_id External id of the virtual machine.
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :vm_id External id of the virtual machine.
    # @return [Array<(VirtualNetworkInterfaceListResult, Fixnum, Hash)>] VirtualNetworkInterfaceListResult data, response status code and response headers
    def list_vifs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.list_vifs ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_vifs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_vifs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/fabric/vifs"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'host_id'] = opts[:'host_id'] if !opts[:'host_id'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'lport_attachment_id'] = opts[:'lport_attachment_id'] if !opts[:'lport_attachment_id'].nil?
      query_params[:'owner_vm_id'] = opts[:'owner_vm_id'] if !opts[:'owner_vm_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'vm_id'] = opts[:'vm_id'] if !opts[:'vm_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualNetworkInterfaceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_vifs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the List of Virtual Machines
    # Returns information about all virtual machines.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :display_name Display Name of the virtual machine
    # @option opts [String] :external_id External id of the virtual machine
    # @option opts [String] :host_id Id of the host where this vif is located
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualMachineListResult]
    def list_virtual_machines(opts = {})
      data, _status_code, _headers = list_virtual_machines_with_http_info(opts)
      return data
    end

    # Return the List of Virtual Machines
    # Returns information about all virtual machines.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :display_name Display Name of the virtual machine
    # @option opts [String] :external_id External id of the virtual machine
    # @option opts [String] :host_id Id of the host where this vif is located
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualMachineListResult, Fixnum, Hash)>] VirtualMachineListResult data, response status code and response headers
    def list_virtual_machines_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.list_virtual_machines ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_virtual_machines, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FabricApi.list_virtual_machines, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/fabric/virtual-machines"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'host_id'] = opts[:'host_id'] if !opts[:'host_id'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualMachineListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_virtual_machines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform action specific to NSX on the compute-collection
    # Perform action specific to NSX on the compute-collection
    # @param cc_ext_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Supported actions on compute-collection
    # @return [nil]
    def perform_action_on_compute_collection(cc_ext_id, opts = {})
      perform_action_on_compute_collection_with_http_info(cc_ext_id, opts)
      return nil
    end

    # Perform action specific to NSX on the compute-collection
    # Perform action specific to NSX on the compute-collection
    # @param cc_ext_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Supported actions on compute-collection
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def perform_action_on_compute_collection_with_http_info(cc_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.perform_action_on_compute_collection ..."
      end
      # verify the required parameter 'cc_ext_id' is set
      if @api_client.config.client_side_validation && cc_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cc_ext_id' when calling FabricApi.perform_action_on_compute_collection"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['remove_nsx'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of remove_nsx'
      end
      # resource path
      local_var_path = "/fabric/compute-collections/{cc-ext-id}".sub('{' + 'cc-ext-id' + '}', cc_ext_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#perform_action_on_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a service deployment upgrade on a host node
    # Perform a service deployment upgrade on a host node
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :disable_vm_migration Should VM migration be disabled during upgrade (default to false)
    # @return [Node]
    def perform_host_node_upgrade_action_upgrade_infra(node_id, opts = {})
      data, _status_code, _headers = perform_host_node_upgrade_action_upgrade_infra_with_http_info(node_id, opts)
      return data
    end

    # Perform a service deployment upgrade on a host node
    # Perform a service deployment upgrade on a host node
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :disable_vm_migration Should VM migration be disabled during upgrade
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def perform_host_node_upgrade_action_upgrade_infra_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.perform_host_node_upgrade_action_upgrade_infra ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.perform_host_node_upgrade_action_upgrade_infra"
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}?action=upgrade_infra".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'disable_vm_migration'] = opts[:'disable_vm_migration'] if !opts[:'disable_vm_migration'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#perform_host_node_upgrade_action_upgrade_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform an Action on Fabric Node
    # The supported fabric node actions are enter_maintenance_mode, exit_maintenance_mode for EdgeNode. This API is deprecated, please call TransportNode maintenance mode API to update maintenance mode, refer to \"Update transport node maintenance mode\". 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Supported fabric node actions
    # @return [Node]
    def perform_node_action(node_id, opts = {})
      data, _status_code, _headers = perform_node_action_with_http_info(node_id, opts)
      return data
    end

    # Perform an Action on Fabric Node
    # The supported fabric node actions are enter_maintenance_mode, exit_maintenance_mode for EdgeNode. This API is deprecated, please call TransportNode maintenance mode API to update maintenance mode, refer to \&quot;Update transport node maintenance mode\&quot;. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Supported fabric node actions
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def perform_node_action_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.perform_node_action ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.perform_node_action"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['enter_maintenance_mode', 'exit_maintenance_mode'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of enter_maintenance_mode, exit_maintenance_mode'
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#perform_node_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Compute Collection Information
    # Returns information about a specific compute collection.
    # @param cc_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [ComputeCollection]
    def read_compute_collection(cc_ext_id, opts = {})
      data, _status_code, _headers = read_compute_collection_with_http_info(cc_ext_id, opts)
      return data
    end

    # Return Compute Collection Information
    # Returns information about a specific compute collection.
    # @param cc_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeCollection, Fixnum, Hash)>] ComputeCollection data, response status code and response headers
    def read_compute_collection_with_http_info(cc_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.read_compute_collection ..."
      end
      # verify the required parameter 'cc_ext_id' is set
      if @api_client.config.client_side_validation && cc_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cc_ext_id' when calling FabricApi.read_compute_collection"
      end
      # resource path
      local_var_path = "/fabric/compute-collections/{cc-ext-id}".sub('{' + 'cc-ext-id' + '}', cc_ext_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#read_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return compute manager Information
    # Returns information about a specific compute manager
    # @param compute_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [ComputeManager]
    def read_compute_manager(compute_manager_id, opts = {})
      data, _status_code, _headers = read_compute_manager_with_http_info(compute_manager_id, opts)
      return data
    end

    # Return compute manager Information
    # Returns information about a specific compute manager
    # @param compute_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeManager, Fixnum, Hash)>] ComputeManager data, response status code and response headers
    def read_compute_manager_with_http_info(compute_manager_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.read_compute_manager ..."
      end
      # verify the required parameter 'compute_manager_id' is set
      if @api_client.config.client_side_validation && compute_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_manager_id' when calling FabricApi.read_compute_manager"
      end
      # resource path
      local_var_path = "/fabric/compute-managers/{compute-manager-id}".sub('{' + 'compute-manager-id' + '}', compute_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeManager')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#read_compute_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return runtime status information for a compute manager
    # Returns connection and version information about a compute manager 
    # @param compute_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [ComputeManagerStatus]
    def read_compute_manager_status(compute_manager_id, opts = {})
      data, _status_code, _headers = read_compute_manager_status_with_http_info(compute_manager_id, opts)
      return data
    end

    # Return runtime status information for a compute manager
    # Returns connection and version information about a compute manager 
    # @param compute_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeManagerStatus, Fixnum, Hash)>] ComputeManagerStatus data, response status code and response headers
    def read_compute_manager_status_with_http_info(compute_manager_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.read_compute_manager_status ..."
      end
      # verify the required parameter 'compute_manager_id' is set
      if @api_client.config.client_side_validation && compute_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_manager_id' when calling FabricApi.read_compute_manager_status"
      end
      # resource path
      local_var_path = "/fabric/compute-managers/{compute-manager-id}/status".sub('{' + 'compute-manager-id' + '}', compute_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeManagerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#read_compute_manager_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Discovered Node Information
    # Returns information about a specific discovered node.
    # @param node_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [DiscoveredNode]
    def read_discovered_node(node_ext_id, opts = {})
      data, _status_code, _headers = read_discovered_node_with_http_info(node_ext_id, opts)
      return data
    end

    # Return Discovered Node Information
    # Returns information about a specific discovered node.
    # @param node_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DiscoveredNode, Fixnum, Hash)>] DiscoveredNode data, response status code and response headers
    def read_discovered_node_with_http_info(node_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.read_discovered_node ..."
      end
      # verify the required parameter 'node_ext_id' is set
      if @api_client.config.client_side_validation && node_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_ext_id' when calling FabricApi.read_discovered_node"
      end
      # resource path
      local_var_path = "/fabric/discovered-nodes/{node-ext-id}".sub('{' + 'node-ext-id' + '}', node_ext_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscoveredNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#read_discovered_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the node's Network Interface
    # Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfaceProperties]
    def read_fabric_node_interface(node_id, interface_id, opts = {})
      data, _status_code, _headers = read_fabric_node_interface_with_http_info(node_id, interface_id, opts)
      return data
    end

    # Read the node&#39;s Network Interface
    # Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfaceProperties, Fixnum, Hash)>] NodeInterfaceProperties data, response status code and response headers
    def read_fabric_node_interface_with_http_info(node_id, interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.read_fabric_node_interface ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.read_fabric_node_interface"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling FabricApi.read_fabric_node_interface"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}/network/interfaces/{interface-id}".sub('{' + 'node-id' + '}', node_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfaceProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#read_fabric_node_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the NSX Manager's Network Interface Statistics
    # On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfaceStatisticsProperties]
    def read_fabric_node_interface_statistics(node_id, interface_id, opts = {})
      data, _status_code, _headers = read_fabric_node_interface_statistics_with_http_info(node_id, interface_id, opts)
      return data
    end

    # Read the NSX Manager&#39;s Network Interface Statistics
    # On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfaceStatisticsProperties, Fixnum, Hash)>] NodeInterfaceStatisticsProperties data, response status code and response headers
    def read_fabric_node_interface_statistics_with_http_info(node_id, interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.read_fabric_node_interface_statistics ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.read_fabric_node_interface_statistics"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling FabricApi.read_fabric_node_interface_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}/network/interfaces/{interface-id}/stats".sub('{' + 'node-id' + '}', node_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfaceStatisticsProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#read_fabric_node_interface_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Node Information
    # Returns information about a specific fabric node (host or edge).
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def read_node(node_id, opts = {})
      data, _status_code, _headers = read_node_with_http_info(node_id, opts)
      return data
    end

    # Return Node Information
    # Returns information about a specific fabric node (host or edge).
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def read_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.read_node ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.read_node"
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#read_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Runtime Status Information for a Node
    # Returns connectivity, heartbeat, and version information about a fabric node (host or edge). Note that the LCP connectivity status remains down until after the fabric node has been added as a transpot node and the NSX host switch has been successfully installed. See POST /api/v1/transport-nodes. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeStatus]
    def read_node_status(node_id, opts = {})
      data, _status_code, _headers = read_node_status_with_http_info(node_id, opts)
      return data
    end

    # Return Runtime Status Information for a Node
    # Returns connectivity, heartbeat, and version information about a fabric node (host or edge). Note that the LCP connectivity status remains down until after the fabric node has been added as a transpot node and the NSX host switch has been successfully installed. See POST /api/v1/transport-nodes. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeStatus, Fixnum, Hash)>] NodeStatus data, response status code and response headers
    def read_node_status_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.read_node_status ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.read_node_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}/status".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#read_node_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Runtime Status Information for given Nodes
    # Returns connectivity, heartbeat, and version information about all fabric nodes (host or edge). 
    # @param node_ids List of requested Nodes.
    # @param [Hash] opts the optional parameters
    # @return [NodeStatusListResult]
    def read_nodes_status(node_ids, opts = {})
      data, _status_code, _headers = read_nodes_status_with_http_info(node_ids, opts)
      return data
    end

    # Return Runtime Status Information for given Nodes
    # Returns connectivity, heartbeat, and version information about all fabric nodes (host or edge). 
    # @param node_ids List of requested Nodes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeStatusListResult, Fixnum, Hash)>] NodeStatusListResult data, response status code and response headers
    def read_nodes_status_with_http_info(node_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.read_nodes_status ..."
      end
      # verify the required parameter 'node_ids' is set
      if @api_client.config.client_side_validation && node_ids.nil?
        fail ArgumentError, "Missing the required parameter 'node_ids' when calling FabricApi.read_nodes_status"
      end
      # resource path
      local_var_path = "/fabric/nodes/status"

      # query parameters
      query_params = {}
      query_params[:'node_ids'] = node_ids

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#read_nodes_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restart the inventory sync for the node if it is paused currently.
    # Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def restart_inventory_sync_restart_inventory_sync(node_id, opts = {})
      restart_inventory_sync_restart_inventory_sync_with_http_info(node_id, opts)
      return nil
    end

    # Restart the inventory sync for the node if it is paused currently.
    # Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def restart_inventory_sync_restart_inventory_sync_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.restart_inventory_sync_restart_inventory_sync ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.restart_inventory_sync_restart_inventory_sync"
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}?action=restart_inventory_sync".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#restart_inventory_sync_restart_inventory_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates compute collection fabric template
    # Updates compute collection fabric template for the given id
    # @param fabric_template_id 
    # @param compute_collection_fabric_template 
    # @param [Hash] opts the optional parameters
    # @return [ComputeCollectionFabricTemplate]
    def update_compute_collection_fabric_template(fabric_template_id, compute_collection_fabric_template, opts = {})
      data, _status_code, _headers = update_compute_collection_fabric_template_with_http_info(fabric_template_id, compute_collection_fabric_template, opts)
      return data
    end

    # Updates compute collection fabric template
    # Updates compute collection fabric template for the given id
    # @param fabric_template_id 
    # @param compute_collection_fabric_template 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeCollectionFabricTemplate, Fixnum, Hash)>] ComputeCollectionFabricTemplate data, response status code and response headers
    def update_compute_collection_fabric_template_with_http_info(fabric_template_id, compute_collection_fabric_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.update_compute_collection_fabric_template ..."
      end
      # verify the required parameter 'fabric_template_id' is set
      if @api_client.config.client_side_validation && fabric_template_id.nil?
        fail ArgumentError, "Missing the required parameter 'fabric_template_id' when calling FabricApi.update_compute_collection_fabric_template"
      end
      # verify the required parameter 'compute_collection_fabric_template' is set
      if @api_client.config.client_side_validation && compute_collection_fabric_template.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_fabric_template' when calling FabricApi.update_compute_collection_fabric_template"
      end
      # resource path
      local_var_path = "/fabric/compute-collection-fabric-templates/{fabric-template-id}".sub('{' + 'fabric-template-id' + '}', fabric_template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_collection_fabric_template)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeCollectionFabricTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#update_compute_collection_fabric_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update compute manager
    # Updates a specified compute manager 
    # @param compute_manager_id 
    # @param compute_manager 
    # @param [Hash] opts the optional parameters
    # @return [ComputeManager]
    def update_compute_manager(compute_manager_id, compute_manager, opts = {})
      data, _status_code, _headers = update_compute_manager_with_http_info(compute_manager_id, compute_manager, opts)
      return data
    end

    # Update compute manager
    # Updates a specified compute manager 
    # @param compute_manager_id 
    # @param compute_manager 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeManager, Fixnum, Hash)>] ComputeManager data, response status code and response headers
    def update_compute_manager_with_http_info(compute_manager_id, compute_manager, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.update_compute_manager ..."
      end
      # verify the required parameter 'compute_manager_id' is set
      if @api_client.config.client_side_validation && compute_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_manager_id' when calling FabricApi.update_compute_manager"
      end
      # verify the required parameter 'compute_manager' is set
      if @api_client.config.client_side_validation && compute_manager.nil?
        fail ArgumentError, "Missing the required parameter 'compute_manager' when calling FabricApi.update_compute_manager"
      end
      # resource path
      local_var_path = "/fabric/compute-managers/{compute-manager-id}".sub('{' + 'compute-manager-id' + '}', compute_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_manager)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeManager')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#update_compute_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Node
    # Modifies attributes of a fabric node (host or edge). 
    # @param node_id 
    # @param node 
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def update_node(node_id, node, opts = {})
      data, _status_code, _headers = update_node_with_http_info(node_id, node, opts)
      return data
    end

    # Update a Node
    # Modifies attributes of a fabric node (host or edge). 
    # @param node_id 
    # @param node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def update_node_with_http_info(node_id, node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.update_node ..."
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling FabricApi.update_node"
      end
      # verify the required parameter 'node' is set
      if @api_client.config.client_side_validation && node.nil?
        fail ArgumentError, "Missing the required parameter 'node' when calling FabricApi.update_node"
      end
      # resource path
      local_var_path = "/fabric/nodes/{node-id}".sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#update_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update tags applied to a virtual machine
    # Update tags applied to the virtual machine. External id of the virtual machine will be specified in the request body. Request body should contain all the tags to be applied. To clear all tags, provide an empty list. User can apply maximum 10 tags on a virtual machine. The remaining 5 are reserved for system defined tags.
    # @param virtual_machine_tag_update 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_virtual_machine_tags_update_tags(virtual_machine_tag_update, opts = {})
      update_virtual_machine_tags_update_tags_with_http_info(virtual_machine_tag_update, opts)
      return nil
    end

    # Update tags applied to a virtual machine
    # Update tags applied to the virtual machine. External id of the virtual machine will be specified in the request body. Request body should contain all the tags to be applied. To clear all tags, provide an empty list. User can apply maximum 10 tags on a virtual machine. The remaining 5 are reserved for system defined tags.
    # @param virtual_machine_tag_update 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_virtual_machine_tags_update_tags_with_http_info(virtual_machine_tag_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FabricApi.update_virtual_machine_tags_update_tags ..."
      end
      # verify the required parameter 'virtual_machine_tag_update' is set
      if @api_client.config.client_side_validation && virtual_machine_tag_update.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_machine_tag_update' when calling FabricApi.update_virtual_machine_tags_update_tags"
      end
      # resource path
      local_var_path = "/fabric/virtual-machines?action=update_tags"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(virtual_machine_tag_update)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#update_virtual_machine_tags_update_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
