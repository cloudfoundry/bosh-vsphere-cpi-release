=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.3.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module NSXT
  class LogicalSwitchingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a Logical Port
    # Creates a new logical switch port. The required parameters are the associated logical_switch_id and admin_state (UP or DOWN). Optional parameters are the attachment and switching_profile_ids. If you don't specify switching_profile_ids, default switching profiles are assigned to the port. If you don't specify an attachment, the switch port remains empty. To configure an attachment, you must specify an id, and optionally you can specify an attachment_type (VIF or LOGICALROUTER). The attachment_type is VIF by default. 
    # @param logical_port 
    # @param [Hash] opts the optional parameters
    # @return [LogicalPort]
    def create_logical_port(logical_port, opts = {})
      data, _status_code, _headers = create_logical_port_with_http_info(logical_port, opts)
      return data
    end

    # Create a Logical Port
    # Creates a new logical switch port. The required parameters are the associated logical_switch_id and admin_state (UP or DOWN). Optional parameters are the attachment and switching_profile_ids. If you don&#39;t specify switching_profile_ids, default switching profiles are assigned to the port. If you don&#39;t specify an attachment, the switch port remains empty. To configure an attachment, you must specify an id, and optionally you can specify an attachment_type (VIF or LOGICALROUTER). The attachment_type is VIF by default. 
    # @param logical_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalPort, Fixnum, Hash)>] LogicalPort data, response status code and response headers
    def create_logical_port_with_http_info(logical_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.create_logical_port ..."
      end
      # verify the required parameter 'logical_port' is set
      if @api_client.config.client_side_validation && logical_port.nil?
        fail ArgumentError, "Missing the required parameter 'logical_port' when calling LogicalSwitchingApi.create_logical_port"
      end
      # resource path
      local_var_path = "/logical-ports"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#create_logical_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Logical Switch
    # Creates a new logical switch. The request must include the transport_zone_id, display_name, and admin_state (UP or DOWN). The replication_mode (MTEP or SOURCE) is required for overlay logical switches, but not for VLAN-based logical switches. A vlan needs to be provided for VLAN-based logical switches 
    # @param logical_switch 
    # @param [Hash] opts the optional parameters
    # @return [LogicalSwitch]
    def create_logical_switch(logical_switch, opts = {})
      data, _status_code, _headers = create_logical_switch_with_http_info(logical_switch, opts)
      return data
    end

    # Create a Logical Switch
    # Creates a new logical switch. The request must include the transport_zone_id, display_name, and admin_state (UP or DOWN). The replication_mode (MTEP or SOURCE) is required for overlay logical switches, but not for VLAN-based logical switches. A vlan needs to be provided for VLAN-based logical switches 
    # @param logical_switch 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalSwitch, Fixnum, Hash)>] LogicalSwitch data, response status code and response headers
    def create_logical_switch_with_http_info(logical_switch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.create_logical_switch ..."
      end
      # verify the required parameter 'logical_switch' is set
      if @api_client.config.client_side_validation && logical_switch.nil?
        fail ArgumentError, "Missing the required parameter 'logical_switch' when calling LogicalSwitchingApi.create_logical_switch"
      end
      # resource path
      local_var_path = "/logical-switches"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_switch)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalSwitch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#create_logical_switch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Switching Profile
    # Creates a new, custom qos, port-mirroring, spoof-guard or port-security switching profile. You can override their default switching profile assignments by creating a new switching profile and assigning it to one or more logical switches. You cannot override the default ipfix or ip_discovery switching profiles. 
    # @param base_switching_profile 
    # @param [Hash] opts the optional parameters
    # @return [BaseSwitchingProfile]
    def create_switching_profile(base_switching_profile, opts = {})
      data, _status_code, _headers = create_switching_profile_with_http_info(base_switching_profile, opts)
      return data
    end

    # Create a Switching Profile
    # Creates a new, custom qos, port-mirroring, spoof-guard or port-security switching profile. You can override their default switching profile assignments by creating a new switching profile and assigning it to one or more logical switches. You cannot override the default ipfix or ip_discovery switching profiles. 
    # @param base_switching_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSwitchingProfile, Fixnum, Hash)>] BaseSwitchingProfile data, response status code and response headers
    def create_switching_profile_with_http_info(base_switching_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.create_switching_profile ..."
      end
      # verify the required parameter 'base_switching_profile' is set
      if @api_client.config.client_side_validation && base_switching_profile.nil?
        fail ArgumentError, "Missing the required parameter 'base_switching_profile' when calling LogicalSwitchingApi.create_switching_profile"
      end
      # resource path
      local_var_path = "/switching-profiles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(base_switching_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseSwitchingProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#create_switching_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Logical Port
    # Deletes the specified logical switch port. By default, if logical port has attachments, or it is added to any NSGroup, the deletion will be failed. Option detach could be used for deleting logical port forcibly. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :detach force delete even if attached or referenced by a group (default to false)
    # @return [nil]
    def delete_logical_port(lport_id, opts = {})
      delete_logical_port_with_http_info(lport_id, opts)
      return nil
    end

    # Delete a Logical Port
    # Deletes the specified logical switch port. By default, if logical port has attachments, or it is added to any NSGroup, the deletion will be failed. Option detach could be used for deleting logical port forcibly. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :detach force delete even if attached or referenced by a group
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_logical_port_with_http_info(lport_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.delete_logical_port ..."
      end
      # verify the required parameter 'lport_id' is set
      if @api_client.config.client_side_validation && lport_id.nil?
        fail ArgumentError, "Missing the required parameter 'lport_id' when calling LogicalSwitchingApi.delete_logical_port"
      end
      # resource path
      local_var_path = "/logical-ports/{lport-id}".sub('{' + 'lport-id' + '}', lport_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'detach'] = opts[:'detach'] if !opts[:'detach'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#delete_logical_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Logical Switch
    # Removes a logical switch from the associated overlay or VLAN transport zone. By default, a logical switch cannot be deleted if there are logical ports on the switch, or it is added to a NSGroup. Cascade option can be used to delete all ports and the logical switch. Detach option can be used to delete the logical switch forcibly. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Delete a Logical Switch and all the logical ports in it, if none of the logical ports have any attachment.  (default to false)
    # @option opts [BOOLEAN] :detach Force delete a logical switch (default to false)
    # @return [nil]
    def delete_logical_switch(lswitch_id, opts = {})
      delete_logical_switch_with_http_info(lswitch_id, opts)
      return nil
    end

    # Delete a Logical Switch
    # Removes a logical switch from the associated overlay or VLAN transport zone. By default, a logical switch cannot be deleted if there are logical ports on the switch, or it is added to a NSGroup. Cascade option can be used to delete all ports and the logical switch. Detach option can be used to delete the logical switch forcibly. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Delete a Logical Switch and all the logical ports in it, if none of the logical ports have any attachment. 
    # @option opts [BOOLEAN] :detach Force delete a logical switch
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_logical_switch_with_http_info(lswitch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.delete_logical_switch ..."
      end
      # verify the required parameter 'lswitch_id' is set
      if @api_client.config.client_side_validation && lswitch_id.nil?
        fail ArgumentError, "Missing the required parameter 'lswitch_id' when calling LogicalSwitchingApi.delete_logical_switch"
      end
      # resource path
      local_var_path = "/logical-switches/{lswitch-id}".sub('{' + 'lswitch-id' + '}', lswitch_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cascade'] = opts[:'cascade'] if !opts[:'cascade'].nil?
      query_params[:'detach'] = opts[:'detach'] if !opts[:'detach'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#delete_logical_switch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Switching Profile
    # Deletes the specified switching profile.
    # @param switching_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :unbind force unbinding of logical switches and ports from a switching profile (default to false)
    # @return [nil]
    def delete_switching_profile(switching_profile_id, opts = {})
      delete_switching_profile_with_http_info(switching_profile_id, opts)
      return nil
    end

    # Delete a Switching Profile
    # Deletes the specified switching profile.
    # @param switching_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :unbind force unbinding of logical switches and ports from a switching profile
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_switching_profile_with_http_info(switching_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.delete_switching_profile ..."
      end
      # verify the required parameter 'switching_profile_id' is set
      if @api_client.config.client_side_validation && switching_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'switching_profile_id' when calling LogicalSwitchingApi.delete_switching_profile"
      end
      # resource path
      local_var_path = "/switching-profiles/{switching-profile-id}".sub('{' + 'switching-profile-id' + '}', switching_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'unbind'] = opts[:'unbind'] if !opts[:'unbind'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#delete_switching_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Information About a Logical Port
    # Returns information about a specified logical port.
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalPort]
    def get_logical_port(lport_id, opts = {})
      data, _status_code, _headers = get_logical_port_with_http_info(lport_id, opts)
      return data
    end

    # Get Information About a Logical Port
    # Returns information about a specified logical port.
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalPort, Fixnum, Hash)>] LogicalPort data, response status code and response headers
    def get_logical_port_with_http_info(lport_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_port ..."
      end
      # verify the required parameter 'lport_id' is set
      if @api_client.config.client_side_validation && lport_id.nil?
        fail ArgumentError, "Missing the required parameter 'lport_id' when calling LogicalSwitchingApi.get_logical_port"
      end
      # resource path
      local_var_path = "/logical-ports/{lport-id}".sub('{' + 'lport-id' + '}', lport_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get MAC table of a logical port with a given port id (lport-id)
    # Returns MAC table of a specified logical port. If the target transport node id is not provided, the NSX manager will ask the controller for the transport node where the logical port is located. The query parameter \"source=cached\" is not supported. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [LogicalPortMacAddressListResult]
    def get_logical_port_mac_table(lport_id, opts = {})
      data, _status_code, _headers = get_logical_port_mac_table_with_http_info(lport_id, opts)
      return data
    end

    # Get MAC table of a logical port with a given port id (lport-id)
    # Returns MAC table of a specified logical port. If the target transport node id is not provided, the NSX manager will ask the controller for the transport node where the logical port is located. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(LogicalPortMacAddressListResult, Fixnum, Hash)>] LogicalPortMacAddressListResult data, response status code and response headers
    def get_logical_port_mac_table_with_http_info(lport_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_port_mac_table ..."
      end
      # verify the required parameter 'lport_id' is set
      if @api_client.config.client_side_validation && lport_id.nil?
        fail ArgumentError, "Missing the required parameter 'lport_id' when calling LogicalSwitchingApi.get_logical_port_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_port_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_port_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-ports/{lport-id}/mac-table".sub('{' + 'lport-id' + '}', lport_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPortMacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_port_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get MAC table of a logical port with a given port id (lport-id)
    # Returns MAC table in CSV format of a specified logical port. If the target transport node id is not provided, the NSX manager will ask the controller for the transport node where the logical port is located. The query parameter \"source=cached\" is not supported. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [LogicalPortMacAddressCsvListResult]
    def get_logical_port_mac_table_in_csv_format_csv(lport_id, opts = {})
      data, _status_code, _headers = get_logical_port_mac_table_in_csv_format_csv_with_http_info(lport_id, opts)
      return data
    end

    # Get MAC table of a logical port with a given port id (lport-id)
    # Returns MAC table in CSV format of a specified logical port. If the target transport node id is not provided, the NSX manager will ask the controller for the transport node where the logical port is located. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(LogicalPortMacAddressCsvListResult, Fixnum, Hash)>] LogicalPortMacAddressCsvListResult data, response status code and response headers
    def get_logical_port_mac_table_in_csv_format_csv_with_http_info(lport_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_port_mac_table_in_csv_format_csv ..."
      end
      # verify the required parameter 'lport_id' is set
      if @api_client.config.client_side_validation && lport_id.nil?
        fail ArgumentError, "Missing the required parameter 'lport_id' when calling LogicalSwitchingApi.get_logical_port_mac_table_in_csv_format_csv"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_port_mac_table_in_csv_format_csv, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_port_mac_table_in_csv_format_csv, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-ports/{lport-id}/mac-table?format=csv".sub('{' + 'lport-id' + '}', lport_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPortMacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_port_mac_table_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Operational Status for Logical Port of a Given Port ID (lport-id)
    # Returns operational status of a specified logical port.
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LogicalPortOperationalStatus]
    def get_logical_port_operational_status(lport_id, opts = {})
      data, _status_code, _headers = get_logical_port_operational_status_with_http_info(lport_id, opts)
      return data
    end

    # Get Operational Status for Logical Port of a Given Port ID (lport-id)
    # Returns operational status of a specified logical port.
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalPortOperationalStatus, Fixnum, Hash)>] LogicalPortOperationalStatus data, response status code and response headers
    def get_logical_port_operational_status_with_http_info(lport_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_port_operational_status ..."
      end
      # verify the required parameter 'lport_id' is set
      if @api_client.config.client_side_validation && lport_id.nil?
        fail ArgumentError, "Missing the required parameter 'lport_id' when calling LogicalSwitchingApi.get_logical_port_operational_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-ports/{lport-id}/status".sub('{' + 'lport-id' + '}', lport_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPortOperationalStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_port_operational_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get realized state & location of a logical port
    # Returns transport node id for a specified logical port. Also returns information about all address bindings of the specified logical port. This includes address bindings discovered via various snooping methods like ARP snooping, DHCP snooping etc. and addressing bindings that are realized based on user configuration. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalPortState]
    def get_logical_port_state(lport_id, opts = {})
      data, _status_code, _headers = get_logical_port_state_with_http_info(lport_id, opts)
      return data
    end

    # Get realized state &amp; location of a logical port
    # Returns transport node id for a specified logical port. Also returns information about all address bindings of the specified logical port. This includes address bindings discovered via various snooping methods like ARP snooping, DHCP snooping etc. and addressing bindings that are realized based on user configuration. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalPortState, Fixnum, Hash)>] LogicalPortState data, response status code and response headers
    def get_logical_port_state_with_http_info(lport_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_port_state ..."
      end
      # verify the required parameter 'lport_id' is set
      if @api_client.config.client_side_validation && lport_id.nil?
        fail ArgumentError, "Missing the required parameter 'lport_id' when calling LogicalSwitchingApi.get_logical_port_state"
      end
      # resource path
      local_var_path = "/logical-ports/{lport-id}/state".sub('{' + 'lport-id' + '}', lport_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPortState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_port_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Statistics for Logical Port of a Given Port ID (lport-id)
    # Returns statistics of a specified logical port. If the logical port is attached to a logical router port, query parameter \"source=realtime\" is not supported. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LogicalPortStatistics]
    def get_logical_port_statistics(lport_id, opts = {})
      data, _status_code, _headers = get_logical_port_statistics_with_http_info(lport_id, opts)
      return data
    end

    # Get Statistics for Logical Port of a Given Port ID (lport-id)
    # Returns statistics of a specified logical port. If the logical port is attached to a logical router port, query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalPortStatistics, Fixnum, Hash)>] LogicalPortStatistics data, response status code and response headers
    def get_logical_port_statistics_with_http_info(lport_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_port_statistics ..."
      end
      # verify the required parameter 'lport_id' is set
      if @api_client.config.client_side_validation && lport_id.nil?
        fail ArgumentError, "Missing the required parameter 'lport_id' when calling LogicalSwitchingApi.get_logical_port_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-ports/{lport-id}/statistics".sub('{' + 'lport-id' + '}', lport_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Operational Status Summary of All Logical Ports in the System
    # Returns operational status of all logical ports. The query parameter \"source=realtime\" is not supported. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attachment_id Logical Port attachment Id
    # @option opts [String] :attachment_type Type of attachment for logical port; for query only.
    # @option opts [String] :bridge_cluster_id Bridge Cluster identifier
    # @option opts [BOOLEAN] :container_ports_only Only container VIF logical ports will be returned if true (default to false)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :diagnostic Flag to enable showing of transit logical port. (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :logical_switch_id Logical Switch identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :parent_vif_id ID of the VIF of type PARENT
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :switching_profile_id Network Profile identifier
    # @option opts [String] :transport_node_id Transport node identifier
    # @option opts [String] :transport_zone_id Transport zone identifier
    # @return [LogicalPortStatusSummary]
    def get_logical_port_status_summary(opts = {})
      data, _status_code, _headers = get_logical_port_status_summary_with_http_info(opts)
      return data
    end

    # Get Operational Status Summary of All Logical Ports in the System
    # Returns operational status of all logical ports. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attachment_id Logical Port attachment Id
    # @option opts [String] :attachment_type Type of attachment for logical port; for query only.
    # @option opts [String] :bridge_cluster_id Bridge Cluster identifier
    # @option opts [BOOLEAN] :container_ports_only Only container VIF logical ports will be returned if true
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :diagnostic Flag to enable showing of transit logical port.
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :logical_switch_id Logical Switch identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :parent_vif_id ID of the VIF of type PARENT
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :switching_profile_id Network Profile identifier
    # @option opts [String] :transport_node_id Transport node identifier
    # @option opts [String] :transport_zone_id Transport zone identifier
    # @return [Array<(LogicalPortStatusSummary, Fixnum, Hash)>] LogicalPortStatusSummary data, response status code and response headers
    def get_logical_port_status_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_port_status_summary ..."
      end
      if @api_client.config.client_side_validation && opts[:'attachment_type'] && !['VIF', 'LOGICALROUTER', 'BRIDGEENDPOINT', 'DHCP_SERVICE', 'METADATA_PROXY', 'L2VPN_SESSION', 'NONE'].include?(opts[:'attachment_type'])
        fail ArgumentError, 'invalid value for "attachment_type", must be one of VIF, LOGICALROUTER, BRIDGEENDPOINT, DHCP_SERVICE, METADATA_PROXY, L2VPN_SESSION, NONE'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_port_status_summary, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_port_status_summary, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-ports/status"

      # query parameters
      query_params = {}
      query_params[:'attachment_id'] = opts[:'attachment_id'] if !opts[:'attachment_id'].nil?
      query_params[:'attachment_type'] = opts[:'attachment_type'] if !opts[:'attachment_type'].nil?
      query_params[:'bridge_cluster_id'] = opts[:'bridge_cluster_id'] if !opts[:'bridge_cluster_id'].nil?
      query_params[:'container_ports_only'] = opts[:'container_ports_only'] if !opts[:'container_ports_only'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'diagnostic'] = opts[:'diagnostic'] if !opts[:'diagnostic'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'logical_switch_id'] = opts[:'logical_switch_id'] if !opts[:'logical_switch_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'parent_vif_id'] = opts[:'parent_vif_id'] if !opts[:'parent_vif_id'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'switching_profile_id'] = opts[:'switching_profile_id'] if !opts[:'switching_profile_id'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?
      query_params[:'transport_zone_id'] = opts[:'transport_zone_id'] if !opts[:'transport_zone_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPortStatusSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_port_status_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Logical Switch associated with the provided id (lswitch-id)
    # Returns information about the specified logical switch Id.
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalSwitch]
    def get_logical_switch(lswitch_id, opts = {})
      data, _status_code, _headers = get_logical_switch_with_http_info(lswitch_id, opts)
      return data
    end

    # Get Logical Switch associated with the provided id (lswitch-id)
    # Returns information about the specified logical switch Id.
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalSwitch, Fixnum, Hash)>] LogicalSwitch data, response status code and response headers
    def get_logical_switch_with_http_info(lswitch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_switch ..."
      end
      # verify the required parameter 'lswitch_id' is set
      if @api_client.config.client_side_validation && lswitch_id.nil?
        fail ArgumentError, "Missing the required parameter 'lswitch_id' when calling LogicalSwitchingApi.get_logical_switch"
      end
      # resource path
      local_var_path = "/logical-switches/{lswitch-id}".sub('{' + 'lswitch-id' + '}', lswitch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalSwitch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_switch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get MAC Table for Logical Switch of the Given ID (lswitch-id)
    # Returns MAC table of a specified logical switch from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \"source=cached\" is not supported. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [MacAddressListResult]
    def get_logical_switch_mac_table(lswitch_id, opts = {})
      data, _status_code, _headers = get_logical_switch_mac_table_with_http_info(lswitch_id, opts)
      return data
    end

    # Get MAC Table for Logical Switch of the Given ID (lswitch-id)
    # Returns MAC table of a specified logical switch from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(MacAddressListResult, Fixnum, Hash)>] MacAddressListResult data, response status code and response headers
    def get_logical_switch_mac_table_with_http_info(lswitch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_switch_mac_table ..."
      end
      # verify the required parameter 'lswitch_id' is set
      if @api_client.config.client_side_validation && lswitch_id.nil?
        fail ArgumentError, "Missing the required parameter 'lswitch_id' when calling LogicalSwitchingApi.get_logical_switch_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_switch_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_switch_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-switches/{lswitch-id}/mac-table".sub('{' + 'lswitch-id' + '}', lswitch_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_switch_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get MAC Table for Logical Switch of the Given ID (lswitch-id)
    # Returns MAC table of a specified logical switch in CSV format from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \"source=cached\" is not supported. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [MacAddressCsvListResult]
    def get_logical_switch_mac_table_in_csv_format_csv(lswitch_id, opts = {})
      data, _status_code, _headers = get_logical_switch_mac_table_in_csv_format_csv_with_http_info(lswitch_id, opts)
      return data
    end

    # Get MAC Table for Logical Switch of the Given ID (lswitch-id)
    # Returns MAC table of a specified logical switch in CSV format from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(MacAddressCsvListResult, Fixnum, Hash)>] MacAddressCsvListResult data, response status code and response headers
    def get_logical_switch_mac_table_in_csv_format_csv_with_http_info(lswitch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_switch_mac_table_in_csv_format_csv ..."
      end
      # verify the required parameter 'lswitch_id' is set
      if @api_client.config.client_side_validation && lswitch_id.nil?
        fail ArgumentError, "Missing the required parameter 'lswitch_id' when calling LogicalSwitchingApi.get_logical_switch_mac_table_in_csv_format_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-switches/{lswitch-id}/mac-table?format=csv".sub('{' + 'lswitch-id' + '}', lswitch_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_switch_mac_table_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the realized state associated with provided logical switch id
    # Returns current state of the logical switch configuration and details of only out-of-sync transport nodes. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalSwitchState]
    def get_logical_switch_state(lswitch_id, opts = {})
      data, _status_code, _headers = get_logical_switch_state_with_http_info(lswitch_id, opts)
      return data
    end

    # Get the realized state associated with provided logical switch id
    # Returns current state of the logical switch configuration and details of only out-of-sync transport nodes. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalSwitchState, Fixnum, Hash)>] LogicalSwitchState data, response status code and response headers
    def get_logical_switch_state_with_http_info(lswitch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_switch_state ..."
      end
      # verify the required parameter 'lswitch_id' is set
      if @api_client.config.client_side_validation && lswitch_id.nil?
        fail ArgumentError, "Missing the required parameter 'lswitch_id' when calling LogicalSwitchingApi.get_logical_switch_state"
      end
      # resource path
      local_var_path = "/logical-switches/{lswitch-id}/state".sub('{' + 'lswitch-id' + '}', lswitch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalSwitchState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_switch_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Statistics for Logical Switch of the Given ID (lswitch-id)
    # Returns statistics  of a specified logical switch. The query parameter \"source=realtime\" is not supported. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LogicalSwitchStatistics]
    def get_logical_switch_statistics(lswitch_id, opts = {})
      data, _status_code, _headers = get_logical_switch_statistics_with_http_info(lswitch_id, opts)
      return data
    end

    # Get Statistics for Logical Switch of the Given ID (lswitch-id)
    # Returns statistics  of a specified logical switch. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalSwitchStatistics, Fixnum, Hash)>] LogicalSwitchStatistics data, response status code and response headers
    def get_logical_switch_statistics_with_http_info(lswitch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_switch_statistics ..."
      end
      # verify the required parameter 'lswitch_id' is set
      if @api_client.config.client_side_validation && lswitch_id.nil?
        fail ArgumentError, "Missing the required parameter 'lswitch_id' when calling LogicalSwitchingApi.get_logical_switch_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-switches/{lswitch-id}/statistics".sub('{' + 'lswitch-id' + '}', lswitch_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalSwitchStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_switch_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Logical Switch runtime status info for a given logical switch
    # Returns the number of ports assigned to a logical switch.
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalSwitchStatus]
    def get_logical_switch_status(lswitch_id, opts = {})
      data, _status_code, _headers = get_logical_switch_status_with_http_info(lswitch_id, opts)
      return data
    end

    # Get Logical Switch runtime status info for a given logical switch
    # Returns the number of ports assigned to a logical switch.
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalSwitchStatus, Fixnum, Hash)>] LogicalSwitchStatus data, response status code and response headers
    def get_logical_switch_status_with_http_info(lswitch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_switch_status ..."
      end
      # verify the required parameter 'lswitch_id' is set
      if @api_client.config.client_side_validation && lswitch_id.nil?
        fail ArgumentError, "Missing the required parameter 'lswitch_id' when calling LogicalSwitchingApi.get_logical_switch_status"
      end
      # resource path
      local_var_path = "/logical-switches/{lswitch-id}/summary".sub('{' + 'lswitch-id' + '}', lswitch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalSwitchStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_switch_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Status Summary of All Logical Switches in the System
    # Returns Operational status of all logical switches. The query parameter \"source=realtime\" is not supported. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :diagnostic Flag to enable showing of transit logical switch. (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :switching_profile_id Switching Profile identifier
    # @option opts [String] :transport_type Mode of transport supported in the transport zone for this logical switch
    # @option opts [String] :transport_zone_id Transport zone identifier
    # @option opts [String] :uplink_teaming_policy_name The logical switch&#39;s uplink teaming policy name
    # @option opts [Integer] :vlan Virtual Local Area Network Identifier
    # @option opts [Integer] :vni VNI of the OVERLAY LogicalSwitch(es) to return.
    # @return [LogicalSwitchStatusSummary]
    def get_logical_switch_status_summary(opts = {})
      data, _status_code, _headers = get_logical_switch_status_summary_with_http_info(opts)
      return data
    end

    # Get Status Summary of All Logical Switches in the System
    # Returns Operational status of all logical switches. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :diagnostic Flag to enable showing of transit logical switch.
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :switching_profile_id Switching Profile identifier
    # @option opts [String] :transport_type Mode of transport supported in the transport zone for this logical switch
    # @option opts [String] :transport_zone_id Transport zone identifier
    # @option opts [String] :uplink_teaming_policy_name The logical switch&#39;s uplink teaming policy name
    # @option opts [Integer] :vlan Virtual Local Area Network Identifier
    # @option opts [Integer] :vni VNI of the OVERLAY LogicalSwitch(es) to return.
    # @return [Array<(LogicalSwitchStatusSummary, Fixnum, Hash)>] LogicalSwitchStatusSummary data, response status code and response headers
    def get_logical_switch_status_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_switch_status_summary ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_switch_status_summary, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_switch_status_summary, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'transport_type'] && !['OVERLAY', 'VLAN'].include?(opts[:'transport_type'])
        fail ArgumentError, 'invalid value for "transport_type", must be one of OVERLAY, VLAN'
      end
      if @api_client.config.client_side_validation && !opts[:'vlan'].nil? && opts[:'vlan'] > 4094
        fail ArgumentError, 'invalid value for "opts[:"vlan"]" when calling LogicalSwitchingApi.get_logical_switch_status_summary, must be smaller than or equal to 4094.'
      end

      if @api_client.config.client_side_validation && !opts[:'vlan'].nil? && opts[:'vlan'] < 0
        fail ArgumentError, 'invalid value for "opts[:"vlan"]" when calling LogicalSwitchingApi.get_logical_switch_status_summary, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/logical-switches/status"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'diagnostic'] = opts[:'diagnostic'] if !opts[:'diagnostic'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'switching_profile_id'] = opts[:'switching_profile_id'] if !opts[:'switching_profile_id'].nil?
      query_params[:'transport_type'] = opts[:'transport_type'] if !opts[:'transport_type'].nil?
      query_params[:'transport_zone_id'] = opts[:'transport_zone_id'] if !opts[:'transport_zone_id'].nil?
      query_params[:'uplink_teaming_policy_name'] = opts[:'uplink_teaming_policy_name'] if !opts[:'uplink_teaming_policy_name'].nil?
      query_params[:'vlan'] = opts[:'vlan'] if !opts[:'vlan'].nil?
      query_params[:'vni'] = opts[:'vni'] if !opts[:'vni'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalSwitchStatusSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_switch_status_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get virtual tunnel endpoint table for logical switch of the given ID (lswitch-id) 
    # Returns the virtual tunnel endpoint table of a specified logical switch from the given transport node if a transport node id is given in the query parameter, from the Central Controller Plane. The query parameter \"source=cached\" is not supported. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [VtepListResult]
    def get_logical_switch_vtep_table(lswitch_id, opts = {})
      data, _status_code, _headers = get_logical_switch_vtep_table_with_http_info(lswitch_id, opts)
      return data
    end

    # Get virtual tunnel endpoint table for logical switch of the given ID (lswitch-id) 
    # Returns the virtual tunnel endpoint table of a specified logical switch from the given transport node if a transport node id is given in the query parameter, from the Central Controller Plane. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(VtepListResult, Fixnum, Hash)>] VtepListResult data, response status code and response headers
    def get_logical_switch_vtep_table_with_http_info(lswitch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_switch_vtep_table ..."
      end
      # verify the required parameter 'lswitch_id' is set
      if @api_client.config.client_side_validation && lswitch_id.nil?
        fail ArgumentError, "Missing the required parameter 'lswitch_id' when calling LogicalSwitchingApi.get_logical_switch_vtep_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_switch_vtep_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.get_logical_switch_vtep_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-switches/{lswitch-id}/vtep-table".sub('{' + 'lswitch-id' + '}', lswitch_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VtepListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_switch_vtep_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get virtual tunnel endpoint table for logical switch of the given ID (lswitch-id) 
    # Returns virtual tunnel endpoint table of a specified logical switch in CSV format from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \"source=cached\" is not supported. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [VtepCsvListResult]
    def get_logical_switch_vtep_table_in_csv_format_csv(lswitch_id, opts = {})
      data, _status_code, _headers = get_logical_switch_vtep_table_in_csv_format_csv_with_http_info(lswitch_id, opts)
      return data
    end

    # Get virtual tunnel endpoint table for logical switch of the given ID (lswitch-id) 
    # Returns virtual tunnel endpoint table of a specified logical switch in CSV format from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \&quot;source&#x3D;cached\&quot; is not supported. 
    # @param lswitch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(VtepCsvListResult, Fixnum, Hash)>] VtepCsvListResult data, response status code and response headers
    def get_logical_switch_vtep_table_in_csv_format_csv_with_http_info(lswitch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_logical_switch_vtep_table_in_csv_format_csv ..."
      end
      # verify the required parameter 'lswitch_id' is set
      if @api_client.config.client_side_validation && lswitch_id.nil?
        fail ArgumentError, "Missing the required parameter 'lswitch_id' when calling LogicalSwitchingApi.get_logical_switch_vtep_table_in_csv_format_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = "/logical-switches/{lswitch-id}/vtep-table?format=csv".sub('{' + 'lswitch-id' + '}', lswitch_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VtepCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_logical_switch_vtep_table_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Switching Profile by ID
    # Returns information about a specified switching profile.
    # @param switching_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [BaseSwitchingProfile]
    def get_switching_profile(switching_profile_id, opts = {})
      data, _status_code, _headers = get_switching_profile_with_http_info(switching_profile_id, opts)
      return data
    end

    # Get Switching Profile by ID
    # Returns information about a specified switching profile.
    # @param switching_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSwitchingProfile, Fixnum, Hash)>] BaseSwitchingProfile data, response status code and response headers
    def get_switching_profile_with_http_info(switching_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_switching_profile ..."
      end
      # verify the required parameter 'switching_profile_id' is set
      if @api_client.config.client_side_validation && switching_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'switching_profile_id' when calling LogicalSwitchingApi.get_switching_profile"
      end
      # resource path
      local_var_path = "/switching-profiles/{switching-profile-id}".sub('{' + 'switching-profile-id' + '}', switching_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseSwitchingProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_switching_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Counts of Ports and Switches Using This Switching Profile
    # Get Counts of Ports and Switches Using This Switching Profile
    # @param switching_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [SwitchingProfileStatus]
    def get_switching_profile_status(switching_profile_id, opts = {})
      data, _status_code, _headers = get_switching_profile_status_with_http_info(switching_profile_id, opts)
      return data
    end

    # Get Counts of Ports and Switches Using This Switching Profile
    # Get Counts of Ports and Switches Using This Switching Profile
    # @param switching_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SwitchingProfileStatus, Fixnum, Hash)>] SwitchingProfileStatus data, response status code and response headers
    def get_switching_profile_status_with_http_info(switching_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.get_switching_profile_status ..."
      end
      # verify the required parameter 'switching_profile_id' is set
      if @api_client.config.client_side_validation && switching_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'switching_profile_id' when calling LogicalSwitchingApi.get_switching_profile_status"
      end
      # resource path
      local_var_path = "/switching-profiles/{switching-profile-id}/summary".sub('{' + 'switching-profile-id' + '}', switching_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SwitchingProfileStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#get_switching_profile_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List All Logical Ports
    # Returns information about all configured logical switch ports. Logical switch ports connect to VM virtual network interface cards (NICs). Each logical port is associated with one logical switch. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attachment_id Logical Port attachment Id
    # @option opts [String] :attachment_type Type of attachment for logical port; for query only.
    # @option opts [String] :bridge_cluster_id Bridge Cluster identifier
    # @option opts [BOOLEAN] :container_ports_only Only container VIF logical ports will be returned if true (default to false)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :diagnostic Flag to enable showing of transit logical port. (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :logical_switch_id Logical Switch identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :parent_vif_id ID of the VIF of type PARENT
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :switching_profile_id Network Profile identifier
    # @option opts [String] :transport_node_id Transport node identifier
    # @option opts [String] :transport_zone_id Transport zone identifier
    # @return [LogicalPortListResult]
    def list_logical_ports(opts = {})
      data, _status_code, _headers = list_logical_ports_with_http_info(opts)
      return data
    end

    # List All Logical Ports
    # Returns information about all configured logical switch ports. Logical switch ports connect to VM virtual network interface cards (NICs). Each logical port is associated with one logical switch. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attachment_id Logical Port attachment Id
    # @option opts [String] :attachment_type Type of attachment for logical port; for query only.
    # @option opts [String] :bridge_cluster_id Bridge Cluster identifier
    # @option opts [BOOLEAN] :container_ports_only Only container VIF logical ports will be returned if true
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :diagnostic Flag to enable showing of transit logical port.
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :logical_switch_id Logical Switch identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :parent_vif_id ID of the VIF of type PARENT
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :switching_profile_id Network Profile identifier
    # @option opts [String] :transport_node_id Transport node identifier
    # @option opts [String] :transport_zone_id Transport zone identifier
    # @return [Array<(LogicalPortListResult, Fixnum, Hash)>] LogicalPortListResult data, response status code and response headers
    def list_logical_ports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.list_logical_ports ..."
      end
      if @api_client.config.client_side_validation && opts[:'attachment_type'] && !['VIF', 'LOGICALROUTER', 'BRIDGEENDPOINT', 'DHCP_SERVICE', 'METADATA_PROXY', 'L2VPN_SESSION', 'NONE'].include?(opts[:'attachment_type'])
        fail ArgumentError, 'invalid value for "attachment_type", must be one of VIF, LOGICALROUTER, BRIDGEENDPOINT, DHCP_SERVICE, METADATA_PROXY, L2VPN_SESSION, NONE'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.list_logical_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.list_logical_ports, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/logical-ports"

      # query parameters
      query_params = {}
      query_params[:'attachment_id'] = opts[:'attachment_id'] if !opts[:'attachment_id'].nil?
      query_params[:'attachment_type'] = opts[:'attachment_type'] if !opts[:'attachment_type'].nil?
      query_params[:'bridge_cluster_id'] = opts[:'bridge_cluster_id'] if !opts[:'bridge_cluster_id'].nil?
      query_params[:'container_ports_only'] = opts[:'container_ports_only'] if !opts[:'container_ports_only'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'diagnostic'] = opts[:'diagnostic'] if !opts[:'diagnostic'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'logical_switch_id'] = opts[:'logical_switch_id'] if !opts[:'logical_switch_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'parent_vif_id'] = opts[:'parent_vif_id'] if !opts[:'parent_vif_id'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'switching_profile_id'] = opts[:'switching_profile_id'] if !opts[:'switching_profile_id'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?
      query_params[:'transport_zone_id'] = opts[:'transport_zone_id'] if !opts[:'transport_zone_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#list_logical_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all Logical Switches
    # Returns information about all configured logical switches.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :diagnostic Flag to enable showing of transit logical switch. (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :switching_profile_id Switching Profile identifier
    # @option opts [String] :transport_type Mode of transport supported in the transport zone for this logical switch
    # @option opts [String] :transport_zone_id Transport zone identifier
    # @option opts [String] :uplink_teaming_policy_name The logical switch&#39;s uplink teaming policy name
    # @option opts [Integer] :vlan Virtual Local Area Network Identifier
    # @option opts [Integer] :vni VNI of the OVERLAY LogicalSwitch(es) to return.
    # @return [LogicalSwitchListResult]
    def list_logical_switches(opts = {})
      data, _status_code, _headers = list_logical_switches_with_http_info(opts)
      return data
    end

    # List all Logical Switches
    # Returns information about all configured logical switches.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :diagnostic Flag to enable showing of transit logical switch.
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :switching_profile_id Switching Profile identifier
    # @option opts [String] :transport_type Mode of transport supported in the transport zone for this logical switch
    # @option opts [String] :transport_zone_id Transport zone identifier
    # @option opts [String] :uplink_teaming_policy_name The logical switch&#39;s uplink teaming policy name
    # @option opts [Integer] :vlan Virtual Local Area Network Identifier
    # @option opts [Integer] :vni VNI of the OVERLAY LogicalSwitch(es) to return.
    # @return [Array<(LogicalSwitchListResult, Fixnum, Hash)>] LogicalSwitchListResult data, response status code and response headers
    def list_logical_switches_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.list_logical_switches ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.list_logical_switches, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.list_logical_switches, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'transport_type'] && !['OVERLAY', 'VLAN'].include?(opts[:'transport_type'])
        fail ArgumentError, 'invalid value for "transport_type", must be one of OVERLAY, VLAN'
      end
      if @api_client.config.client_side_validation && !opts[:'vlan'].nil? && opts[:'vlan'] > 4094
        fail ArgumentError, 'invalid value for "opts[:"vlan"]" when calling LogicalSwitchingApi.list_logical_switches, must be smaller than or equal to 4094.'
      end

      if @api_client.config.client_side_validation && !opts[:'vlan'].nil? && opts[:'vlan'] < 0
        fail ArgumentError, 'invalid value for "opts[:"vlan"]" when calling LogicalSwitchingApi.list_logical_switches, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/logical-switches"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'diagnostic'] = opts[:'diagnostic'] if !opts[:'diagnostic'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'switching_profile_id'] = opts[:'switching_profile_id'] if !opts[:'switching_profile_id'].nil?
      query_params[:'transport_type'] = opts[:'transport_type'] if !opts[:'transport_type'].nil?
      query_params[:'transport_zone_id'] = opts[:'transport_zone_id'] if !opts[:'transport_zone_id'].nil?
      query_params[:'uplink_teaming_policy_name'] = opts[:'uplink_teaming_policy_name'] if !opts[:'uplink_teaming_policy_name'].nil?
      query_params[:'vlan'] = opts[:'vlan'] if !opts[:'vlan'].nil?
      query_params[:'vni'] = opts[:'vni'] if !opts[:'vni'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalSwitchListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#list_logical_switches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List logical switches by realized state
    # Returns a list of logical switches states that have realized state as provided as query parameter. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Realized state of logical switches
    # @return [LogicalSwitchStateListResult]
    def list_logical_switches_by_state(opts = {})
      data, _status_code, _headers = list_logical_switches_by_state_with_http_info(opts)
      return data
    end

    # List logical switches by realized state
    # Returns a list of logical switches states that have realized state as provided as query parameter. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Realized state of logical switches
    # @return [Array<(LogicalSwitchStateListResult, Fixnum, Hash)>] LogicalSwitchStateListResult data, response status code and response headers
    def list_logical_switches_by_state_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.list_logical_switches_by_state ..."
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['PENDING', 'IN_PROGRESS', 'PARTIAL_SUCCESS', 'SUCCESS'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDING, IN_PROGRESS, PARTIAL_SUCCESS, SUCCESS'
      end
      # resource path
      local_var_path = "/logical-switches/state"

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalSwitchStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#list_logical_switches_by_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Switching Profiles
    # Returns information about the system-default and user-configured switching profiles. Each switching profile has a unique ID, a display name, and various other read-only and configurable properties. The default switching profiles are assigned automatically to each switch. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :switching_profile_type comma-separated list of switching profile types, e.g. ?switching_profile_type&#x3D;QosSwitchingProfile,PortMirroringSwitchingProfile
    # @return [SwitchingProfilesListResult]
    def list_switching_profiles(opts = {})
      data, _status_code, _headers = list_switching_profiles_with_http_info(opts)
      return data
    end

    # List Switching Profiles
    # Returns information about the system-default and user-configured switching profiles. Each switching profile has a unique ID, a display name, and various other read-only and configurable properties. The default switching profiles are assigned automatically to each switch. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :switching_profile_type comma-separated list of switching profile types, e.g. ?switching_profile_type&#x3D;QosSwitchingProfile,PortMirroringSwitchingProfile
    # @return [Array<(SwitchingProfilesListResult, Fixnum, Hash)>] SwitchingProfilesListResult data, response status code and response headers
    def list_switching_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.list_switching_profiles ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.list_switching_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LogicalSwitchingApi.list_switching_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/switching-profiles"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_system_owned'] = opts[:'include_system_owned'] if !opts[:'include_system_owned'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'switching_profile_type'] = opts[:'switching_profile_type'] if !opts[:'switching_profile_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SwitchingProfilesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#list_switching_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Logical Port
    # Modifies an existing logical switch port. Parameters that can be modified include attachment_type (LOGICALROUTER, VIF), admin_state (UP or DOWN), attachment id and switching_profile_ids. You cannot modify the logical_switch_id. In other words, you cannot move an existing port from one switch to another switch. 
    # @param lport_id 
    # @param logical_port 
    # @param [Hash] opts the optional parameters
    # @return [LogicalPort]
    def update_logical_port(lport_id, logical_port, opts = {})
      data, _status_code, _headers = update_logical_port_with_http_info(lport_id, logical_port, opts)
      return data
    end

    # Update a Logical Port
    # Modifies an existing logical switch port. Parameters that can be modified include attachment_type (LOGICALROUTER, VIF), admin_state (UP or DOWN), attachment id and switching_profile_ids. You cannot modify the logical_switch_id. In other words, you cannot move an existing port from one switch to another switch. 
    # @param lport_id 
    # @param logical_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalPort, Fixnum, Hash)>] LogicalPort data, response status code and response headers
    def update_logical_port_with_http_info(lport_id, logical_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.update_logical_port ..."
      end
      # verify the required parameter 'lport_id' is set
      if @api_client.config.client_side_validation && lport_id.nil?
        fail ArgumentError, "Missing the required parameter 'lport_id' when calling LogicalSwitchingApi.update_logical_port"
      end
      # verify the required parameter 'logical_port' is set
      if @api_client.config.client_side_validation && logical_port.nil?
        fail ArgumentError, "Missing the required parameter 'logical_port' when calling LogicalSwitchingApi.update_logical_port"
      end
      # resource path
      local_var_path = "/logical-ports/{lport-id}".sub('{' + 'lport-id' + '}', lport_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#update_logical_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Logical Switch
    # Modifies attributes of an existing logical switch. Modifiable attributes include admin_state, replication_mode, switching_profile_ids and VLAN spec. You cannot modify the original transport_zone_id. 
    # @param lswitch_id 
    # @param logical_switch 
    # @param [Hash] opts the optional parameters
    # @return [LogicalSwitch]
    def update_logical_switch(lswitch_id, logical_switch, opts = {})
      data, _status_code, _headers = update_logical_switch_with_http_info(lswitch_id, logical_switch, opts)
      return data
    end

    # Update a Logical Switch
    # Modifies attributes of an existing logical switch. Modifiable attributes include admin_state, replication_mode, switching_profile_ids and VLAN spec. You cannot modify the original transport_zone_id. 
    # @param lswitch_id 
    # @param logical_switch 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalSwitch, Fixnum, Hash)>] LogicalSwitch data, response status code and response headers
    def update_logical_switch_with_http_info(lswitch_id, logical_switch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.update_logical_switch ..."
      end
      # verify the required parameter 'lswitch_id' is set
      if @api_client.config.client_side_validation && lswitch_id.nil?
        fail ArgumentError, "Missing the required parameter 'lswitch_id' when calling LogicalSwitchingApi.update_logical_switch"
      end
      # verify the required parameter 'logical_switch' is set
      if @api_client.config.client_side_validation && logical_switch.nil?
        fail ArgumentError, "Missing the required parameter 'logical_switch' when calling LogicalSwitchingApi.update_logical_switch"
      end
      # resource path
      local_var_path = "/logical-switches/{lswitch-id}".sub('{' + 'lswitch-id' + '}', lswitch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_switch)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalSwitch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#update_logical_switch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Switching Profile
    # Updates the user-configurable parameters of a switching profile. Only the qos, port-mirroring, spoof-guard and port-security switching profiles can be modified. You cannot modify the ipfix or ip-discovery switching profiles. 
    # @param switching_profile_id 
    # @param base_switching_profile 
    # @param [Hash] opts the optional parameters
    # @return [BaseSwitchingProfile]
    def update_switching_profile(switching_profile_id, base_switching_profile, opts = {})
      data, _status_code, _headers = update_switching_profile_with_http_info(switching_profile_id, base_switching_profile, opts)
      return data
    end

    # Update a Switching Profile
    # Updates the user-configurable parameters of a switching profile. Only the qos, port-mirroring, spoof-guard and port-security switching profiles can be modified. You cannot modify the ipfix or ip-discovery switching profiles. 
    # @param switching_profile_id 
    # @param base_switching_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSwitchingProfile, Fixnum, Hash)>] BaseSwitchingProfile data, response status code and response headers
    def update_switching_profile_with_http_info(switching_profile_id, base_switching_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogicalSwitchingApi.update_switching_profile ..."
      end
      # verify the required parameter 'switching_profile_id' is set
      if @api_client.config.client_side_validation && switching_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'switching_profile_id' when calling LogicalSwitchingApi.update_switching_profile"
      end
      # verify the required parameter 'base_switching_profile' is set
      if @api_client.config.client_side_validation && base_switching_profile.nil?
        fail ArgumentError, "Missing the required parameter 'base_switching_profile' when calling LogicalSwitchingApi.update_switching_profile"
      end
      # resource path
      local_var_path = "/switching-profiles/{switching-profile-id}".sub('{' + 'switching-profile-id' + '}', switching_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(base_switching_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseSwitchingProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogicalSwitchingApi#update_switching_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
