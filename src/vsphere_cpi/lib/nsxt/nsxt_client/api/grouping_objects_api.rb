=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.3.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module NSXT
  class GroupingObjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add a MAC address to a MACSet
    # Add an individual MAC address to a MACSet 
    # @param mac_set_id MAC Set Id
    # @param mac_address_element 
    # @param [Hash] opts the optional parameters
    # @return [MACAddressElement]
    def add_mac_address(mac_set_id, mac_address_element, opts = {})
      data, _status_code, _headers = add_mac_address_with_http_info(mac_set_id, mac_address_element, opts)
      return data
    end

    # Add a MAC address to a MACSet
    # Add an individual MAC address to a MACSet 
    # @param mac_set_id MAC Set Id
    # @param mac_address_element 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MACAddressElement, Fixnum, Hash)>] MACAddressElement data, response status code and response headers
    def add_mac_address_with_http_info(mac_set_id, mac_address_element, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.add_mac_address ..."
      end
      # verify the required parameter 'mac_set_id' is set
      if @api_client.config.client_side_validation && mac_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'mac_set_id' when calling GroupingObjectsApi.add_mac_address"
      end
      # verify the required parameter 'mac_address_element' is set
      if @api_client.config.client_side_validation && mac_address_element.nil?
        fail ArgumentError, "Missing the required parameter 'mac_address_element' when calling GroupingObjectsApi.add_mac_address"
      end
      # resource path
      local_var_path = "/mac-sets/{mac-set-id}/members".sub('{' + 'mac-set-id' + '}', mac_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mac_address_element)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MACAddressElement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#add_mac_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add NSGroup expression
    # Add/remove the expressions passed in the request body to/from the NSGroup 
    # @param ns_group_id NSGroup Id
    # @param ns_group_expression_list 
    # @param action Specifies addition or removal action
    # @param [Hash] opts the optional parameters
    # @return [NSGroup]
    def add_or_remove_ns_group_expression(ns_group_id, ns_group_expression_list, action, opts = {})
      data, _status_code, _headers = add_or_remove_ns_group_expression_with_http_info(ns_group_id, ns_group_expression_list, action, opts)
      return data
    end

    # Add NSGroup expression
    # Add/remove the expressions passed in the request body to/from the NSGroup 
    # @param ns_group_id NSGroup Id
    # @param ns_group_expression_list 
    # @param action Specifies addition or removal action
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSGroup, Fixnum, Hash)>] NSGroup data, response status code and response headers
    def add_or_remove_ns_group_expression_with_http_info(ns_group_id, ns_group_expression_list, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.add_or_remove_ns_group_expression ..."
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling GroupingObjectsApi.add_or_remove_ns_group_expression"
      end
      # verify the required parameter 'ns_group_expression_list' is set
      if @api_client.config.client_side_validation && ns_group_expression_list.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_expression_list' when calling GroupingObjectsApi.add_or_remove_ns_group_expression"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling GroupingObjectsApi.add_or_remove_ns_group_expression"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ADD_MEMBERS', 'REMOVE_MEMBERS'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of ADD_MEMBERS, REMOVE_MEMBERS"
      end
      # resource path
      local_var_path = "/ns-groups/{ns-group-id}".sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ns_group_expression_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#add_or_remove_ns_group_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create IPSet
    # Creates a new IPSet that can group either IPv4 or IPv6 individual ip addresses, ranges or subnets. 
    # @param ip_set 
    # @param [Hash] opts the optional parameters
    # @return [IPSet]
    def create_ip_set(ip_set, opts = {})
      data, _status_code, _headers = create_ip_set_with_http_info(ip_set, opts)
      return data
    end

    # Create IPSet
    # Creates a new IPSet that can group either IPv4 or IPv6 individual ip addresses, ranges or subnets. 
    # @param ip_set 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSet, Fixnum, Hash)>] IPSet data, response status code and response headers
    def create_ip_set_with_http_info(ip_set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.create_ip_set ..."
      end
      # verify the required parameter 'ip_set' is set
      if @api_client.config.client_side_validation && ip_set.nil?
        fail ArgumentError, "Missing the required parameter 'ip_set' when calling GroupingObjectsApi.create_ip_set"
      end
      # resource path
      local_var_path = "/ip-sets"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_set)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#create_ip_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create MACSet
    # Creates a new MACSet that can group individual MAC addresses. 
    # @param mac_set 
    # @param [Hash] opts the optional parameters
    # @return [MACSet]
    def create_mac_set(mac_set, opts = {})
      data, _status_code, _headers = create_mac_set_with_http_info(mac_set, opts)
      return data
    end

    # Create MACSet
    # Creates a new MACSet that can group individual MAC addresses. 
    # @param mac_set 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MACSet, Fixnum, Hash)>] MACSet data, response status code and response headers
    def create_mac_set_with_http_info(mac_set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.create_mac_set ..."
      end
      # verify the required parameter 'mac_set' is set
      if @api_client.config.client_side_validation && mac_set.nil?
        fail ArgumentError, "Missing the required parameter 'mac_set' when calling GroupingObjectsApi.create_mac_set"
      end
      # resource path
      local_var_path = "/mac-sets"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mac_set)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MACSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#create_mac_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create NSGroup
    # Creates a new NSGroup that can group NSX resources - VIFs, Lports and LSwitches as well as the grouping objects - IPSet, MACSet and other NSGroups 
    # @param ns_group 
    # @param [Hash] opts the optional parameters
    # @return [NSGroup]
    def create_ns_group(ns_group, opts = {})
      data, _status_code, _headers = create_ns_group_with_http_info(ns_group, opts)
      return data
    end

    # Create NSGroup
    # Creates a new NSGroup that can group NSX resources - VIFs, Lports and LSwitches as well as the grouping objects - IPSet, MACSet and other NSGroups 
    # @param ns_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSGroup, Fixnum, Hash)>] NSGroup data, response status code and response headers
    def create_ns_group_with_http_info(ns_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.create_ns_group ..."
      end
      # verify the required parameter 'ns_group' is set
      if @api_client.config.client_side_validation && ns_group.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group' when calling GroupingObjectsApi.create_ns_group"
      end
      # resource path
      local_var_path = "/ns-groups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ns_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#create_ns_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create NSService
    # Creates a new NSService which allows users to specify characteristics to use for matching network traffic. 
    # @param ns_service 
    # @param [Hash] opts the optional parameters
    # @return [NSService]
    def create_ns_service(ns_service, opts = {})
      data, _status_code, _headers = create_ns_service_with_http_info(ns_service, opts)
      return data
    end

    # Create NSService
    # Creates a new NSService which allows users to specify characteristics to use for matching network traffic. 
    # @param ns_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSService, Fixnum, Hash)>] NSService data, response status code and response headers
    def create_ns_service_with_http_info(ns_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.create_ns_service ..."
      end
      # verify the required parameter 'ns_service' is set
      if @api_client.config.client_side_validation && ns_service.nil?
        fail ArgumentError, "Missing the required parameter 'ns_service' when calling GroupingObjectsApi.create_ns_service"
      end
      # resource path
      local_var_path = "/ns-services"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ns_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#create_ns_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create NSServiceGroup
    # Creates a new NSServiceGroup which can contain NSServices. A given NSServiceGroup can contain either only ether type of NSServices or only non-ether type of NSServices, i.e. an NSServiceGroup cannot contain a mix of both ether and non-ether types of NSServices. 
    # @param ns_service_group 
    # @param [Hash] opts the optional parameters
    # @return [NSServiceGroup]
    def create_ns_service_group(ns_service_group, opts = {})
      data, _status_code, _headers = create_ns_service_group_with_http_info(ns_service_group, opts)
      return data
    end

    # Create NSServiceGroup
    # Creates a new NSServiceGroup which can contain NSServices. A given NSServiceGroup can contain either only ether type of NSServices or only non-ether type of NSServices, i.e. an NSServiceGroup cannot contain a mix of both ether and non-ether types of NSServices. 
    # @param ns_service_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSServiceGroup, Fixnum, Hash)>] NSServiceGroup data, response status code and response headers
    def create_ns_service_group_with_http_info(ns_service_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.create_ns_service_group ..."
      end
      # verify the required parameter 'ns_service_group' is set
      if @api_client.config.client_side_validation && ns_service_group.nil?
        fail ArgumentError, "Missing the required parameter 'ns_service_group' when calling GroupingObjectsApi.create_ns_service_group"
      end
      # resource path
      local_var_path = "/ns-service-groups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ns_service_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSServiceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#create_ns_service_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete IPSet
    # Deletes the specified IPSet.  By default, if the IPSet is added to an NSGroup, it won't be deleted. In such situations, pass \"force=true\" as query param to force delete the IPSet. 
    # @param ip_set_id IPSet Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ip_set(ip_set_id, opts = {})
      delete_ip_set_with_http_info(ip_set_id, opts)
      return nil
    end

    # Delete IPSet
    # Deletes the specified IPSet.  By default, if the IPSet is added to an NSGroup, it won&#39;t be deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as query param to force delete the IPSet. 
    # @param ip_set_id IPSet Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_set_with_http_info(ip_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.delete_ip_set ..."
      end
      # verify the required parameter 'ip_set_id' is set
      if @api_client.config.client_side_validation && ip_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_set_id' when calling GroupingObjectsApi.delete_ip_set"
      end
      # resource path
      local_var_path = "/ip-sets/{ip-set-id}".sub('{' + 'ip-set-id' + '}', ip_set_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#delete_ip_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete MACSet
    # Deletes the specified MACSet. By default, if the MACSet is added to an NSGroup, it won't be deleted. In such situations, pass \"force=true\" as query param to force delete the MACSet. 
    # @param mac_set_id MACSet Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_mac_set(mac_set_id, opts = {})
      delete_mac_set_with_http_info(mac_set_id, opts)
      return nil
    end

    # Delete MACSet
    # Deletes the specified MACSet. By default, if the MACSet is added to an NSGroup, it won&#39;t be deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as query param to force delete the MACSet. 
    # @param mac_set_id MACSet Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_mac_set_with_http_info(mac_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.delete_mac_set ..."
      end
      # verify the required parameter 'mac_set_id' is set
      if @api_client.config.client_side_validation && mac_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'mac_set_id' when calling GroupingObjectsApi.delete_mac_set"
      end
      # resource path
      local_var_path = "/mac-sets/{mac-set-id}".sub('{' + 'mac-set-id' + '}', mac_set_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#delete_mac_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete NSGroup
    # Deletes the specified NSGroup. By default, if the NSGroup is added to another NSGroup, it won't be deleted. In such situations, pass \"force=true\" as query param to force delete the NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ns_group(ns_group_id, opts = {})
      delete_ns_group_with_http_info(ns_group_id, opts)
      return nil
    end

    # Delete NSGroup
    # Deletes the specified NSGroup. By default, if the NSGroup is added to another NSGroup, it won&#39;t be deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as query param to force delete the NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ns_group_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.delete_ns_group ..."
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling GroupingObjectsApi.delete_ns_group"
      end
      # resource path
      local_var_path = "/ns-groups/{ns-group-id}".sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#delete_ns_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete NSService
    # Deletes the specified NSService. By default, if the NSService is being referred in an NSServiceGroup, it can't be deleted. In such situations, pass \"force=true\" as a parameter to force delete the NSService. System defined NSServices can't be deleted using \"force\" flag. 
    # @param ns_service_id NSService Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ns_service(ns_service_id, opts = {})
      delete_ns_service_with_http_info(ns_service_id, opts)
      return nil
    end

    # Delete NSService
    # Deletes the specified NSService. By default, if the NSService is being referred in an NSServiceGroup, it can&#39;t be deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as a parameter to force delete the NSService. System defined NSServices can&#39;t be deleted using \&quot;force\&quot; flag. 
    # @param ns_service_id NSService Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ns_service_with_http_info(ns_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.delete_ns_service ..."
      end
      # verify the required parameter 'ns_service_id' is set
      if @api_client.config.client_side_validation && ns_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_service_id' when calling GroupingObjectsApi.delete_ns_service"
      end
      # resource path
      local_var_path = "/ns-services/{ns-service-id}".sub('{' + 'ns-service-id' + '}', ns_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#delete_ns_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete NSServiceGroup
    # Deletes the specified NSServiceGroup. By default, if the NSServiceGroup is consumed in a Firewall rule, it won't get deleted. In such situations, pass \"force=true\" as query param to force delete the NSServiceGroup. 
    # @param ns_service_group_id NSServiceGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ns_service_group(ns_service_group_id, opts = {})
      delete_ns_service_group_with_http_info(ns_service_group_id, opts)
      return nil
    end

    # Delete NSServiceGroup
    # Deletes the specified NSServiceGroup. By default, if the NSServiceGroup is consumed in a Firewall rule, it won&#39;t get deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as query param to force delete the NSServiceGroup. 
    # @param ns_service_group_id NSServiceGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ns_service_group_with_http_info(ns_service_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.delete_ns_service_group ..."
      end
      # verify the required parameter 'ns_service_group_id' is set
      if @api_client.config.client_side_validation && ns_service_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_service_group_id' when calling GroupingObjectsApi.delete_ns_service_group"
      end
      # resource path
      local_var_path = "/ns-service-groups/{ns-service-group-id}".sub('{' + 'ns-service-group-id' + '}', ns_service_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#delete_ns_service_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Effective IPAddress translated from the NSGroup
    # Returns effective ip address members of the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveIPAddressMemberListResult]
    def get_effective_ip_address_members(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_ip_address_members_with_http_info(ns_group_id, opts)
      return data
    end

    # Get Effective IPAddress translated from the NSGroup
    # Returns effective ip address members of the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveIPAddressMemberListResult, Fixnum, Hash)>] EffectiveIPAddressMemberListResult data, response status code and response headers
    def get_effective_ip_address_members_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.get_effective_ip_address_members ..."
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling GroupingObjectsApi.get_effective_ip_address_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_effective_ip_address_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_effective_ip_address_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/ns-groups/{ns-group-id}/effective-ip-address-members".sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveIPAddressMemberListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#get_effective_ip_address_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Effective Logical Ports translated from the NSgroup
    # Returns effective logical port members of the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveMemberResourceListResult]
    def get_effective_logical_port_members(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_logical_port_members_with_http_info(ns_group_id, opts)
      return data
    end

    # Get Effective Logical Ports translated from the NSgroup
    # Returns effective logical port members of the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveMemberResourceListResult, Fixnum, Hash)>] EffectiveMemberResourceListResult data, response status code and response headers
    def get_effective_logical_port_members_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.get_effective_logical_port_members ..."
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling GroupingObjectsApi.get_effective_logical_port_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_effective_logical_port_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_effective_logical_port_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/ns-groups/{ns-group-id}/effective-logical-port-members".sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveMemberResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#get_effective_logical_port_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Effective switch members translated from the NSGroup
    # Returns effective logical switch members of the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveMemberResourceListResult]
    def get_effective_logical_switch_members(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_logical_switch_members_with_http_info(ns_group_id, opts)
      return data
    end

    # Get Effective switch members translated from the NSGroup
    # Returns effective logical switch members of the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveMemberResourceListResult, Fixnum, Hash)>] EffectiveMemberResourceListResult data, response status code and response headers
    def get_effective_logical_switch_members_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.get_effective_logical_switch_members ..."
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling GroupingObjectsApi.get_effective_logical_switch_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_effective_logical_switch_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_effective_logical_switch_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/ns-groups/{ns-group-id}/effective-logical-switch-members".sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveMemberResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#get_effective_logical_switch_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Effective Virtual Machine members of the specified NSGroup.
    # Returns effective virtual machine members of the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualMachineListResult]
    def get_effective_virtual_machine_members(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_virtual_machine_members_with_http_info(ns_group_id, opts)
      return data
    end

    # Get Effective Virtual Machine members of the specified NSGroup.
    # Returns effective virtual machine members of the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualMachineListResult, Fixnum, Hash)>] VirtualMachineListResult data, response status code and response headers
    def get_effective_virtual_machine_members_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.get_effective_virtual_machine_members ..."
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling GroupingObjectsApi.get_effective_virtual_machine_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_effective_virtual_machine_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_effective_virtual_machine_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/ns-groups/{ns-group-id}/effective-virtual-machine-members".sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualMachineListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#get_effective_virtual_machine_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all MACAddresses in a MACSet
    # List all MAC addresses in a MACSet 
    # @param mac_set_id MAC Set Id
    # @param [Hash] opts the optional parameters
    # @return [MACAddressElementListResult]
    def get_mac_addresses(mac_set_id, opts = {})
      data, _status_code, _headers = get_mac_addresses_with_http_info(mac_set_id, opts)
      return data
    end

    # Get all MACAddresses in a MACSet
    # List all MAC addresses in a MACSet 
    # @param mac_set_id MAC Set Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(MACAddressElementListResult, Fixnum, Hash)>] MACAddressElementListResult data, response status code and response headers
    def get_mac_addresses_with_http_info(mac_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.get_mac_addresses ..."
      end
      # verify the required parameter 'mac_set_id' is set
      if @api_client.config.client_side_validation && mac_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'mac_set_id' when calling GroupingObjectsApi.get_mac_addresses"
      end
      # resource path
      local_var_path = "/mac-sets/{mac-set-id}/members".sub('{' + 'mac-set-id' + '}', mac_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MACAddressElementListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#get_mac_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get member types from NSGroup
    # Returns member types for a specified NSGroup including child NSGroups. This considers static members and members added via membership criteria only 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveMemberTypeListResult]
    def get_member_types(ns_group_id, opts = {})
      data, _status_code, _headers = get_member_types_with_http_info(ns_group_id, opts)
      return data
    end

    # Get member types from NSGroup
    # Returns member types for a specified NSGroup including child NSGroups. This considers static members and members added via membership criteria only 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveMemberTypeListResult, Fixnum, Hash)>] EffectiveMemberTypeListResult data, response status code and response headers
    def get_member_types_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.get_member_types ..."
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling GroupingObjectsApi.get_member_types"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_member_types, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_member_types, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/ns-groups/{ns-group-id}/member-types".sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveMemberTypeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#get_member_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get services to which the given nsgroup belongs to 
    # Returns information about services that are associated with the given NSGroup. The service name is passed by service_type parameter 
    # @param nsgroup_id 
    # @param service_type 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :fetch_parentgroup_associations Fetch complete list of associated resources considering nesting  (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceAssociationListResult]
    def get_service_associations(nsgroup_id, service_type, opts = {})
      data, _status_code, _headers = get_service_associations_with_http_info(nsgroup_id, service_type, opts)
      return data
    end

    # Get services to which the given nsgroup belongs to 
    # Returns information about services that are associated with the given NSGroup. The service name is passed by service_type parameter 
    # @param nsgroup_id 
    # @param service_type 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :fetch_parentgroup_associations Fetch complete list of associated resources considering nesting 
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceAssociationListResult, Fixnum, Hash)>] ServiceAssociationListResult data, response status code and response headers
    def get_service_associations_with_http_info(nsgroup_id, service_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.get_service_associations ..."
      end
      # verify the required parameter 'nsgroup_id' is set
      if @api_client.config.client_side_validation && nsgroup_id.nil?
        fail ArgumentError, "Missing the required parameter 'nsgroup_id' when calling GroupingObjectsApi.get_service_associations"
      end
      # verify the required parameter 'service_type' is set
      if @api_client.config.client_side_validation && service_type.nil?
        fail ArgumentError, "Missing the required parameter 'service_type' when calling GroupingObjectsApi.get_service_associations"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['firewall', 'ipfix'].include?(service_type)
        fail ArgumentError, "invalid value for 'service_type', must be one of firewall, ipfix"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_service_associations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_service_associations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/ns-groups/{nsgroup-id}/service-associations".sub('{' + 'nsgroup-id' + '}', nsgroup_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'service_type'] = service_type
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'fetch_parentgroup_associations'] = opts[:'fetch_parentgroup_associations'] if !opts[:'fetch_parentgroup_associations'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceAssociationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#get_service_associations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of all the virtual machines that are not a part of any existing NSGroup.
    # Get the list of all the virtual machines that are not a part of any existing NSGroup. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :display_name Display Name of the virtual machine
    # @option opts [String] :external_id External id of the virtual machine
    # @option opts [String] :host_id Id of the host where this vif is located
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [UnassociatedVMListResult]
    def get_unassociated_virtual_machines(opts = {})
      data, _status_code, _headers = get_unassociated_virtual_machines_with_http_info(opts)
      return data
    end

    # Get the list of all the virtual machines that are not a part of any existing NSGroup.
    # Get the list of all the virtual machines that are not a part of any existing NSGroup. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :display_name Display Name of the virtual machine
    # @option opts [String] :external_id External id of the virtual machine
    # @option opts [String] :host_id Id of the host where this vif is located
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(UnassociatedVMListResult, Fixnum, Hash)>] UnassociatedVMListResult data, response status code and response headers
    def get_unassociated_virtual_machines_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.get_unassociated_virtual_machines ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_unassociated_virtual_machines, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.get_unassociated_virtual_machines, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/ns-groups/unassociated-virtual-machines"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'host_id'] = opts[:'host_id'] if !opts[:'host_id'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnassociatedVMListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#get_unassociated_virtual_machines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List IPSets
    # Returns paginated list of IPSets 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSetListResult]
    def list_ip_sets(opts = {})
      data, _status_code, _headers = list_ip_sets_with_http_info(opts)
      return data
    end

    # List IPSets
    # Returns paginated list of IPSets 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSetListResult, Fixnum, Hash)>] IPSetListResult data, response status code and response headers
    def list_ip_sets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.list_ip_sets ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.list_ip_sets, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.list_ip_sets, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/ip-sets"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSetListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#list_ip_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List MACSets
    # Returns paginated list of MACSets 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MACSetListResult]
    def list_mac_sets(opts = {})
      data, _status_code, _headers = list_mac_sets_with_http_info(opts)
      return data
    end

    # List MACSets
    # Returns paginated list of MACSets 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MACSetListResult, Fixnum, Hash)>] MACSetListResult data, response status code and response headers
    def list_mac_sets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.list_mac_sets ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.list_mac_sets, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.list_mac_sets, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/mac-sets"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MACSetListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#list_mac_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List NSGroups
    # List the NSGroups in a paginated format. The page size is restricted to 50 NSGroups so that the size of the response remains small even in the worst case. Optionally, specify valid member types as request parameter to filter NSGroups. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Specify member types to filter corresponding NSGroups 
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :populate_references Populate metadata of resource referenced by NSGroupExpressions  (default to false)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [NSGroupListResult]
    def list_ns_groups(opts = {})
      data, _status_code, _headers = list_ns_groups_with_http_info(opts)
      return data
    end

    # List NSGroups
    # List the NSGroups in a paginated format. The page size is restricted to 50 NSGroups so that the size of the response remains small even in the worst case. Optionally, specify valid member types as request parameter to filter NSGroups. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Specify member types to filter corresponding NSGroups 
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :populate_references Populate metadata of resource referenced by NSGroupExpressions 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(NSGroupListResult, Fixnum, Hash)>] NSGroupListResult data, response status code and response headers
    def list_ns_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.list_ns_groups ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.list_ns_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.list_ns_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/ns-groups"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'member_types'] = opts[:'member_types'] if !opts[:'member_types'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'populate_references'] = opts[:'populate_references'] if !opts[:'populate_references'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#list_ns_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all NSServiceGroups
    # Returns paginated list of NSServiceGroups 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default NSServiceGroups
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [NSServiceGroupListResult]
    def list_ns_service_groups(opts = {})
      data, _status_code, _headers = list_ns_service_groups_with_http_info(opts)
      return data
    end

    # List all NSServiceGroups
    # Returns paginated list of NSServiceGroups 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default NSServiceGroups
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(NSServiceGroupListResult, Fixnum, Hash)>] NSServiceGroupListResult data, response status code and response headers
    def list_ns_service_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.list_ns_service_groups ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.list_ns_service_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.list_ns_service_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/ns-service-groups"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'default_service'] = opts[:'default_service'] if !opts[:'default_service'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSServiceGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#list_ns_service_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all NSServices
    # Returns paginated list of NSServices 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default NSServices
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [NSServiceListResult]
    def list_ns_services(opts = {})
      data, _status_code, _headers = list_ns_services_with_http_info(opts)
      return data
    end

    # List all NSServices
    # Returns paginated list of NSServices 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default NSServices
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(NSServiceListResult, Fixnum, Hash)>] NSServiceListResult data, response status code and response headers
    def list_ns_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.list_ns_services ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.list_ns_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupingObjectsApi.list_ns_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/ns-services"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'default_service'] = opts[:'default_service'] if !opts[:'default_service'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#list_ns_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read IPSet
    # Returns information about the specified IPSet 
    # @param ip_set_id IPSet Id
    # @param [Hash] opts the optional parameters
    # @return [IPSet]
    def read_ip_set(ip_set_id, opts = {})
      data, _status_code, _headers = read_ip_set_with_http_info(ip_set_id, opts)
      return data
    end

    # Read IPSet
    # Returns information about the specified IPSet 
    # @param ip_set_id IPSet Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSet, Fixnum, Hash)>] IPSet data, response status code and response headers
    def read_ip_set_with_http_info(ip_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.read_ip_set ..."
      end
      # verify the required parameter 'ip_set_id' is set
      if @api_client.config.client_side_validation && ip_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_set_id' when calling GroupingObjectsApi.read_ip_set"
      end
      # resource path
      local_var_path = "/ip-sets/{ip-set-id}".sub('{' + 'ip-set-id' + '}', ip_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#read_ip_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read MACSet
    # Returns information about the specified MACSet 
    # @param mac_set_id MACSet Id
    # @param [Hash] opts the optional parameters
    # @return [MACSet]
    def read_mac_set(mac_set_id, opts = {})
      data, _status_code, _headers = read_mac_set_with_http_info(mac_set_id, opts)
      return data
    end

    # Read MACSet
    # Returns information about the specified MACSet 
    # @param mac_set_id MACSet Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(MACSet, Fixnum, Hash)>] MACSet data, response status code and response headers
    def read_mac_set_with_http_info(mac_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.read_mac_set ..."
      end
      # verify the required parameter 'mac_set_id' is set
      if @api_client.config.client_side_validation && mac_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'mac_set_id' when calling GroupingObjectsApi.read_mac_set"
      end
      # resource path
      local_var_path = "/mac-sets/{mac-set-id}".sub('{' + 'mac-set-id' + '}', mac_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MACSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#read_mac_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read NSGroup
    # Returns information about the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :populate_references Populate metadata of resource referenced by NSGroupExpressions  (default to false)
    # @return [NSGroup]
    def read_ns_group(ns_group_id, opts = {})
      data, _status_code, _headers = read_ns_group_with_http_info(ns_group_id, opts)
      return data
    end

    # Read NSGroup
    # Returns information about the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :populate_references Populate metadata of resource referenced by NSGroupExpressions 
    # @return [Array<(NSGroup, Fixnum, Hash)>] NSGroup data, response status code and response headers
    def read_ns_group_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.read_ns_group ..."
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling GroupingObjectsApi.read_ns_group"
      end
      # resource path
      local_var_path = "/ns-groups/{ns-group-id}".sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'populate_references'] = opts[:'populate_references'] if !opts[:'populate_references'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#read_ns_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read NSService
    # Returns information about the specified NSService 
    # @param ns_service_id NSService Id
    # @param [Hash] opts the optional parameters
    # @return [NSService]
    def read_ns_service(ns_service_id, opts = {})
      data, _status_code, _headers = read_ns_service_with_http_info(ns_service_id, opts)
      return data
    end

    # Read NSService
    # Returns information about the specified NSService 
    # @param ns_service_id NSService Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSService, Fixnum, Hash)>] NSService data, response status code and response headers
    def read_ns_service_with_http_info(ns_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.read_ns_service ..."
      end
      # verify the required parameter 'ns_service_id' is set
      if @api_client.config.client_side_validation && ns_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_service_id' when calling GroupingObjectsApi.read_ns_service"
      end
      # resource path
      local_var_path = "/ns-services/{ns-service-id}".sub('{' + 'ns-service-id' + '}', ns_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#read_ns_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read NSServiceGroup
    # Returns information about the specified NSServiceGroup 
    # @param ns_service_group_id NSServiceGroup Id
    # @param [Hash] opts the optional parameters
    # @return [NSServiceGroup]
    def read_ns_service_group(ns_service_group_id, opts = {})
      data, _status_code, _headers = read_ns_service_group_with_http_info(ns_service_group_id, opts)
      return data
    end

    # Read NSServiceGroup
    # Returns information about the specified NSServiceGroup 
    # @param ns_service_group_id NSServiceGroup Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSServiceGroup, Fixnum, Hash)>] NSServiceGroup data, response status code and response headers
    def read_ns_service_group_with_http_info(ns_service_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.read_ns_service_group ..."
      end
      # verify the required parameter 'ns_service_group_id' is set
      if @api_client.config.client_side_validation && ns_service_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_service_group_id' when calling GroupingObjectsApi.read_ns_service_group"
      end
      # resource path
      local_var_path = "/ns-service-groups/{ns-service-group-id}".sub('{' + 'ns-service-group-id' + '}', ns_service_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSServiceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#read_ns_service_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a MAC address from given MACSet
    # Remove an individual MAC address from a MACSet 
    # @param mac_set_id MACSet Id
    # @param mac_address MAC address to be removed
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_mac_address(mac_set_id, mac_address, opts = {})
      remove_mac_address_with_http_info(mac_set_id, mac_address, opts)
      return nil
    end

    # Remove a MAC address from given MACSet
    # Remove an individual MAC address from a MACSet 
    # @param mac_set_id MACSet Id
    # @param mac_address MAC address to be removed
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_mac_address_with_http_info(mac_set_id, mac_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.remove_mac_address ..."
      end
      # verify the required parameter 'mac_set_id' is set
      if @api_client.config.client_side_validation && mac_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'mac_set_id' when calling GroupingObjectsApi.remove_mac_address"
      end
      # verify the required parameter 'mac_address' is set
      if @api_client.config.client_side_validation && mac_address.nil?
        fail ArgumentError, "Missing the required parameter 'mac_address' when calling GroupingObjectsApi.remove_mac_address"
      end
      # resource path
      local_var_path = "/mac-sets/{mac-set-id}/members/{mac-address}".sub('{' + 'mac-set-id' + '}', mac_set_id.to_s).sub('{' + 'mac-address' + '}', mac_address.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#remove_mac_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update IPSet
    # Updates the specified IPSet. Modifiable parameters include description, display_name and ip_addresses. 
    # @param ip_set_id IPSet Id
    # @param ip_set 
    # @param [Hash] opts the optional parameters
    # @return [IPSet]
    def update_ip_set(ip_set_id, ip_set, opts = {})
      data, _status_code, _headers = update_ip_set_with_http_info(ip_set_id, ip_set, opts)
      return data
    end

    # Update IPSet
    # Updates the specified IPSet. Modifiable parameters include description, display_name and ip_addresses. 
    # @param ip_set_id IPSet Id
    # @param ip_set 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSet, Fixnum, Hash)>] IPSet data, response status code and response headers
    def update_ip_set_with_http_info(ip_set_id, ip_set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.update_ip_set ..."
      end
      # verify the required parameter 'ip_set_id' is set
      if @api_client.config.client_side_validation && ip_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_set_id' when calling GroupingObjectsApi.update_ip_set"
      end
      # verify the required parameter 'ip_set' is set
      if @api_client.config.client_side_validation && ip_set.nil?
        fail ArgumentError, "Missing the required parameter 'ip_set' when calling GroupingObjectsApi.update_ip_set"
      end
      # resource path
      local_var_path = "/ip-sets/{ip-set-id}".sub('{' + 'ip-set-id' + '}', ip_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_set)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#update_ip_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update MACSet
    # Updates the specified MACSet. Modifiable parameters include the description, display_name and mac_addresses. 
    # @param mac_set_id MACSet Id
    # @param mac_set 
    # @param [Hash] opts the optional parameters
    # @return [MACSet]
    def update_mac_set(mac_set_id, mac_set, opts = {})
      data, _status_code, _headers = update_mac_set_with_http_info(mac_set_id, mac_set, opts)
      return data
    end

    # Update MACSet
    # Updates the specified MACSet. Modifiable parameters include the description, display_name and mac_addresses. 
    # @param mac_set_id MACSet Id
    # @param mac_set 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MACSet, Fixnum, Hash)>] MACSet data, response status code and response headers
    def update_mac_set_with_http_info(mac_set_id, mac_set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.update_mac_set ..."
      end
      # verify the required parameter 'mac_set_id' is set
      if @api_client.config.client_side_validation && mac_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'mac_set_id' when calling GroupingObjectsApi.update_mac_set"
      end
      # verify the required parameter 'mac_set' is set
      if @api_client.config.client_side_validation && mac_set.nil?
        fail ArgumentError, "Missing the required parameter 'mac_set' when calling GroupingObjectsApi.update_mac_set"
      end
      # resource path
      local_var_path = "/mac-sets/{mac-set-id}".sub('{' + 'mac-set-id' + '}', mac_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mac_set)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MACSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#update_mac_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update NSGroup
    # Updates the specified NSGroup. Modifiable parameters include the description, display_name and members. 
    # @param ns_group_id NSGroup Id
    # @param ns_group 
    # @param [Hash] opts the optional parameters
    # @return [NSGroup]
    def update_ns_group(ns_group_id, ns_group, opts = {})
      data, _status_code, _headers = update_ns_group_with_http_info(ns_group_id, ns_group, opts)
      return data
    end

    # Update NSGroup
    # Updates the specified NSGroup. Modifiable parameters include the description, display_name and members. 
    # @param ns_group_id NSGroup Id
    # @param ns_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSGroup, Fixnum, Hash)>] NSGroup data, response status code and response headers
    def update_ns_group_with_http_info(ns_group_id, ns_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.update_ns_group ..."
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling GroupingObjectsApi.update_ns_group"
      end
      # verify the required parameter 'ns_group' is set
      if @api_client.config.client_side_validation && ns_group.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group' when calling GroupingObjectsApi.update_ns_group"
      end
      # resource path
      local_var_path = "/ns-groups/{ns-group-id}".sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ns_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#update_ns_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update NSService
    # Updates the specified NSService. Modifiable parameters include the description, display_name and the NSService element. The system defined NSServices can't be modified 
    # @param ns_service_id NSService Id
    # @param ns_service 
    # @param [Hash] opts the optional parameters
    # @return [NSService]
    def update_ns_service(ns_service_id, ns_service, opts = {})
      data, _status_code, _headers = update_ns_service_with_http_info(ns_service_id, ns_service, opts)
      return data
    end

    # Update NSService
    # Updates the specified NSService. Modifiable parameters include the description, display_name and the NSService element. The system defined NSServices can&#39;t be modified 
    # @param ns_service_id NSService Id
    # @param ns_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSService, Fixnum, Hash)>] NSService data, response status code and response headers
    def update_ns_service_with_http_info(ns_service_id, ns_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.update_ns_service ..."
      end
      # verify the required parameter 'ns_service_id' is set
      if @api_client.config.client_side_validation && ns_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_service_id' when calling GroupingObjectsApi.update_ns_service"
      end
      # verify the required parameter 'ns_service' is set
      if @api_client.config.client_side_validation && ns_service.nil?
        fail ArgumentError, "Missing the required parameter 'ns_service' when calling GroupingObjectsApi.update_ns_service"
      end
      # resource path
      local_var_path = "/ns-services/{ns-service-id}".sub('{' + 'ns-service-id' + '}', ns_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ns_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#update_ns_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update NSServiceGroup
    # Updates the specified NSService. Modifiable parameters include the description, display_name and members. 
    # @param ns_service_group_id NSServiceGroup Id
    # @param ns_service_group 
    # @param [Hash] opts the optional parameters
    # @return [NSServiceGroup]
    def update_ns_service_group(ns_service_group_id, ns_service_group, opts = {})
      data, _status_code, _headers = update_ns_service_group_with_http_info(ns_service_group_id, ns_service_group, opts)
      return data
    end

    # Update NSServiceGroup
    # Updates the specified NSService. Modifiable parameters include the description, display_name and members. 
    # @param ns_service_group_id NSServiceGroup Id
    # @param ns_service_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSServiceGroup, Fixnum, Hash)>] NSServiceGroup data, response status code and response headers
    def update_ns_service_group_with_http_info(ns_service_group_id, ns_service_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupingObjectsApi.update_ns_service_group ..."
      end
      # verify the required parameter 'ns_service_group_id' is set
      if @api_client.config.client_side_validation && ns_service_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_service_group_id' when calling GroupingObjectsApi.update_ns_service_group"
      end
      # verify the required parameter 'ns_service_group' is set
      if @api_client.config.client_side_validation && ns_service_group.nil?
        fail ArgumentError, "Missing the required parameter 'ns_service_group' when calling GroupingObjectsApi.update_ns_service_group"
      end
      # resource path
      local_var_path = "/ns-service-groups/{ns-service-group-id}".sub('{' + 'ns-service-group-id' + '}', ns_service_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ns_service_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSServiceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupingObjectsApi#update_ns_service_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
