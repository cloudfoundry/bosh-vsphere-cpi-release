=begin
#NSX API

#VMware NSX REST API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module NSXT

  class TunnelProperties
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    attr_accessor :_schema

    # Status of tunnel
    attr_accessor :status

    # Corresponds to the interface where local_ip_address is routed.
    attr_accessor :egress_interface

    # Represents the display name of the remote transport node at the other end of the tunnel.
    attr_accessor :remote_node_display_name

    # UUID of the remote transport node
    attr_accessor :remote_node_id

    # Tunnel encap
    attr_accessor :encap

    # Detailed information about BFD configured on interface
    attr_accessor :bfd

    # Name of tunnel
    attr_accessor :name

    # Local IP address of tunnel
    attr_accessor :local_ip

    # Time at which the Tunnel status has been fetched last time.
    attr_accessor :last_updated_time

    # Remote IP address of tunnel
    attr_accessor :remote_ip

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'status' => :'status',
        :'egress_interface' => :'egress_interface',
        :'remote_node_display_name' => :'remote_node_display_name',
        :'remote_node_id' => :'remote_node_id',
        :'encap' => :'encap',
        :'bfd' => :'bfd',
        :'name' => :'name',
        :'local_ip' => :'local_ip',
        :'last_updated_time' => :'last_updated_time',
        :'remote_ip' => :'remote_ip'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'status' => :'String',
        :'egress_interface' => :'String',
        :'remote_node_display_name' => :'String',
        :'remote_node_id' => :'String',
        :'encap' => :'String',
        :'bfd' => :'BFDProperties',
        :'name' => :'String',
        :'local_ip' => :'String',
        :'last_updated_time' => :'Integer',
        :'remote_ip' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'egress_interface')
        self.egress_interface = attributes[:'egress_interface']
      end

      if attributes.has_key?(:'remote_node_display_name')
        self.remote_node_display_name = attributes[:'remote_node_display_name']
      end

      if attributes.has_key?(:'remote_node_id')
        self.remote_node_id = attributes[:'remote_node_id']
      end

      if attributes.has_key?(:'encap')
        self.encap = attributes[:'encap']
      end

      if attributes.has_key?(:'bfd')
        self.bfd = attributes[:'bfd']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'local_ip')
        self.local_ip = attributes[:'local_ip']
      end

      if attributes.has_key?(:'last_updated_time')
        self.last_updated_time = attributes[:'last_updated_time']
      end

      if attributes.has_key?(:'remote_ip')
        self.remote_ip = attributes[:'remote_ip']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["UP", "DOWN", "UNKNOWN"])
      return false unless status_validator.valid?(@status)
      encap_validator = EnumAttributeValidator.new('String', ["STT", "VXLAN", "GENEVE", "UNKNOWN_ENCAP"])
      return false unless encap_validator.valid?(@encap)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["UP", "DOWN", "UNKNOWN"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for 'status', must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] encap Object to be assigned
    def encap=(encap)
      validator = EnumAttributeValidator.new('String', ["STT", "VXLAN", "GENEVE", "UNKNOWN_ENCAP"])
      unless validator.valid?(encap)
        fail ArgumentError, "invalid value for 'encap', must be one of #{validator.allowable_values}."
      end
      @encap = encap
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          status == o.status &&
          egress_interface == o.egress_interface &&
          remote_node_display_name == o.remote_node_display_name &&
          remote_node_id == o.remote_node_id &&
          encap == o.encap &&
          bfd == o.bfd &&
          name == o.name &&
          local_ip == o.local_ip &&
          last_updated_time == o.last_updated_time &&
          remote_ip == o.remote_ip
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, status, egress_interface, remote_node_display_name, remote_node_id, encap, bfd, name, local_ip, last_updated_time, remote_ip].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
