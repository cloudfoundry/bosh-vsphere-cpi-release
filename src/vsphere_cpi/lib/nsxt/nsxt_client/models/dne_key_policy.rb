=begin
#NSX API

#VMware NSX REST API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module NSXT

  class DneKeyPolicy
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    attr_accessor :_schema

    # The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.
    attr_accessor :_revision

    # Indicates system owned resource
    attr_accessor :_system_owned

    # Defaults to ID if not set
    attr_accessor :display_name

    # Description of this resource
    attr_accessor :description

    # Opaque identifiers meaningful to the API user
    attr_accessor :tags

    # ID of the user who created this resource
    attr_accessor :_create_user

    # Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity. 
    attr_accessor :_protection

    # Timestamp of resource creation
    attr_accessor :_create_time

    # Timestamp of last modification
    attr_accessor :_last_modified_time

    # ID of the user who last modified this resource
    attr_accessor :_last_modified_user

    # Unique identifier of this resource
    attr_accessor :id

    # The type of this resource.
    attr_accessor :resource_type

    # It is a boolean flag which reflects whether a DNE key policy is default or not.
    attr_accessor :is_default

    # DNE key encryption algorithm
    attr_accessor :encrypt_algorithm

    # MAC algorithm type
    attr_accessor :mac_algorithm

    # key policy type
    attr_accessor :type

    # Key policy encryption type
    attr_accessor :encrypt_type

    # Frequency of key policy rekey (in seconds). Default 30 days, minimum 1 day, maximum 10000 days.
    attr_accessor :rekey_frequency

    # User notes specific to the key policy.
    attr_accessor :notes

    # It is a boolean flag which reflects whether a DNE key policy is system default or not. System default key policies are created while dne system is booting up. User can't change the value of the system default flag. User created key policy always has system default flag set to false, however a user can change default flag (not the system default) value from false to true of any key policy, but not from true to false (when setting a key policy as default, the current default key policy is automatically unset).
    attr_accessor :is_sys_default

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'_revision' => :'_revision',
        :'_system_owned' => :'_system_owned',
        :'display_name' => :'display_name',
        :'description' => :'description',
        :'tags' => :'tags',
        :'_create_user' => :'_create_user',
        :'_protection' => :'_protection',
        :'_create_time' => :'_create_time',
        :'_last_modified_time' => :'_last_modified_time',
        :'_last_modified_user' => :'_last_modified_user',
        :'id' => :'id',
        :'resource_type' => :'resource_type',
        :'is_default' => :'is_default',
        :'encrypt_algorithm' => :'encrypt_algorithm',
        :'mac_algorithm' => :'mac_algorithm',
        :'type' => :'type',
        :'encrypt_type' => :'encrypt_type',
        :'rekey_frequency' => :'rekey_frequency',
        :'notes' => :'notes',
        :'is_sys_default' => :'is_sys_default'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'_revision' => :'Integer',
        :'_system_owned' => :'BOOLEAN',
        :'display_name' => :'String',
        :'description' => :'String',
        :'tags' => :'Array<Tag>',
        :'_create_user' => :'String',
        :'_protection' => :'String',
        :'_create_time' => :'Integer',
        :'_last_modified_time' => :'Integer',
        :'_last_modified_user' => :'String',
        :'id' => :'String',
        :'resource_type' => :'String',
        :'is_default' => :'BOOLEAN',
        :'encrypt_algorithm' => :'String',
        :'mac_algorithm' => :'String',
        :'type' => :'String',
        :'encrypt_type' => :'String',
        :'rekey_frequency' => :'Integer',
        :'notes' => :'String',
        :'is_sys_default' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'_revision')
        self._revision = attributes[:'_revision']
      end

      if attributes.has_key?(:'_system_owned')
        self._system_owned = attributes[:'_system_owned']
      end

      if attributes.has_key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.has_key?(:'_create_user')
        self._create_user = attributes[:'_create_user']
      end

      if attributes.has_key?(:'_protection')
        self._protection = attributes[:'_protection']
      end

      if attributes.has_key?(:'_create_time')
        self._create_time = attributes[:'_create_time']
      end

      if attributes.has_key?(:'_last_modified_time')
        self._last_modified_time = attributes[:'_last_modified_time']
      end

      if attributes.has_key?(:'_last_modified_user')
        self._last_modified_user = attributes[:'_last_modified_user']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'is_default')
        self.is_default = attributes[:'is_default']
      else
        self.is_default = false
      end

      if attributes.has_key?(:'encrypt_algorithm')
        self.encrypt_algorithm = attributes[:'encrypt_algorithm']
      end

      if attributes.has_key?(:'mac_algorithm')
        self.mac_algorithm = attributes[:'mac_algorithm']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = "REGULAR"
      end

      if attributes.has_key?(:'encrypt_type')
        self.encrypt_type = attributes[:'encrypt_type']
      end

      if attributes.has_key?(:'rekey_frequency')
        self.rekey_frequency = attributes[:'rekey_frequency']
      else
        self.rekey_frequency = 2592000
      end

      if attributes.has_key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.has_key?(:'is_sys_default')
        self.is_sys_default = attributes[:'is_sys_default']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@display_name.nil? && @display_name.to_s.length > 255
        invalid_properties.push("invalid value for 'display_name', the character length must be smaller than or equal to 255.")
      end

      if !@description.nil? && @description.to_s.length > 1024
        invalid_properties.push("invalid value for 'description', the character length must be smaller than or equal to 1024.")
      end

      if @encrypt_algorithm.nil?
        invalid_properties.push("invalid value for 'encrypt_algorithm', encrypt_algorithm cannot be nil.")
      end

      if @mac_algorithm.nil?
        invalid_properties.push("invalid value for 'mac_algorithm', mac_algorithm cannot be nil.")
      end

      if @encrypt_type.nil?
        invalid_properties.push("invalid value for 'encrypt_type', encrypt_type cannot be nil.")
      end

      if !@rekey_frequency.nil? && @rekey_frequency > 864000000
        invalid_properties.push("invalid value for 'rekey_frequency', must be smaller than or equal to 864000000.")
      end

      if !@rekey_frequency.nil? && @rekey_frequency < 86400
        invalid_properties.push("invalid value for 'rekey_frequency', must be greater than or equal to 86400.")
      end

      if !@notes.nil? && @notes.to_s.length > 2048
        invalid_properties.push("invalid value for 'notes', the character length must be smaller than or equal to 2048.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@display_name.nil? && @display_name.to_s.length > 255
      return false if !@description.nil? && @description.to_s.length > 1024
      return false if @encrypt_algorithm.nil?
      encrypt_algorithm_validator = EnumAttributeValidator.new('String', ["ENC_NULL", "ENC_AES_GCM_128"])
      return false unless encrypt_algorithm_validator.valid?(@encrypt_algorithm)
      return false if @mac_algorithm.nil?
      mac_algorithm_validator = EnumAttributeValidator.new('String', ["MAC_ALG_AES_GCM_128"])
      return false unless mac_algorithm_validator.valid?(@mac_algorithm)
      type_validator = EnumAttributeValidator.new('String', ["REGULAR", "BUM_TRAFFIC"])
      return false unless type_validator.valid?(@type)
      return false if @encrypt_type.nil?
      encrypt_type_validator = EnumAttributeValidator.new('String', ["INTEGRITY_ONLY", "ENCRYPTION_AND_INTEGRITY"])
      return false unless encrypt_type_validator.valid?(@encrypt_type)
      return false if !@rekey_frequency.nil? && @rekey_frequency > 864000000
      return false if !@rekey_frequency.nil? && @rekey_frequency < 86400
      return false if !@notes.nil? && @notes.to_s.length > 2048
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)

      if !display_name.nil? && display_name.to_s.length > 255
        fail ArgumentError, "invalid value for 'display_name', the character length must be smaller than or equal to 255."
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)

      if !description.nil? && description.to_s.length > 1024
        fail ArgumentError, "invalid value for 'description', the character length must be smaller than or equal to 1024."
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] encrypt_algorithm Object to be assigned
    def encrypt_algorithm=(encrypt_algorithm)
      validator = EnumAttributeValidator.new('String', ["ENC_NULL", "ENC_AES_GCM_128"])
      unless validator.valid?(encrypt_algorithm)
        fail ArgumentError, "invalid value for 'encrypt_algorithm', must be one of #{validator.allowable_values}."
      end
      @encrypt_algorithm = encrypt_algorithm
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mac_algorithm Object to be assigned
    def mac_algorithm=(mac_algorithm)
      validator = EnumAttributeValidator.new('String', ["MAC_ALG_AES_GCM_128"])
      unless validator.valid?(mac_algorithm)
        fail ArgumentError, "invalid value for 'mac_algorithm', must be one of #{validator.allowable_values}."
      end
      @mac_algorithm = mac_algorithm
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["REGULAR", "BUM_TRAFFIC"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for 'type', must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] encrypt_type Object to be assigned
    def encrypt_type=(encrypt_type)
      validator = EnumAttributeValidator.new('String', ["INTEGRITY_ONLY", "ENCRYPTION_AND_INTEGRITY"])
      unless validator.valid?(encrypt_type)
        fail ArgumentError, "invalid value for 'encrypt_type', must be one of #{validator.allowable_values}."
      end
      @encrypt_type = encrypt_type
    end

    # Custom attribute writer method with validation
    # @param [Object] rekey_frequency Value to be assigned
    def rekey_frequency=(rekey_frequency)

      if !rekey_frequency.nil? && rekey_frequency > 864000000
        fail ArgumentError, "invalid value for 'rekey_frequency', must be smaller than or equal to 864000000."
      end

      if !rekey_frequency.nil? && rekey_frequency < 86400
        fail ArgumentError, "invalid value for 'rekey_frequency', must be greater than or equal to 86400."
      end

      @rekey_frequency = rekey_frequency
    end

    # Custom attribute writer method with validation
    # @param [Object] notes Value to be assigned
    def notes=(notes)

      if !notes.nil? && notes.to_s.length > 2048
        fail ArgumentError, "invalid value for 'notes', the character length must be smaller than or equal to 2048."
      end

      @notes = notes
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          _revision == o._revision &&
          _system_owned == o._system_owned &&
          display_name == o.display_name &&
          description == o.description &&
          tags == o.tags &&
          _create_user == o._create_user &&
          _protection == o._protection &&
          _create_time == o._create_time &&
          _last_modified_time == o._last_modified_time &&
          _last_modified_user == o._last_modified_user &&
          id == o.id &&
          resource_type == o.resource_type &&
          is_default == o.is_default &&
          encrypt_algorithm == o.encrypt_algorithm &&
          mac_algorithm == o.mac_algorithm &&
          type == o.type &&
          encrypt_type == o.encrypt_type &&
          rekey_frequency == o.rekey_frequency &&
          notes == o.notes &&
          is_sys_default == o.is_sys_default
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, _revision, _system_owned, display_name, description, tags, _create_user, _protection, _create_time, _last_modified_time, _last_modified_user, id, resource_type, is_default, encrypt_algorithm, mac_algorithm, type, encrypt_type, rekey_frequency, notes, is_sys_default].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
