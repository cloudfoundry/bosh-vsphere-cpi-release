=begin
#NSX API

#VMware NSX REST API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module NSXT
  # Aws gateway instance status
  class AwsGatewayInstanceStatus
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    attr_accessor :_schema

    # NSX transport node id of the public cloud gateway
    attr_accessor :gateway_tn_id

    # Index of HA that indicates whether gateway is primary or secondary. If index is 0, then it is primary gateway. Else secondary gateway. 
    attr_accessor :gateway_ha_index

    # Error message for gateway deployment/undeployment failure
    attr_accessor :error_message

    # Name of the gateway instance
    attr_accessor :gateway_name

    # Gateway instance status
    attr_accessor :gateway_status

    # ID of the gateway instance
    attr_accessor :gateway_instance_id

    # Flag to identify if this is an active gateway
    attr_accessor :is_gateway_active

    # Public IP address of the virtual machine
    attr_accessor :public_ip

    # Different states of gateway deployment
    attr_accessor :deployment_step

    # Error code for gateway deployment/undeployment failure
    attr_accessor :error_code

    # Private IP address of the virtual machine
    attr_accessor :private_ip

    # NSX Node ID of the public cloud gateway
    attr_accessor :gateway_node_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'gateway_tn_id' => :'gateway_tn_id',
        :'gateway_ha_index' => :'gateway_ha_index',
        :'error_message' => :'error_message',
        :'gateway_name' => :'gateway_name',
        :'gateway_status' => :'gateway_status',
        :'gateway_instance_id' => :'gateway_instance_id',
        :'is_gateway_active' => :'is_gateway_active',
        :'public_ip' => :'public_ip',
        :'deployment_step' => :'deployment_step',
        :'error_code' => :'error_code',
        :'private_ip' => :'private_ip',
        :'gateway_node_id' => :'gateway_node_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'gateway_tn_id' => :'String',
        :'gateway_ha_index' => :'Integer',
        :'error_message' => :'String',
        :'gateway_name' => :'String',
        :'gateway_status' => :'String',
        :'gateway_instance_id' => :'String',
        :'is_gateway_active' => :'BOOLEAN',
        :'public_ip' => :'String',
        :'deployment_step' => :'String',
        :'error_code' => :'Integer',
        :'private_ip' => :'String',
        :'gateway_node_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'gateway_tn_id')
        self.gateway_tn_id = attributes[:'gateway_tn_id']
      end

      if attributes.has_key?(:'gateway_ha_index')
        self.gateway_ha_index = attributes[:'gateway_ha_index']
      end

      if attributes.has_key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end

      if attributes.has_key?(:'gateway_name')
        self.gateway_name = attributes[:'gateway_name']
      end

      if attributes.has_key?(:'gateway_status')
        self.gateway_status = attributes[:'gateway_status']
      end

      if attributes.has_key?(:'gateway_instance_id')
        self.gateway_instance_id = attributes[:'gateway_instance_id']
      end

      if attributes.has_key?(:'is_gateway_active')
        self.is_gateway_active = attributes[:'is_gateway_active']
      end

      if attributes.has_key?(:'public_ip')
        self.public_ip = attributes[:'public_ip']
      end

      if attributes.has_key?(:'deployment_step')
        self.deployment_step = attributes[:'deployment_step']
      end

      if attributes.has_key?(:'error_code')
        self.error_code = attributes[:'error_code']
      end

      if attributes.has_key?(:'private_ip')
        self.private_ip = attributes[:'private_ip']
      end

      if attributes.has_key?(:'gateway_node_id')
        self.gateway_node_id = attributes[:'gateway_node_id']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      gateway_status_validator = EnumAttributeValidator.new('String', ["UP", "DOWN", "DEPLOYING", "NOT_AVAILABLE", "UNDEPLOYING"])
      return false unless gateway_status_validator.valid?(@gateway_status)
      deployment_step_validator = EnumAttributeValidator.new('String', ["CREATING_SECURITY_GROUPS", "LAUNCHING_GATEWAY", "ATTACHING_NETWORK_INTERFACES", "CONFIGURING_GATEWAY", "CREATING_LOGICAL_NETWORK_CONSTRUCTS", "DEPLOYMENT_SUCCESSFUL", "DEPLOYMENT_FAILED", "UNCONFIGURING_GATEWAY", "RELEASING_EIPS", "TERMINATING_GATEWAY", "DELETING_SECURITY_GROUPS", "UNDEPLOYMENT_SUCCESSFUL", "UNDEPLOYMENT_FAILED", "NOT_APPLICABLE"])
      return false unless deployment_step_validator.valid?(@deployment_step)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gateway_status Object to be assigned
    def gateway_status=(gateway_status)
      validator = EnumAttributeValidator.new('String', ["UP", "DOWN", "DEPLOYING", "NOT_AVAILABLE", "UNDEPLOYING"])
      unless validator.valid?(gateway_status)
        fail ArgumentError, "invalid value for 'gateway_status', must be one of #{validator.allowable_values}."
      end
      @gateway_status = gateway_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deployment_step Object to be assigned
    def deployment_step=(deployment_step)
      validator = EnumAttributeValidator.new('String', ["CREATING_SECURITY_GROUPS", "LAUNCHING_GATEWAY", "ATTACHING_NETWORK_INTERFACES", "CONFIGURING_GATEWAY", "CREATING_LOGICAL_NETWORK_CONSTRUCTS", "DEPLOYMENT_SUCCESSFUL", "DEPLOYMENT_FAILED", "UNCONFIGURING_GATEWAY", "RELEASING_EIPS", "TERMINATING_GATEWAY", "DELETING_SECURITY_GROUPS", "UNDEPLOYMENT_SUCCESSFUL", "UNDEPLOYMENT_FAILED", "NOT_APPLICABLE"])
      unless validator.valid?(deployment_step)
        fail ArgumentError, "invalid value for 'deployment_step', must be one of #{validator.allowable_values}."
      end
      @deployment_step = deployment_step
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          gateway_tn_id == o.gateway_tn_id &&
          gateway_ha_index == o.gateway_ha_index &&
          error_message == o.error_message &&
          gateway_name == o.gateway_name &&
          gateway_status == o.gateway_status &&
          gateway_instance_id == o.gateway_instance_id &&
          is_gateway_active == o.is_gateway_active &&
          public_ip == o.public_ip &&
          deployment_step == o.deployment_step &&
          error_code == o.error_code &&
          private_ip == o.private_ip &&
          gateway_node_id == o.gateway_node_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, gateway_tn_id, gateway_ha_index, error_message, gateway_name, gateway_status, gateway_instance_id, is_gateway_active, public_ip, deployment_step, error_code, private_ip, gateway_node_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
