=begin
#NSX API

#VMware NSX REST API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module NSXT
  # Aggregate runtime status information of nodes in grouped hosts or standalone hosts or unmanaged hosts 
  class HostNodeAggregateStatus
    # Number of nodes with deployment status uninstall successful
    attr_accessor :num_nodes_uninstall_successful

    # Number of nodes with deployment status install failed
    attr_accessor :num_nodes_install_failed

    # Number of nodes with deployment status install in progress
    attr_accessor :num_nodes_install_in_progress

    # Total number of nodes irrespective of the deployment status
    attr_accessor :num_nodes_total

    # Number of nodes with deployment status pending upgrade
    attr_accessor :num_nodes_pending_upgrade

    # Number of nodes with deployment status not available
    attr_accessor :num_nodes_not_available

    # Number of nodes with deployment status uninstall failed
    attr_accessor :num_nodes_uninstall_failed

    # Number of nodes with deployment status install successful
    attr_accessor :num_nodes_install_successful

    # Number of nodes with deployment status uninstall in progress
    attr_accessor :num_nodes_uninstall_in_progress

    # Number of nodes with deployment status upgrade in progress
    attr_accessor :num_nodes_upgrade_in_progress

    # Timestamp of the last successful update of Inventory, in epoch milliseconds
    attr_accessor :last_sync_time

    # Type of object for which status aggregated
    attr_accessor :aggregate_type

    # Number of nodes with deployment status not prepared
    attr_accessor :num_nodes_not_prepared

    # Indicates the deployment status of nsx bits on a grouped hosts or standalone hosts or unmanaged hosts 
    attr_accessor :deployment_status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'num_nodes_uninstall_successful' => :'num_nodes_uninstall_successful',
        :'num_nodes_install_failed' => :'num_nodes_install_failed',
        :'num_nodes_install_in_progress' => :'num_nodes_install_in_progress',
        :'num_nodes_total' => :'num_nodes_total',
        :'num_nodes_pending_upgrade' => :'num_nodes_pending_upgrade',
        :'num_nodes_not_available' => :'num_nodes_not_available',
        :'num_nodes_uninstall_failed' => :'num_nodes_uninstall_failed',
        :'num_nodes_install_successful' => :'num_nodes_install_successful',
        :'num_nodes_uninstall_in_progress' => :'num_nodes_uninstall_in_progress',
        :'num_nodes_upgrade_in_progress' => :'num_nodes_upgrade_in_progress',
        :'last_sync_time' => :'last_sync_time',
        :'aggregate_type' => :'aggregate_type',
        :'num_nodes_not_prepared' => :'num_nodes_not_prepared',
        :'deployment_status' => :'deployment_status'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'num_nodes_uninstall_successful' => :'Integer',
        :'num_nodes_install_failed' => :'Integer',
        :'num_nodes_install_in_progress' => :'Integer',
        :'num_nodes_total' => :'Integer',
        :'num_nodes_pending_upgrade' => :'Integer',
        :'num_nodes_not_available' => :'Integer',
        :'num_nodes_uninstall_failed' => :'Integer',
        :'num_nodes_install_successful' => :'Integer',
        :'num_nodes_uninstall_in_progress' => :'Integer',
        :'num_nodes_upgrade_in_progress' => :'Integer',
        :'last_sync_time' => :'Integer',
        :'aggregate_type' => :'String',
        :'num_nodes_not_prepared' => :'Integer',
        :'deployment_status' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'num_nodes_uninstall_successful')
        self.num_nodes_uninstall_successful = attributes[:'num_nodes_uninstall_successful']
      end

      if attributes.has_key?(:'num_nodes_install_failed')
        self.num_nodes_install_failed = attributes[:'num_nodes_install_failed']
      end

      if attributes.has_key?(:'num_nodes_install_in_progress')
        self.num_nodes_install_in_progress = attributes[:'num_nodes_install_in_progress']
      end

      if attributes.has_key?(:'num_nodes_total')
        self.num_nodes_total = attributes[:'num_nodes_total']
      end

      if attributes.has_key?(:'num_nodes_pending_upgrade')
        self.num_nodes_pending_upgrade = attributes[:'num_nodes_pending_upgrade']
      end

      if attributes.has_key?(:'num_nodes_not_available')
        self.num_nodes_not_available = attributes[:'num_nodes_not_available']
      end

      if attributes.has_key?(:'num_nodes_uninstall_failed')
        self.num_nodes_uninstall_failed = attributes[:'num_nodes_uninstall_failed']
      end

      if attributes.has_key?(:'num_nodes_install_successful')
        self.num_nodes_install_successful = attributes[:'num_nodes_install_successful']
      end

      if attributes.has_key?(:'num_nodes_uninstall_in_progress')
        self.num_nodes_uninstall_in_progress = attributes[:'num_nodes_uninstall_in_progress']
      end

      if attributes.has_key?(:'num_nodes_upgrade_in_progress')
        self.num_nodes_upgrade_in_progress = attributes[:'num_nodes_upgrade_in_progress']
      end

      if attributes.has_key?(:'last_sync_time')
        self.last_sync_time = attributes[:'last_sync_time']
      end

      if attributes.has_key?(:'aggregate_type')
        self.aggregate_type = attributes[:'aggregate_type']
      end

      if attributes.has_key?(:'num_nodes_not_prepared')
        self.num_nodes_not_prepared = attributes[:'num_nodes_not_prepared']
      end

      if attributes.has_key?(:'deployment_status')
        self.deployment_status = attributes[:'deployment_status']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      aggregate_type_validator = EnumAttributeValidator.new('String', ["GROUPED_HOSTS", "STANDALONE_HOSTS", "UNMANGED_HOSTS"])
      return false unless aggregate_type_validator.valid?(@aggregate_type)
      deployment_status_validator = EnumAttributeValidator.new('String', ["SUCCESSFUL", "ERROR", "UNKNOWN"])
      return false unless deployment_status_validator.valid?(@deployment_status)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aggregate_type Object to be assigned
    def aggregate_type=(aggregate_type)
      validator = EnumAttributeValidator.new('String', ["GROUPED_HOSTS", "STANDALONE_HOSTS", "UNMANGED_HOSTS"])
      unless validator.valid?(aggregate_type)
        fail ArgumentError, "invalid value for 'aggregate_type', must be one of #{validator.allowable_values}."
      end
      @aggregate_type = aggregate_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deployment_status Object to be assigned
    def deployment_status=(deployment_status)
      validator = EnumAttributeValidator.new('String', ["SUCCESSFUL", "ERROR", "UNKNOWN"])
      unless validator.valid?(deployment_status)
        fail ArgumentError, "invalid value for 'deployment_status', must be one of #{validator.allowable_values}."
      end
      @deployment_status = deployment_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          num_nodes_uninstall_successful == o.num_nodes_uninstall_successful &&
          num_nodes_install_failed == o.num_nodes_install_failed &&
          num_nodes_install_in_progress == o.num_nodes_install_in_progress &&
          num_nodes_total == o.num_nodes_total &&
          num_nodes_pending_upgrade == o.num_nodes_pending_upgrade &&
          num_nodes_not_available == o.num_nodes_not_available &&
          num_nodes_uninstall_failed == o.num_nodes_uninstall_failed &&
          num_nodes_install_successful == o.num_nodes_install_successful &&
          num_nodes_uninstall_in_progress == o.num_nodes_uninstall_in_progress &&
          num_nodes_upgrade_in_progress == o.num_nodes_upgrade_in_progress &&
          last_sync_time == o.last_sync_time &&
          aggregate_type == o.aggregate_type &&
          num_nodes_not_prepared == o.num_nodes_not_prepared &&
          deployment_status == o.deployment_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [num_nodes_uninstall_successful, num_nodes_install_failed, num_nodes_install_in_progress, num_nodes_total, num_nodes_pending_upgrade, num_nodes_not_available, num_nodes_uninstall_failed, num_nodes_install_successful, num_nodes_uninstall_in_progress, num_nodes_upgrade_in_progress, last_sync_time, aggregate_type, num_nodes_not_prepared, deployment_status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
