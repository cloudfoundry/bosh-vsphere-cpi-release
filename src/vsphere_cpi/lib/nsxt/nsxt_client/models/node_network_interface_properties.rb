=begin
#NSX API

#VMware NSX REST API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module NSXT
  # Node network interface properties
  class NodeNetworkInterfaceProperties
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    attr_accessor :_schema

    # Interface MAC address
    attr_accessor :physical_address

    # Interface broadcast address
    attr_accessor :broadcast_address

    # Interface administration status
    attr_accessor :link_status

    # Interface's default gateway
    attr_accessor :default_gateway

    # Bond's primary device name in active-backup bond mode
    attr_accessor :bond_primary

    # Bond's slave devices
    attr_accessor :bond_slaves

    # Interface IP addresses
    attr_accessor :ip_addresses

    # Interface administration status
    attr_accessor :admin_status

    # Interface ID
    attr_accessor :interface_id

    # Bond mode
    attr_accessor :bond_mode

    # Interface plane
    attr_accessor :plane

    # Interface configuration
    attr_accessor :ip_configuration

    # Interface MTU
    attr_accessor :mtu

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'physical_address' => :'physical_address',
        :'broadcast_address' => :'broadcast_address',
        :'link_status' => :'link_status',
        :'default_gateway' => :'default_gateway',
        :'bond_primary' => :'bond_primary',
        :'bond_slaves' => :'bond_slaves',
        :'ip_addresses' => :'ip_addresses',
        :'admin_status' => :'admin_status',
        :'interface_id' => :'interface_id',
        :'bond_mode' => :'bond_mode',
        :'plane' => :'plane',
        :'ip_configuration' => :'ip_configuration',
        :'mtu' => :'mtu'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'physical_address' => :'String',
        :'broadcast_address' => :'String',
        :'link_status' => :'String',
        :'default_gateway' => :'String',
        :'bond_primary' => :'String',
        :'bond_slaves' => :'Array<String>',
        :'ip_addresses' => :'Array<IPv4AddressProperties>',
        :'admin_status' => :'String',
        :'interface_id' => :'String',
        :'bond_mode' => :'String',
        :'plane' => :'String',
        :'ip_configuration' => :'String',
        :'mtu' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'physical_address')
        self.physical_address = attributes[:'physical_address']
      end

      if attributes.has_key?(:'broadcast_address')
        self.broadcast_address = attributes[:'broadcast_address']
      end

      if attributes.has_key?(:'link_status')
        self.link_status = attributes[:'link_status']
      end

      if attributes.has_key?(:'default_gateway')
        self.default_gateway = attributes[:'default_gateway']
      end

      if attributes.has_key?(:'bond_primary')
        self.bond_primary = attributes[:'bond_primary']
      end

      if attributes.has_key?(:'bond_slaves')
        if (value = attributes[:'bond_slaves']).is_a?(Array)
          self.bond_slaves = value
        end
      end

      if attributes.has_key?(:'ip_addresses')
        if (value = attributes[:'ip_addresses']).is_a?(Array)
          self.ip_addresses = value
        end
      end

      if attributes.has_key?(:'admin_status')
        self.admin_status = attributes[:'admin_status']
      end

      if attributes.has_key?(:'interface_id')
        self.interface_id = attributes[:'interface_id']
      end

      if attributes.has_key?(:'bond_mode')
        self.bond_mode = attributes[:'bond_mode']
      end

      if attributes.has_key?(:'plane')
        self.plane = attributes[:'plane']
      end

      if attributes.has_key?(:'ip_configuration')
        self.ip_configuration = attributes[:'ip_configuration']
      end

      if attributes.has_key?(:'mtu')
        self.mtu = attributes[:'mtu']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @ip_configuration.nil?
        invalid_properties.push("invalid value for 'ip_configuration', ip_configuration cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      link_status_validator = EnumAttributeValidator.new('String', ["up", "down"])
      return false unless link_status_validator.valid?(@link_status)
      admin_status_validator = EnumAttributeValidator.new('String', ["up", "down"])
      return false unless admin_status_validator.valid?(@admin_status)
      bond_mode_validator = EnumAttributeValidator.new('String', ["ACTIVE_BACKUP", "802_3AD"])
      return false unless bond_mode_validator.valid?(@bond_mode)
      plane_validator = EnumAttributeValidator.new('String', ["mgmt", "debug"])
      return false unless plane_validator.valid?(@plane)
      return false if @ip_configuration.nil?
      ip_configuration_validator = EnumAttributeValidator.new('String', ["dhcp", "static", "not configured"])
      return false unless ip_configuration_validator.valid?(@ip_configuration)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_status Object to be assigned
    def link_status=(link_status)
      validator = EnumAttributeValidator.new('String', ["up", "down"])
      unless validator.valid?(link_status)
        fail ArgumentError, "invalid value for 'link_status', must be one of #{validator.allowable_values}."
      end
      @link_status = link_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] admin_status Object to be assigned
    def admin_status=(admin_status)
      validator = EnumAttributeValidator.new('String', ["up", "down"])
      unless validator.valid?(admin_status)
        fail ArgumentError, "invalid value for 'admin_status', must be one of #{validator.allowable_values}."
      end
      @admin_status = admin_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bond_mode Object to be assigned
    def bond_mode=(bond_mode)
      validator = EnumAttributeValidator.new('String', ["ACTIVE_BACKUP", "802_3AD"])
      unless validator.valid?(bond_mode)
        fail ArgumentError, "invalid value for 'bond_mode', must be one of #{validator.allowable_values}."
      end
      @bond_mode = bond_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] plane Object to be assigned
    def plane=(plane)
      validator = EnumAttributeValidator.new('String', ["mgmt", "debug"])
      unless validator.valid?(plane)
        fail ArgumentError, "invalid value for 'plane', must be one of #{validator.allowable_values}."
      end
      @plane = plane
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_configuration Object to be assigned
    def ip_configuration=(ip_configuration)
      validator = EnumAttributeValidator.new('String', ["dhcp", "static", "not configured"])
      unless validator.valid?(ip_configuration)
        fail ArgumentError, "invalid value for 'ip_configuration', must be one of #{validator.allowable_values}."
      end
      @ip_configuration = ip_configuration
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          physical_address == o.physical_address &&
          broadcast_address == o.broadcast_address &&
          link_status == o.link_status &&
          default_gateway == o.default_gateway &&
          bond_primary == o.bond_primary &&
          bond_slaves == o.bond_slaves &&
          ip_addresses == o.ip_addresses &&
          admin_status == o.admin_status &&
          interface_id == o.interface_id &&
          bond_mode == o.bond_mode &&
          plane == o.plane &&
          ip_configuration == o.ip_configuration &&
          mtu == o.mtu
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, physical_address, broadcast_address, link_status, default_gateway, bond_primary, bond_slaves, ip_addresses, admin_status, interface_id, bond_mode, plane, ip_configuration, mtu].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
