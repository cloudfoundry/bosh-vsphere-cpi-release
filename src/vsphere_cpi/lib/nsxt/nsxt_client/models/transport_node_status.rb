=begin
#NSX API

#VMware NSX REST API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module NSXT

  class TransportNodeStatus
    # Roll-up status of pNIC, management connection, control connection, tunnel status
    attr_accessor :status

    # Transport node uuid
    attr_accessor :node_uuid

    # Management connection status
    attr_accessor :mgmt_connection_status

    # Control connection status
    attr_accessor :control_connection_status

    # pNIC status
    attr_accessor :pnic_status

    # Transport node display name
    attr_accessor :node_display_name

    # Tunnel Status
    attr_accessor :tunnel_status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'node_uuid' => :'node_uuid',
        :'mgmt_connection_status' => :'mgmt_connection_status',
        :'control_connection_status' => :'control_connection_status',
        :'pnic_status' => :'pnic_status',
        :'node_display_name' => :'node_display_name',
        :'tunnel_status' => :'tunnel_status'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'status' => :'String',
        :'node_uuid' => :'String',
        :'mgmt_connection_status' => :'String',
        :'control_connection_status' => :'StatusCount',
        :'pnic_status' => :'StatusCount',
        :'node_display_name' => :'String',
        :'tunnel_status' => :'TunnelStatusCount'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'node_uuid')
        self.node_uuid = attributes[:'node_uuid']
      end

      if attributes.has_key?(:'mgmt_connection_status')
        self.mgmt_connection_status = attributes[:'mgmt_connection_status']
      end

      if attributes.has_key?(:'control_connection_status')
        self.control_connection_status = attributes[:'control_connection_status']
      end

      if attributes.has_key?(:'pnic_status')
        self.pnic_status = attributes[:'pnic_status']
      end

      if attributes.has_key?(:'node_display_name')
        self.node_display_name = attributes[:'node_display_name']
      end

      if attributes.has_key?(:'tunnel_status')
        self.tunnel_status = attributes[:'tunnel_status']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["UP", "DOWN", "DEGRADED", "UNKNOWN"])
      return false unless status_validator.valid?(@status)
      mgmt_connection_status_validator = EnumAttributeValidator.new('String', ["UP", "DOWN"])
      return false unless mgmt_connection_status_validator.valid?(@mgmt_connection_status)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["UP", "DOWN", "DEGRADED", "UNKNOWN"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for 'status', must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mgmt_connection_status Object to be assigned
    def mgmt_connection_status=(mgmt_connection_status)
      validator = EnumAttributeValidator.new('String', ["UP", "DOWN"])
      unless validator.valid?(mgmt_connection_status)
        fail ArgumentError, "invalid value for 'mgmt_connection_status', must be one of #{validator.allowable_values}."
      end
      @mgmt_connection_status = mgmt_connection_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          node_uuid == o.node_uuid &&
          mgmt_connection_status == o.mgmt_connection_status &&
          control_connection_status == o.control_connection_status &&
          pnic_status == o.pnic_status &&
          node_display_name == o.node_display_name &&
          tunnel_status == o.tunnel_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [status, node_uuid, mgmt_connection_status, control_connection_status, pnic_status, node_display_name, tunnel_status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
