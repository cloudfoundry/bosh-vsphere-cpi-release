=begin
#NSX API

#VMware NSX REST API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module NSXT
  # Port Connection Entities (to help draw a visual picture of entities between two ports)
  class PortConnectionEntities
    attr_accessor :containers

    attr_accessor :hypervisors

    attr_accessor :errors

    attr_accessor :logical_switches

    attr_accessor :edge_node_groups

    attr_accessor :routers

    attr_accessor :vms

    attr_accessor :tunnels


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'containers' => :'containers',
        :'hypervisors' => :'hypervisors',
        :'errors' => :'errors',
        :'logical_switches' => :'logical_switches',
        :'edge_node_groups' => :'edge_node_groups',
        :'routers' => :'routers',
        :'vms' => :'vms',
        :'tunnels' => :'tunnels'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'containers' => :'PortConnectionContainersEntities',
        :'hypervisors' => :'Array<PortConnectionHypervisor>',
        :'errors' => :'Array<PortConnectionError>',
        :'logical_switches' => :'Array<PortConnectionLogicalSwitch>',
        :'edge_node_groups' => :'Array<PortConnectionEdgeNodeGroup>',
        :'routers' => :'Array<PortConnectionRouter>',
        :'vms' => :'Array<VirtualMachine>',
        :'tunnels' => :'Array<PortConnectionTunnel>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'containers')
        self.containers = attributes[:'containers']
      end

      if attributes.has_key?(:'hypervisors')
        if (value = attributes[:'hypervisors']).is_a?(Array)
          self.hypervisors = value
        end
      end

      if attributes.has_key?(:'errors')
        if (value = attributes[:'errors']).is_a?(Array)
          self.errors = value
        end
      end

      if attributes.has_key?(:'logical_switches')
        if (value = attributes[:'logical_switches']).is_a?(Array)
          self.logical_switches = value
        end
      end

      if attributes.has_key?(:'edge_node_groups')
        if (value = attributes[:'edge_node_groups']).is_a?(Array)
          self.edge_node_groups = value
        end
      end

      if attributes.has_key?(:'routers')
        if (value = attributes[:'routers']).is_a?(Array)
          self.routers = value
        end
      end

      if attributes.has_key?(:'vms')
        if (value = attributes[:'vms']).is_a?(Array)
          self.vms = value
        end
      end

      if attributes.has_key?(:'tunnels')
        if (value = attributes[:'tunnels']).is_a?(Array)
          self.tunnels = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @containers.nil?
        invalid_properties.push("invalid value for 'containers', containers cannot be nil.")
      end

      if @hypervisors.nil?
        invalid_properties.push("invalid value for 'hypervisors', hypervisors cannot be nil.")
      end

      if @errors.nil?
        invalid_properties.push("invalid value for 'errors', errors cannot be nil.")
      end

      if @logical_switches.nil?
        invalid_properties.push("invalid value for 'logical_switches', logical_switches cannot be nil.")
      end

      if @vms.nil?
        invalid_properties.push("invalid value for 'vms', vms cannot be nil.")
      end

      if @tunnels.nil?
        invalid_properties.push("invalid value for 'tunnels', tunnels cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @containers.nil?
      return false if @hypervisors.nil?
      return false if @errors.nil?
      return false if @logical_switches.nil?
      return false if @vms.nil?
      return false if @tunnels.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          containers == o.containers &&
          hypervisors == o.hypervisors &&
          errors == o.errors &&
          logical_switches == o.logical_switches &&
          edge_node_groups == o.edge_node_groups &&
          routers == o.routers &&
          vms == o.vms &&
          tunnels == o.tunnels
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [containers, hypervisors, errors, logical_switches, edge_node_groups, routers, vms, tunnels].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
