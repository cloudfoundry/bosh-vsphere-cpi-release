=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Syslog server configuration parameters
  class SyslogConfiguration
    # Display name of the syslog server
    attr_accessor :name

    # Syslog server Ip or fqdn. 
    attr_accessor :server

    # Syslog server listening port. 
    attr_accessor :port

    # Supported Syslog protocol. 
    attr_accessor :protocol

    # Log level that needs to be redirected. 
    attr_accessor :log_level

    # List of syslog server facilities. 
    attr_accessor :facility

    # List of syslog server message ids. 
    attr_accessor :message_id

    # List of syslog server structured data. 
    attr_accessor :structured_data

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'server' => :'server',
        :'port' => :'port',
        :'protocol' => :'protocol',
        :'log_level' => :'log_level',
        :'facility' => :'facility',
        :'message_id' => :'message_id',
        :'structured_data' => :'structured_data'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'server' => :'String',
        :'port' => :'String',
        :'protocol' => :'String',
        :'log_level' => :'String',
        :'facility' => :'Array<String>',
        :'message_id' => :'Array<String>',
        :'structured_data' => :'Array<KeyValuePair>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'server')
        self.server = attributes[:'server']
      end

      if attributes.has_key?(:'port')
        self.port = attributes[:'port']
      else
        self.port = '514'
      end

      if attributes.has_key?(:'protocol')
        self.protocol = attributes[:'protocol']
      else
        self.protocol = 'UDP'
      end

      if attributes.has_key?(:'log_level')
        self.log_level = attributes[:'log_level']
      else
        self.log_level = 'INFO'
      end

      if attributes.has_key?(:'facility')
        if (value = attributes[:'facility']).is_a?(Array)
          self.facility = value
        end
      end

      if attributes.has_key?(:'message_id')
        if (value = attributes[:'message_id']).is_a?(Array)
          self.message_id = value
        end
      end

      if attributes.has_key?(:'structured_data')
        if (value = attributes[:'structured_data']).is_a?(Array)
          self.structured_data = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @server.nil?
        invalid_properties.push('invalid value for "server", server cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @server.nil?
      protocol_validator = EnumAttributeValidator.new('String', ['TCP', 'UDP', 'TLS', 'LI', 'LI_TLS'])
      return false unless protocol_validator.valid?(@protocol)
      log_level_validator = EnumAttributeValidator.new('String', ['EMERGENCY', 'ALERT', 'CRITICAL', 'ERROR', 'WARNING', 'NOTICE', 'INFO', 'DEBUG'])
      return false unless log_level_validator.valid?(@log_level)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] protocol Object to be assigned
    def protocol=(protocol)
      validator = EnumAttributeValidator.new('String', ['TCP', 'UDP', 'TLS', 'LI', 'LI_TLS'])
      unless validator.valid?(protocol)
        fail ArgumentError, 'invalid value for "protocol", must be one of #{validator.allowable_values}.'
      end
      @protocol = protocol
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] log_level Object to be assigned
    def log_level=(log_level)
      validator = EnumAttributeValidator.new('String', ['EMERGENCY', 'ALERT', 'CRITICAL', 'ERROR', 'WARNING', 'NOTICE', 'INFO', 'DEBUG'])
      unless validator.valid?(log_level)
        fail ArgumentError, 'invalid value for "log_level", must be one of #{validator.allowable_values}.'
      end
      @log_level = log_level
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          server == o.server &&
          port == o.port &&
          protocol == o.protocol &&
          log_level == o.log_level &&
          facility == o.facility &&
          message_id == o.message_id &&
          structured_data == o.structured_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, server, port, protocol, log_level, facility, message_id, structured_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
