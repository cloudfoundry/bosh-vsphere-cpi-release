=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class TransportNodeStatus
    # Transport node uuid
    attr_accessor :node_uuid

    # Transport node display name
    attr_accessor :node_display_name

    # Roll-up status of pNIC, management connection, control connection, tunnel status, agent status
    attr_accessor :status

    attr_accessor :pnic_status

    # Management connection status
    attr_accessor :mgmt_connection_status

    attr_accessor :control_connection_status

    attr_accessor :tunnel_status

    attr_accessor :evpn_tunnel_status

    attr_accessor :threat_status

    attr_accessor :agent_status

    attr_accessor :node_status

    # Transport node path
    attr_accessor :node_path

    # Edge node virtual machine unique identifier. This is reported only for Edge Virtual Machine Type deployed on NSX configured host nodes.
    attr_accessor :vm_uuid

    # Describe what makes the status not UP
    attr_accessor :status_description

    # Timestamp of the last agg-service heartbeat, in epoch milliseconds.
    attr_accessor :last_aggsvc_heartbeat

    # Timestamp of the last status change, in epoch milliseconds.
    attr_accessor :last_status_changed_time

    # Transport node type.
    attr_accessor :node_type

    # Edge node VTEP state.
    attr_accessor :vtep_state

    # Edge node storage state.
    attr_accessor :storage_state

    # High Availability status of the edge node.
    attr_accessor :high_availability_status

    # List of Edge node tier0 statuses.
    attr_accessor :tier_0s

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'node_uuid' => :'node_uuid',
        :'node_display_name' => :'node_display_name',
        :'status' => :'status',
        :'pnic_status' => :'pnic_status',
        :'mgmt_connection_status' => :'mgmt_connection_status',
        :'control_connection_status' => :'control_connection_status',
        :'tunnel_status' => :'tunnel_status',
        :'evpn_tunnel_status' => :'evpn_tunnel_status',
        :'threat_status' => :'threat_status',
        :'agent_status' => :'agent_status',
        :'node_status' => :'node_status',
        :'node_path' => :'node_path',
        :'vm_uuid' => :'vm_uuid',
        :'status_description' => :'status_description',
        :'last_aggsvc_heartbeat' => :'last_aggsvc_heartbeat',
        :'last_status_changed_time' => :'last_status_changed_time',
        :'node_type' => :'node_type',
        :'vtep_state' => :'vtep_state',
        :'storage_state' => :'storage_state',
        :'high_availability_status' => :'high_availability_status',
        :'tier_0s' => :'tier_0s'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'node_uuid' => :'String',
        :'node_display_name' => :'String',
        :'status' => :'String',
        :'pnic_status' => :'StatusCount',
        :'mgmt_connection_status' => :'String',
        :'control_connection_status' => :'StatusCount',
        :'tunnel_status' => :'TunnelStatusCount',
        :'evpn_tunnel_status' => :'TunnelStatusCount',
        :'threat_status' => :'ThreatStatus',
        :'agent_status' => :'AgentStatusCount',
        :'node_status' => :'NodeStatus',
        :'node_path' => :'String',
        :'vm_uuid' => :'String',
        :'status_description' => :'String',
        :'last_aggsvc_heartbeat' => :'Integer',
        :'last_status_changed_time' => :'Integer',
        :'node_type' => :'String',
        :'vtep_state' => :'String',
        :'storage_state' => :'String',
        :'high_availability_status' => :'String',
        :'tier_0s' => :'Array<Tier0Status>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'node_uuid')
        self.node_uuid = attributes[:'node_uuid']
      end

      if attributes.has_key?(:'node_display_name')
        self.node_display_name = attributes[:'node_display_name']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'pnic_status')
        self.pnic_status = attributes[:'pnic_status']
      end

      if attributes.has_key?(:'mgmt_connection_status')
        self.mgmt_connection_status = attributes[:'mgmt_connection_status']
      end

      if attributes.has_key?(:'control_connection_status')
        self.control_connection_status = attributes[:'control_connection_status']
      end

      if attributes.has_key?(:'tunnel_status')
        self.tunnel_status = attributes[:'tunnel_status']
      end

      if attributes.has_key?(:'evpn_tunnel_status')
        self.evpn_tunnel_status = attributes[:'evpn_tunnel_status']
      end

      if attributes.has_key?(:'threat_status')
        self.threat_status = attributes[:'threat_status']
      end

      if attributes.has_key?(:'agent_status')
        self.agent_status = attributes[:'agent_status']
      end

      if attributes.has_key?(:'node_status')
        self.node_status = attributes[:'node_status']
      end

      if attributes.has_key?(:'node_path')
        self.node_path = attributes[:'node_path']
      end

      if attributes.has_key?(:'vm_uuid')
        self.vm_uuid = attributes[:'vm_uuid']
      end

      if attributes.has_key?(:'status_description')
        self.status_description = attributes[:'status_description']
      end

      if attributes.has_key?(:'last_aggsvc_heartbeat')
        self.last_aggsvc_heartbeat = attributes[:'last_aggsvc_heartbeat']
      end

      if attributes.has_key?(:'last_status_changed_time')
        self.last_status_changed_time = attributes[:'last_status_changed_time']
      end

      if attributes.has_key?(:'node_type')
        self.node_type = attributes[:'node_type']
      end

      if attributes.has_key?(:'vtep_state')
        self.vtep_state = attributes[:'vtep_state']
      end

      if attributes.has_key?(:'storage_state')
        self.storage_state = attributes[:'storage_state']
      end

      if attributes.has_key?(:'high_availability_status')
        self.high_availability_status = attributes[:'high_availability_status']
      end

      if attributes.has_key?(:'tier_0s')
        if (value = attributes[:'tier_0s']).is_a?(Array)
          self.tier_0s = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['UP', 'DOWN', 'DEGRADED', 'UNKNOWN'])
      return false unless status_validator.valid?(@status)
      mgmt_connection_status_validator = EnumAttributeValidator.new('String', ['UP', 'DOWN'])
      return false unless mgmt_connection_status_validator.valid?(@mgmt_connection_status)
      node_type_validator = EnumAttributeValidator.new('String', ['HostNode', 'EdgeNode'])
      return false unless node_type_validator.valid?(@node_type)
      vtep_state_validator = EnumAttributeValidator.new('String', ['UP', 'DOWN', 'UNKNOWN'])
      return false unless vtep_state_validator.valid?(@vtep_state)
      storage_state_validator = EnumAttributeValidator.new('String', ['READ_WRITE', 'READ_ONLY', 'UNKNOWN'])
      return false unless storage_state_validator.valid?(@storage_state)
      high_availability_status_validator = EnumAttributeValidator.new('String', ['UNKNOWN', 'UP', 'DOWN', 'ADMIN_DOWN', 'UNREACHABLE'])
      return false unless high_availability_status_validator.valid?(@high_availability_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['UP', 'DOWN', 'DEGRADED', 'UNKNOWN'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mgmt_connection_status Object to be assigned
    def mgmt_connection_status=(mgmt_connection_status)
      validator = EnumAttributeValidator.new('String', ['UP', 'DOWN'])
      unless validator.valid?(mgmt_connection_status)
        fail ArgumentError, 'invalid value for "mgmt_connection_status", must be one of #{validator.allowable_values}.'
      end
      @mgmt_connection_status = mgmt_connection_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] node_type Object to be assigned
    def node_type=(node_type)
      validator = EnumAttributeValidator.new('String', ['HostNode', 'EdgeNode'])
      unless validator.valid?(node_type)
        fail ArgumentError, 'invalid value for "node_type", must be one of #{validator.allowable_values}.'
      end
      @node_type = node_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vtep_state Object to be assigned
    def vtep_state=(vtep_state)
      validator = EnumAttributeValidator.new('String', ['UP', 'DOWN', 'UNKNOWN'])
      unless validator.valid?(vtep_state)
        fail ArgumentError, 'invalid value for "vtep_state", must be one of #{validator.allowable_values}.'
      end
      @vtep_state = vtep_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] storage_state Object to be assigned
    def storage_state=(storage_state)
      validator = EnumAttributeValidator.new('String', ['READ_WRITE', 'READ_ONLY', 'UNKNOWN'])
      unless validator.valid?(storage_state)
        fail ArgumentError, 'invalid value for "storage_state", must be one of #{validator.allowable_values}.'
      end
      @storage_state = storage_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] high_availability_status Object to be assigned
    def high_availability_status=(high_availability_status)
      validator = EnumAttributeValidator.new('String', ['UNKNOWN', 'UP', 'DOWN', 'ADMIN_DOWN', 'UNREACHABLE'])
      unless validator.valid?(high_availability_status)
        fail ArgumentError, 'invalid value for "high_availability_status", must be one of #{validator.allowable_values}.'
      end
      @high_availability_status = high_availability_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          node_uuid == o.node_uuid &&
          node_display_name == o.node_display_name &&
          status == o.status &&
          pnic_status == o.pnic_status &&
          mgmt_connection_status == o.mgmt_connection_status &&
          control_connection_status == o.control_connection_status &&
          tunnel_status == o.tunnel_status &&
          evpn_tunnel_status == o.evpn_tunnel_status &&
          threat_status == o.threat_status &&
          agent_status == o.agent_status &&
          node_status == o.node_status &&
          node_path == o.node_path &&
          vm_uuid == o.vm_uuid &&
          status_description == o.status_description &&
          last_aggsvc_heartbeat == o.last_aggsvc_heartbeat &&
          last_status_changed_time == o.last_status_changed_time &&
          node_type == o.node_type &&
          vtep_state == o.vtep_state &&
          storage_state == o.storage_state &&
          high_availability_status == o.high_availability_status &&
          tier_0s == o.tier_0s
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [node_uuid, node_display_name, status, pnic_status, mgmt_connection_status, control_connection_status, tunnel_status, evpn_tunnel_status, threat_status, agent_status, node_status, node_path, vm_uuid, status_description, last_aggsvc_heartbeat, last_status_changed_time, node_type, vtep_state, storage_state, high_availability_status, tier_0s].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
