=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # The capacity contains remaining available load balancer numbers and pool member number for the given Service Appliance node. 
  class LBServiceApplianceNodeCapacity
    # Form factor in use for deployment.
    attr_accessor :form_factor

    # Policy path of the service cluster.
    attr_accessor :service_cluster_path

    # The property identifies the load balancer cluster type. 
    attr_accessor :resource_type

    # The remaining pool member count means maximum number of pool members which could be configured in the given service cluster. 
    attr_accessor :remaining_pool_member_count

    # The remaining small load balancer count means maximum number of small load balancers which could be configured in the given service cluster. 
    attr_accessor :remaining_small_load_balancer_count

    # The remaining medium load balancer count means maximum number of medium load balancers which could be configured in the given service cluster. 
    attr_accessor :remaining_medium_load_balancer_count

    # The remaining large load balancer count means maximum number of large load balancers which could be configured in the given service cluster. 
    attr_accessor :remaining_large_load_balancer_count

    # The remaining xlarge load balancer count means maximum number of xlarge load balancers which could be configured in the given service cluster. 
    attr_accessor :remaining_xlarge_load_balancer_count

    # The property identifies the service node path. For example, node_path=/infra/sites/default/enforcement-points/default/ edge-clusters/46a3612a-85ac-4545-ba3c-2dbaa4f0b48c/edge-nodes/1. 
    attr_accessor :node_path

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'form_factor' => :'form_factor',
        :'service_cluster_path' => :'service_cluster_path',
        :'resource_type' => :'resource_type',
        :'remaining_pool_member_count' => :'remaining_pool_member_count',
        :'remaining_small_load_balancer_count' => :'remaining_small_load_balancer_count',
        :'remaining_medium_load_balancer_count' => :'remaining_medium_load_balancer_count',
        :'remaining_large_load_balancer_count' => :'remaining_large_load_balancer_count',
        :'remaining_xlarge_load_balancer_count' => :'remaining_xlarge_load_balancer_count',
        :'node_path' => :'node_path'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'form_factor' => :'String',
        :'service_cluster_path' => :'String',
        :'resource_type' => :'String',
        :'remaining_pool_member_count' => :'Integer',
        :'remaining_small_load_balancer_count' => :'Integer',
        :'remaining_medium_load_balancer_count' => :'Integer',
        :'remaining_large_load_balancer_count' => :'Integer',
        :'remaining_xlarge_load_balancer_count' => :'Integer',
        :'node_path' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'form_factor')
        self.form_factor = attributes[:'form_factor']
      end

      if attributes.has_key?(:'service_cluster_path')
        self.service_cluster_path = attributes[:'service_cluster_path']
      end

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'remaining_pool_member_count')
        self.remaining_pool_member_count = attributes[:'remaining_pool_member_count']
      end

      if attributes.has_key?(:'remaining_small_load_balancer_count')
        self.remaining_small_load_balancer_count = attributes[:'remaining_small_load_balancer_count']
      end

      if attributes.has_key?(:'remaining_medium_load_balancer_count')
        self.remaining_medium_load_balancer_count = attributes[:'remaining_medium_load_balancer_count']
      end

      if attributes.has_key?(:'remaining_large_load_balancer_count')
        self.remaining_large_load_balancer_count = attributes[:'remaining_large_load_balancer_count']
      end

      if attributes.has_key?(:'remaining_xlarge_load_balancer_count')
        self.remaining_xlarge_load_balancer_count = attributes[:'remaining_xlarge_load_balancer_count']
      end

      if attributes.has_key?(:'node_path')
        self.node_path = attributes[:'node_path']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      if @node_path.nil?
        invalid_properties.push('invalid value for "node_path", node_path cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      form_factor_validator = EnumAttributeValidator.new('String', ['SMALL_VIRTUAL_MACHINE', 'MEDIUM_VIRTUAL_MACHINE', 'LARGE_VIRTUAL_MACHINE', 'XLARGE_VIRTUAL_MACHINE'])
      return false unless form_factor_validator.valid?(@form_factor)
      return false if @resource_type.nil?
      return false if @node_path.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] form_factor Object to be assigned
    def form_factor=(form_factor)
      validator = EnumAttributeValidator.new('String', ['SMALL_VIRTUAL_MACHINE', 'MEDIUM_VIRTUAL_MACHINE', 'LARGE_VIRTUAL_MACHINE', 'XLARGE_VIRTUAL_MACHINE'])
      unless validator.valid?(form_factor)
        fail ArgumentError, 'invalid value for "form_factor", must be one of #{validator.allowable_values}.'
      end
      @form_factor = form_factor
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          form_factor == o.form_factor &&
          service_cluster_path == o.service_cluster_path &&
          resource_type == o.resource_type &&
          remaining_pool_member_count == o.remaining_pool_member_count &&
          remaining_small_load_balancer_count == o.remaining_small_load_balancer_count &&
          remaining_medium_load_balancer_count == o.remaining_medium_load_balancer_count &&
          remaining_large_load_balancer_count == o.remaining_large_load_balancer_count &&
          remaining_xlarge_load_balancer_count == o.remaining_xlarge_load_balancer_count &&
          node_path == o.node_path
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [form_factor, service_cluster_path, resource_type, remaining_pool_member_count, remaining_small_load_balancer_count, remaining_medium_load_balancer_count, remaining_large_load_balancer_count, remaining_xlarge_load_balancer_count, node_path].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
