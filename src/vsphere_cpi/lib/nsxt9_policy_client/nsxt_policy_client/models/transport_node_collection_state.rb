=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Realization state of attaching or detaching Transport node profile on compute collection.
  class TransportNodeCollectionState
    # If the host preparation or transport node creation is going on for any host then state will be \"IN_PROGRESS\".  If setting desired state of the transport node failed for any of the host then state will be \"FAILED_TO_CREATE\"  If realization of transport node failed for any of the host then state will be \"FAILED_TO_REALIZE\"  If Transport node is successfully created for all of the hosts in compute collection then state will be \"SUCCESS\"  If additional inputs are needed to realize the config on cluster member hosts via VC ConfigManager (VCP) then state will be \"VC_VCP_ACTION_PENDING\". This is applicable for VC Clusters where Image and Config Manager is enabled.  You can override the configuration for one or more hosts in the compute collection by update TN(transport node) request on individual TN. If TN is successfully created for all hosts in compute collection and one or more hosts have overridden configuration then transport node collection state will be \"PROFILE_MISMATCH\".  The installations triggered via VC import to VCF and Quick Start will support the following additional states:  TZ_CREATE - When the install activity is reading VDS inventory from vCenter and creating corresponding VLAN transport zone objects  TNP_CREATE - When the install activity is creating transport-node-profile based on the VDS to ESX host membership for a given cluster  SEG_SYNC - This indicates that NSX is reading all DVPortgroup inventory associated with the vCenter cluster and creating the corresponding discovered segments.  This state depends on the transport node states. If any update is done (e.g. update transport node profile attached to a cluster, update another transport node profile on a cluster), then transport node collection state might still show same state as before(e.g. SUCCESS if all transport nodes are in SUCCESS state before) until the transport node realization gets started. 
    attr_accessor :state

    # Detailed information about the current state of the installation
    attr_accessor :state_detail

    # Average of all transport node deployment progress in a cluster. Applicable only if transport node profile is applied on a cluster.
    attr_accessor :aggregate_progress_percentage

    # Transport node profile(TNP) will not be applied to a discovered node(DN) if some validations are not passed. In this case transport node is not created or existing transport node is not updated with TNP configurations.
    attr_accessor :validation_errors

    # Errors while applying transport node profile which need cluster level action to resolve
    attr_accessor :cluster_level_error

    # When vLCM is enabled on a compute collection in vSphere the transition workflow is triggered. This field indicates error in this special case.
    attr_accessor :vlcm_transition_error

    # List of hosts processed so far via VCP workflow
    attr_accessor :vcp_processed_hosts

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'state' => :'state',
        :'state_detail' => :'state_detail',
        :'aggregate_progress_percentage' => :'aggregate_progress_percentage',
        :'validation_errors' => :'validation_errors',
        :'cluster_level_error' => :'cluster_level_error',
        :'vlcm_transition_error' => :'vlcm_transition_error',
        :'vcp_processed_hosts' => :'vcp_processed_hosts'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'state' => :'String',
        :'state_detail' => :'String',
        :'aggregate_progress_percentage' => :'Integer',
        :'validation_errors' => :'Array<ValidationError>',
        :'cluster_level_error' => :'String',
        :'vlcm_transition_error' => :'String',
        :'vcp_processed_hosts' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'state_detail')
        self.state_detail = attributes[:'state_detail']
      end

      if attributes.has_key?(:'aggregate_progress_percentage')
        self.aggregate_progress_percentage = attributes[:'aggregate_progress_percentage']
      end

      if attributes.has_key?(:'validation_errors')
        if (value = attributes[:'validation_errors']).is_a?(Array)
          self.validation_errors = value
        end
      end

      if attributes.has_key?(:'cluster_level_error')
        self.cluster_level_error = attributes[:'cluster_level_error']
      end

      if attributes.has_key?(:'vlcm_transition_error')
        self.vlcm_transition_error = attributes[:'vlcm_transition_error']
      end

      if attributes.has_key?(:'vcp_processed_hosts')
        if (value = attributes[:'vcp_processed_hosts']).is_a?(Array)
          self.vcp_processed_hosts = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      state_validator = EnumAttributeValidator.new('String', ['FAILED_TO_CREATE', 'FAILED_TO_REALIZE', 'IN_PROGRESS', 'PROFILE_MISMATCH', 'SUCCESS', 'TZ_CREATE', 'TNP_CREATE', 'SEG_SYNC', 'VC_VCP_ACTION_PENDING', 'VC_VCP_ACTION_FAILED'])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ['FAILED_TO_CREATE', 'FAILED_TO_REALIZE', 'IN_PROGRESS', 'PROFILE_MISMATCH', 'SUCCESS', 'TZ_CREATE', 'TNP_CREATE', 'SEG_SYNC', 'VC_VCP_ACTION_PENDING', 'VC_VCP_ACTION_FAILED'])
      unless validator.valid?(state)
        fail ArgumentError, 'invalid value for "state", must be one of #{validator.allowable_values}.'
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          state == o.state &&
          state_detail == o.state_detail &&
          aggregate_progress_percentage == o.aggregate_progress_percentage &&
          validation_errors == o.validation_errors &&
          cluster_level_error == o.cluster_level_error &&
          vlcm_transition_error == o.vlcm_transition_error &&
          vcp_processed_hosts == o.vcp_processed_hosts
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [state, state_detail, aggregate_progress_percentage, validation_errors, cluster_level_error, vlcm_transition_error, vcp_processed_hosts].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
