=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # IPSec VPN traceflow observation. 
  class TraceflowObservationIpsecVpn
    # Local VPN endpoint IP Address. 
    attr_accessor :local_ip

    # Peer VPN endpoint IP Address. 
    attr_accessor :remote_ip

    # Inner source IP Address. 
    attr_accessor :inner_src_ip

    # Inner destination IP Address. 
    attr_accessor :inner_dst_ip

    # Security Parameter Index is used to uniquely identify a particular IPSec Security Association. 
    attr_accessor :spi

    # Virtual tunnel interface universally unique identifier in case of Route-based IPSec VPN. 
    attr_accessor :vti_id

    # IPSec tunnel interface universally unique identifier in case of Policy-based IPSec VPN. 
    attr_accessor :policy_id

    # IPSec VPN session universally unique identifier. 
    attr_accessor :session_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'local_ip' => :'local_ip',
        :'remote_ip' => :'remote_ip',
        :'inner_src_ip' => :'inner_src_ip',
        :'inner_dst_ip' => :'inner_dst_ip',
        :'spi' => :'spi',
        :'vti_id' => :'vti_id',
        :'policy_id' => :'policy_id',
        :'session_id' => :'session_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'local_ip' => :'String',
        :'remote_ip' => :'String',
        :'inner_src_ip' => :'String',
        :'inner_dst_ip' => :'String',
        :'spi' => :'Integer',
        :'vti_id' => :'String',
        :'policy_id' => :'String',
        :'session_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'local_ip')
        self.local_ip = attributes[:'local_ip']
      end

      if attributes.has_key?(:'remote_ip')
        self.remote_ip = attributes[:'remote_ip']
      end

      if attributes.has_key?(:'inner_src_ip')
        self.inner_src_ip = attributes[:'inner_src_ip']
      end

      if attributes.has_key?(:'inner_dst_ip')
        self.inner_dst_ip = attributes[:'inner_dst_ip']
      end

      if attributes.has_key?(:'spi')
        self.spi = attributes[:'spi']
      end

      if attributes.has_key?(:'vti_id')
        self.vti_id = attributes[:'vti_id']
      end

      if attributes.has_key?(:'policy_id')
        self.policy_id = attributes[:'policy_id']
      end

      if attributes.has_key?(:'session_id')
        self.session_id = attributes[:'session_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@spi.nil? && @spi > 4294967295
        invalid_properties.push('invalid value for "spi", must be smaller than or equal to 4294967295.')
      end

      if !@spi.nil? && @spi < 1
        invalid_properties.push('invalid value for "spi", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@spi.nil? && @spi > 4294967295
      return false if !@spi.nil? && @spi < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] spi Value to be assigned
    def spi=(spi)
      if !spi.nil? && spi > 4294967295
        fail ArgumentError, 'invalid value for "spi", must be smaller than or equal to 4294967295.'
      end

      if !spi.nil? && spi < 1
        fail ArgumentError, 'invalid value for "spi", must be greater than or equal to 1.'
      end

      @spi = spi
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          local_ip == o.local_ip &&
          remote_ip == o.remote_ip &&
          inner_src_ip == o.inner_src_ip &&
          inner_dst_ip == o.inner_dst_ip &&
          spi == o.spi &&
          vti_id == o.vti_id &&
          policy_id == o.policy_id &&
          session_id == o.session_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [local_ip, remote_ip, inner_src_ip, inner_dst_ip, spi, vti_id, policy_id, session_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
