=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Online Diagnostic System Runbook parameter of pattern type. 
  class OdsRunbookPatternParameter
    # Runbook argument name. 
    attr_accessor :name

    # The flag that indicates whether the argument is optional. 
    attr_accessor :optional

    # Runbook parameter type.   INTEGER - integer   STRING - string   ENUM - enumeration   PATTERN - string that matches certain regular expression   COMPOUND - string that is accepted by the validation of runbook   BOOLEAN - boolean   FLOAT - float 
    attr_accessor :parameter_type

    # Runbook argument will be set to this value if not provided. 
    attr_accessor :default_value

    # Runbook argument is not allowed to set value bigger than this. 
    attr_accessor :max

    # Runbook argument is not allowed to set value smaller than this. 
    attr_accessor :min

    # Regular expression of pattern for runbook parameter. If the parameter does not match this pattern, API call will be rejected. 
    attr_accessor :pattern

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'optional' => :'optional',
        :'parameter_type' => :'parameter_type',
        :'default_value' => :'default_value',
        :'max' => :'max',
        :'min' => :'min',
        :'pattern' => :'pattern'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'optional' => :'BOOLEAN',
        :'parameter_type' => :'String',
        :'default_value' => :'String',
        :'max' => :'String',
        :'min' => :'String',
        :'pattern' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'optional')
        self.optional = attributes[:'optional']
      else
        self.optional = false
      end

      if attributes.has_key?(:'parameter_type')
        self.parameter_type = attributes[:'parameter_type']
      end

      if attributes.has_key?(:'default_value')
        self.default_value = attributes[:'default_value']
      end

      if attributes.has_key?(:'max')
        self.max = attributes[:'max']
      end

      if attributes.has_key?(:'min')
        self.min = attributes[:'min']
      end

      if attributes.has_key?(:'pattern')
        self.pattern = attributes[:'pattern']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @parameter_type.nil?
        invalid_properties.push('invalid value for "parameter_type", parameter_type cannot be nil.')
      end

      if !@pattern.nil? && @pattern !~ Regexp.new(/^\\^.+\\$$/)
        invalid_properties.push('invalid value for "pattern", must conform to the pattern /^\\^.+\\$$/.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @parameter_type.nil?
      parameter_type_validator = EnumAttributeValidator.new('String', ['INTEGER', 'STRING', 'ENUM', 'PATTERN', 'COMPOUND', 'BOOLEAN', 'FLOAT'])
      return false unless parameter_type_validator.valid?(@parameter_type)
      return false if !@pattern.nil? && @pattern !~ Regexp.new(/^\\^.+\\$$/)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] parameter_type Object to be assigned
    def parameter_type=(parameter_type)
      validator = EnumAttributeValidator.new('String', ['INTEGER', 'STRING', 'ENUM', 'PATTERN', 'COMPOUND', 'BOOLEAN', 'FLOAT'])
      unless validator.valid?(parameter_type)
        fail ArgumentError, 'invalid value for "parameter_type", must be one of #{validator.allowable_values}.'
      end
      @parameter_type = parameter_type
    end

    # Custom attribute writer method with validation
    # @param [Object] pattern Value to be assigned
    def pattern=(pattern)
      if !pattern.nil? && pattern !~ Regexp.new(/^\\^.+\\$$/)
        fail ArgumentError, 'invalid value for "pattern", must conform to the pattern /^\\^.+\\$$/.'
      end

      @pattern = pattern
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          optional == o.optional &&
          parameter_type == o.parameter_type &&
          default_value == o.default_value &&
          max == o.max &&
          min == o.min &&
          pattern == o.pattern
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, optional, parameter_type, default_value, max, min, pattern].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
