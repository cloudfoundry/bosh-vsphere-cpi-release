=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Deployment Status for the transport node. 
  class MpsTransportNodeStatus
    # Transport node id.
    attr_accessor :transport_node_id

    # Deployment status of MPS SVM on Transport Node. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment.
    attr_accessor :tn_deployment_status

    # List of issue and detailed description of the issue in case of deployment failure.
    attr_accessor :tn_deployment_issues

    # This object contains the list of issues encountered during post deployment configuration for a particular Transport Node.
    attr_accessor :tn_configuration_issue

    # Health status of service VM deployed on this transport node.
    attr_accessor :tn_component_health_status_list

    # Sub-cluster identifier
    attr_accessor :sub_cluster_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transport_node_id' => :'transport_node_id',
        :'tn_deployment_status' => :'tn_deployment_status',
        :'tn_deployment_issues' => :'tn_deployment_issues',
        :'tn_configuration_issue' => :'tn_configuration_issue',
        :'tn_component_health_status_list' => :'tn_component_health_status_list',
        :'sub_cluster_id' => :'sub_cluster_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'transport_node_id' => :'String',
        :'tn_deployment_status' => :'String',
        :'tn_deployment_issues' => :'Array<MpsErrorClass>',
        :'tn_configuration_issue' => :'Array<MpsErrorClass>',
        :'tn_component_health_status_list' => :'Array<MpsTnComponentHealthStatus>',
        :'sub_cluster_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'transport_node_id')
        self.transport_node_id = attributes[:'transport_node_id']
      end

      if attributes.has_key?(:'tn_deployment_status')
        self.tn_deployment_status = attributes[:'tn_deployment_status']
      end

      if attributes.has_key?(:'tn_deployment_issues')
        if (value = attributes[:'tn_deployment_issues']).is_a?(Array)
          self.tn_deployment_issues = value
        end
      end

      if attributes.has_key?(:'tn_configuration_issue')
        if (value = attributes[:'tn_configuration_issue']).is_a?(Array)
          self.tn_configuration_issue = value
        end
      end

      if attributes.has_key?(:'tn_component_health_status_list')
        if (value = attributes[:'tn_component_health_status_list']).is_a?(Array)
          self.tn_component_health_status_list = value
        end
      end

      if attributes.has_key?(:'sub_cluster_id')
        self.sub_cluster_id = attributes[:'sub_cluster_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      tn_deployment_status_validator = EnumAttributeValidator.new('String', ['UPGRADE_IN_PROGRESS', 'UPGRADE_FAILED', 'DEPLOYMENT_QUEUED', 'DEPLOYMENT_IN_PROGRESS', 'DEPLOYMENT_FAILED', 'DEPLOYMENT_SUCCESSFUL', 'UNDEPLOYMENT_QUEUED', 'UNDEPLOYMENT_IN_PROGRESS', 'UNDEPLOYMENT_FAILED', 'UNDEPLOYMENT_SUCCESSFUL', 'UPGRADE_QUEUED'])
      return false unless tn_deployment_status_validator.valid?(@tn_deployment_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tn_deployment_status Object to be assigned
    def tn_deployment_status=(tn_deployment_status)
      validator = EnumAttributeValidator.new('String', ['UPGRADE_IN_PROGRESS', 'UPGRADE_FAILED', 'DEPLOYMENT_QUEUED', 'DEPLOYMENT_IN_PROGRESS', 'DEPLOYMENT_FAILED', 'DEPLOYMENT_SUCCESSFUL', 'UNDEPLOYMENT_QUEUED', 'UNDEPLOYMENT_IN_PROGRESS', 'UNDEPLOYMENT_FAILED', 'UNDEPLOYMENT_SUCCESSFUL', 'UPGRADE_QUEUED'])
      unless validator.valid?(tn_deployment_status)
        fail ArgumentError, 'invalid value for "tn_deployment_status", must be one of #{validator.allowable_values}.'
      end
      @tn_deployment_status = tn_deployment_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transport_node_id == o.transport_node_id &&
          tn_deployment_status == o.tn_deployment_status &&
          tn_deployment_issues == o.tn_deployment_issues &&
          tn_configuration_issue == o.tn_configuration_issue &&
          tn_component_health_status_list == o.tn_component_health_status_list &&
          sub_cluster_id == o.sub_cluster_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [transport_node_id, tn_deployment_status, tn_deployment_issues, tn_configuration_issue, tn_component_health_status_list, sub_cluster_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
