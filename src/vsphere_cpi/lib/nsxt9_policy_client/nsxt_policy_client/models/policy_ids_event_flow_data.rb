=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # IDS event flow data specific to each IDS event. The data includes source ip, source port, destination ip, destination port, protocol, rule id, profile id, and the action. 
  class PolicyIdsEventFlowData
    # IP address of the source VM on the intrusion flow.
    attr_accessor :source_ip

    # Source port through which traffic was initiated that caused the intrusion to be detected.
    attr_accessor :source_port

    # IP address of the destination VM on the intrusion flow.
    attr_accessor :destination_ip

    # Port on the destination VM where the traffic was sent to.
    attr_accessor :destination_port

    # Traffic protocol pertaining to the detected intrusion, could be TCP/UDP etc.
    attr_accessor :protocol

    # The IDS profile id that is associated with the IDS rule pertaining to the intrusion event detected.
    attr_accessor :profile_id

    # The IDS Rule id pertaining to the detected intrusion.
    attr_accessor :rule_id

    # The action pertaining to the detected intrusion. Possible values are ALERT, DROP, REJECT, and INVALID. ALERT - If there is a signature match on the packet, it is allowed to pass but a notification is sent to the user notifying an intrusion was detected. DROP - On a signature match, the packet is silently dropped. An alert is sent to the user that an intrusion was detected. REJECT - On a signature match, the packet is dropped and TCP RST or ICMP error messages (for non-TCP pkts) are sent to the endpoints. An alert is sent to the user that an intrusion was detected. INVALID - If the action doesn't belong to any of the above mentioned categories, it is marked as INVALID.
    attr_accessor :action_type

    # IP address of VM on the host where IDS engine is running.
    attr_accessor :local_vm_ip

    # IP address of the VM that initiated the communication.
    attr_accessor :client_ip

    # Bytes sent to client.
    attr_accessor :bytes_toclient

    # Bytes sent to server.
    attr_accessor :bytes_toserver

    # Name of the gateway on which this intrusion was detected.
    attr_accessor :gateway

    # Tags associated with the gateway on which this intrusion was detected.
    attr_accessor :gateway_tags

    # Name of the host on which this intrusion was detected.
    attr_accessor :host

    # The source where the intrusion was detected. Possible values are GATEWAY and HOST.
    attr_accessor :traffic_type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'source_ip' => :'source_ip',
        :'source_port' => :'source_port',
        :'destination_ip' => :'destination_ip',
        :'destination_port' => :'destination_port',
        :'protocol' => :'protocol',
        :'profile_id' => :'profile_id',
        :'rule_id' => :'rule_id',
        :'action_type' => :'action_type',
        :'local_vm_ip' => :'local_vm_ip',
        :'client_ip' => :'client_ip',
        :'bytes_toclient' => :'bytes_toclient',
        :'bytes_toserver' => :'bytes_toserver',
        :'gateway' => :'gateway',
        :'gateway_tags' => :'gateway_tags',
        :'host' => :'host',
        :'traffic_type' => :'traffic_type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'source_ip' => :'String',
        :'source_port' => :'Integer',
        :'destination_ip' => :'String',
        :'destination_port' => :'Integer',
        :'protocol' => :'String',
        :'profile_id' => :'String',
        :'rule_id' => :'Integer',
        :'action_type' => :'String',
        :'local_vm_ip' => :'String',
        :'client_ip' => :'String',
        :'bytes_toclient' => :'Integer',
        :'bytes_toserver' => :'Integer',
        :'gateway' => :'String',
        :'gateway_tags' => :'Array<Tag>',
        :'host' => :'String',
        :'traffic_type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'source_ip')
        self.source_ip = attributes[:'source_ip']
      end

      if attributes.has_key?(:'source_port')
        self.source_port = attributes[:'source_port']
      end

      if attributes.has_key?(:'destination_ip')
        self.destination_ip = attributes[:'destination_ip']
      end

      if attributes.has_key?(:'destination_port')
        self.destination_port = attributes[:'destination_port']
      end

      if attributes.has_key?(:'protocol')
        self.protocol = attributes[:'protocol']
      end

      if attributes.has_key?(:'profile_id')
        self.profile_id = attributes[:'profile_id']
      end

      if attributes.has_key?(:'rule_id')
        self.rule_id = attributes[:'rule_id']
      end

      if attributes.has_key?(:'action_type')
        self.action_type = attributes[:'action_type']
      end

      if attributes.has_key?(:'local_vm_ip')
        self.local_vm_ip = attributes[:'local_vm_ip']
      end

      if attributes.has_key?(:'client_ip')
        self.client_ip = attributes[:'client_ip']
      end

      if attributes.has_key?(:'bytes_toclient')
        self.bytes_toclient = attributes[:'bytes_toclient']
      end

      if attributes.has_key?(:'bytes_toserver')
        self.bytes_toserver = attributes[:'bytes_toserver']
      end

      if attributes.has_key?(:'gateway')
        self.gateway = attributes[:'gateway']
      end

      if attributes.has_key?(:'gateway_tags')
        if (value = attributes[:'gateway_tags']).is_a?(Array)
          self.gateway_tags = value
        end
      end

      if attributes.has_key?(:'host')
        self.host = attributes[:'host']
      end

      if attributes.has_key?(:'traffic_type')
        self.traffic_type = attributes[:'traffic_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      action_type_validator = EnumAttributeValidator.new('String', ['ALERT', 'DROP', 'REJECT', 'INVALID'])
      return false unless action_type_validator.valid?(@action_type)
      traffic_type_validator = EnumAttributeValidator.new('String', ['GATEWAY', 'HOST'])
      return false unless traffic_type_validator.valid?(@traffic_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action_type Object to be assigned
    def action_type=(action_type)
      validator = EnumAttributeValidator.new('String', ['ALERT', 'DROP', 'REJECT', 'INVALID'])
      unless validator.valid?(action_type)
        fail ArgumentError, 'invalid value for "action_type", must be one of #{validator.allowable_values}.'
      end
      @action_type = action_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] traffic_type Object to be assigned
    def traffic_type=(traffic_type)
      validator = EnumAttributeValidator.new('String', ['GATEWAY', 'HOST'])
      unless validator.valid?(traffic_type)
        fail ArgumentError, 'invalid value for "traffic_type", must be one of #{validator.allowable_values}.'
      end
      @traffic_type = traffic_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          source_ip == o.source_ip &&
          source_port == o.source_port &&
          destination_ip == o.destination_ip &&
          destination_port == o.destination_port &&
          protocol == o.protocol &&
          profile_id == o.profile_id &&
          rule_id == o.rule_id &&
          action_type == o.action_type &&
          local_vm_ip == o.local_vm_ip &&
          client_ip == o.client_ip &&
          bytes_toclient == o.bytes_toclient &&
          bytes_toserver == o.bytes_toserver &&
          gateway == o.gateway &&
          gateway_tags == o.gateway_tags &&
          host == o.host &&
          traffic_type == o.traffic_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [source_ip, source_port, destination_ip, destination_port, protocol, profile_id, rule_id, action_type, local_vm_ip, client_ip, bytes_toclient, bytes_toserver, gateway, gateway_tags, host, traffic_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
