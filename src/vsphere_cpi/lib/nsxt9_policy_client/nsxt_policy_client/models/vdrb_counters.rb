=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class VdrbCounters
    # Packets(IPv4) received on VDR
    attr_accessor :rx_ipv4

    # Packets(IPv4) sent from VDR
    attr_accessor :tx_ipv4

    # ICMP packets(IPv4) destinated to VDR and consumed by VDR
    attr_accessor :consumed_icmpv4

    # Packets(IPv6) received on VDR
    attr_accessor :rx_ipv6

    # Packets(IPv6) sent from VDR
    attr_accessor :tx_ipv6

    # ICMP packets(IPv6) destinated to VDR and consumed by VDR
    attr_accessor :consumed_icmpv6

    # Relayed DHCPv4 requests
    attr_accessor :relayed_dhcpv4_req

    # Relayed DHCPv4 responses
    attr_accessor :relayed_dhcpv4_rsp

    # Relayed DHCPv6 requests
    attr_accessor :relayed_dhcpv6_req

    # Relayed DHCPv6 responses
    attr_accessor :relayed_dhcpv6_rsp

    # Arp Reqests received
    attr_accessor :rx_arp_req

    # Arp Responses sent
    attr_accessor :tx_arp_rsp

    # No IPv4 ARP entry found
    attr_accessor :no_nbr_ipv4

    # No IPv6 Neighbor entry found
    attr_accessor :no_nbr_ipv6

    # Packets being tail dropped in the txDispatchQueue
    attr_accessor :tx_dispatch_queue_too_long_drops

    # Packets failed to be parsed
    attr_accessor :rx_pkt_parsing_error_drops

    # Packets which failed attribute operation
    attr_accessor :pkt_attr_error_drops

    # Packet(IPv4) drops due to low TTL
    attr_accessor :ttl_ipv4_drops

    # Packet(IPv4) matching drop routes
    attr_accessor :drop_route_ipv4_drops

    # The drops of packet(IPv4) pending on ARP resolution
    attr_accessor :arp_hold_pkt_drops

    # Reverse path forwarding drops of packet(IPv4)
    attr_accessor :rpf_ipv4_drops

    # No IPv4 routes
    attr_accessor :no_route_ipv4_drops

    # Packet(IPv6) drops due to low TTL
    attr_accessor :ttl_ipv6_drops

    # Packet(IPv6) matching drop routes
    attr_accessor :drop_route_ipv6_drops

    # The drops of packet(IPv6) pending on neighbor resolution
    attr_accessor :ns_hold_pkt_drops

    # Reverse path forwarding drops of packet(IPv6)
    attr_accessor :rpf_ipv6_drops

    # No IPv6 routes
    attr_accessor :no_route_ipv6_drops

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'rx_ipv4' => :'rx_ipv4',
        :'tx_ipv4' => :'tx_ipv4',
        :'consumed_icmpv4' => :'consumed_icmpv4',
        :'rx_ipv6' => :'rx_ipv6',
        :'tx_ipv6' => :'tx_ipv6',
        :'consumed_icmpv6' => :'consumed_icmpv6',
        :'relayed_dhcpv4_req' => :'relayed_dhcpv4_req',
        :'relayed_dhcpv4_rsp' => :'relayed_dhcpv4_rsp',
        :'relayed_dhcpv6_req' => :'relayed_dhcpv6_req',
        :'relayed_dhcpv6_rsp' => :'relayed_dhcpv6_rsp',
        :'rx_arp_req' => :'rx_arp_req',
        :'tx_arp_rsp' => :'tx_arp_rsp',
        :'no_nbr_ipv4' => :'no_nbr_ipv4',
        :'no_nbr_ipv6' => :'no_nbr_ipv6',
        :'tx_dispatch_queue_too_long_drops' => :'tx_dispatch_queue_too_long_drops',
        :'rx_pkt_parsing_error_drops' => :'rx_pkt_parsing_error_drops',
        :'pkt_attr_error_drops' => :'pkt_attr_error_drops',
        :'ttl_ipv4_drops' => :'ttl_ipv4_drops',
        :'drop_route_ipv4_drops' => :'drop_route_ipv4_drops',
        :'arp_hold_pkt_drops' => :'arp_hold_pkt_drops',
        :'rpf_ipv4_drops' => :'rpf_ipv4_drops',
        :'no_route_ipv4_drops' => :'no_route_ipv4_drops',
        :'ttl_ipv6_drops' => :'ttl_ipv6_drops',
        :'drop_route_ipv6_drops' => :'drop_route_ipv6_drops',
        :'ns_hold_pkt_drops' => :'ns_hold_pkt_drops',
        :'rpf_ipv6_drops' => :'rpf_ipv6_drops',
        :'no_route_ipv6_drops' => :'no_route_ipv6_drops'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'rx_ipv4' => :'Integer',
        :'tx_ipv4' => :'Integer',
        :'consumed_icmpv4' => :'Integer',
        :'rx_ipv6' => :'Integer',
        :'tx_ipv6' => :'Integer',
        :'consumed_icmpv6' => :'Integer',
        :'relayed_dhcpv4_req' => :'Integer',
        :'relayed_dhcpv4_rsp' => :'Integer',
        :'relayed_dhcpv6_req' => :'Integer',
        :'relayed_dhcpv6_rsp' => :'Integer',
        :'rx_arp_req' => :'Integer',
        :'tx_arp_rsp' => :'Integer',
        :'no_nbr_ipv4' => :'Integer',
        :'no_nbr_ipv6' => :'Integer',
        :'tx_dispatch_queue_too_long_drops' => :'Integer',
        :'rx_pkt_parsing_error_drops' => :'Integer',
        :'pkt_attr_error_drops' => :'Integer',
        :'ttl_ipv4_drops' => :'Integer',
        :'drop_route_ipv4_drops' => :'Integer',
        :'arp_hold_pkt_drops' => :'Integer',
        :'rpf_ipv4_drops' => :'Integer',
        :'no_route_ipv4_drops' => :'Integer',
        :'ttl_ipv6_drops' => :'Integer',
        :'drop_route_ipv6_drops' => :'Integer',
        :'ns_hold_pkt_drops' => :'Integer',
        :'rpf_ipv6_drops' => :'Integer',
        :'no_route_ipv6_drops' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'rx_ipv4')
        self.rx_ipv4 = attributes[:'rx_ipv4']
      end

      if attributes.has_key?(:'tx_ipv4')
        self.tx_ipv4 = attributes[:'tx_ipv4']
      end

      if attributes.has_key?(:'consumed_icmpv4')
        self.consumed_icmpv4 = attributes[:'consumed_icmpv4']
      end

      if attributes.has_key?(:'rx_ipv6')
        self.rx_ipv6 = attributes[:'rx_ipv6']
      end

      if attributes.has_key?(:'tx_ipv6')
        self.tx_ipv6 = attributes[:'tx_ipv6']
      end

      if attributes.has_key?(:'consumed_icmpv6')
        self.consumed_icmpv6 = attributes[:'consumed_icmpv6']
      end

      if attributes.has_key?(:'relayed_dhcpv4_req')
        self.relayed_dhcpv4_req = attributes[:'relayed_dhcpv4_req']
      end

      if attributes.has_key?(:'relayed_dhcpv4_rsp')
        self.relayed_dhcpv4_rsp = attributes[:'relayed_dhcpv4_rsp']
      end

      if attributes.has_key?(:'relayed_dhcpv6_req')
        self.relayed_dhcpv6_req = attributes[:'relayed_dhcpv6_req']
      end

      if attributes.has_key?(:'relayed_dhcpv6_rsp')
        self.relayed_dhcpv6_rsp = attributes[:'relayed_dhcpv6_rsp']
      end

      if attributes.has_key?(:'rx_arp_req')
        self.rx_arp_req = attributes[:'rx_arp_req']
      end

      if attributes.has_key?(:'tx_arp_rsp')
        self.tx_arp_rsp = attributes[:'tx_arp_rsp']
      end

      if attributes.has_key?(:'no_nbr_ipv4')
        self.no_nbr_ipv4 = attributes[:'no_nbr_ipv4']
      end

      if attributes.has_key?(:'no_nbr_ipv6')
        self.no_nbr_ipv6 = attributes[:'no_nbr_ipv6']
      end

      if attributes.has_key?(:'tx_dispatch_queue_too_long_drops')
        self.tx_dispatch_queue_too_long_drops = attributes[:'tx_dispatch_queue_too_long_drops']
      end

      if attributes.has_key?(:'rx_pkt_parsing_error_drops')
        self.rx_pkt_parsing_error_drops = attributes[:'rx_pkt_parsing_error_drops']
      end

      if attributes.has_key?(:'pkt_attr_error_drops')
        self.pkt_attr_error_drops = attributes[:'pkt_attr_error_drops']
      end

      if attributes.has_key?(:'ttl_ipv4_drops')
        self.ttl_ipv4_drops = attributes[:'ttl_ipv4_drops']
      end

      if attributes.has_key?(:'drop_route_ipv4_drops')
        self.drop_route_ipv4_drops = attributes[:'drop_route_ipv4_drops']
      end

      if attributes.has_key?(:'arp_hold_pkt_drops')
        self.arp_hold_pkt_drops = attributes[:'arp_hold_pkt_drops']
      end

      if attributes.has_key?(:'rpf_ipv4_drops')
        self.rpf_ipv4_drops = attributes[:'rpf_ipv4_drops']
      end

      if attributes.has_key?(:'no_route_ipv4_drops')
        self.no_route_ipv4_drops = attributes[:'no_route_ipv4_drops']
      end

      if attributes.has_key?(:'ttl_ipv6_drops')
        self.ttl_ipv6_drops = attributes[:'ttl_ipv6_drops']
      end

      if attributes.has_key?(:'drop_route_ipv6_drops')
        self.drop_route_ipv6_drops = attributes[:'drop_route_ipv6_drops']
      end

      if attributes.has_key?(:'ns_hold_pkt_drops')
        self.ns_hold_pkt_drops = attributes[:'ns_hold_pkt_drops']
      end

      if attributes.has_key?(:'rpf_ipv6_drops')
        self.rpf_ipv6_drops = attributes[:'rpf_ipv6_drops']
      end

      if attributes.has_key?(:'no_route_ipv6_drops')
        self.no_route_ipv6_drops = attributes[:'no_route_ipv6_drops']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          rx_ipv4 == o.rx_ipv4 &&
          tx_ipv4 == o.tx_ipv4 &&
          consumed_icmpv4 == o.consumed_icmpv4 &&
          rx_ipv6 == o.rx_ipv6 &&
          tx_ipv6 == o.tx_ipv6 &&
          consumed_icmpv6 == o.consumed_icmpv6 &&
          relayed_dhcpv4_req == o.relayed_dhcpv4_req &&
          relayed_dhcpv4_rsp == o.relayed_dhcpv4_rsp &&
          relayed_dhcpv6_req == o.relayed_dhcpv6_req &&
          relayed_dhcpv6_rsp == o.relayed_dhcpv6_rsp &&
          rx_arp_req == o.rx_arp_req &&
          tx_arp_rsp == o.tx_arp_rsp &&
          no_nbr_ipv4 == o.no_nbr_ipv4 &&
          no_nbr_ipv6 == o.no_nbr_ipv6 &&
          tx_dispatch_queue_too_long_drops == o.tx_dispatch_queue_too_long_drops &&
          rx_pkt_parsing_error_drops == o.rx_pkt_parsing_error_drops &&
          pkt_attr_error_drops == o.pkt_attr_error_drops &&
          ttl_ipv4_drops == o.ttl_ipv4_drops &&
          drop_route_ipv4_drops == o.drop_route_ipv4_drops &&
          arp_hold_pkt_drops == o.arp_hold_pkt_drops &&
          rpf_ipv4_drops == o.rpf_ipv4_drops &&
          no_route_ipv4_drops == o.no_route_ipv4_drops &&
          ttl_ipv6_drops == o.ttl_ipv6_drops &&
          drop_route_ipv6_drops == o.drop_route_ipv6_drops &&
          ns_hold_pkt_drops == o.ns_hold_pkt_drops &&
          rpf_ipv6_drops == o.rpf_ipv6_drops &&
          no_route_ipv6_drops == o.no_route_ipv6_drops
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [rx_ipv4, tx_ipv4, consumed_icmpv4, rx_ipv6, tx_ipv6, consumed_icmpv6, relayed_dhcpv4_req, relayed_dhcpv4_rsp, relayed_dhcpv6_req, relayed_dhcpv6_rsp, rx_arp_req, tx_arp_rsp, no_nbr_ipv4, no_nbr_ipv6, tx_dispatch_queue_too_long_drops, rx_pkt_parsing_error_drops, pkt_attr_error_drops, ttl_ipv4_drops, drop_route_ipv4_drops, arp_hold_pkt_drops, rpf_ipv4_drops, no_route_ipv4_drops, ttl_ipv6_drops, drop_route_ipv6_drops, ns_hold_pkt_drops, rpf_ipv6_drops, no_route_ipv6_drops].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
