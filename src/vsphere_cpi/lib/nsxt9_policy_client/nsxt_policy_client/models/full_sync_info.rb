=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Represents details of the last full sync if full sync is not running, otherwise returns the status of current full sync. 
  class FullSyncInfo
    # Full sync id
    attr_accessor :full_sync_id

    # Full sync status
    attr_accessor :status

    # Full sync can happen for various internal reasons, as well user can request for one. The code provides the classification of possible reasons to start a full sync.
    attr_accessor :reason_code

    # Description of full sync reason
    attr_accessor :reason

    # This provides the insights into current full sync stage if in progress. 
    attr_accessor :stage

    # Full sync start time
    attr_accessor :start_time

    # Full sync end time
    attr_accessor :end_time

    # Details about full sync on sender side
    attr_accessor :data_streaming_from_source_progress

    # Start time of streaming full state from source
    attr_accessor :data_streaming_from_source_start_time

    # End time of streaming full state from source
    attr_accessor :data_streaming_from_source_end_time

    # This is optional information, provides useful insights on receiver side once async channel hands over full state data to receiver. 
    attr_accessor :receiver_state

    # Start time of applying full state on receiver side
    attr_accessor :receiver_start_time

    # End time of completing applying full state on receiver side
    attr_accessor :receiver_end_time

    # Time taken by application receiver to apply the full state received
    attr_accessor :receiver_time_to_apply_in_millis

    # Errors if any
    attr_accessor :errors

    # Errors if any
    attr_accessor :warnings

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'full_sync_id' => :'fullSyncId',
        :'status' => :'status',
        :'reason_code' => :'reason_code',
        :'reason' => :'reason',
        :'stage' => :'stage',
        :'start_time' => :'start_time',
        :'end_time' => :'end_time',
        :'data_streaming_from_source_progress' => :'data_streaming_from_source_progress',
        :'data_streaming_from_source_start_time' => :'data_streaming_from_source_start_time',
        :'data_streaming_from_source_end_time' => :'data_streaming_from_source_end_time',
        :'receiver_state' => :'receiver_state',
        :'receiver_start_time' => :'receiver_start_time',
        :'receiver_end_time' => :'receiver_end_time',
        :'receiver_time_to_apply_in_millis' => :'receiver_time_to_apply_in_millis',
        :'errors' => :'errors',
        :'warnings' => :'warnings'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'full_sync_id' => :'String',
        :'status' => :'String',
        :'reason_code' => :'String',
        :'reason' => :'String',
        :'stage' => :'String',
        :'start_time' => :'Integer',
        :'end_time' => :'Integer',
        :'data_streaming_from_source_progress' => :'String',
        :'data_streaming_from_source_start_time' => :'Integer',
        :'data_streaming_from_source_end_time' => :'Integer',
        :'receiver_state' => :'String',
        :'receiver_start_time' => :'Integer',
        :'receiver_end_time' => :'Integer',
        :'receiver_time_to_apply_in_millis' => :'Integer',
        :'errors' => :'Array<String>',
        :'warnings' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'fullSyncId')
        self.full_sync_id = attributes[:'fullSyncId']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'reason_code')
        self.reason_code = attributes[:'reason_code']
      end

      if attributes.has_key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.has_key?(:'stage')
        self.stage = attributes[:'stage']
      end

      if attributes.has_key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.has_key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.has_key?(:'data_streaming_from_source_progress')
        self.data_streaming_from_source_progress = attributes[:'data_streaming_from_source_progress']
      end

      if attributes.has_key?(:'data_streaming_from_source_start_time')
        self.data_streaming_from_source_start_time = attributes[:'data_streaming_from_source_start_time']
      end

      if attributes.has_key?(:'data_streaming_from_source_end_time')
        self.data_streaming_from_source_end_time = attributes[:'data_streaming_from_source_end_time']
      end

      if attributes.has_key?(:'receiver_state')
        self.receiver_state = attributes[:'receiver_state']
      end

      if attributes.has_key?(:'receiver_start_time')
        self.receiver_start_time = attributes[:'receiver_start_time']
      end

      if attributes.has_key?(:'receiver_end_time')
        self.receiver_end_time = attributes[:'receiver_end_time']
      end

      if attributes.has_key?(:'receiver_time_to_apply_in_millis')
        self.receiver_time_to_apply_in_millis = attributes[:'receiver_time_to_apply_in_millis']
      end

      if attributes.has_key?(:'errors')
        if (value = attributes[:'errors']).is_a?(Array)
          self.errors = value
        end
      end

      if attributes.has_key?(:'warnings')
        if (value = attributes[:'warnings']).is_a?(Array)
          self.warnings = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['NOT_STARTED', 'IN_PROGRESS', 'COMPLETED'])
      return false unless status_validator.valid?(@status)
      reason_code_validator = EnumAttributeValidator.new('String', ['QUEUE_OVERFLOW_ON_TRANSMITTER', 'QUEUE_OVERFLOW_ON_RECEIVER', 'CONNECTION_RESTORED', 'LM_ONBOARDED', 'GM_SWITCHOVER', 'RESTORED_GM_FROM_BACKUP', 'RESTORED_LM_FROM_BACKUP', 'BROWNFIELD_CONFIG_MIGRATION_FROM_LM_TO_GM', 'GM_REQUESTED_OVERSIZED_PAYLOAD', 'GM_REQUESTED_SITE_ONBOARDING', 'GM_REQUESTED_OTHER', 'LM_REQUSTED_OVERSIZED_PAYLOAD', 'LM_REQUESTED_OTHER', 'USER_REQUSTED', 'OTHER_AR_INTERNAL', 'POST_UPGRADE_GM', 'POST_UPGRADE_LM', 'UNKNOWN'])
      return false unless reason_code_validator.valid?(@reason_code)
      stage_validator = EnumAttributeValidator.new('String', ['NOT_STARTED', 'REQUESTED_FULL_STATE_FROM_SOURCE', 'TRANSFERRING_FULL_STATE', 'COMPLETED_TRANSFERRING_FULL_STATE', 'DESTINATION_APPLYING_FULL_STATE', 'COMPLETED_SUCCESSFUL', 'TIMEOUT_ON_SOURCE_RECEIVE_FULL_STATE', 'TIMEOUT_ON_DESTINATION_APPLY', 'COMPLETED_FAILED'])
      return false unless stage_validator.valid?(@stage)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['NOT_STARTED', 'IN_PROGRESS', 'COMPLETED'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason_code Object to be assigned
    def reason_code=(reason_code)
      validator = EnumAttributeValidator.new('String', ['QUEUE_OVERFLOW_ON_TRANSMITTER', 'QUEUE_OVERFLOW_ON_RECEIVER', 'CONNECTION_RESTORED', 'LM_ONBOARDED', 'GM_SWITCHOVER', 'RESTORED_GM_FROM_BACKUP', 'RESTORED_LM_FROM_BACKUP', 'BROWNFIELD_CONFIG_MIGRATION_FROM_LM_TO_GM', 'GM_REQUESTED_OVERSIZED_PAYLOAD', 'GM_REQUESTED_SITE_ONBOARDING', 'GM_REQUESTED_OTHER', 'LM_REQUSTED_OVERSIZED_PAYLOAD', 'LM_REQUESTED_OTHER', 'USER_REQUSTED', 'OTHER_AR_INTERNAL', 'POST_UPGRADE_GM', 'POST_UPGRADE_LM', 'UNKNOWN'])
      unless validator.valid?(reason_code)
        fail ArgumentError, 'invalid value for "reason_code", must be one of #{validator.allowable_values}.'
      end
      @reason_code = reason_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stage Object to be assigned
    def stage=(stage)
      validator = EnumAttributeValidator.new('String', ['NOT_STARTED', 'REQUESTED_FULL_STATE_FROM_SOURCE', 'TRANSFERRING_FULL_STATE', 'COMPLETED_TRANSFERRING_FULL_STATE', 'DESTINATION_APPLYING_FULL_STATE', 'COMPLETED_SUCCESSFUL', 'TIMEOUT_ON_SOURCE_RECEIVE_FULL_STATE', 'TIMEOUT_ON_DESTINATION_APPLY', 'COMPLETED_FAILED'])
      unless validator.valid?(stage)
        fail ArgumentError, 'invalid value for "stage", must be one of #{validator.allowable_values}.'
      end
      @stage = stage
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          full_sync_id == o.full_sync_id &&
          status == o.status &&
          reason_code == o.reason_code &&
          reason == o.reason &&
          stage == o.stage &&
          start_time == o.start_time &&
          end_time == o.end_time &&
          data_streaming_from_source_progress == o.data_streaming_from_source_progress &&
          data_streaming_from_source_start_time == o.data_streaming_from_source_start_time &&
          data_streaming_from_source_end_time == o.data_streaming_from_source_end_time &&
          receiver_state == o.receiver_state &&
          receiver_start_time == o.receiver_start_time &&
          receiver_end_time == o.receiver_end_time &&
          receiver_time_to_apply_in_millis == o.receiver_time_to_apply_in_millis &&
          errors == o.errors &&
          warnings == o.warnings
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [full_sync_id, status, reason_code, reason, stage, start_time, end_time, data_streaming_from_source_progress, data_streaming_from_source_start_time, data_streaming_from_source_end_time, receiver_state, receiver_start_time, receiver_end_time, receiver_time_to_apply_in_millis, errors, warnings].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
