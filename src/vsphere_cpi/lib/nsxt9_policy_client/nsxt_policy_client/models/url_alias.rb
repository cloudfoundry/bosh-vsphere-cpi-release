=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Short name or alias of a url. It is used to represent the url.
  class UrlAlias
    # Short name or alias of url, if any. If not specified, the url can be referenced by its index in the array of urls of the datasource instance as $<index> (for example, $0).
    attr_accessor :_alias

    # Url to fetch data from.
    attr_accessor :url

    # Search query to be applied, if any. If query string is not provided, it will be ignored.
    attr_accessor :query

    # Type of the http method (Get, Post) to be used while invoking the given url through dashboard datasource framework.
    attr_accessor :request_method

    # A raw request header in the form json format for a given url. This request header will be submitted along with request while giving a api call.
    attr_accessor :request_headers

    # A raw request body in the form json format for a given url. This request body will be submitted along with request while giving a post api call.
    attr_accessor :request_body

    attr_accessor :keystore_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_alias' => :'alias',
        :'url' => :'url',
        :'query' => :'query',
        :'request_method' => :'request_method',
        :'request_headers' => :'request_headers',
        :'request_body' => :'request_body',
        :'keystore_info' => :'keystore_info'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_alias' => :'String',
        :'url' => :'String',
        :'query' => :'String',
        :'request_method' => :'String',
        :'request_headers' => :'Object',
        :'request_body' => :'Object',
        :'keystore_info' => :'KeyStoreInfo'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'alias')
        self._alias = attributes[:'alias']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.has_key?(:'request_method')
        self.request_method = attributes[:'request_method']
      else
        self.request_method = 'Get'
      end

      if attributes.has_key?(:'request_headers')
        self.request_headers = attributes[:'request_headers']
      end

      if attributes.has_key?(:'request_body')
        self.request_body = attributes[:'request_body']
      end

      if attributes.has_key?(:'keystore_info')
        self.keystore_info = attributes[:'keystore_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@_alias.nil? && @_alias.to_s.length > 255
        invalid_properties.push('invalid value for "_alias", the character length must be smaller than or equal to 255.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @url.to_s.length > 1024
        invalid_properties.push('invalid value for "url", the character length must be smaller than or equal to 1024.')
      end

      if !@query.nil? && @query.to_s.length > 1024
        invalid_properties.push('invalid value for "query", the character length must be smaller than or equal to 1024.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@_alias.nil? && @_alias.to_s.length > 255
      return false if @url.nil?
      return false if @url.to_s.length > 1024
      return false if !@query.nil? && @query.to_s.length > 1024
      request_method_validator = EnumAttributeValidator.new('String', ['Get', 'Post'])
      return false unless request_method_validator.valid?(@request_method)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] _alias Value to be assigned
    def _alias=(_alias)
      if !_alias.nil? && _alias.to_s.length > 255
        fail ArgumentError, 'invalid value for "_alias", the character length must be smaller than or equal to 255.'
      end

      @_alias = _alias
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if url.nil?
        fail ArgumentError, 'url cannot be nil'
      end

      if url.to_s.length > 1024
        fail ArgumentError, 'invalid value for "url", the character length must be smaller than or equal to 1024.'
      end

      @url = url
    end

    # Custom attribute writer method with validation
    # @param [Object] query Value to be assigned
    def query=(query)
      if !query.nil? && query.to_s.length > 1024
        fail ArgumentError, 'invalid value for "query", the character length must be smaller than or equal to 1024.'
      end

      @query = query
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_method Object to be assigned
    def request_method=(request_method)
      validator = EnumAttributeValidator.new('String', ['Get', 'Post'])
      unless validator.valid?(request_method)
        fail ArgumentError, 'invalid value for "request_method", must be one of #{validator.allowable_values}.'
      end
      @request_method = request_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _alias == o._alias &&
          url == o.url &&
          query == o.query &&
          request_method == o.request_method &&
          request_headers == o.request_headers &&
          request_body == o.request_body &&
          keystore_info == o.keystore_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_alias, url, query, request_method, request_headers, request_body, keystore_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
