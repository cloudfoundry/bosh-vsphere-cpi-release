=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Represents a reference to a widget that is held by a container or a multi-widget or a View.
  class WidgetItem
    attr_accessor :label

    # Id of the widget configuration that is held by a multi-widget or a container or a view.
    attr_accessor :widget_id

    # Determines placement of widget or container relative to other widgets and containers. The lower the weight, the higher it is in the placement order.
    attr_accessor :weight

    # Aligns widget either left or right.
    attr_accessor :alignment

    # If true, separates this widget in a container.
    attr_accessor :separator

    # Represents the horizontal span of the widget / container.
    attr_accessor :span

    # Represents the vertical span of the widget / container
    attr_accessor :rowspan

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'label' => :'label',
        :'widget_id' => :'widget_id',
        :'weight' => :'weight',
        :'alignment' => :'alignment',
        :'separator' => :'separator',
        :'span' => :'span',
        :'rowspan' => :'rowspan'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'label' => :'Label',
        :'widget_id' => :'String',
        :'weight' => :'Integer',
        :'alignment' => :'String',
        :'separator' => :'BOOLEAN',
        :'span' => :'Integer',
        :'rowspan' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'widget_id')
        self.widget_id = attributes[:'widget_id']
      end

      if attributes.has_key?(:'weight')
        self.weight = attributes[:'weight']
      else
        self.weight = 10000
      end

      if attributes.has_key?(:'alignment')
        self.alignment = attributes[:'alignment']
      else
        self.alignment = 'LEFT'
      end

      if attributes.has_key?(:'separator')
        self.separator = attributes[:'separator']
      else
        self.separator = false
      end

      if attributes.has_key?(:'span')
        self.span = attributes[:'span']
      end

      if attributes.has_key?(:'rowspan')
        self.rowspan = attributes[:'rowspan']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @widget_id.nil?
        invalid_properties.push('invalid value for "widget_id", widget_id cannot be nil.')
      end

      if @widget_id.to_s.length > 255
        invalid_properties.push('invalid value for "widget_id", the character length must be smaller than or equal to 255.')
      end

      if !@span.nil? && @span > 12
        invalid_properties.push('invalid value for "span", must be smaller than or equal to 12.')
      end

      if !@span.nil? && @span < 1
        invalid_properties.push('invalid value for "span", must be greater than or equal to 1.')
      end

      if !@rowspan.nil? && @rowspan < 1
        invalid_properties.push('invalid value for "rowspan", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @widget_id.nil?
      return false if @widget_id.to_s.length > 255
      alignment_validator = EnumAttributeValidator.new('String', ['LEFT', 'RIGHT'])
      return false unless alignment_validator.valid?(@alignment)
      return false if !@span.nil? && @span > 12
      return false if !@span.nil? && @span < 1
      return false if !@rowspan.nil? && @rowspan < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] widget_id Value to be assigned
    def widget_id=(widget_id)
      if widget_id.nil?
        fail ArgumentError, 'widget_id cannot be nil'
      end

      if widget_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "widget_id", the character length must be smaller than or equal to 255.'
      end

      @widget_id = widget_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alignment Object to be assigned
    def alignment=(alignment)
      validator = EnumAttributeValidator.new('String', ['LEFT', 'RIGHT'])
      unless validator.valid?(alignment)
        fail ArgumentError, 'invalid value for "alignment", must be one of #{validator.allowable_values}.'
      end
      @alignment = alignment
    end

    # Custom attribute writer method with validation
    # @param [Object] span Value to be assigned
    def span=(span)
      if !span.nil? && span > 12
        fail ArgumentError, 'invalid value for "span", must be smaller than or equal to 12.'
      end

      if !span.nil? && span < 1
        fail ArgumentError, 'invalid value for "span", must be greater than or equal to 1.'
      end

      @span = span
    end

    # Custom attribute writer method with validation
    # @param [Object] rowspan Value to be assigned
    def rowspan=(rowspan)
      if !rowspan.nil? && rowspan < 1
        fail ArgumentError, 'invalid value for "rowspan", must be greater than or equal to 1.'
      end

      @rowspan = rowspan
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          label == o.label &&
          widget_id == o.widget_id &&
          weight == o.weight &&
          alignment == o.alignment &&
          separator == o.separator &&
          span == o.span &&
          rowspan == o.rowspan
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [label, widget_id, weight, alignment, separator, span, rowspan].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
