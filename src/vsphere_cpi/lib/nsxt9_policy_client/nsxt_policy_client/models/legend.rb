=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Represents legend that describes the entities of the widget.
  class Legend
    # Describes the render type for the legend. The legend for an entity describes the entity in the widget. The supported legend type is a circle against which the entity's details such as display_name are shown. The color of the circle denotes the color of the entity shown inside the widget.
    attr_accessor :type

    # Describes the relative placement of legend. The legend of a widget can be placed either to the TOP or BOTTOM or LEFT or RIGHT relative to the widget. For example, if RIGHT is chosen then legend is placed to the right of the widget.
    attr_accessor :position

    # Describes the alignment of legend. Alignment of a legend denotes how individual items of the legend are aligned in a container. For example, if VERTICAL is chosen then the items of the legend will appear one below the other and if HORIZONTAL is chosen then the items will appear side by side.
    attr_accessor :alignment

    # If set to true, it will display the counts in legend. If set to false, counts of entities are not displayed in the legend.
    attr_accessor :display_count

    # Show unit of entities in the legend.
    attr_accessor :unit

    # Show checkbox along with legends if value is set to true. Widget filtering capability can be enable based on legend checkbox selection. for 'display_mode' SHOW_OTHER_GROUP_WITH_LEGENDS filterable property is not supported.
    attr_accessor :filterable

    # Display mode for legends.
    attr_accessor :display_mode

    # A minimum number of legends to be displayed upfront. if 'display_mode' is set to SHOW_MIN_NO_OF_LEGENDS then this property value will be used to display number of legends upfront in the UI.
    attr_accessor :min_legends_display_count

    # A translated label for showing other category label in legends.
    attr_accessor :other_group_legend_label

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'position' => :'position',
        :'alignment' => :'alignment',
        :'display_count' => :'display_count',
        :'unit' => :'unit',
        :'filterable' => :'filterable',
        :'display_mode' => :'display_mode',
        :'min_legends_display_count' => :'min_legends_display_count',
        :'other_group_legend_label' => :'other_group_legend_label'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'type' => :'String',
        :'position' => :'String',
        :'alignment' => :'String',
        :'display_count' => :'BOOLEAN',
        :'unit' => :'String',
        :'filterable' => :'BOOLEAN',
        :'display_mode' => :'String',
        :'min_legends_display_count' => :'Integer',
        :'other_group_legend_label' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = 'CIRCLE'
      end

      if attributes.has_key?(:'position')
        self.position = attributes[:'position']
      else
        self.position = 'RIGHT'
      end

      if attributes.has_key?(:'alignment')
        self.alignment = attributes[:'alignment']
      else
        self.alignment = 'VERTICAL'
      end

      if attributes.has_key?(:'display_count')
        self.display_count = attributes[:'display_count']
      else
        self.display_count = true
      end

      if attributes.has_key?(:'unit')
        self.unit = attributes[:'unit']
      end

      if attributes.has_key?(:'filterable')
        self.filterable = attributes[:'filterable']
      else
        self.filterable = false
      end

      if attributes.has_key?(:'display_mode')
        self.display_mode = attributes[:'display_mode']
      else
        self.display_mode = 'SHOW_ALL_LEGENDS'
      end

      if attributes.has_key?(:'min_legends_display_count')
        self.min_legends_display_count = attributes[:'min_legends_display_count']
      else
        self.min_legends_display_count = 3
      end

      if attributes.has_key?(:'other_group_legend_label')
        self.other_group_legend_label = attributes[:'other_group_legend_label']
      else
        self.other_group_legend_label = 'WIDGET_LABEL_OTHER_LEGEND_LABEL'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@min_legends_display_count.nil? && @min_legends_display_count > 12
        invalid_properties.push('invalid value for "min_legends_display_count", must be smaller than or equal to 12.')
      end

      if !@min_legends_display_count.nil? && @min_legends_display_count < 1
        invalid_properties.push('invalid value for "min_legends_display_count", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ['CIRCLE'])
      return false unless type_validator.valid?(@type)
      position_validator = EnumAttributeValidator.new('String', ['TOP', 'BOTTOM', 'LEFT', 'RIGHT', 'TOP_RIGHT'])
      return false unless position_validator.valid?(@position)
      alignment_validator = EnumAttributeValidator.new('String', ['HORIZONTAL', 'VERTICAL'])
      return false unless alignment_validator.valid?(@alignment)
      display_mode_validator = EnumAttributeValidator.new('String', ['SHOW_ALL_LEGENDS', 'SHOW_MIN_NO_OF_LEGENDS', 'SHOW_OTHER_GROUP_WITH_LEGENDS'])
      return false unless display_mode_validator.valid?(@display_mode)
      return false if !@min_legends_display_count.nil? && @min_legends_display_count > 12
      return false if !@min_legends_display_count.nil? && @min_legends_display_count < 1
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['CIRCLE'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] position Object to be assigned
    def position=(position)
      validator = EnumAttributeValidator.new('String', ['TOP', 'BOTTOM', 'LEFT', 'RIGHT', 'TOP_RIGHT'])
      unless validator.valid?(position)
        fail ArgumentError, 'invalid value for "position", must be one of #{validator.allowable_values}.'
      end
      @position = position
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alignment Object to be assigned
    def alignment=(alignment)
      validator = EnumAttributeValidator.new('String', ['HORIZONTAL', 'VERTICAL'])
      unless validator.valid?(alignment)
        fail ArgumentError, 'invalid value for "alignment", must be one of #{validator.allowable_values}.'
      end
      @alignment = alignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_mode Object to be assigned
    def display_mode=(display_mode)
      validator = EnumAttributeValidator.new('String', ['SHOW_ALL_LEGENDS', 'SHOW_MIN_NO_OF_LEGENDS', 'SHOW_OTHER_GROUP_WITH_LEGENDS'])
      unless validator.valid?(display_mode)
        fail ArgumentError, 'invalid value for "display_mode", must be one of #{validator.allowable_values}.'
      end
      @display_mode = display_mode
    end

    # Custom attribute writer method with validation
    # @param [Object] min_legends_display_count Value to be assigned
    def min_legends_display_count=(min_legends_display_count)
      if !min_legends_display_count.nil? && min_legends_display_count > 12
        fail ArgumentError, 'invalid value for "min_legends_display_count", must be smaller than or equal to 12.'
      end

      if !min_legends_display_count.nil? && min_legends_display_count < 1
        fail ArgumentError, 'invalid value for "min_legends_display_count", must be greater than or equal to 1.'
      end

      @min_legends_display_count = min_legends_display_count
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          position == o.position &&
          alignment == o.alignment &&
          display_count == o.display_count &&
          unit == o.unit &&
          filterable == o.filterable &&
          display_mode == o.display_mode &&
          min_legends_display_count == o.min_legends_display_count &&
          other_group_legend_label == o.other_group_legend_label
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, position, alignment, display_count, unit, filterable, display_mode, min_legends_display_count, other_group_legend_label].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
