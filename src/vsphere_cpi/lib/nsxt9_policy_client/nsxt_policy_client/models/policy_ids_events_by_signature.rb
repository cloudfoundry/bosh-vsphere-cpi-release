=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Intrusions that are detected, grouped by signature. It contains the signature id, severity, name, the number of intrusions of that type and the first occurence. 
  class PolicyIdsEventsBySignature
    # Signature ID pertaining to the detected intrusion.
    attr_accessor :signature_id

    # Name of the signature pertaining to the detected intrusion.
    attr_accessor :signature_name

    # Severity of the threat covered by the signature, can be Critical, High, Medium, or Low.
    attr_accessor :severity

    # Number of times this particular signature was detected.
    attr_accessor :count

    # First occurence of the intrusion, in epoch milliseconds.
    attr_accessor :first_occurence

    # IDSEvent resource type.
    attr_accessor :resource_type

    # Flag indicating an ongoing intrusion.
    attr_accessor :is_ongoing

    # The source where the intrusion was detected. Possible values are GATEWAY and HOST.
    attr_accessor :traffic_type

    # The sites at which the intrusion occurred.
    attr_accessor :sites_occurred

    # The site at which the intrusion first occurred.
    attr_accessor :first_occurrence_site

    # Project path
    attr_accessor :project_path

    # Project Identifier
    attr_accessor :project_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'signature_id' => :'signature_id',
        :'signature_name' => :'signature_name',
        :'severity' => :'severity',
        :'count' => :'count',
        :'first_occurence' => :'first_occurence',
        :'resource_type' => :'resource_type',
        :'is_ongoing' => :'is_ongoing',
        :'traffic_type' => :'traffic_type',
        :'sites_occurred' => :'sites_occurred',
        :'first_occurrence_site' => :'first_occurrence_site',
        :'project_path' => :'project_path',
        :'project_id' => :'project_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'signature_id' => :'Integer',
        :'signature_name' => :'String',
        :'severity' => :'String',
        :'count' => :'Integer',
        :'first_occurence' => :'Integer',
        :'resource_type' => :'String',
        :'is_ongoing' => :'BOOLEAN',
        :'traffic_type' => :'String',
        :'sites_occurred' => :'Array<String>',
        :'first_occurrence_site' => :'String',
        :'project_path' => :'String',
        :'project_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'signature_id')
        self.signature_id = attributes[:'signature_id']
      end

      if attributes.has_key?(:'signature_name')
        self.signature_name = attributes[:'signature_name']
      end

      if attributes.has_key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.has_key?(:'count')
        self.count = attributes[:'count']
      end

      if attributes.has_key?(:'first_occurence')
        self.first_occurence = attributes[:'first_occurence']
      end

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'is_ongoing')
        self.is_ongoing = attributes[:'is_ongoing']
      end

      if attributes.has_key?(:'traffic_type')
        self.traffic_type = attributes[:'traffic_type']
      end

      if attributes.has_key?(:'sites_occurred')
        if (value = attributes[:'sites_occurred']).is_a?(Array)
          self.sites_occurred = value
        end
      end

      if attributes.has_key?(:'first_occurrence_site')
        self.first_occurrence_site = attributes[:'first_occurrence_site']
      end

      if attributes.has_key?(:'project_path')
        self.project_path = attributes[:'project_path']
      end

      if attributes.has_key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      traffic_type_validator = EnumAttributeValidator.new('String', ['GATEWAY', 'HOST'])
      return false unless traffic_type_validator.valid?(@traffic_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] traffic_type Object to be assigned
    def traffic_type=(traffic_type)
      validator = EnumAttributeValidator.new('String', ['GATEWAY', 'HOST'])
      unless validator.valid?(traffic_type)
        fail ArgumentError, 'invalid value for "traffic_type", must be one of #{validator.allowable_values}.'
      end
      @traffic_type = traffic_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          signature_id == o.signature_id &&
          signature_name == o.signature_name &&
          severity == o.severity &&
          count == o.count &&
          first_occurence == o.first_occurence &&
          resource_type == o.resource_type &&
          is_ongoing == o.is_ongoing &&
          traffic_type == o.traffic_type &&
          sites_occurred == o.sites_occurred &&
          first_occurrence_site == o.first_occurrence_site &&
          project_path == o.project_path &&
          project_id == o.project_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [signature_id, signature_name, severity, count, first_occurence, resource_type, is_ongoing, traffic_type, sites_occurred, first_occurrence_site, project_path, project_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
