=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class PolicyTraceflowObservationDropped
    attr_accessor :resource_type

    # the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.
    attr_accessor :sequence_no

    # id of the transport node that observed a traceflow packet
    attr_accessor :transport_node_id

    # name of the transport node that observed a traceflow packet
    attr_accessor :transport_node_name

    # type of the transport node that observed a traceflow packet
    attr_accessor :transport_node_type

    # Timestamp when the observation was created by the transport node (milliseconds epoch)
    attr_accessor :timestamp

    # Timestamp when the observation was created by the transport node (microseconds epoch)
    attr_accessor :timestamp_micro

    # The type of the component that issued the observation.
    attr_accessor :component_type

    # The sub type of the component that issued the observation.
    attr_accessor :component_sub_type

    # The name of the component that issued the observation.
    attr_accessor :component_name

    # This field contains the site path where this observation was generated.
    attr_accessor :site_path

    # This flag is to indicate whether the observation is reported from ENS fastpath or slowpath. This field is only applicable for livetrace observations. 
    attr_accessor :is_ens

    # This field specifies the drop reason of traceflow packet. ARP_FAIL - ARP request fails for some reasons, please refer arp_fail_reason for detail BFD - BFD packet is dropped because traversed by non-operative interface or encountering internal error (e.g., memory insufficient) BROADCAST - Packet is dropped during traversing the interface (e.g., Edge uplink, Edge centralized service port) which disallow ethernet broadcast DHCP - DHCP packet is malformed DLB - The packet is disallowed by distributed load balancing FW_RULE - The packet matches a drop or reject rule of DFW or Edge firewall GENEVE - GENEVE packet is malformed GRE - GRE packet is malformed or traverses a non-operative interface IFACE - Packet traverses a non-operative interface IP - Packet is dropped because of IP related causes (e.g., ICMPv4/ICMPv6 packet is malformed, or DF flag is set but fragment must be performed for the packet) or corresponding interface is not found or inoperative IP_REASS - Packet is dropped during IP reassembly IPSEC - IPsec protocol related packet is dropped IPSEC_VTI - IPsec required SA is not found or traversing inoperative interface cause packet dropped L2VPN - VLAN id of GRE packet is invalid L4PORT - Layer 4 packet (e.g., BFD, DHCP) is dropped LB - Packet is dropped by load balancing rule LROUTER - Packet is dropped by logical router LSERVICE - Packet is malformed or traverses inoperative logical service interface LSWITCH - Packet is dropped by logical switch MANAGEMENT - Packet is dropped by Edge datapath MANAGEMENT service port MD_PROXY - Packet is dropped by metadata proxy NAT - Packet is dropped by NAT rule RTEP_TUNNEL - Unused drop reason ND_NS_FAIL - Neighbor Discovery packet fails NEIGH - ARP or Neighbor Discovery packet fails NO_EIP_FOUND - Destination IP is not an elastic IP NO_EIP_ASSOCIATION - Elastic IP is not associated with active edge VDR ENI NO_ENI_FOR_IP - There is no ENI found for the destination IP NO_ENI_FOR_LIF - Cannot find an ENI associated with uplink LIF NO_ROUTE - Cannot find route for destination IP NO_ROUTE_TABLE_FOUND - Cannot find associated route table NO_UNDERLAY_ROUTE_FOUND - Cannot find AWS route to destination NOT_VDR_DOWNLINK - Packet is not forwarded to VMC unmanaged VDR downlink NO_VDR_FOUND - VMC unmanaged VDR associated with Edge uplink is not found NO_VDR_ON_HOST - Cannot find VMC unmanaged VDR list on this host NOT_VDR_UPLINK - Packet is not forwarded to VDR uplink SERVICE_INSERT - Packet from guest VM to service VM or from service VM to guest VM is dropped by firewall rule SPOOFGUARD - Packet is blocked by SpoofGuard policy TTL_ZERO - The IPv4 time to live field or the IPv6 hop limit field of packet is zero TUNNEL - Overlay tunnel management packet (VNI value of GENEVE header is 0, e.g., BFD) is dropped VLAN - VLAN id of packet is disallowed by the given port VXLAN - VXLAN packet is malformed or cannot find tunnel port for it VXSTT - Unused drop reason VMC_NO_RESPONSE - Failed to query VMC observations as no response from VMC app WRONG_UPLINK - Packet is not routed to the expected Edge uplink by VMC unmanaged VDR FW_STATE - Packet is dropped by stateful firewall NO_MAC - Drop by vswitch as no destination MAC hit MAC Table. FILTERED_UPLINK - Filtering applied at the corresponding UPLINK having no aggregation. IP_OUT_OF_SCOPE - Packet is carrying IPs that are out of the network's scope (e.g., a packet with a private IP is trying to enter the external public network). DHCP_FORGED_MAC - The source MAC address of the DHCP packet sent to the DHCP server does not match the corresponding VIF MAC address of the source port. DHCP_IP_UNAVAILABLE - There is no DHCP client IP address available on the DHCP server. DHCP_IP_NOT_ALLOWED - The requested DHCP client IP address of the packet cannot be allocated from DHCP server. DHCP_INVALID_SERVER_IP_MAC - The DHCP packet is not destined to the DHCP server.
    attr_accessor :reason

    # The id of the logical port at which the traceflow packet was dropped
    attr_accessor :lport_id

    # The name of the logical port at which the traceflow packet was dropped
    attr_accessor :lport_name

    # This field is specified when the traceflow packet matched a L3 firewall rule. 
    attr_accessor :acl_rule_id

    # This field specifies the ARP fails reason ARP_TIMEOUT - ARP failure due to query control plane timeout ARP_CPFAIL - ARP failure due post ARP query message to control plane failure ARP_FROMCP - ARP failure due to deleting ARP entry from control plane ARP_PORTDESTROY - ARP failure due to port destruction ARP_TABLEDESTROY - ARP failure due to ARP table destruction ARP_NETDESTROY - ARP failure due to overlay network destruction
    attr_accessor :arp_fail_reason

    # This field is specified when the traceflow packet matched a NAT rule. 
    attr_accessor :nat_rule_id

    # This field is specified when the traceflow packet matched a jump-to rule. 
    attr_accessor :jumpto_rule_id

    # This field is specified when the traceflow packet matched a l2 rule. 
    attr_accessor :l2_rule_id

    # This field specifies the IPSec VPN fails reason IPSEC_SA_NOT_FOUND   - IPSec SA required for processing the packet does not exist IPSEC_UDP_ENC_STATE_MISMATCH   - ESP packet is UDP encapsulated but IPsec SA does not expect UDP encapsulation IPSEC_SEQ_ROLLOVER   - IPSec SA sequence number has exceeded the maximum value IPSEC_FRAG_NEEDED   - Received packet has DF bit set in IP header but requires fragmentation due to ESP encapsulation IPSEC_TUN_IFACE_DOWN   - IPSec tunnel interface is down IPSEC_POLICY_NOMATCH   - Received packet does not match IPSec policy IPSEC_POLICY_BLOCK   - IPSec packet processing failed IPSEC_POLICY_ERROR   - IPSec packet processing failed IPSEC_REPLAY_SEQ_NUM_REPEAT   - IPSec packet is dropped due to replay IPSEC_REPLAY_RECV_DELAY   - IPSec packet is dropped due to replay IPSEC_REPLAY_PROC_DELAY   - IPSec packet is dropped due to replay IPSEC_ZERO_SEQ_NUM_RECVD   - ESP packet is received with sequence number as zero IPSEC_ENQUEUE_FAIL   - Packet processing failed during crypto operation IPSEC_AUTH_DGST_MISMATCH   - Packet integrity check failed due to digest mismatch IPSEC_AUTH_DGST_SIZE_MISMATCH   - Packet integrity check failed due to invalid digest length IPSEC_AUTH_UNSUPPORTED_ALGO   - Packet integrity check failed due to unsupported hash algorithm IPSEC_CRYPTO_FAIL   - Packet processing failed during crypto operation IPSEC_CRYPTO_PROC_INCOMPLETE   - Packet processing failed during crypto operation IPSEC_CRYPTO_SESSION_INV   - Packet processing failed during crypto operation IPSEC_CRYPTO_ARGS_INV   - Packet processing failed during crypto operation IPSEC_CRYPTO_PROC_ERROR   - Packet processing failed during crypto operation IPSEC_CRYPTO_NO_BUF_SPACE   - Packet processing failed during crypto operation IPSEC_CRYPTO_UNSUPPORTED_CIPHER   - Packet processing failed during crypto operation IPSEC_MALFORMED   - Received ESP packet is malformed IPSEC_MALFORMED_INV_PADDING   - Received ESP packet is malformed IPSEC_PADDING_REMOVAL_FAILED   - Received ESP packet is malformed IPSEC_INNER_MALFORMED   - IP packet after ESP decryption is malformed IPSEC_INNER_MALFORMED_IP   - IP packet after ESP decryption is malformed IPSEC_INNER_MALFORMED_UDP   - IP packet after ESP decryption is malformed IPSEC_INNER_MALFORMED_TCP   - IP packet after ESP decryption is malformed IPSEC_UNKNOWN   - IPSec VPN failure reason is unknown 
    attr_accessor :ipsec_fail_reason

    # The path of the ACL rule that was applied to forward the traceflow packet
    attr_accessor :acl_rule_path

    # The path of the NAT rule that was applied to forward the traceflow packet
    attr_accessor :nat_rule_path

    # Path of segment port
    attr_accessor :segment_port_path

    # Path of subnet port
    attr_accessor :subnet_port_path

    # Path of interface
    attr_accessor :interface_path

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'resource_type' => :'resource_type',
        :'sequence_no' => :'sequence_no',
        :'transport_node_id' => :'transport_node_id',
        :'transport_node_name' => :'transport_node_name',
        :'transport_node_type' => :'transport_node_type',
        :'timestamp' => :'timestamp',
        :'timestamp_micro' => :'timestamp_micro',
        :'component_type' => :'component_type',
        :'component_sub_type' => :'component_sub_type',
        :'component_name' => :'component_name',
        :'site_path' => :'site_path',
        :'is_ens' => :'is_ens',
        :'reason' => :'reason',
        :'lport_id' => :'lport_id',
        :'lport_name' => :'lport_name',
        :'acl_rule_id' => :'acl_rule_id',
        :'arp_fail_reason' => :'arp_fail_reason',
        :'nat_rule_id' => :'nat_rule_id',
        :'jumpto_rule_id' => :'jumpto_rule_id',
        :'l2_rule_id' => :'l2_rule_id',
        :'ipsec_fail_reason' => :'ipsec_fail_reason',
        :'acl_rule_path' => :'acl_rule_path',
        :'nat_rule_path' => :'nat_rule_path',
        :'segment_port_path' => :'segment_port_path',
        :'subnet_port_path' => :'subnet_port_path',
        :'interface_path' => :'interface_path'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'resource_type' => :'String',
        :'sequence_no' => :'Integer',
        :'transport_node_id' => :'String',
        :'transport_node_name' => :'String',
        :'transport_node_type' => :'String',
        :'timestamp' => :'Integer',
        :'timestamp_micro' => :'Integer',
        :'component_type' => :'String',
        :'component_sub_type' => :'String',
        :'component_name' => :'String',
        :'site_path' => :'String',
        :'is_ens' => :'BOOLEAN',
        :'reason' => :'String',
        :'lport_id' => :'String',
        :'lport_name' => :'String',
        :'acl_rule_id' => :'Integer',
        :'arp_fail_reason' => :'String',
        :'nat_rule_id' => :'Integer',
        :'jumpto_rule_id' => :'Integer',
        :'l2_rule_id' => :'Integer',
        :'ipsec_fail_reason' => :'String',
        :'acl_rule_path' => :'String',
        :'nat_rule_path' => :'String',
        :'segment_port_path' => :'String',
        :'subnet_port_path' => :'String',
        :'interface_path' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'sequence_no')
        self.sequence_no = attributes[:'sequence_no']
      end

      if attributes.has_key?(:'transport_node_id')
        self.transport_node_id = attributes[:'transport_node_id']
      end

      if attributes.has_key?(:'transport_node_name')
        self.transport_node_name = attributes[:'transport_node_name']
      end

      if attributes.has_key?(:'transport_node_type')
        self.transport_node_type = attributes[:'transport_node_type']
      end

      if attributes.has_key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.has_key?(:'timestamp_micro')
        self.timestamp_micro = attributes[:'timestamp_micro']
      end

      if attributes.has_key?(:'component_type')
        self.component_type = attributes[:'component_type']
      end

      if attributes.has_key?(:'component_sub_type')
        self.component_sub_type = attributes[:'component_sub_type']
      end

      if attributes.has_key?(:'component_name')
        self.component_name = attributes[:'component_name']
      end

      if attributes.has_key?(:'site_path')
        self.site_path = attributes[:'site_path']
      end

      if attributes.has_key?(:'is_ens')
        self.is_ens = attributes[:'is_ens']
      end

      if attributes.has_key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.has_key?(:'lport_id')
        self.lport_id = attributes[:'lport_id']
      end

      if attributes.has_key?(:'lport_name')
        self.lport_name = attributes[:'lport_name']
      end

      if attributes.has_key?(:'acl_rule_id')
        self.acl_rule_id = attributes[:'acl_rule_id']
      end

      if attributes.has_key?(:'arp_fail_reason')
        self.arp_fail_reason = attributes[:'arp_fail_reason']
      end

      if attributes.has_key?(:'nat_rule_id')
        self.nat_rule_id = attributes[:'nat_rule_id']
      end

      if attributes.has_key?(:'jumpto_rule_id')
        self.jumpto_rule_id = attributes[:'jumpto_rule_id']
      end

      if attributes.has_key?(:'l2_rule_id')
        self.l2_rule_id = attributes[:'l2_rule_id']
      end

      if attributes.has_key?(:'ipsec_fail_reason')
        self.ipsec_fail_reason = attributes[:'ipsec_fail_reason']
      end

      if attributes.has_key?(:'acl_rule_path')
        self.acl_rule_path = attributes[:'acl_rule_path']
      end

      if attributes.has_key?(:'nat_rule_path')
        self.nat_rule_path = attributes[:'nat_rule_path']
      end

      if attributes.has_key?(:'segment_port_path')
        self.segment_port_path = attributes[:'segment_port_path']
      end

      if attributes.has_key?(:'subnet_port_path')
        self.subnet_port_path = attributes[:'subnet_port_path']
      end

      if attributes.has_key?(:'interface_path')
        self.interface_path = attributes[:'interface_path']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @resource_type.nil?
      resource_type_validator = EnumAttributeValidator.new('String', ['TraceflowObservationForwarded', 'TraceflowObservationDropped', 'TraceflowObservationDelivered', 'TraceflowObservationReceived', 'TraceflowObservationForwardedLogical', 'TraceflowObservationDroppedLogical', 'TraceflowObservationReceivedLogical', 'TraceflowObservationReplicationLogical', 'TraceflowObservationRelayedLogical', 'TraceflowObservationProtected'])
      return false unless resource_type_validator.valid?(@resource_type)
      transport_node_type_validator = EnumAttributeValidator.new('String', ['ESX', 'RHELKVM', 'UBUNTUKVM', 'CENTOSKVM', 'RHELCONTAINER', 'CENTOSCONTAINER', 'RHELSERVER', 'UBUNTUSERVER', 'CENTOSSERVER', 'SLESKVM', 'SLESSERVER', 'WINDOWSSERVER', 'RHELSMARTNIC', 'OELSERVER', 'UBUNTUSMARTNIC', 'EDGE', 'PUBLIC_CLOUD_GATEWAY_NODE', 'OTHERS', 'HYPERV'])
      return false unless transport_node_type_validator.valid?(@transport_node_type)
      component_type_validator = EnumAttributeValidator.new('String', ['PHYSICAL', 'LR', 'LS', 'DFW', 'BRIDGE', 'EDGE_TUNNEL', 'EDGE_HOSTSWITCH', 'FW_BRIDGE', 'EDGE_RTEP_TUNNEL', 'LOAD_BALANCER', 'NAT', 'IPSEC', 'SERVICE_INSERTION', 'VMC', 'SPOOFGUARD', 'EDGE_FW', 'DLB', 'ANTREA_SPOOFGUARD', 'ANTREA_LB', 'ANTREA_ROUTING', 'ANTREA_DFW', 'ANTREA_FORWARDING', 'HOST_SWITCH', 'UNKNOWN', 'DHCP'])
      return false unless component_type_validator.valid?(@component_type)
      component_sub_type_validator = EnumAttributeValidator.new('String', ['LR_TIER0', 'LR_TIER1', 'LR_VRF_TIER0', 'LS_TRANSIT', 'SI_CLASSIFIER', 'SI_PROXY', 'VDR', 'ENI', 'AWS_GATEWAY', 'TGW_ROUTE', 'EDGE_UPLINK', 'DELL_GATEWAY', 'LGW_ROUTE', 'LR_KNI', 'UNKNOWN'])
      return false unless component_sub_type_validator.valid?(@component_sub_type)
      reason_validator = EnumAttributeValidator.new('String', ['ARP_FAIL', 'BFD', 'BROADCAST', 'DHCP', 'DLB', 'FW_RULE', 'GENEVE', 'GRE', 'IFACE', 'IP', 'IP_REASS', 'IPSEC', 'IPSEC_VTI', 'L2VPN', 'L4PORT', 'LB', 'LROUTER', 'LSERVICE', 'LSWITCH', 'MANAGEMENT', 'MD_PROXY', 'NAT', 'RTEP_TUNNEL', 'ND_NS_FAIL', 'NEIGH', 'NO_EIP_FOUND', 'NO_EIP_ASSOCIATION', 'NO_ENI_FOR_IP', 'NO_ENI_FOR_LIF', 'NO_ROUTE', 'NO_ROUTE_TABLE_FOUND', 'NO_UNDERLAY_ROUTE_FOUND', 'NOT_VDR_DOWNLINK', 'NO_VDR_FOUND', 'NO_VDR_ON_HOST', 'NOT_VDR_UPLINK', 'SERVICE_INSERT', 'SPOOFGUARD', 'TTL_ZERO', 'TUNNEL', 'VLAN', 'VXLAN', 'VXSTT', 'VMC_NO_RESPONSE', 'WRONG_UPLINK', 'FW_STATE', 'NO_MAC', 'UNKNOWN', 'FILTERED_UPLINK', 'IP_OUT_OF_SCOPE', 'DHCP_FORGED_MAC', 'DHCP_IP_UNAVAILABLE', 'DHCP_IP_NOT_ALLOWED', 'DHCP_INVALID_SERVER_IP_MAC'])
      return false unless reason_validator.valid?(@reason)
      arp_fail_reason_validator = EnumAttributeValidator.new('String', ['ARP_UNKNOWN', 'ARP_TIMEOUT', 'ARP_CPFAIL', 'ARP_FROMCP', 'ARP_PORTDESTROY', 'ARP_TABLEDESTROY', 'ARP_NETDESTROY'])
      return false unless arp_fail_reason_validator.valid?(@arp_fail_reason)
      ipsec_fail_reason_validator = EnumAttributeValidator.new('String', ['IPSEC_SA_NOT_FOUND', 'IPSEC_UDP_ENC_STATE_MISMATCH', 'IPSEC_SEQ_ROLLOVER', 'IPSEC_FRAG_NEEDED', 'IPSEC_TUN_IFACE_DOWN', 'IPSEC_POLICY_NOMATCH', 'IPSEC_POLICY_BLOCK', 'IPSEC_POLICY_ERROR', 'IPSEC_REPLAY_SEQ_NUM_REPEAT', 'IPSEC_REPLAY_RECV_DELAY', 'IPSEC_REPLAY_PROC_DELAY', 'IPSEC_ZERO_SEQ_NUM_RECVD', 'IPSEC_ENQUEUE_FAIL', 'IPSEC_AUTH_DGST_MISMATCH', 'IPSEC_AUTH_DGST_SIZE_MISMATCH', 'IPSEC_AUTH_UNSUPPORTED_ALGO', 'IPSEC_CRYPTO_FAIL', 'IPSEC_CRYPTO_PROC_INCOMPLETE', 'IPSEC_CRYPTO_SESSION_INV', 'IPSEC_CRYPTO_ARGS_INV', 'IPSEC_CRYPTO_PROC_ERROR', 'IPSEC_CRYPTO_NO_BUF_SPACE', 'IPSEC_CRYPTO_UNSUPPORTED_CIPHER', 'IPSEC_MALFORMED', 'IPSEC_MALFORMED_INV_PADDING', 'IPSEC_PADDING_REMOVAL_FAILED', 'IPSEC_INNER_MALFORMED', 'IPSEC_INNER_MALFORMED_IP', 'IPSEC_INNER_MALFORMED_UDP', 'IPSEC_INNER_MALFORMED_TCP', 'IPSEC_UNKNOWN'])
      return false unless ipsec_fail_reason_validator.valid?(@ipsec_fail_reason)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      validator = EnumAttributeValidator.new('String', ['TraceflowObservationForwarded', 'TraceflowObservationDropped', 'TraceflowObservationDelivered', 'TraceflowObservationReceived', 'TraceflowObservationForwardedLogical', 'TraceflowObservationDroppedLogical', 'TraceflowObservationReceivedLogical', 'TraceflowObservationReplicationLogical', 'TraceflowObservationRelayedLogical', 'TraceflowObservationProtected'])
      unless validator.valid?(resource_type)
        fail ArgumentError, 'invalid value for "resource_type", must be one of #{validator.allowable_values}.'
      end
      @resource_type = resource_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transport_node_type Object to be assigned
    def transport_node_type=(transport_node_type)
      validator = EnumAttributeValidator.new('String', ['ESX', 'RHELKVM', 'UBUNTUKVM', 'CENTOSKVM', 'RHELCONTAINER', 'CENTOSCONTAINER', 'RHELSERVER', 'UBUNTUSERVER', 'CENTOSSERVER', 'SLESKVM', 'SLESSERVER', 'WINDOWSSERVER', 'RHELSMARTNIC', 'OELSERVER', 'UBUNTUSMARTNIC', 'EDGE', 'PUBLIC_CLOUD_GATEWAY_NODE', 'OTHERS', 'HYPERV'])
      unless validator.valid?(transport_node_type)
        fail ArgumentError, 'invalid value for "transport_node_type", must be one of #{validator.allowable_values}.'
      end
      @transport_node_type = transport_node_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] component_type Object to be assigned
    def component_type=(component_type)
      validator = EnumAttributeValidator.new('String', ['PHYSICAL', 'LR', 'LS', 'DFW', 'BRIDGE', 'EDGE_TUNNEL', 'EDGE_HOSTSWITCH', 'FW_BRIDGE', 'EDGE_RTEP_TUNNEL', 'LOAD_BALANCER', 'NAT', 'IPSEC', 'SERVICE_INSERTION', 'VMC', 'SPOOFGUARD', 'EDGE_FW', 'DLB', 'ANTREA_SPOOFGUARD', 'ANTREA_LB', 'ANTREA_ROUTING', 'ANTREA_DFW', 'ANTREA_FORWARDING', 'HOST_SWITCH', 'UNKNOWN', 'DHCP'])
      unless validator.valid?(component_type)
        fail ArgumentError, 'invalid value for "component_type", must be one of #{validator.allowable_values}.'
      end
      @component_type = component_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] component_sub_type Object to be assigned
    def component_sub_type=(component_sub_type)
      validator = EnumAttributeValidator.new('String', ['LR_TIER0', 'LR_TIER1', 'LR_VRF_TIER0', 'LS_TRANSIT', 'SI_CLASSIFIER', 'SI_PROXY', 'VDR', 'ENI', 'AWS_GATEWAY', 'TGW_ROUTE', 'EDGE_UPLINK', 'DELL_GATEWAY', 'LGW_ROUTE', 'LR_KNI', 'UNKNOWN'])
      unless validator.valid?(component_sub_type)
        fail ArgumentError, 'invalid value for "component_sub_type", must be one of #{validator.allowable_values}.'
      end
      @component_sub_type = component_sub_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(reason)
      validator = EnumAttributeValidator.new('String', ['ARP_FAIL', 'BFD', 'BROADCAST', 'DHCP', 'DLB', 'FW_RULE', 'GENEVE', 'GRE', 'IFACE', 'IP', 'IP_REASS', 'IPSEC', 'IPSEC_VTI', 'L2VPN', 'L4PORT', 'LB', 'LROUTER', 'LSERVICE', 'LSWITCH', 'MANAGEMENT', 'MD_PROXY', 'NAT', 'RTEP_TUNNEL', 'ND_NS_FAIL', 'NEIGH', 'NO_EIP_FOUND', 'NO_EIP_ASSOCIATION', 'NO_ENI_FOR_IP', 'NO_ENI_FOR_LIF', 'NO_ROUTE', 'NO_ROUTE_TABLE_FOUND', 'NO_UNDERLAY_ROUTE_FOUND', 'NOT_VDR_DOWNLINK', 'NO_VDR_FOUND', 'NO_VDR_ON_HOST', 'NOT_VDR_UPLINK', 'SERVICE_INSERT', 'SPOOFGUARD', 'TTL_ZERO', 'TUNNEL', 'VLAN', 'VXLAN', 'VXSTT', 'VMC_NO_RESPONSE', 'WRONG_UPLINK', 'FW_STATE', 'NO_MAC', 'UNKNOWN', 'FILTERED_UPLINK', 'IP_OUT_OF_SCOPE', 'DHCP_FORGED_MAC', 'DHCP_IP_UNAVAILABLE', 'DHCP_IP_NOT_ALLOWED', 'DHCP_INVALID_SERVER_IP_MAC'])
      unless validator.valid?(reason)
        fail ArgumentError, 'invalid value for "reason", must be one of #{validator.allowable_values}.'
      end
      @reason = reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] arp_fail_reason Object to be assigned
    def arp_fail_reason=(arp_fail_reason)
      validator = EnumAttributeValidator.new('String', ['ARP_UNKNOWN', 'ARP_TIMEOUT', 'ARP_CPFAIL', 'ARP_FROMCP', 'ARP_PORTDESTROY', 'ARP_TABLEDESTROY', 'ARP_NETDESTROY'])
      unless validator.valid?(arp_fail_reason)
        fail ArgumentError, 'invalid value for "arp_fail_reason", must be one of #{validator.allowable_values}.'
      end
      @arp_fail_reason = arp_fail_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ipsec_fail_reason Object to be assigned
    def ipsec_fail_reason=(ipsec_fail_reason)
      validator = EnumAttributeValidator.new('String', ['IPSEC_SA_NOT_FOUND', 'IPSEC_UDP_ENC_STATE_MISMATCH', 'IPSEC_SEQ_ROLLOVER', 'IPSEC_FRAG_NEEDED', 'IPSEC_TUN_IFACE_DOWN', 'IPSEC_POLICY_NOMATCH', 'IPSEC_POLICY_BLOCK', 'IPSEC_POLICY_ERROR', 'IPSEC_REPLAY_SEQ_NUM_REPEAT', 'IPSEC_REPLAY_RECV_DELAY', 'IPSEC_REPLAY_PROC_DELAY', 'IPSEC_ZERO_SEQ_NUM_RECVD', 'IPSEC_ENQUEUE_FAIL', 'IPSEC_AUTH_DGST_MISMATCH', 'IPSEC_AUTH_DGST_SIZE_MISMATCH', 'IPSEC_AUTH_UNSUPPORTED_ALGO', 'IPSEC_CRYPTO_FAIL', 'IPSEC_CRYPTO_PROC_INCOMPLETE', 'IPSEC_CRYPTO_SESSION_INV', 'IPSEC_CRYPTO_ARGS_INV', 'IPSEC_CRYPTO_PROC_ERROR', 'IPSEC_CRYPTO_NO_BUF_SPACE', 'IPSEC_CRYPTO_UNSUPPORTED_CIPHER', 'IPSEC_MALFORMED', 'IPSEC_MALFORMED_INV_PADDING', 'IPSEC_PADDING_REMOVAL_FAILED', 'IPSEC_INNER_MALFORMED', 'IPSEC_INNER_MALFORMED_IP', 'IPSEC_INNER_MALFORMED_UDP', 'IPSEC_INNER_MALFORMED_TCP', 'IPSEC_UNKNOWN'])
      unless validator.valid?(ipsec_fail_reason)
        fail ArgumentError, 'invalid value for "ipsec_fail_reason", must be one of #{validator.allowable_values}.'
      end
      @ipsec_fail_reason = ipsec_fail_reason
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          resource_type == o.resource_type &&
          sequence_no == o.sequence_no &&
          transport_node_id == o.transport_node_id &&
          transport_node_name == o.transport_node_name &&
          transport_node_type == o.transport_node_type &&
          timestamp == o.timestamp &&
          timestamp_micro == o.timestamp_micro &&
          component_type == o.component_type &&
          component_sub_type == o.component_sub_type &&
          component_name == o.component_name &&
          site_path == o.site_path &&
          is_ens == o.is_ens &&
          reason == o.reason &&
          lport_id == o.lport_id &&
          lport_name == o.lport_name &&
          acl_rule_id == o.acl_rule_id &&
          arp_fail_reason == o.arp_fail_reason &&
          nat_rule_id == o.nat_rule_id &&
          jumpto_rule_id == o.jumpto_rule_id &&
          l2_rule_id == o.l2_rule_id &&
          ipsec_fail_reason == o.ipsec_fail_reason &&
          acl_rule_path == o.acl_rule_path &&
          nat_rule_path == o.nat_rule_path &&
          segment_port_path == o.segment_port_path &&
          subnet_port_path == o.subnet_port_path &&
          interface_path == o.interface_path
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [resource_type, sequence_no, transport_node_id, transport_node_name, transport_node_type, timestamp, timestamp_micro, component_type, component_sub_type, component_name, site_path, is_ens, reason, lport_id, lport_name, acl_rule_id, arp_fail_reason, nat_rule_id, jumpto_rule_id, l2_rule_id, ipsec_fail_reason, acl_rule_path, nat_rule_path, segment_port_path, subnet_port_path, interface_path].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
