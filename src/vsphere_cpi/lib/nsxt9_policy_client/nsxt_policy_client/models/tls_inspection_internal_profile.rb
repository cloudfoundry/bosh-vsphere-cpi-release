=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Internal inspection Profile is used when the TLS connection is destined to a service not owned by the enterprise.
  class TlsInspectionInternalProfile
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    # Schema for this resource
    attr_accessor :_schema

    # The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.
    attr_accessor :_revision

    # Resource type to use as profile type
    attr_accessor :resource_type

    # ID of the user who created this resource
    attr_accessor :_create_user

    # Timestamp of resource creation
    attr_accessor :_create_time

    # ID of the user who last modified this resource
    attr_accessor :_last_modified_user

    # Timestamp of last modification
    attr_accessor :_last_modified_time

    # Indicates system owned resource
    attr_accessor :_system_owned

    # Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity. 
    attr_accessor :_protection

    # Unique identifier of this resource
    attr_accessor :id

    # Defaults to ID if not set
    attr_accessor :display_name

    # Description of this resource
    attr_accessor :description

    # Opaque identifiers meaningful to the API user
    attr_accessor :tags

    # Absolute path of this object
    attr_accessor :path

    # Path relative from its parent
    attr_accessor :relative_path

    # Path of its parent
    attr_accessor :parent_path

    # This path is populated only in case of multi-site scenario. Currently it is supported only for LM objects. When LM is onboarded to multi-site platform like NAPP or GM, remote_path will be set to the globally unique path across multi-site topology . It is generated based on local site-name and uses /org tree namespace. Note: It is populated only for LM objects. Not supported on the GM. 
    attr_accessor :remote_path

    # This is a UUID generated by the GM/LM to uniquely identify entities in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites. 
    attr_accessor :unique_id

    # This is a UUID generated by the system for realizing the entity object. In most cases this should be same as 'unique_id' of the entity. However, in some cases this can be different because of entities have migrated their unique identifier to NSX Policy intent objects later in the timeline and did not use unique_id for realization. Realization id is helpful for users to debug data path to correlate the configuration with corresponding intent. 
    attr_accessor :realization_id

    # This is a UUID generated by the system for knowing who owns this object. This is used in NSX+. 
    attr_accessor :owner_id

    # This is a UUID generated by the system for knowing which site owns an object. This is used in NSX+. 
    attr_accessor :origin_site_id

    # Subtree for this type within policy tree containing nested elements. Note that  this type is applicable to be used in Hierarchical API only. 
    attr_accessor :children

    # Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object get deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects. 
    attr_accessor :marked_for_delete

    # Global intent objects cannot be modified locally by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties. 
    attr_accessor :overridden

    # Used to indicate an TLS version or Cipher version pre-defined settings mis-match. 
    attr_accessor :attention

    # Bypass profile  - CA bundle is required if the \"invalid_certificate\" action is allow. External profile - CA bundle is always required. Internal profile - CA bundle is required if \"certificate_validation\" is turned on. 
    attr_accessor :trusted_ca_bundles

    # Bypass profile  - CRL is required if the \"invalid_certificate\" action is allow. External profile - CRL is always required. Internal profile - CRL is required if \"certificate_validation\" is turned on. 
    attr_accessor :crls

    # Timeout the connection when kept idle. Default is 90 minutes.
    attr_accessor :idle_connection_timeout

    # Pre-defined config settings. Settings could be one of Balanced, High Fidelity, High Security, Custom 
    attr_accessor :tls_config_setting

    # Action to take when TLS handshake fails.
    attr_accessor :decryption_fail_action

    # If enforced and if TLS protocol Client/Server Hello has none of the permitted TLS versions or ciphers then the connection is immediately terminated. 
    attr_accessor :crypto_enforcement

    # Client's minimum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. Supported versions are TLS1.1 and TLS1.2.
    attr_accessor :client_min_tls_version

    # Client's maximum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. Supported versions are TLS1.1 and TLS1.2.
    attr_accessor :client_max_tls_version

    # Server's minimum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. supported versions are TLS1.1 and TLS1.2.
    attr_accessor :server_min_tls_version

    # Server's maximum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. Supported versions are TLS1.0, TLS1.1 and TLS1.2
    attr_accessor :server_max_tls_version

    # Client's list of cipher suites. Required if CryptoEnforcement is ENFORCE. e.g. TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256. 
    attr_accessor :client_cipher_suite

    # Server's list of cipher suites. Required if CryptoEnforcement is ENFORCE. e.g. TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256. 
    attr_accessor :server_cipher_suite

    # Server certificate presented to the client.
    attr_accessor :server_certs_key

    # Default server certificate presented to the user.
    attr_accessor :default_cert_key

    # true - activate the ocsp must staple, false - deactivate it.
    attr_accessor :ocsp_must_staple

    # true - activate the certificate validation; false - deactivate it.
    attr_accessor :certificate_validation

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'_revision' => :'_revision',
        :'resource_type' => :'resource_type',
        :'_create_user' => :'_create_user',
        :'_create_time' => :'_create_time',
        :'_last_modified_user' => :'_last_modified_user',
        :'_last_modified_time' => :'_last_modified_time',
        :'_system_owned' => :'_system_owned',
        :'_protection' => :'_protection',
        :'id' => :'id',
        :'display_name' => :'display_name',
        :'description' => :'description',
        :'tags' => :'tags',
        :'path' => :'path',
        :'relative_path' => :'relative_path',
        :'parent_path' => :'parent_path',
        :'remote_path' => :'remote_path',
        :'unique_id' => :'unique_id',
        :'realization_id' => :'realization_id',
        :'owner_id' => :'owner_id',
        :'origin_site_id' => :'origin_site_id',
        :'children' => :'children',
        :'marked_for_delete' => :'marked_for_delete',
        :'overridden' => :'overridden',
        :'attention' => :'attention',
        :'trusted_ca_bundles' => :'trusted_ca_bundles',
        :'crls' => :'crls',
        :'idle_connection_timeout' => :'idle_connection_timeout',
        :'tls_config_setting' => :'tls_config_setting',
        :'decryption_fail_action' => :'decryption_fail_action',
        :'crypto_enforcement' => :'crypto_enforcement',
        :'client_min_tls_version' => :'client_min_tls_version',
        :'client_max_tls_version' => :'client_max_tls_version',
        :'server_min_tls_version' => :'server_min_tls_version',
        :'server_max_tls_version' => :'server_max_tls_version',
        :'client_cipher_suite' => :'client_cipher_suite',
        :'server_cipher_suite' => :'server_cipher_suite',
        :'server_certs_key' => :'server_certs_key',
        :'default_cert_key' => :'default_cert_key',
        :'ocsp_must_staple' => :'ocsp_must_staple',
        :'certificate_validation' => :'certificate_validation'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'_revision' => :'Integer',
        :'resource_type' => :'String',
        :'_create_user' => :'String',
        :'_create_time' => :'Integer',
        :'_last_modified_user' => :'String',
        :'_last_modified_time' => :'Integer',
        :'_system_owned' => :'BOOLEAN',
        :'_protection' => :'String',
        :'id' => :'String',
        :'display_name' => :'String',
        :'description' => :'String',
        :'tags' => :'Array<Tag>',
        :'path' => :'String',
        :'relative_path' => :'String',
        :'parent_path' => :'String',
        :'remote_path' => :'String',
        :'unique_id' => :'String',
        :'realization_id' => :'String',
        :'owner_id' => :'String',
        :'origin_site_id' => :'String',
        :'children' => :'Array<ChildPolicyConfigResource>',
        :'marked_for_delete' => :'BOOLEAN',
        :'overridden' => :'BOOLEAN',
        :'attention' => :'String',
        :'trusted_ca_bundles' => :'Array<String>',
        :'crls' => :'Array<String>',
        :'idle_connection_timeout' => :'Integer',
        :'tls_config_setting' => :'String',
        :'decryption_fail_action' => :'String',
        :'crypto_enforcement' => :'String',
        :'client_min_tls_version' => :'String',
        :'client_max_tls_version' => :'String',
        :'server_min_tls_version' => :'String',
        :'server_max_tls_version' => :'String',
        :'client_cipher_suite' => :'Array<String>',
        :'server_cipher_suite' => :'Array<String>',
        :'server_certs_key' => :'Array<String>',
        :'default_cert_key' => :'String',
        :'ocsp_must_staple' => :'BOOLEAN',
        :'certificate_validation' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'_revision')
        self._revision = attributes[:'_revision']
      end

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'_create_user')
        self._create_user = attributes[:'_create_user']
      end

      if attributes.has_key?(:'_create_time')
        self._create_time = attributes[:'_create_time']
      end

      if attributes.has_key?(:'_last_modified_user')
        self._last_modified_user = attributes[:'_last_modified_user']
      end

      if attributes.has_key?(:'_last_modified_time')
        self._last_modified_time = attributes[:'_last_modified_time']
      end

      if attributes.has_key?(:'_system_owned')
        self._system_owned = attributes[:'_system_owned']
      end

      if attributes.has_key?(:'_protection')
        self._protection = attributes[:'_protection']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.has_key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.has_key?(:'relative_path')
        self.relative_path = attributes[:'relative_path']
      end

      if attributes.has_key?(:'parent_path')
        self.parent_path = attributes[:'parent_path']
      end

      if attributes.has_key?(:'remote_path')
        self.remote_path = attributes[:'remote_path']
      end

      if attributes.has_key?(:'unique_id')
        self.unique_id = attributes[:'unique_id']
      end

      if attributes.has_key?(:'realization_id')
        self.realization_id = attributes[:'realization_id']
      end

      if attributes.has_key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

      if attributes.has_key?(:'origin_site_id')
        self.origin_site_id = attributes[:'origin_site_id']
      end

      if attributes.has_key?(:'children')
        if (value = attributes[:'children']).is_a?(Array)
          self.children = value
        end
      end

      if attributes.has_key?(:'marked_for_delete')
        self.marked_for_delete = attributes[:'marked_for_delete']
      else
        self.marked_for_delete = false
      end

      if attributes.has_key?(:'overridden')
        self.overridden = attributes[:'overridden']
      else
        self.overridden = false
      end

      if attributes.has_key?(:'attention')
        self.attention = attributes[:'attention']
      end

      if attributes.has_key?(:'trusted_ca_bundles')
        if (value = attributes[:'trusted_ca_bundles']).is_a?(Array)
          self.trusted_ca_bundles = value
        end
      end

      if attributes.has_key?(:'crls')
        if (value = attributes[:'crls']).is_a?(Array)
          self.crls = value
        end
      end

      if attributes.has_key?(:'idle_connection_timeout')
        self.idle_connection_timeout = attributes[:'idle_connection_timeout']
      else
        self.idle_connection_timeout = 5400
      end

      if attributes.has_key?(:'tls_config_setting')
        self.tls_config_setting = attributes[:'tls_config_setting']
      else
        self.tls_config_setting = 'BALANCED'
      end

      if attributes.has_key?(:'decryption_fail_action')
        self.decryption_fail_action = attributes[:'decryption_fail_action']
      else
        self.decryption_fail_action = 'BYPASS'
      end

      if attributes.has_key?(:'crypto_enforcement')
        self.crypto_enforcement = attributes[:'crypto_enforcement']
      else
        self.crypto_enforcement = 'ENFORCE'
      end

      if attributes.has_key?(:'client_min_tls_version')
        self.client_min_tls_version = attributes[:'client_min_tls_version']
      else
        self.client_min_tls_version = 'TLS_V1_1'
      end

      if attributes.has_key?(:'client_max_tls_version')
        self.client_max_tls_version = attributes[:'client_max_tls_version']
      else
        self.client_max_tls_version = 'TLS_V1_2'
      end

      if attributes.has_key?(:'server_min_tls_version')
        self.server_min_tls_version = attributes[:'server_min_tls_version']
      else
        self.server_min_tls_version = 'TLS_V1_1'
      end

      if attributes.has_key?(:'server_max_tls_version')
        self.server_max_tls_version = attributes[:'server_max_tls_version']
      else
        self.server_max_tls_version = 'TLS_V1_2'
      end

      if attributes.has_key?(:'client_cipher_suite')
        if (value = attributes[:'client_cipher_suite']).is_a?(Array)
          self.client_cipher_suite = value
        end
      end

      if attributes.has_key?(:'server_cipher_suite')
        if (value = attributes[:'server_cipher_suite']).is_a?(Array)
          self.server_cipher_suite = value
        end
      end

      if attributes.has_key?(:'server_certs_key')
        if (value = attributes[:'server_certs_key']).is_a?(Array)
          self.server_certs_key = value
        end
      end

      if attributes.has_key?(:'default_cert_key')
        self.default_cert_key = attributes[:'default_cert_key']
      end

      if attributes.has_key?(:'ocsp_must_staple')
        self.ocsp_must_staple = attributes[:'ocsp_must_staple']
      else
        self.ocsp_must_staple = false
      end

      if attributes.has_key?(:'certificate_validation')
        self.certificate_validation = attributes[:'certificate_validation']
      else
        self.certificate_validation = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      if !@display_name.nil? && @display_name.to_s.length > 255
        invalid_properties.push('invalid value for "display_name", the character length must be smaller than or equal to 255.')
      end

      if !@description.nil? && @description.to_s.length > 1024
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 1024.')
      end

      if !@idle_connection_timeout.nil? && @idle_connection_timeout > 4320000
        invalid_properties.push('invalid value for "idle_connection_timeout", must be smaller than or equal to 4320000.')
      end

      if !@idle_connection_timeout.nil? && @idle_connection_timeout < 1
        invalid_properties.push('invalid value for "idle_connection_timeout", must be greater than or equal to 1.')
      end

      if @server_certs_key.nil?
        invalid_properties.push('invalid value for "server_certs_key", server_certs_key cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @resource_type.nil?
      resource_type_validator = EnumAttributeValidator.new('String', ['TlsInspectionBypassProfile', 'TlsInspectionExternalProfile', 'TlsInspectionInternalProfile'])
      return false unless resource_type_validator.valid?(@resource_type)
      return false if !@display_name.nil? && @display_name.to_s.length > 255
      return false if !@description.nil? && @description.to_s.length > 1024
      return false if !@idle_connection_timeout.nil? && @idle_connection_timeout > 4320000
      return false if !@idle_connection_timeout.nil? && @idle_connection_timeout < 1
      tls_config_setting_validator = EnumAttributeValidator.new('String', ['BALANCED', 'HIGH_FIDELITY', 'HIGH_SECURITY', 'CUSTOM'])
      return false unless tls_config_setting_validator.valid?(@tls_config_setting)
      decryption_fail_action_validator = EnumAttributeValidator.new('String', ['BLOCK', 'BYPASS'])
      return false unless decryption_fail_action_validator.valid?(@decryption_fail_action)
      crypto_enforcement_validator = EnumAttributeValidator.new('String', ['ENFORCE', 'TRANSPARENT'])
      return false unless crypto_enforcement_validator.valid?(@crypto_enforcement)
      client_min_tls_version_validator = EnumAttributeValidator.new('String', ['TLS_V1_2', 'TLS_V1_1', 'TLS_V1_0'])
      return false unless client_min_tls_version_validator.valid?(@client_min_tls_version)
      client_max_tls_version_validator = EnumAttributeValidator.new('String', ['TLS_V1_2', 'TLS_V1_1', 'TLS_V1_0'])
      return false unless client_max_tls_version_validator.valid?(@client_max_tls_version)
      server_min_tls_version_validator = EnumAttributeValidator.new('String', ['TLS_V1_2', 'TLS_V1_1', 'TLS_V1_0'])
      return false unless server_min_tls_version_validator.valid?(@server_min_tls_version)
      server_max_tls_version_validator = EnumAttributeValidator.new('String', ['TLS_V1_2', 'TLS_V1_1', 'TLS_V1_0'])
      return false unless server_max_tls_version_validator.valid?(@server_max_tls_version)
      return false if @server_certs_key.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      validator = EnumAttributeValidator.new('String', ['TlsInspectionBypassProfile', 'TlsInspectionExternalProfile', 'TlsInspectionInternalProfile'])
      unless validator.valid?(resource_type)
        fail ArgumentError, 'invalid value for "resource_type", must be one of #{validator.allowable_values}.'
      end
      @resource_type = resource_type
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if !display_name.nil? && display_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "display_name", the character length must be smaller than or equal to 255.'
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 1024
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 1024.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] idle_connection_timeout Value to be assigned
    def idle_connection_timeout=(idle_connection_timeout)
      if !idle_connection_timeout.nil? && idle_connection_timeout > 4320000
        fail ArgumentError, 'invalid value for "idle_connection_timeout", must be smaller than or equal to 4320000.'
      end

      if !idle_connection_timeout.nil? && idle_connection_timeout < 1
        fail ArgumentError, 'invalid value for "idle_connection_timeout", must be greater than or equal to 1.'
      end

      @idle_connection_timeout = idle_connection_timeout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tls_config_setting Object to be assigned
    def tls_config_setting=(tls_config_setting)
      validator = EnumAttributeValidator.new('String', ['BALANCED', 'HIGH_FIDELITY', 'HIGH_SECURITY', 'CUSTOM'])
      unless validator.valid?(tls_config_setting)
        fail ArgumentError, 'invalid value for "tls_config_setting", must be one of #{validator.allowable_values}.'
      end
      @tls_config_setting = tls_config_setting
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] decryption_fail_action Object to be assigned
    def decryption_fail_action=(decryption_fail_action)
      validator = EnumAttributeValidator.new('String', ['BLOCK', 'BYPASS'])
      unless validator.valid?(decryption_fail_action)
        fail ArgumentError, 'invalid value for "decryption_fail_action", must be one of #{validator.allowable_values}.'
      end
      @decryption_fail_action = decryption_fail_action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] crypto_enforcement Object to be assigned
    def crypto_enforcement=(crypto_enforcement)
      validator = EnumAttributeValidator.new('String', ['ENFORCE', 'TRANSPARENT'])
      unless validator.valid?(crypto_enforcement)
        fail ArgumentError, 'invalid value for "crypto_enforcement", must be one of #{validator.allowable_values}.'
      end
      @crypto_enforcement = crypto_enforcement
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_min_tls_version Object to be assigned
    def client_min_tls_version=(client_min_tls_version)
      validator = EnumAttributeValidator.new('String', ['TLS_V1_2', 'TLS_V1_1', 'TLS_V1_0'])
      unless validator.valid?(client_min_tls_version)
        fail ArgumentError, 'invalid value for "client_min_tls_version", must be one of #{validator.allowable_values}.'
      end
      @client_min_tls_version = client_min_tls_version
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_max_tls_version Object to be assigned
    def client_max_tls_version=(client_max_tls_version)
      validator = EnumAttributeValidator.new('String', ['TLS_V1_2', 'TLS_V1_1', 'TLS_V1_0'])
      unless validator.valid?(client_max_tls_version)
        fail ArgumentError, 'invalid value for "client_max_tls_version", must be one of #{validator.allowable_values}.'
      end
      @client_max_tls_version = client_max_tls_version
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] server_min_tls_version Object to be assigned
    def server_min_tls_version=(server_min_tls_version)
      validator = EnumAttributeValidator.new('String', ['TLS_V1_2', 'TLS_V1_1', 'TLS_V1_0'])
      unless validator.valid?(server_min_tls_version)
        fail ArgumentError, 'invalid value for "server_min_tls_version", must be one of #{validator.allowable_values}.'
      end
      @server_min_tls_version = server_min_tls_version
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] server_max_tls_version Object to be assigned
    def server_max_tls_version=(server_max_tls_version)
      validator = EnumAttributeValidator.new('String', ['TLS_V1_2', 'TLS_V1_1', 'TLS_V1_0'])
      unless validator.valid?(server_max_tls_version)
        fail ArgumentError, 'invalid value for "server_max_tls_version", must be one of #{validator.allowable_values}.'
      end
      @server_max_tls_version = server_max_tls_version
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          _revision == o._revision &&
          resource_type == o.resource_type &&
          _create_user == o._create_user &&
          _create_time == o._create_time &&
          _last_modified_user == o._last_modified_user &&
          _last_modified_time == o._last_modified_time &&
          _system_owned == o._system_owned &&
          _protection == o._protection &&
          id == o.id &&
          display_name == o.display_name &&
          description == o.description &&
          tags == o.tags &&
          path == o.path &&
          relative_path == o.relative_path &&
          parent_path == o.parent_path &&
          remote_path == o.remote_path &&
          unique_id == o.unique_id &&
          realization_id == o.realization_id &&
          owner_id == o.owner_id &&
          origin_site_id == o.origin_site_id &&
          children == o.children &&
          marked_for_delete == o.marked_for_delete &&
          overridden == o.overridden &&
          attention == o.attention &&
          trusted_ca_bundles == o.trusted_ca_bundles &&
          crls == o.crls &&
          idle_connection_timeout == o.idle_connection_timeout &&
          tls_config_setting == o.tls_config_setting &&
          decryption_fail_action == o.decryption_fail_action &&
          crypto_enforcement == o.crypto_enforcement &&
          client_min_tls_version == o.client_min_tls_version &&
          client_max_tls_version == o.client_max_tls_version &&
          server_min_tls_version == o.server_min_tls_version &&
          server_max_tls_version == o.server_max_tls_version &&
          client_cipher_suite == o.client_cipher_suite &&
          server_cipher_suite == o.server_cipher_suite &&
          server_certs_key == o.server_certs_key &&
          default_cert_key == o.default_cert_key &&
          ocsp_must_staple == o.ocsp_must_staple &&
          certificate_validation == o.certificate_validation
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, _revision, resource_type, _create_user, _create_time, _last_modified_user, _last_modified_time, _system_owned, _protection, id, display_name, description, tags, path, relative_path, parent_path, remote_path, unique_id, realization_id, owner_id, origin_site_id, children, marked_for_delete, overridden, attention, trusted_ca_bundles, crls, idle_connection_timeout, tls_config_setting, decryption_fail_action, crypto_enforcement, client_min_tls_version, client_max_tls_version, server_min_tls_version, server_max_tls_version, client_cipher_suite, server_cipher_suite, server_certs_key, default_cert_key, ocsp_must_staple, certificate_validation].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
