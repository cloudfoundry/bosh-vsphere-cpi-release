=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # A line chart plotting configuration.
  class LineChartPlotConfiguration
    # If the condition is met then the given chart config is applied to the widget configuration.
    attr_accessor :condition

    # Allow maximize capability for this widget
    attr_accessor :allow_maximize

    # Controls the visiblity of the data points on the line chart. If value is set to false data points wont be high- lighted on the lines. 
    attr_accessor :show_data_points

    # Controls the visiblity of the grouped tooltip in a line chart across all series. 
    attr_accessor :show_grouped_tooltip

    # Sort the data in grouped tooltip. 
    attr_accessor :sort_data_in_grouped_tooltip

    # Show the data in tooltip. 
    attr_accessor :show_data_in_tooltip

    # Show the data unit in tooltip. 
    attr_accessor :show_unit_in_tooltip

    # Controls the visiblity of the min and max value across line series in line chart. 
    attr_accessor :show_min_max_on_series

    # Controls the visiblity of the grid lines in line chart. 
    attr_accessor :show_grid_lines

    # Used for displaying the curved lines for a series in a line chart. By default, straight line is used to for a series in a line chart. 
    attr_accessor :show_curved_lines

    # Specifies whether the series should be sorted by the latest data point. 
    attr_accessor :sort_series

    # Fill the line chart area with a gradient series color. 
    attr_accessor :fill_gradient_area

    # Specifies the number of series to be displayed in a line chart. If no value is provided all the series will be displayed.
    attr_accessor :num_of_series_to_display

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'condition' => :'condition',
        :'allow_maximize' => :'allow_maximize',
        :'show_data_points' => :'show_data_points',
        :'show_grouped_tooltip' => :'show_grouped_tooltip',
        :'sort_data_in_grouped_tooltip' => :'sort_data_in_grouped_tooltip',
        :'show_data_in_tooltip' => :'show_data_in_tooltip',
        :'show_unit_in_tooltip' => :'show_unit_in_tooltip',
        :'show_min_max_on_series' => :'show_min_max_on_series',
        :'show_grid_lines' => :'show_grid_lines',
        :'show_curved_lines' => :'show_curved_lines',
        :'sort_series' => :'sort_series',
        :'fill_gradient_area' => :'fill_gradient_area',
        :'num_of_series_to_display' => :'num_of_series_to_display'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'condition' => :'String',
        :'allow_maximize' => :'BOOLEAN',
        :'show_data_points' => :'BOOLEAN',
        :'show_grouped_tooltip' => :'BOOLEAN',
        :'sort_data_in_grouped_tooltip' => :'BOOLEAN',
        :'show_data_in_tooltip' => :'BOOLEAN',
        :'show_unit_in_tooltip' => :'BOOLEAN',
        :'show_min_max_on_series' => :'BOOLEAN',
        :'show_grid_lines' => :'BOOLEAN',
        :'show_curved_lines' => :'BOOLEAN',
        :'sort_series' => :'BOOLEAN',
        :'fill_gradient_area' => :'BOOLEAN',
        :'num_of_series_to_display' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'condition')
        self.condition = attributes[:'condition']
      end

      if attributes.has_key?(:'allow_maximize')
        self.allow_maximize = attributes[:'allow_maximize']
      end

      if attributes.has_key?(:'show_data_points')
        self.show_data_points = attributes[:'show_data_points']
      else
        self.show_data_points = true
      end

      if attributes.has_key?(:'show_grouped_tooltip')
        self.show_grouped_tooltip = attributes[:'show_grouped_tooltip']
      else
        self.show_grouped_tooltip = false
      end

      if attributes.has_key?(:'sort_data_in_grouped_tooltip')
        self.sort_data_in_grouped_tooltip = attributes[:'sort_data_in_grouped_tooltip']
      else
        self.sort_data_in_grouped_tooltip = false
      end

      if attributes.has_key?(:'show_data_in_tooltip')
        self.show_data_in_tooltip = attributes[:'show_data_in_tooltip']
      else
        self.show_data_in_tooltip = false
      end

      if attributes.has_key?(:'show_unit_in_tooltip')
        self.show_unit_in_tooltip = attributes[:'show_unit_in_tooltip']
      else
        self.show_unit_in_tooltip = false
      end

      if attributes.has_key?(:'show_min_max_on_series')
        self.show_min_max_on_series = attributes[:'show_min_max_on_series']
      else
        self.show_min_max_on_series = false
      end

      if attributes.has_key?(:'show_grid_lines')
        self.show_grid_lines = attributes[:'show_grid_lines']
      else
        self.show_grid_lines = true
      end

      if attributes.has_key?(:'show_curved_lines')
        self.show_curved_lines = attributes[:'show_curved_lines']
      else
        self.show_curved_lines = true
      end

      if attributes.has_key?(:'sort_series')
        self.sort_series = attributes[:'sort_series']
      else
        self.sort_series = false
      end

      if attributes.has_key?(:'fill_gradient_area')
        self.fill_gradient_area = attributes[:'fill_gradient_area']
      end

      if attributes.has_key?(:'num_of_series_to_display')
        self.num_of_series_to_display = attributes[:'num_of_series_to_display']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@condition.nil? && @condition.to_s.length > 1024
        invalid_properties.push('invalid value for "condition", the character length must be smaller than or equal to 1024.')
      end

      if !@num_of_series_to_display.nil? && @num_of_series_to_display > 16
        invalid_properties.push('invalid value for "num_of_series_to_display", must be smaller than or equal to 16.')
      end

      if !@num_of_series_to_display.nil? && @num_of_series_to_display < 1
        invalid_properties.push('invalid value for "num_of_series_to_display", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@condition.nil? && @condition.to_s.length > 1024
      return false if !@num_of_series_to_display.nil? && @num_of_series_to_display > 16
      return false if !@num_of_series_to_display.nil? && @num_of_series_to_display < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] condition Value to be assigned
    def condition=(condition)
      if !condition.nil? && condition.to_s.length > 1024
        fail ArgumentError, 'invalid value for "condition", the character length must be smaller than or equal to 1024.'
      end

      @condition = condition
    end

    # Custom attribute writer method with validation
    # @param [Object] num_of_series_to_display Value to be assigned
    def num_of_series_to_display=(num_of_series_to_display)
      if !num_of_series_to_display.nil? && num_of_series_to_display > 16
        fail ArgumentError, 'invalid value for "num_of_series_to_display", must be smaller than or equal to 16.'
      end

      if !num_of_series_to_display.nil? && num_of_series_to_display < 1
        fail ArgumentError, 'invalid value for "num_of_series_to_display", must be greater than or equal to 1.'
      end

      @num_of_series_to_display = num_of_series_to_display
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          condition == o.condition &&
          allow_maximize == o.allow_maximize &&
          show_data_points == o.show_data_points &&
          show_grouped_tooltip == o.show_grouped_tooltip &&
          sort_data_in_grouped_tooltip == o.sort_data_in_grouped_tooltip &&
          show_data_in_tooltip == o.show_data_in_tooltip &&
          show_unit_in_tooltip == o.show_unit_in_tooltip &&
          show_min_max_on_series == o.show_min_max_on_series &&
          show_grid_lines == o.show_grid_lines &&
          show_curved_lines == o.show_curved_lines &&
          sort_series == o.sort_series &&
          fill_gradient_area == o.fill_gradient_area &&
          num_of_series_to_display == o.num_of_series_to_display
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [condition, allow_maximize, show_data_points, show_grouped_tooltip, sort_data_in_grouped_tooltip, show_data_in_tooltip, show_unit_in_tooltip, show_min_max_on_series, show_grid_lines, show_curved_lines, sort_series, fill_gradient_area, num_of_series_to_display].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
