=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Represents the IP block quota usage details for a consumer Project/VPC 
  class IpBlockQuotaState
    attr_accessor :resource_type

    # Single IP count
    attr_accessor :single_ip_cidrs

    attr_accessor :other_cidrs

    # IP Blocks in Quota
    attr_accessor :ip_block_paths

    # A quota will be applied on blocks with same visibility. Private and External blocks cannot be specified within the same block 
    attr_accessor :ip_block_visibility

    # A quota will be applied to blocks of the same address type. One IPv4 block and another IPv6 block cannot be specified within the same quota. 
    attr_accessor :ip_block_address_type

    # The consumption details for consumer of the IP block
    attr_accessor :usage

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'resource_type' => :'resource_type',
        :'single_ip_cidrs' => :'single_ip_cidrs',
        :'other_cidrs' => :'other_cidrs',
        :'ip_block_paths' => :'ip_block_paths',
        :'ip_block_visibility' => :'ip_block_visibility',
        :'ip_block_address_type' => :'ip_block_address_type',
        :'usage' => :'usage'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'resource_type' => :'String',
        :'single_ip_cidrs' => :'Integer',
        :'other_cidrs' => :'OtherCidrsMsg',
        :'ip_block_paths' => :'Array<String>',
        :'ip_block_visibility' => :'String',
        :'ip_block_address_type' => :'String',
        :'usage' => :'Array<IpBlockQuotaUsageForConsumer>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'single_ip_cidrs')
        self.single_ip_cidrs = attributes[:'single_ip_cidrs']
      end

      if attributes.has_key?(:'other_cidrs')
        self.other_cidrs = attributes[:'other_cidrs']
      end

      if attributes.has_key?(:'ip_block_paths')
        if (value = attributes[:'ip_block_paths']).is_a?(Array)
          self.ip_block_paths = value
        end
      end

      if attributes.has_key?(:'ip_block_visibility')
        self.ip_block_visibility = attributes[:'ip_block_visibility']
      end

      if attributes.has_key?(:'ip_block_address_type')
        self.ip_block_address_type = attributes[:'ip_block_address_type']
      end

      if attributes.has_key?(:'usage')
        if (value = attributes[:'usage']).is_a?(Array)
          self.usage = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @resource_type.nil?
      resource_type_validator = EnumAttributeValidator.new('String', ['IpBlockQuota'])
      return false unless resource_type_validator.valid?(@resource_type)
      ip_block_visibility_validator = EnumAttributeValidator.new('String', ['PRIVATE', 'EXTERNAL'])
      return false unless ip_block_visibility_validator.valid?(@ip_block_visibility)
      ip_block_address_type_validator = EnumAttributeValidator.new('String', ['IPV4', 'IPV6'])
      return false unless ip_block_address_type_validator.valid?(@ip_block_address_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      validator = EnumAttributeValidator.new('String', ['IpBlockQuota'])
      unless validator.valid?(resource_type)
        fail ArgumentError, 'invalid value for "resource_type", must be one of #{validator.allowable_values}.'
      end
      @resource_type = resource_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_block_visibility Object to be assigned
    def ip_block_visibility=(ip_block_visibility)
      validator = EnumAttributeValidator.new('String', ['PRIVATE', 'EXTERNAL'])
      unless validator.valid?(ip_block_visibility)
        fail ArgumentError, 'invalid value for "ip_block_visibility", must be one of #{validator.allowable_values}.'
      end
      @ip_block_visibility = ip_block_visibility
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_block_address_type Object to be assigned
    def ip_block_address_type=(ip_block_address_type)
      validator = EnumAttributeValidator.new('String', ['IPV4', 'IPV6'])
      unless validator.valid?(ip_block_address_type)
        fail ArgumentError, 'invalid value for "ip_block_address_type", must be one of #{validator.allowable_values}.'
      end
      @ip_block_address_type = ip_block_address_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          resource_type == o.resource_type &&
          single_ip_cidrs == o.single_ip_cidrs &&
          other_cidrs == o.other_cidrs &&
          ip_block_paths == o.ip_block_paths &&
          ip_block_visibility == o.ip_block_visibility &&
          ip_block_address_type == o.ip_block_address_type &&
          usage == o.usage
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [resource_type, single_ip_cidrs, other_cidrs, ip_block_paths, ip_block_visibility, ip_block_address_type, usage].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
