=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Describes usage summary of virtual servers, pools and pool members for all load balancer services. 
  class LBServiceUsageSummary
    # Overall pool usage percentage for all load balancer services. 
    attr_accessor :pool_usage_percentage

    # The severity calculation is based on the overall usage percentage of pools for all load balancer services. 
    attr_accessor :pool_severity

    # Pool capacity means maximum number of pools which can be configured for all load balancer services. 
    attr_accessor :pool_capacity

    # The current count of pools configured for all load balancer services. 
    attr_accessor :current_pool_count

    # Overall virtual server usage percentage for all load balancer services. 
    attr_accessor :virtual_server_usage_percentage

    # The severity calculation is based on the overall usage percentage of virtual servers for all load balancer services. 
    attr_accessor :virtual_server_severity

    # Virtual server capacity means maximum number of virtual servers which can be configured for all load balancer services. 
    attr_accessor :virtual_server_capacity

    # The current count of virtual servers configured for all load balancer services. 
    attr_accessor :current_virtual_server_count

    # Overall pool member usage percentage for all load balancer services. 
    attr_accessor :pool_member_usage_percentage

    # The severity calculation is based on the overall usage percentage of pool members for all load balancer services. 
    attr_accessor :pool_member_severity

    # Pool capacity means maximum number of pool members which can be configured for all load balancer services. 
    attr_accessor :pool_member_capacity

    # The current count of pool members configured for all load balancer services. 
    attr_accessor :current_pool_member_count

    # The service count for each load balancer usage severity. 
    attr_accessor :service_counts

    # The property identifies all lb service usages. By default, it is not included in response. It exists when parameter ?include_usages=true. 
    attr_accessor :service_usages

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pool_usage_percentage' => :'pool_usage_percentage',
        :'pool_severity' => :'pool_severity',
        :'pool_capacity' => :'pool_capacity',
        :'current_pool_count' => :'current_pool_count',
        :'virtual_server_usage_percentage' => :'virtual_server_usage_percentage',
        :'virtual_server_severity' => :'virtual_server_severity',
        :'virtual_server_capacity' => :'virtual_server_capacity',
        :'current_virtual_server_count' => :'current_virtual_server_count',
        :'pool_member_usage_percentage' => :'pool_member_usage_percentage',
        :'pool_member_severity' => :'pool_member_severity',
        :'pool_member_capacity' => :'pool_member_capacity',
        :'current_pool_member_count' => :'current_pool_member_count',
        :'service_counts' => :'service_counts',
        :'service_usages' => :'service_usages'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'pool_usage_percentage' => :'Float',
        :'pool_severity' => :'String',
        :'pool_capacity' => :'Integer',
        :'current_pool_count' => :'Integer',
        :'virtual_server_usage_percentage' => :'Float',
        :'virtual_server_severity' => :'String',
        :'virtual_server_capacity' => :'Integer',
        :'current_virtual_server_count' => :'Integer',
        :'pool_member_usage_percentage' => :'Float',
        :'pool_member_severity' => :'String',
        :'pool_member_capacity' => :'Integer',
        :'current_pool_member_count' => :'Integer',
        :'service_counts' => :'Array<LBServiceCountPerSeverity>',
        :'service_usages' => :'Array<LBServiceUsage>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'pool_usage_percentage')
        self.pool_usage_percentage = attributes[:'pool_usage_percentage']
      end

      if attributes.has_key?(:'pool_severity')
        self.pool_severity = attributes[:'pool_severity']
      end

      if attributes.has_key?(:'pool_capacity')
        self.pool_capacity = attributes[:'pool_capacity']
      end

      if attributes.has_key?(:'current_pool_count')
        self.current_pool_count = attributes[:'current_pool_count']
      end

      if attributes.has_key?(:'virtual_server_usage_percentage')
        self.virtual_server_usage_percentage = attributes[:'virtual_server_usage_percentage']
      end

      if attributes.has_key?(:'virtual_server_severity')
        self.virtual_server_severity = attributes[:'virtual_server_severity']
      end

      if attributes.has_key?(:'virtual_server_capacity')
        self.virtual_server_capacity = attributes[:'virtual_server_capacity']
      end

      if attributes.has_key?(:'current_virtual_server_count')
        self.current_virtual_server_count = attributes[:'current_virtual_server_count']
      end

      if attributes.has_key?(:'pool_member_usage_percentage')
        self.pool_member_usage_percentage = attributes[:'pool_member_usage_percentage']
      end

      if attributes.has_key?(:'pool_member_severity')
        self.pool_member_severity = attributes[:'pool_member_severity']
      end

      if attributes.has_key?(:'pool_member_capacity')
        self.pool_member_capacity = attributes[:'pool_member_capacity']
      end

      if attributes.has_key?(:'current_pool_member_count')
        self.current_pool_member_count = attributes[:'current_pool_member_count']
      end

      if attributes.has_key?(:'service_counts')
        if (value = attributes[:'service_counts']).is_a?(Array)
          self.service_counts = value
        end
      end

      if attributes.has_key?(:'service_usages')
        if (value = attributes[:'service_usages']).is_a?(Array)
          self.service_usages = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      pool_severity_validator = EnumAttributeValidator.new('String', ['GREEN', 'ORANGE', 'RED'])
      return false unless pool_severity_validator.valid?(@pool_severity)
      virtual_server_severity_validator = EnumAttributeValidator.new('String', ['GREEN', 'ORANGE', 'RED'])
      return false unless virtual_server_severity_validator.valid?(@virtual_server_severity)
      pool_member_severity_validator = EnumAttributeValidator.new('String', ['GREEN', 'ORANGE', 'RED'])
      return false unless pool_member_severity_validator.valid?(@pool_member_severity)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pool_severity Object to be assigned
    def pool_severity=(pool_severity)
      validator = EnumAttributeValidator.new('String', ['GREEN', 'ORANGE', 'RED'])
      unless validator.valid?(pool_severity)
        fail ArgumentError, 'invalid value for "pool_severity", must be one of #{validator.allowable_values}.'
      end
      @pool_severity = pool_severity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] virtual_server_severity Object to be assigned
    def virtual_server_severity=(virtual_server_severity)
      validator = EnumAttributeValidator.new('String', ['GREEN', 'ORANGE', 'RED'])
      unless validator.valid?(virtual_server_severity)
        fail ArgumentError, 'invalid value for "virtual_server_severity", must be one of #{validator.allowable_values}.'
      end
      @virtual_server_severity = virtual_server_severity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pool_member_severity Object to be assigned
    def pool_member_severity=(pool_member_severity)
      validator = EnumAttributeValidator.new('String', ['GREEN', 'ORANGE', 'RED'])
      unless validator.valid?(pool_member_severity)
        fail ArgumentError, 'invalid value for "pool_member_severity", must be one of #{validator.allowable_values}.'
      end
      @pool_member_severity = pool_member_severity
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pool_usage_percentage == o.pool_usage_percentage &&
          pool_severity == o.pool_severity &&
          pool_capacity == o.pool_capacity &&
          current_pool_count == o.current_pool_count &&
          virtual_server_usage_percentage == o.virtual_server_usage_percentage &&
          virtual_server_severity == o.virtual_server_severity &&
          virtual_server_capacity == o.virtual_server_capacity &&
          current_virtual_server_count == o.current_virtual_server_count &&
          pool_member_usage_percentage == o.pool_member_usage_percentage &&
          pool_member_severity == o.pool_member_severity &&
          pool_member_capacity == o.pool_member_capacity &&
          current_pool_member_count == o.current_pool_member_count &&
          service_counts == o.service_counts &&
          service_usages == o.service_usages
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [pool_usage_percentage, pool_severity, pool_capacity, current_pool_count, virtual_server_usage_percentage, virtual_server_severity, virtual_server_capacity, current_virtual_server_count, pool_member_usage_percentage, pool_member_severity, pool_member_capacity, current_pool_member_count, service_counts, service_usages].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
