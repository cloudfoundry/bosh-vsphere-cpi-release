=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class DistributedFirewall
    # Received IPv4 drop packets.
    attr_accessor :rx_ipv4_drop_pkts

    # Sent IPv4 drop packets.
    attr_accessor :tx_ipv4_drop_pkts

    # Received IPv6 drop packets.
    attr_accessor :rx_ipv6_drop_pkts

    # Sent IPv6 drop packets.
    attr_accessor :tx_ipv6_drop_pkts

    # Received IPv4 reject packets.
    attr_accessor :rx_ipv4_reject_pkts

    # Sent IPv4 reject packets.
    attr_accessor :tx_ipv4_reject_pkts

    # Received IPv6 reject packets.
    attr_accessor :rx_ipv6_reject_pkts

    # Sent IPv6 reject packets.
    attr_accessor :tx_ipv6_reject_pkts

    # Received layer 2 drop packets.
    attr_accessor :rx_l2_drop_pkts

    # Sent layer 2 drop packets.
    attr_accessor :tx_l2_drop_pkts

    # bad-offset.
    attr_accessor :bad_offset_drops

    # fragment.
    attr_accessor :fragment_drops

    # short.
    attr_accessor :short_drops

    # normalize.
    attr_accessor :normalize_drops

    # memory.
    attr_accessor :memory_drops

    # bad-timestamp.
    attr_accessor :bad_timestamp_drops

    # congestion.
    attr_accessor :congestion_drops

    # ip-option.
    attr_accessor :ip_option_drops

    # proto-cksum.
    attr_accessor :proto_cksum_drops

    # state-insert.
    attr_accessor :state_insert_drops

    # state-limit.
    attr_accessor :state_limit_drops

    # synproxy.
    attr_accessor :syn_proxy_drops

    # spoofguard.
    attr_accessor :spoof_guard_drops

    # icmp errpkt drop.
    attr_accessor :icmp_err_pkt_drops

    # L7 alert.
    attr_accessor :l7_alert_drops

    # alg handler error.
    attr_accessor :alg_handler_drops

    # strict no syn.
    attr_accessor :strict_no_syn_drops

    # icmp error.
    attr_accessor :icmp_error_drops

    # UDP flood overlimit.
    attr_accessor :udp_flood_overlimit_drops

    # ICMP flood overlimit.
    attr_accessor :icmp_flood_overlimit_drops

    # TCP flood overlimit.
    attr_accessor :tcp_flood_overlimit_drops

    # OTHER flood overlimit.
    attr_accessor :other_flood_overlimit_drops

    # SYN Expected.
    attr_accessor :syn_expected_drops

    # LB Reject.
    attr_accessor :lb_reject_drops

    # L7 attr error.
    attr_accessor :l7_attr_error_drops

    # state-mismatch.
    attr_accessor :state_mismatch_drops

    # 3wh error.
    attr_accessor :handshake_error_drops

    # seqno outside window.
    attr_accessor :seqno_outside_window_drops

    # seqno old retrans.
    attr_accessor :seqno_old_retrans_drops

    # seqno old ack.
    attr_accessor :seqno_old_ack_drops

    # seqno bad ack.
    attr_accessor :seqno_bad_ack_drops

    # seqno gt maxack.
    attr_accessor :seqno_gt_max_ack_drops

    # seqno lt minack.
    attr_accessor :seqno_lt_minack_drops

    # Ignored offloaded FP.
    attr_accessor :ignored_offloaded_fpdrops

    # Ignored offloaded SP.
    attr_accessor :ignored_offloaded_spdrops

    # Rx pkts dropped by hitting drop/reject rule.
    attr_accessor :match_drop_rule_rx_drops

    # Tx pkts dropped by hitting drop/reject rule.
    attr_accessor :match_drop_rule_tx_drops

    # pkts-frag-queued-v4.
    attr_accessor :pkts_frag_queued_v4_misc

    # pkts-frag-queued-v6.
    attr_accessor :pkts_frag_queued_v6_misc

    # src-limit.
    attr_accessor :src_limit_misc

    # L7 pending.
    attr_accessor :l7_pending_misc

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'rx_ipv4_drop_pkts' => :'rx_ipv4_drop_pkts',
        :'tx_ipv4_drop_pkts' => :'tx_ipv4_drop_pkts',
        :'rx_ipv6_drop_pkts' => :'rx_ipv6_drop_pkts',
        :'tx_ipv6_drop_pkts' => :'tx_ipv6_drop_pkts',
        :'rx_ipv4_reject_pkts' => :'rx_ipv4_reject_pkts',
        :'tx_ipv4_reject_pkts' => :'tx_ipv4_reject_pkts',
        :'rx_ipv6_reject_pkts' => :'rx_ipv6_reject_pkts',
        :'tx_ipv6_reject_pkts' => :'tx_ipv6_reject_pkts',
        :'rx_l2_drop_pkts' => :'rx_l2_drop_pkts',
        :'tx_l2_drop_pkts' => :'tx_l2_drop_pkts',
        :'bad_offset_drops' => :'bad_offset_drops',
        :'fragment_drops' => :'fragment_drops',
        :'short_drops' => :'short_drops',
        :'normalize_drops' => :'normalize_drops',
        :'memory_drops' => :'memory_drops',
        :'bad_timestamp_drops' => :'bad_timestamp_drops',
        :'congestion_drops' => :'congestion_drops',
        :'ip_option_drops' => :'ip_option_drops',
        :'proto_cksum_drops' => :'proto_cksum_drops',
        :'state_insert_drops' => :'state_insert_drops',
        :'state_limit_drops' => :'state_limit_drops',
        :'syn_proxy_drops' => :'syn_proxy_drops',
        :'spoof_guard_drops' => :'spoof_guard_drops',
        :'icmp_err_pkt_drops' => :'icmp_err_pkt_drops',
        :'l7_alert_drops' => :'l7_alert_drops',
        :'alg_handler_drops' => :'alg_handler_drops',
        :'strict_no_syn_drops' => :'strict_no_syn_drops',
        :'icmp_error_drops' => :'icmp_error_drops',
        :'udp_flood_overlimit_drops' => :'udp_flood_overlimit_drops',
        :'icmp_flood_overlimit_drops' => :'icmp_flood_overlimit_drops',
        :'tcp_flood_overlimit_drops' => :'tcp_flood_overlimit_drops',
        :'other_flood_overlimit_drops' => :'other_flood_overlimit_drops',
        :'syn_expected_drops' => :'syn_expected_drops',
        :'lb_reject_drops' => :'lb_reject_drops',
        :'l7_attr_error_drops' => :'l7_attr_error_drops',
        :'state_mismatch_drops' => :'state_mismatch_drops',
        :'handshake_error_drops' => :'handshake_error_drops',
        :'seqno_outside_window_drops' => :'seqno_outside_window_drops',
        :'seqno_old_retrans_drops' => :'seqno_old_retrans_drops',
        :'seqno_old_ack_drops' => :'seqno_old_ack_drops',
        :'seqno_bad_ack_drops' => :'seqno_bad_ack_drops',
        :'seqno_gt_max_ack_drops' => :'seqno_gt_max_ack_drops',
        :'seqno_lt_minack_drops' => :'seqno_lt_minack_drops',
        :'ignored_offloaded_fpdrops' => :'ignored_offloaded_fpdrops',
        :'ignored_offloaded_spdrops' => :'ignored_offloaded_spdrops',
        :'match_drop_rule_rx_drops' => :'match_drop_rule_rx_drops',
        :'match_drop_rule_tx_drops' => :'match_drop_rule_tx_drops',
        :'pkts_frag_queued_v4_misc' => :'pkts_frag_queued_v4_misc',
        :'pkts_frag_queued_v6_misc' => :'pkts_frag_queued_v6_misc',
        :'src_limit_misc' => :'src_limit_misc',
        :'l7_pending_misc' => :'l7_pending_misc'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'rx_ipv4_drop_pkts' => :'Integer',
        :'tx_ipv4_drop_pkts' => :'Integer',
        :'rx_ipv6_drop_pkts' => :'Integer',
        :'tx_ipv6_drop_pkts' => :'Integer',
        :'rx_ipv4_reject_pkts' => :'Integer',
        :'tx_ipv4_reject_pkts' => :'Integer',
        :'rx_ipv6_reject_pkts' => :'Integer',
        :'tx_ipv6_reject_pkts' => :'Integer',
        :'rx_l2_drop_pkts' => :'Integer',
        :'tx_l2_drop_pkts' => :'Integer',
        :'bad_offset_drops' => :'Integer',
        :'fragment_drops' => :'Integer',
        :'short_drops' => :'Integer',
        :'normalize_drops' => :'Integer',
        :'memory_drops' => :'Integer',
        :'bad_timestamp_drops' => :'Integer',
        :'congestion_drops' => :'Integer',
        :'ip_option_drops' => :'Integer',
        :'proto_cksum_drops' => :'Integer',
        :'state_insert_drops' => :'Integer',
        :'state_limit_drops' => :'Integer',
        :'syn_proxy_drops' => :'Integer',
        :'spoof_guard_drops' => :'Integer',
        :'icmp_err_pkt_drops' => :'Integer',
        :'l7_alert_drops' => :'Integer',
        :'alg_handler_drops' => :'Integer',
        :'strict_no_syn_drops' => :'Integer',
        :'icmp_error_drops' => :'Integer',
        :'udp_flood_overlimit_drops' => :'Integer',
        :'icmp_flood_overlimit_drops' => :'Integer',
        :'tcp_flood_overlimit_drops' => :'Integer',
        :'other_flood_overlimit_drops' => :'Integer',
        :'syn_expected_drops' => :'Integer',
        :'lb_reject_drops' => :'Integer',
        :'l7_attr_error_drops' => :'Integer',
        :'state_mismatch_drops' => :'Integer',
        :'handshake_error_drops' => :'Integer',
        :'seqno_outside_window_drops' => :'Integer',
        :'seqno_old_retrans_drops' => :'Integer',
        :'seqno_old_ack_drops' => :'Integer',
        :'seqno_bad_ack_drops' => :'Integer',
        :'seqno_gt_max_ack_drops' => :'Integer',
        :'seqno_lt_minack_drops' => :'Integer',
        :'ignored_offloaded_fpdrops' => :'Integer',
        :'ignored_offloaded_spdrops' => :'Integer',
        :'match_drop_rule_rx_drops' => :'Integer',
        :'match_drop_rule_tx_drops' => :'Integer',
        :'pkts_frag_queued_v4_misc' => :'Integer',
        :'pkts_frag_queued_v6_misc' => :'Integer',
        :'src_limit_misc' => :'Integer',
        :'l7_pending_misc' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'rx_ipv4_drop_pkts')
        self.rx_ipv4_drop_pkts = attributes[:'rx_ipv4_drop_pkts']
      end

      if attributes.has_key?(:'tx_ipv4_drop_pkts')
        self.tx_ipv4_drop_pkts = attributes[:'tx_ipv4_drop_pkts']
      end

      if attributes.has_key?(:'rx_ipv6_drop_pkts')
        self.rx_ipv6_drop_pkts = attributes[:'rx_ipv6_drop_pkts']
      end

      if attributes.has_key?(:'tx_ipv6_drop_pkts')
        self.tx_ipv6_drop_pkts = attributes[:'tx_ipv6_drop_pkts']
      end

      if attributes.has_key?(:'rx_ipv4_reject_pkts')
        self.rx_ipv4_reject_pkts = attributes[:'rx_ipv4_reject_pkts']
      end

      if attributes.has_key?(:'tx_ipv4_reject_pkts')
        self.tx_ipv4_reject_pkts = attributes[:'tx_ipv4_reject_pkts']
      end

      if attributes.has_key?(:'rx_ipv6_reject_pkts')
        self.rx_ipv6_reject_pkts = attributes[:'rx_ipv6_reject_pkts']
      end

      if attributes.has_key?(:'tx_ipv6_reject_pkts')
        self.tx_ipv6_reject_pkts = attributes[:'tx_ipv6_reject_pkts']
      end

      if attributes.has_key?(:'rx_l2_drop_pkts')
        self.rx_l2_drop_pkts = attributes[:'rx_l2_drop_pkts']
      end

      if attributes.has_key?(:'tx_l2_drop_pkts')
        self.tx_l2_drop_pkts = attributes[:'tx_l2_drop_pkts']
      end

      if attributes.has_key?(:'bad_offset_drops')
        self.bad_offset_drops = attributes[:'bad_offset_drops']
      end

      if attributes.has_key?(:'fragment_drops')
        self.fragment_drops = attributes[:'fragment_drops']
      end

      if attributes.has_key?(:'short_drops')
        self.short_drops = attributes[:'short_drops']
      end

      if attributes.has_key?(:'normalize_drops')
        self.normalize_drops = attributes[:'normalize_drops']
      end

      if attributes.has_key?(:'memory_drops')
        self.memory_drops = attributes[:'memory_drops']
      end

      if attributes.has_key?(:'bad_timestamp_drops')
        self.bad_timestamp_drops = attributes[:'bad_timestamp_drops']
      end

      if attributes.has_key?(:'congestion_drops')
        self.congestion_drops = attributes[:'congestion_drops']
      end

      if attributes.has_key?(:'ip_option_drops')
        self.ip_option_drops = attributes[:'ip_option_drops']
      end

      if attributes.has_key?(:'proto_cksum_drops')
        self.proto_cksum_drops = attributes[:'proto_cksum_drops']
      end

      if attributes.has_key?(:'state_insert_drops')
        self.state_insert_drops = attributes[:'state_insert_drops']
      end

      if attributes.has_key?(:'state_limit_drops')
        self.state_limit_drops = attributes[:'state_limit_drops']
      end

      if attributes.has_key?(:'syn_proxy_drops')
        self.syn_proxy_drops = attributes[:'syn_proxy_drops']
      end

      if attributes.has_key?(:'spoof_guard_drops')
        self.spoof_guard_drops = attributes[:'spoof_guard_drops']
      end

      if attributes.has_key?(:'icmp_err_pkt_drops')
        self.icmp_err_pkt_drops = attributes[:'icmp_err_pkt_drops']
      end

      if attributes.has_key?(:'l7_alert_drops')
        self.l7_alert_drops = attributes[:'l7_alert_drops']
      end

      if attributes.has_key?(:'alg_handler_drops')
        self.alg_handler_drops = attributes[:'alg_handler_drops']
      end

      if attributes.has_key?(:'strict_no_syn_drops')
        self.strict_no_syn_drops = attributes[:'strict_no_syn_drops']
      end

      if attributes.has_key?(:'icmp_error_drops')
        self.icmp_error_drops = attributes[:'icmp_error_drops']
      end

      if attributes.has_key?(:'udp_flood_overlimit_drops')
        self.udp_flood_overlimit_drops = attributes[:'udp_flood_overlimit_drops']
      end

      if attributes.has_key?(:'icmp_flood_overlimit_drops')
        self.icmp_flood_overlimit_drops = attributes[:'icmp_flood_overlimit_drops']
      end

      if attributes.has_key?(:'tcp_flood_overlimit_drops')
        self.tcp_flood_overlimit_drops = attributes[:'tcp_flood_overlimit_drops']
      end

      if attributes.has_key?(:'other_flood_overlimit_drops')
        self.other_flood_overlimit_drops = attributes[:'other_flood_overlimit_drops']
      end

      if attributes.has_key?(:'syn_expected_drops')
        self.syn_expected_drops = attributes[:'syn_expected_drops']
      end

      if attributes.has_key?(:'lb_reject_drops')
        self.lb_reject_drops = attributes[:'lb_reject_drops']
      end

      if attributes.has_key?(:'l7_attr_error_drops')
        self.l7_attr_error_drops = attributes[:'l7_attr_error_drops']
      end

      if attributes.has_key?(:'state_mismatch_drops')
        self.state_mismatch_drops = attributes[:'state_mismatch_drops']
      end

      if attributes.has_key?(:'handshake_error_drops')
        self.handshake_error_drops = attributes[:'handshake_error_drops']
      end

      if attributes.has_key?(:'seqno_outside_window_drops')
        self.seqno_outside_window_drops = attributes[:'seqno_outside_window_drops']
      end

      if attributes.has_key?(:'seqno_old_retrans_drops')
        self.seqno_old_retrans_drops = attributes[:'seqno_old_retrans_drops']
      end

      if attributes.has_key?(:'seqno_old_ack_drops')
        self.seqno_old_ack_drops = attributes[:'seqno_old_ack_drops']
      end

      if attributes.has_key?(:'seqno_bad_ack_drops')
        self.seqno_bad_ack_drops = attributes[:'seqno_bad_ack_drops']
      end

      if attributes.has_key?(:'seqno_gt_max_ack_drops')
        self.seqno_gt_max_ack_drops = attributes[:'seqno_gt_max_ack_drops']
      end

      if attributes.has_key?(:'seqno_lt_minack_drops')
        self.seqno_lt_minack_drops = attributes[:'seqno_lt_minack_drops']
      end

      if attributes.has_key?(:'ignored_offloaded_fpdrops')
        self.ignored_offloaded_fpdrops = attributes[:'ignored_offloaded_fpdrops']
      end

      if attributes.has_key?(:'ignored_offloaded_spdrops')
        self.ignored_offloaded_spdrops = attributes[:'ignored_offloaded_spdrops']
      end

      if attributes.has_key?(:'match_drop_rule_rx_drops')
        self.match_drop_rule_rx_drops = attributes[:'match_drop_rule_rx_drops']
      end

      if attributes.has_key?(:'match_drop_rule_tx_drops')
        self.match_drop_rule_tx_drops = attributes[:'match_drop_rule_tx_drops']
      end

      if attributes.has_key?(:'pkts_frag_queued_v4_misc')
        self.pkts_frag_queued_v4_misc = attributes[:'pkts_frag_queued_v4_misc']
      end

      if attributes.has_key?(:'pkts_frag_queued_v6_misc')
        self.pkts_frag_queued_v6_misc = attributes[:'pkts_frag_queued_v6_misc']
      end

      if attributes.has_key?(:'src_limit_misc')
        self.src_limit_misc = attributes[:'src_limit_misc']
      end

      if attributes.has_key?(:'l7_pending_misc')
        self.l7_pending_misc = attributes[:'l7_pending_misc']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          rx_ipv4_drop_pkts == o.rx_ipv4_drop_pkts &&
          tx_ipv4_drop_pkts == o.tx_ipv4_drop_pkts &&
          rx_ipv6_drop_pkts == o.rx_ipv6_drop_pkts &&
          tx_ipv6_drop_pkts == o.tx_ipv6_drop_pkts &&
          rx_ipv4_reject_pkts == o.rx_ipv4_reject_pkts &&
          tx_ipv4_reject_pkts == o.tx_ipv4_reject_pkts &&
          rx_ipv6_reject_pkts == o.rx_ipv6_reject_pkts &&
          tx_ipv6_reject_pkts == o.tx_ipv6_reject_pkts &&
          rx_l2_drop_pkts == o.rx_l2_drop_pkts &&
          tx_l2_drop_pkts == o.tx_l2_drop_pkts &&
          bad_offset_drops == o.bad_offset_drops &&
          fragment_drops == o.fragment_drops &&
          short_drops == o.short_drops &&
          normalize_drops == o.normalize_drops &&
          memory_drops == o.memory_drops &&
          bad_timestamp_drops == o.bad_timestamp_drops &&
          congestion_drops == o.congestion_drops &&
          ip_option_drops == o.ip_option_drops &&
          proto_cksum_drops == o.proto_cksum_drops &&
          state_insert_drops == o.state_insert_drops &&
          state_limit_drops == o.state_limit_drops &&
          syn_proxy_drops == o.syn_proxy_drops &&
          spoof_guard_drops == o.spoof_guard_drops &&
          icmp_err_pkt_drops == o.icmp_err_pkt_drops &&
          l7_alert_drops == o.l7_alert_drops &&
          alg_handler_drops == o.alg_handler_drops &&
          strict_no_syn_drops == o.strict_no_syn_drops &&
          icmp_error_drops == o.icmp_error_drops &&
          udp_flood_overlimit_drops == o.udp_flood_overlimit_drops &&
          icmp_flood_overlimit_drops == o.icmp_flood_overlimit_drops &&
          tcp_flood_overlimit_drops == o.tcp_flood_overlimit_drops &&
          other_flood_overlimit_drops == o.other_flood_overlimit_drops &&
          syn_expected_drops == o.syn_expected_drops &&
          lb_reject_drops == o.lb_reject_drops &&
          l7_attr_error_drops == o.l7_attr_error_drops &&
          state_mismatch_drops == o.state_mismatch_drops &&
          handshake_error_drops == o.handshake_error_drops &&
          seqno_outside_window_drops == o.seqno_outside_window_drops &&
          seqno_old_retrans_drops == o.seqno_old_retrans_drops &&
          seqno_old_ack_drops == o.seqno_old_ack_drops &&
          seqno_bad_ack_drops == o.seqno_bad_ack_drops &&
          seqno_gt_max_ack_drops == o.seqno_gt_max_ack_drops &&
          seqno_lt_minack_drops == o.seqno_lt_minack_drops &&
          ignored_offloaded_fpdrops == o.ignored_offloaded_fpdrops &&
          ignored_offloaded_spdrops == o.ignored_offloaded_spdrops &&
          match_drop_rule_rx_drops == o.match_drop_rule_rx_drops &&
          match_drop_rule_tx_drops == o.match_drop_rule_tx_drops &&
          pkts_frag_queued_v4_misc == o.pkts_frag_queued_v4_misc &&
          pkts_frag_queued_v6_misc == o.pkts_frag_queued_v6_misc &&
          src_limit_misc == o.src_limit_misc &&
          l7_pending_misc == o.l7_pending_misc
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [rx_ipv4_drop_pkts, tx_ipv4_drop_pkts, rx_ipv6_drop_pkts, tx_ipv6_drop_pkts, rx_ipv4_reject_pkts, tx_ipv4_reject_pkts, rx_ipv6_reject_pkts, tx_ipv6_reject_pkts, rx_l2_drop_pkts, tx_l2_drop_pkts, bad_offset_drops, fragment_drops, short_drops, normalize_drops, memory_drops, bad_timestamp_drops, congestion_drops, ip_option_drops, proto_cksum_drops, state_insert_drops, state_limit_drops, syn_proxy_drops, spoof_guard_drops, icmp_err_pkt_drops, l7_alert_drops, alg_handler_drops, strict_no_syn_drops, icmp_error_drops, udp_flood_overlimit_drops, icmp_flood_overlimit_drops, tcp_flood_overlimit_drops, other_flood_overlimit_drops, syn_expected_drops, lb_reject_drops, l7_attr_error_drops, state_mismatch_drops, handshake_error_drops, seqno_outside_window_drops, seqno_old_retrans_drops, seqno_old_ack_drops, seqno_bad_ack_drops, seqno_gt_max_ack_drops, seqno_lt_minack_drops, ignored_offloaded_fpdrops, ignored_offloaded_spdrops, match_drop_rule_rx_drops, match_drop_rule_tx_drops, pkts_frag_queued_v4_misc, pkts_frag_queued_v6_misc, src_limit_misc, l7_pending_misc].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
