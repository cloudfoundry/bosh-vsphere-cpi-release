=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Provides all the necessary PRP config for vSwitch-RT enabled host switch. This config cannot be updated once host switch is created.
  class ParallelRedundancyProtocolConfig
    # Default multicast address for PRP supervision purpose.
    attr_accessor :supervision_multicast_address

    # How often (in ms) supervision frame will be generated for the vPLC.
    attr_accessor :life_check_interval

    # How long (in seconds) to wait for an idle Node to be deleted.
    attr_accessor :node_forget_time

    # How long (in ms) a packet with RCT to be held for duplication detection.
    attr_accessor :entry_forget_time

    # How long (in ms) for a reboot vPLC to be quiet before it can generate traffic.
    attr_accessor :node_reboot_interval

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'supervision_multicast_address' => :'supervision_multicast_address',
        :'life_check_interval' => :'life_check_interval',
        :'node_forget_time' => :'node_forget_time',
        :'entry_forget_time' => :'entry_forget_time',
        :'node_reboot_interval' => :'node_reboot_interval'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'supervision_multicast_address' => :'String',
        :'life_check_interval' => :'Integer',
        :'node_forget_time' => :'Integer',
        :'entry_forget_time' => :'Integer',
        :'node_reboot_interval' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'supervision_multicast_address')
        self.supervision_multicast_address = attributes[:'supervision_multicast_address']
      else
        self.supervision_multicast_address = '01:15:4e:00:01:00'
      end

      if attributes.has_key?(:'life_check_interval')
        self.life_check_interval = attributes[:'life_check_interval']
      else
        self.life_check_interval = 2000
      end

      if attributes.has_key?(:'node_forget_time')
        self.node_forget_time = attributes[:'node_forget_time']
      else
        self.node_forget_time = 60
      end

      if attributes.has_key?(:'entry_forget_time')
        self.entry_forget_time = attributes[:'entry_forget_time']
      else
        self.entry_forget_time = 400
      end

      if attributes.has_key?(:'node_reboot_interval')
        self.node_reboot_interval = attributes[:'node_reboot_interval']
      else
        self.node_reboot_interval = 500
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@life_check_interval.nil? && @life_check_interval > 4000
        invalid_properties.push('invalid value for "life_check_interval", must be smaller than or equal to 4000.')
      end

      if !@life_check_interval.nil? && @life_check_interval < 2000
        invalid_properties.push('invalid value for "life_check_interval", must be greater than or equal to 2000.')
      end

      if !@node_forget_time.nil? && @node_forget_time > 120
        invalid_properties.push('invalid value for "node_forget_time", must be smaller than or equal to 120.')
      end

      if !@node_forget_time.nil? && @node_forget_time < 10
        invalid_properties.push('invalid value for "node_forget_time", must be greater than or equal to 10.')
      end

      if !@entry_forget_time.nil? && @entry_forget_time > 600
        invalid_properties.push('invalid value for "entry_forget_time", must be smaller than or equal to 600.')
      end

      if !@entry_forget_time.nil? && @entry_forget_time < 100
        invalid_properties.push('invalid value for "entry_forget_time", must be greater than or equal to 100.')
      end

      if !@node_reboot_interval.nil? && @node_reboot_interval > 1000
        invalid_properties.push('invalid value for "node_reboot_interval", must be smaller than or equal to 1000.')
      end

      if !@node_reboot_interval.nil? && @node_reboot_interval < 500
        invalid_properties.push('invalid value for "node_reboot_interval", must be greater than or equal to 500.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@life_check_interval.nil? && @life_check_interval > 4000
      return false if !@life_check_interval.nil? && @life_check_interval < 2000
      return false if !@node_forget_time.nil? && @node_forget_time > 120
      return false if !@node_forget_time.nil? && @node_forget_time < 10
      return false if !@entry_forget_time.nil? && @entry_forget_time > 600
      return false if !@entry_forget_time.nil? && @entry_forget_time < 100
      return false if !@node_reboot_interval.nil? && @node_reboot_interval > 1000
      return false if !@node_reboot_interval.nil? && @node_reboot_interval < 500
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] life_check_interval Value to be assigned
    def life_check_interval=(life_check_interval)
      if !life_check_interval.nil? && life_check_interval > 4000
        fail ArgumentError, 'invalid value for "life_check_interval", must be smaller than or equal to 4000.'
      end

      if !life_check_interval.nil? && life_check_interval < 2000
        fail ArgumentError, 'invalid value for "life_check_interval", must be greater than or equal to 2000.'
      end

      @life_check_interval = life_check_interval
    end

    # Custom attribute writer method with validation
    # @param [Object] node_forget_time Value to be assigned
    def node_forget_time=(node_forget_time)
      if !node_forget_time.nil? && node_forget_time > 120
        fail ArgumentError, 'invalid value for "node_forget_time", must be smaller than or equal to 120.'
      end

      if !node_forget_time.nil? && node_forget_time < 10
        fail ArgumentError, 'invalid value for "node_forget_time", must be greater than or equal to 10.'
      end

      @node_forget_time = node_forget_time
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_forget_time Value to be assigned
    def entry_forget_time=(entry_forget_time)
      if !entry_forget_time.nil? && entry_forget_time > 600
        fail ArgumentError, 'invalid value for "entry_forget_time", must be smaller than or equal to 600.'
      end

      if !entry_forget_time.nil? && entry_forget_time < 100
        fail ArgumentError, 'invalid value for "entry_forget_time", must be greater than or equal to 100.'
      end

      @entry_forget_time = entry_forget_time
    end

    # Custom attribute writer method with validation
    # @param [Object] node_reboot_interval Value to be assigned
    def node_reboot_interval=(node_reboot_interval)
      if !node_reboot_interval.nil? && node_reboot_interval > 1000
        fail ArgumentError, 'invalid value for "node_reboot_interval", must be smaller than or equal to 1000.'
      end

      if !node_reboot_interval.nil? && node_reboot_interval < 500
        fail ArgumentError, 'invalid value for "node_reboot_interval", must be greater than or equal to 500.'
      end

      @node_reboot_interval = node_reboot_interval
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          supervision_multicast_address == o.supervision_multicast_address &&
          life_check_interval == o.life_check_interval &&
          node_forget_time == o.node_forget_time &&
          entry_forget_time == o.entry_forget_time &&
          node_reboot_interval == o.node_reboot_interval
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [supervision_multicast_address, life_check_interval, node_forget_time, entry_forget_time, node_reboot_interval].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
