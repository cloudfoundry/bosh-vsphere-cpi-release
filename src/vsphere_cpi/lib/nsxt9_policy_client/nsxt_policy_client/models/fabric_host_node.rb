=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class FabricHostNode
    # Fully qualified domain name of the transport node
    attr_accessor :fqdn

    # IP Addresses of the Node, version 4 or 6. 
    attr_accessor :ip_addresses

    # Discovered IP Addresses of the transport node, version 4 or 6
    attr_accessor :discovered_ip_addresses

    # Hypervisor type, for example ESXi or RHEL KVM
    attr_accessor :os_type

    # Version of the hypervisor operating system
    attr_accessor :os_version

    # The id of the vCenter server managing the ESXi type HostNode
    attr_accessor :managed_by_server

    attr_accessor :host_credential

    # Id of discovered node which was converted to create this node.
    attr_accessor :discovered_node_id

    # Id of the compute collection to which discovered node belongs.
    attr_accessor :compute_collection_id

    # Indicates host node's maintenance mode state. The state is ENTERING when a task to put the host in maintenance-mode is in progress. 
    attr_accessor :maintenance_mode_state

    # Specify an installation folder to install the NSX kernel modules for Windows Server. By default, it is C:\\Program Files\\VMware\\NSX\\.
    attr_accessor :windows_install_location

    # Specifies details of data processing units (DPU) present on ESXi Host.
    attr_accessor :dpu

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'fqdn' => :'fqdn',
        :'ip_addresses' => :'ip_addresses',
        :'discovered_ip_addresses' => :'discovered_ip_addresses',
        :'os_type' => :'os_type',
        :'os_version' => :'os_version',
        :'managed_by_server' => :'managed_by_server',
        :'host_credential' => :'host_credential',
        :'discovered_node_id' => :'discovered_node_id',
        :'compute_collection_id' => :'compute_collection_id',
        :'maintenance_mode_state' => :'maintenance_mode_state',
        :'windows_install_location' => :'windows_install_location',
        :'dpu' => :'dpu'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'fqdn' => :'String',
        :'ip_addresses' => :'Array<String>',
        :'discovered_ip_addresses' => :'Array<String>',
        :'os_type' => :'String',
        :'os_version' => :'String',
        :'managed_by_server' => :'String',
        :'host_credential' => :'HostNodeLoginCredential',
        :'discovered_node_id' => :'String',
        :'compute_collection_id' => :'String',
        :'maintenance_mode_state' => :'String',
        :'windows_install_location' => :'String',
        :'dpu' => :'Array<DpuInfo>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'fqdn')
        self.fqdn = attributes[:'fqdn']
      end

      if attributes.has_key?(:'ip_addresses')
        if (value = attributes[:'ip_addresses']).is_a?(Array)
          self.ip_addresses = value
        end
      end

      if attributes.has_key?(:'discovered_ip_addresses')
        if (value = attributes[:'discovered_ip_addresses']).is_a?(Array)
          self.discovered_ip_addresses = value
        end
      end

      if attributes.has_key?(:'os_type')
        self.os_type = attributes[:'os_type']
      end

      if attributes.has_key?(:'os_version')
        self.os_version = attributes[:'os_version']
      end

      if attributes.has_key?(:'managed_by_server')
        self.managed_by_server = attributes[:'managed_by_server']
      end

      if attributes.has_key?(:'host_credential')
        self.host_credential = attributes[:'host_credential']
      end

      if attributes.has_key?(:'discovered_node_id')
        self.discovered_node_id = attributes[:'discovered_node_id']
      end

      if attributes.has_key?(:'compute_collection_id')
        self.compute_collection_id = attributes[:'compute_collection_id']
      end

      if attributes.has_key?(:'maintenance_mode_state')
        self.maintenance_mode_state = attributes[:'maintenance_mode_state']
      end

      if attributes.has_key?(:'windows_install_location')
        self.windows_install_location = attributes[:'windows_install_location']
      end

      if attributes.has_key?(:'dpu')
        if (value = attributes[:'dpu']).is_a?(Array)
          self.dpu = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @ip_addresses.nil?
        invalid_properties.push('invalid value for "ip_addresses", ip_addresses cannot be nil.')
      end

      if @os_type.nil?
        invalid_properties.push('invalid value for "os_type", os_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @ip_addresses.nil?
      return false if @os_type.nil?
      os_type_validator = EnumAttributeValidator.new('String', ['ESXI', 'RHELKVM', 'RHELSERVER', 'WINDOWSSERVER', 'RHELCONTAINER', 'UBUNTUKVM', 'UBUNTUSERVER', 'HYPERV', 'CENTOSKVM', 'CENTOSSERVER', 'CENTOSCONTAINER', 'SLESKVM', 'SLESSERVER', 'OELSERVER'])
      return false unless os_type_validator.valid?(@os_type)
      maintenance_mode_state_validator = EnumAttributeValidator.new('String', ['OFF', 'ENTERING', 'ON'])
      return false unless maintenance_mode_state_validator.valid?(@maintenance_mode_state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_type Object to be assigned
    def os_type=(os_type)
      validator = EnumAttributeValidator.new('String', ['ESXI', 'RHELKVM', 'RHELSERVER', 'WINDOWSSERVER', 'RHELCONTAINER', 'UBUNTUKVM', 'UBUNTUSERVER', 'HYPERV', 'CENTOSKVM', 'CENTOSSERVER', 'CENTOSCONTAINER', 'SLESKVM', 'SLESSERVER', 'OELSERVER'])
      unless validator.valid?(os_type)
        fail ArgumentError, 'invalid value for "os_type", must be one of #{validator.allowable_values}.'
      end
      @os_type = os_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] maintenance_mode_state Object to be assigned
    def maintenance_mode_state=(maintenance_mode_state)
      validator = EnumAttributeValidator.new('String', ['OFF', 'ENTERING', 'ON'])
      unless validator.valid?(maintenance_mode_state)
        fail ArgumentError, 'invalid value for "maintenance_mode_state", must be one of #{validator.allowable_values}.'
      end
      @maintenance_mode_state = maintenance_mode_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          fqdn == o.fqdn &&
          ip_addresses == o.ip_addresses &&
          discovered_ip_addresses == o.discovered_ip_addresses &&
          os_type == o.os_type &&
          os_version == o.os_version &&
          managed_by_server == o.managed_by_server &&
          host_credential == o.host_credential &&
          discovered_node_id == o.discovered_node_id &&
          compute_collection_id == o.compute_collection_id &&
          maintenance_mode_state == o.maintenance_mode_state &&
          windows_install_location == o.windows_install_location &&
          dpu == o.dpu
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [fqdn, ip_addresses, discovered_ip_addresses, os_type, os_version, managed_by_server, host_credential, discovered_node_id, compute_collection_id, maintenance_mode_state, windows_install_location, dpu].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
