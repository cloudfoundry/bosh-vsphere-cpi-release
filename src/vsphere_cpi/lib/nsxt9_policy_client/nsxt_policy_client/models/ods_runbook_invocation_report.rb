=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # The report of the Invocation of an Online Diagnostic System Runbook. 
  class OdsRunbookInvocationReport
    # The universally unique identifier for invocation of an Online Diagnostic System Runbook. 
    attr_accessor :invocation_id

    # Identifier of an appliance node or transport node where the execution of an Online Diagnostic System Runbook happens. 
    attr_accessor :target_node

    # The timestamp when the report of an Online Diagnostic System Runbook is generated in milliseconds epoch. 
    attr_accessor :timestamp

    attr_accessor :sys_info

    # Online Diagnostic System result code of the runbook invocation. 
    attr_accessor :result_code

    # Online Diagnostic System result message of the runbook invocation. 
    attr_accessor :result_message

    # Online Diagnostic System recommendation code of the runbook invocation. 
    attr_accessor :recommendation_code

    # Online Diagnostic System recommendation message of the runbook invocation. 
    attr_accessor :recommendation_message

    # Details of performed steps in the invocation of an Online Diagnostic System Runbook. 
    attr_accessor :step_details

    # The reason why this report is invalid.   TIMEOUT - The invocation is timeout.   CANCELLED - The invocation is cancelled.   INTERNAL_ERROR - The invocation ends up with error. 
    attr_accessor :invalid_reason

    # The error detail of the invalid report. 
    attr_accessor :error_detail

    attr_accessor :status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'invocation_id' => :'invocation_id',
        :'target_node' => :'target_node',
        :'timestamp' => :'timestamp',
        :'sys_info' => :'sys_info',
        :'result_code' => :'result_code',
        :'result_message' => :'result_message',
        :'recommendation_code' => :'recommendation_code',
        :'recommendation_message' => :'recommendation_message',
        :'step_details' => :'step_details',
        :'invalid_reason' => :'invalid_reason',
        :'error_detail' => :'error_detail',
        :'status' => :'status'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'invocation_id' => :'String',
        :'target_node' => :'String',
        :'timestamp' => :'Integer',
        :'sys_info' => :'OdsRunbookSysInfo',
        :'result_code' => :'Integer',
        :'result_message' => :'String',
        :'recommendation_code' => :'Integer',
        :'recommendation_message' => :'String',
        :'step_details' => :'Array<OdsRunbookInvocationStepInfo>',
        :'invalid_reason' => :'String',
        :'error_detail' => :'String',
        :'status' => :'OdsRunbookInvocationStatus'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'invocation_id')
        self.invocation_id = attributes[:'invocation_id']
      end

      if attributes.has_key?(:'target_node')
        self.target_node = attributes[:'target_node']
      end

      if attributes.has_key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.has_key?(:'sys_info')
        self.sys_info = attributes[:'sys_info']
      end

      if attributes.has_key?(:'result_code')
        self.result_code = attributes[:'result_code']
      end

      if attributes.has_key?(:'result_message')
        self.result_message = attributes[:'result_message']
      end

      if attributes.has_key?(:'recommendation_code')
        self.recommendation_code = attributes[:'recommendation_code']
      end

      if attributes.has_key?(:'recommendation_message')
        self.recommendation_message = attributes[:'recommendation_message']
      end

      if attributes.has_key?(:'step_details')
        if (value = attributes[:'step_details']).is_a?(Array)
          self.step_details = value
        end
      end

      if attributes.has_key?(:'invalid_reason')
        self.invalid_reason = attributes[:'invalid_reason']
      end

      if attributes.has_key?(:'error_detail')
        self.error_detail = attributes[:'error_detail']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      invalid_reason_validator = EnumAttributeValidator.new('String', ['TIMEOUT', 'CANCELLED', 'INTERNAL_ERROR'])
      return false unless invalid_reason_validator.valid?(@invalid_reason)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invalid_reason Object to be assigned
    def invalid_reason=(invalid_reason)
      validator = EnumAttributeValidator.new('String', ['TIMEOUT', 'CANCELLED', 'INTERNAL_ERROR'])
      unless validator.valid?(invalid_reason)
        fail ArgumentError, 'invalid value for "invalid_reason", must be one of #{validator.allowable_values}.'
      end
      @invalid_reason = invalid_reason
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          invocation_id == o.invocation_id &&
          target_node == o.target_node &&
          timestamp == o.timestamp &&
          sys_info == o.sys_info &&
          result_code == o.result_code &&
          result_message == o.result_message &&
          recommendation_code == o.recommendation_code &&
          recommendation_message == o.recommendation_message &&
          step_details == o.step_details &&
          invalid_reason == o.invalid_reason &&
          error_detail == o.error_detail &&
          status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [invocation_id, target_node, timestamp, sys_info, result_code, result_message, recommendation_code, recommendation_message, step_details, invalid_reason, error_detail, status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
