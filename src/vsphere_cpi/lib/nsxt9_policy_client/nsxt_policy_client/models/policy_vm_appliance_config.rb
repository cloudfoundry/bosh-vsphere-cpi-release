=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # This field contains information about VM appliance specific configs. 
  class PolicyVmApplianceConfig
    # List of domain names that are used to complete unqualified host names. 
    attr_accessor :search_domains

    # List of NTP servers. 
    attr_accessor :ntp_servers

    # Allowing root SSH logins is not recommended for security reasons. Edit of this property is not supported when updating transport node. Use the CLI to change this property. 
    attr_accessor :allow_ssh_root_login

    # List of DNS servers. 
    attr_accessor :dns_servers

    # List of Syslog server configuration. 
    attr_accessor :syslog_servers

    # Enabling SSH service is not recommended for security reasons. 
    attr_accessor :enable_ssh

    # Enable Uniform Passthrough ( UPT ) on VMXNET 3 devices to improve overall system performance and reduces latency. Caution: This involves restart of the edge dataplane and hence may lead to network disruption. Use GET api/v1/edge-transport-nodes/<transport-node-id>/state to monitor realization of UPT. 
    attr_accessor :enable_upt_mode

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'search_domains' => :'search_domains',
        :'ntp_servers' => :'ntp_servers',
        :'allow_ssh_root_login' => :'allow_ssh_root_login',
        :'dns_servers' => :'dns_servers',
        :'syslog_servers' => :'syslog_servers',
        :'enable_ssh' => :'enable_ssh',
        :'enable_upt_mode' => :'enable_upt_mode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'search_domains' => :'Array<String>',
        :'ntp_servers' => :'Array<String>',
        :'allow_ssh_root_login' => :'BOOLEAN',
        :'dns_servers' => :'Array<String>',
        :'syslog_servers' => :'Array<SyslogConfiguration>',
        :'enable_ssh' => :'BOOLEAN',
        :'enable_upt_mode' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'search_domains')
        if (value = attributes[:'search_domains']).is_a?(Array)
          self.search_domains = value
        end
      end

      if attributes.has_key?(:'ntp_servers')
        if (value = attributes[:'ntp_servers']).is_a?(Array)
          self.ntp_servers = value
        end
      end

      if attributes.has_key?(:'allow_ssh_root_login')
        self.allow_ssh_root_login = attributes[:'allow_ssh_root_login']
      else
        self.allow_ssh_root_login = false
      end

      if attributes.has_key?(:'dns_servers')
        if (value = attributes[:'dns_servers']).is_a?(Array)
          self.dns_servers = value
        end
      end

      if attributes.has_key?(:'syslog_servers')
        if (value = attributes[:'syslog_servers']).is_a?(Array)
          self.syslog_servers = value
        end
      end

      if attributes.has_key?(:'enable_ssh')
        self.enable_ssh = attributes[:'enable_ssh']
      else
        self.enable_ssh = false
      end

      if attributes.has_key?(:'enable_upt_mode')
        self.enable_upt_mode = attributes[:'enable_upt_mode']
      else
        self.enable_upt_mode = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          search_domains == o.search_domains &&
          ntp_servers == o.ntp_servers &&
          allow_ssh_root_login == o.allow_ssh_root_login &&
          dns_servers == o.dns_servers &&
          syslog_servers == o.syslog_servers &&
          enable_ssh == o.enable_ssh &&
          enable_upt_mode == o.enable_upt_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [search_domains, ntp_servers, allow_ssh_root_login, dns_servers, syslog_servers, enable_ssh, enable_upt_mode].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
