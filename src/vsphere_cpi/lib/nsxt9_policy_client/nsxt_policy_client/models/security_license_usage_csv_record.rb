=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class SecurityLicenseUsageCSVRecord
    # Raw host core count used by distributed firewall
    attr_accessor :raw_host_core_count_distributed_firewall

    # Raw host core count used by intelligence
    attr_accessor :raw_host_core_count_distributed_intelligence

    # Raw host core count used by dfw ipfix
    attr_accessor :raw_host_core_count_distributed_ipfix

    # Raw host core count used by dfw baremetal agent
    attr_accessor :raw_host_core_count_distributed_baremetal

    # Raw host core count used by distributed intelligence baremetal feature
    attr_accessor :raw_host_core_count_distributed_intelligence_baremetal

    # Raw host core count used by dfw ipfix baremetal feature
    attr_accessor :raw_host_core_count_distributed_ipfix_baremetal

    # Raw host core count used by distributed idps
    attr_accessor :raw_host_core_count_distributed_idps

    # Raw host core count used by distributed mps
    attr_accessor :raw_host_core_count_distributed_mps

    # Raw host core count used by ndr
    attr_accessor :raw_host_core_count_ndr

    # Raw edge core count used by gateway firewall stateful rules
    attr_accessor :raw_edge_core_count_gateway_firewall

    # Raw edge core count used by gateway tls
    attr_accessor :raw_edge_core_count_gateway_tls

    # raw edge core count gateway idps
    attr_accessor :raw_edge_core_count_gateway_idps

    # raw edge core count gateway idps
    attr_accessor :raw_edge_core_count_gateway_mps

    # dpu core count all editions
    attr_accessor :dpu_core_count_all_editions

    # Licensed host core count used by distributed firewall
    attr_accessor :licensed_host_core_count_distributed_firewall

    # Licensed host core count used by intelligence
    attr_accessor :licensed_host_core_count_distributed_intelligence

    # Licensed host core count used by dfw ipfix
    attr_accessor :licensed_host_core_count_distributed_ipfix

    # Licensed host core count used by dfw baremetal agent
    attr_accessor :licensed_host_core_count_distributed_baremetal

    # Licensed host core count used by distributed intelligence baremetal feature
    attr_accessor :licensed_host_core_count_distributed_intelligence_baremetal

    # Licensed host core count used by dfw ipfix baremetal feature
    attr_accessor :licensed_host_core_count_distributed_ipfix_baremetal

    # Licensed host core count used by distributed idps
    attr_accessor :licensed_host_core_count_distributed_idps

    # Licensed host core count used by distributed mps
    attr_accessor :licensed_host_core_count_distributed_mps

    # Licensed host core count used by ndr
    attr_accessor :licensed_host_core_count_ndr

    # Licensed edge core count used by gateway firewall stateful rules
    attr_accessor :licensed_edge_core_count_gateway_firewall

    # Licensed edge core count used by gateway tls
    attr_accessor :licensed_edge_core_count_gateway_tls

    # Licensed edge core count gateway idps
    attr_accessor :licensed_edge_core_count_gateway_idps

    # Licensed edge core count gateway idps
    attr_accessor :licensed_edge_core_count_gateway_mps

    # licensed total core count on firewall edition
    attr_accessor :licensed_total_core_count_firewall_edition

    # licensed total core count on firewall atp edition
    attr_accessor :licensed_total_core_count_firewall_atp_edition

    # Max raw cores count found on host.
    attr_accessor :max_raw_core_count_per_host

    # Max raw cores per socket count found on host.
    attr_accessor :max_raw_core_count_per_socket

    # Max socket count found on host.
    attr_accessor :max_socket_count_per_host

    # Number of edges with 2 cores.
    attr_accessor :num_edge_small_factor

    # Number of edges with 4 cores.
    attr_accessor :num_edge_medium_factor

    # Number of edges with 8 cores.
    attr_accessor :num_edge_large_factor

    # Number of edges with 16 cores.
    attr_accessor :num_edge_xlarge_factor

    # Number of edge baremetals cores between 25-80 cores.
    attr_accessor :num_edge_baremetal_at_recommended_cores

    # Number of edge baremetals cores between 8-24 cores.
    attr_accessor :num_edge_baremetal_at_minimum_cores

    # Telemetry info about the 'number_of_nsgroup'
    attr_accessor :number_of_nsgroups

    # Telemetry info about the 'number_of_prepared_hosts'
    attr_accessor :number_of_prepared_hosts

    # Telemetry info about the 'number_of_virtual_machines'
    attr_accessor :number_of_virtual_machines

    # Telemetry info about the 'tier0_gateways'
    attr_accessor :number_of_tier_0_gateways

    # Telemetry info about the 'tier1_gateways'
    attr_accessor :number_of_tier_1_gateways

    # Telemetry info about the 'number_of_dfw_rules'
    attr_accessor :number_of_dfw_rules

    # Telemetry info about the 'number_of_firewall_rules'. This includes DFW, edge and bridge rules.
    attr_accessor :number_of_firewall_rules

    # Telemetry info about the 'k8s_deployed'
    attr_accessor :intelligence_deployed

    # Telemetry info about the 'recommendation_sessions_total'
    attr_accessor :recommendation_sessions_total

    # Telemetry info about the 'napp_appliance_version'
    attr_accessor :napp_appliance_version

    # Telemetry info about the 'number_of_ids_gateway_rules'
    attr_accessor :number_of_ids_gateway_rules

    # Telemetry info about the 'number_of_ids_security_policies'
    attr_accessor :number_of_ids_security_policies

    # Telemetry info about the 'mps_total_number_of_profiles'
    attr_accessor :mps_total_number_of_profiles

    # Telemetry info about the 'mps_number_of_dfw_ids_rules_with_custom_mps_profiles'
    attr_accessor :mps_number_of_dfw_ids_rules_with_custom_mps_profiles

    # Telemetry info about the 'mps_number_of_gateway_ids_rules_with_custom_mps_profiles'
    attr_accessor :mps_number_of_gateway_ids_rules_with_custom_mps_profiles

    # true if value of any one of \"nta_detectorstate_*\" events in SSP telemetry is enabled. UNAVAILABLE if unable to get events.
    attr_accessor :nta_enabled

    # Telemetry info about the 'version'
    attr_accessor :nsx_manager_version

    # Telemetry info about the 'deployment_id'
    attr_accessor :nsx_deployment_id

    # NSX default site id.
    attr_accessor :nsx_site_id

    # Telemetry info about the 'license_edition_type'
    attr_accessor :license_edition_type

    # Telemetry info about the 'license_key'
    attr_accessor :license_key

    # Telemetry info about the 'total_firewall_ipfix_profiles'
    attr_accessor :total_firewall_ipfix_profiles

    # Telemetry info about the 'host_number_of_host_node_cpu_cores'
    attr_accessor :host_number_of_host_node_cpu_cores

    # Telemetry info about the 'edge_number_of_edge_node_cpu_cores'
    attr_accessor :edge_number_of_edge_node_cpu_cores

    # Timestamp when the data was last updated; unset if data source has never updated the data. 
    attr_accessor :last_update_timestamp

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'raw_host_core_count_distributed_firewall' => :'raw_host_core_count_distributed_firewall',
        :'raw_host_core_count_distributed_intelligence' => :'raw_host_core_count_distributed_intelligence',
        :'raw_host_core_count_distributed_ipfix' => :'raw_host_core_count_distributed_ipfix',
        :'raw_host_core_count_distributed_baremetal' => :'raw_host_core_count_distributed_baremetal',
        :'raw_host_core_count_distributed_intelligence_baremetal' => :'raw_host_core_count_distributed_intelligence_baremetal',
        :'raw_host_core_count_distributed_ipfix_baremetal' => :'raw_host_core_count_distributed_ipfix_baremetal',
        :'raw_host_core_count_distributed_idps' => :'raw_host_core_count_distributed_idps',
        :'raw_host_core_count_distributed_mps' => :'raw_host_core_count_distributed_mps',
        :'raw_host_core_count_ndr' => :'raw_host_core_count_ndr',
        :'raw_edge_core_count_gateway_firewall' => :'raw_edge_core_count_gateway_firewall',
        :'raw_edge_core_count_gateway_tls' => :'raw_edge_core_count_gateway_tls',
        :'raw_edge_core_count_gateway_idps' => :'raw_edge_core_count_gateway_idps',
        :'raw_edge_core_count_gateway_mps' => :'raw_edge_core_count_gateway_mps',
        :'dpu_core_count_all_editions' => :'dpu_core_count_all_editions',
        :'licensed_host_core_count_distributed_firewall' => :'licensed_host_core_count_distributed_firewall',
        :'licensed_host_core_count_distributed_intelligence' => :'licensed_host_core_count_distributed_intelligence',
        :'licensed_host_core_count_distributed_ipfix' => :'licensed_host_core_count_distributed_ipfix',
        :'licensed_host_core_count_distributed_baremetal' => :'licensed_host_core_count_distributed_baremetal',
        :'licensed_host_core_count_distributed_intelligence_baremetal' => :'licensed_host_core_count_distributed_intelligence_baremetal',
        :'licensed_host_core_count_distributed_ipfix_baremetal' => :'licensed_host_core_count_distributed_ipfix_baremetal',
        :'licensed_host_core_count_distributed_idps' => :'licensed_host_core_count_distributed_idps',
        :'licensed_host_core_count_distributed_mps' => :'licensed_host_core_count_distributed_mps',
        :'licensed_host_core_count_ndr' => :'licensed_host_core_count_ndr',
        :'licensed_edge_core_count_gateway_firewall' => :'licensed_edge_core_count_gateway_firewall',
        :'licensed_edge_core_count_gateway_tls' => :'licensed_edge_core_count_gateway_tls',
        :'licensed_edge_core_count_gateway_idps' => :'licensed_edge_core_count_gateway_idps',
        :'licensed_edge_core_count_gateway_mps' => :'licensed_edge_core_count_gateway_mps',
        :'licensed_total_core_count_firewall_edition' => :'licensed_total_core_count_firewall_edition',
        :'licensed_total_core_count_firewall_atp_edition' => :'licensed_total_core_count_firewall_atp_edition',
        :'max_raw_core_count_per_host' => :'max_raw_core_count_per_host',
        :'max_raw_core_count_per_socket' => :'max_raw_core_count_per_socket',
        :'max_socket_count_per_host' => :'max_socket_count_per_host',
        :'num_edge_small_factor' => :'num_edge_small_factor',
        :'num_edge_medium_factor' => :'num_edge_medium_factor',
        :'num_edge_large_factor' => :'num_edge_large_factor',
        :'num_edge_xlarge_factor' => :'num_edge_xlarge_factor',
        :'num_edge_baremetal_at_recommended_cores' => :'num_edge_baremetal_at_recommended_cores',
        :'num_edge_baremetal_at_minimum_cores' => :'num_edge_baremetal_at_minimum_cores',
        :'number_of_nsgroups' => :'number_of_nsgroups',
        :'number_of_prepared_hosts' => :'number_of_prepared_hosts',
        :'number_of_virtual_machines' => :'number_of_virtual_machines',
        :'number_of_tier_0_gateways' => :'number_of_tier_0_gateways',
        :'number_of_tier_1_gateways' => :'number_of_tier_1_gateways',
        :'number_of_dfw_rules' => :'number_of_dfw_rules',
        :'number_of_firewall_rules' => :'number_of_firewall_rules',
        :'intelligence_deployed' => :'intelligence_deployed',
        :'recommendation_sessions_total' => :'recommendation_sessions_total',
        :'napp_appliance_version' => :'napp_appliance_version',
        :'number_of_ids_gateway_rules' => :'number_of_ids_gateway_rules',
        :'number_of_ids_security_policies' => :'number_of_ids_security_policies',
        :'mps_total_number_of_profiles' => :'mps_total_number_of_profiles',
        :'mps_number_of_dfw_ids_rules_with_custom_mps_profiles' => :'mps_number_of_dfw_ids_rules_with_custom_mps_profiles',
        :'mps_number_of_gateway_ids_rules_with_custom_mps_profiles' => :'mps_number_of_gateway_ids_rules_with_custom_mps_profiles',
        :'nta_enabled' => :'nta_enabled',
        :'nsx_manager_version' => :'nsx_manager_version',
        :'nsx_deployment_id' => :'nsx_deployment_id',
        :'nsx_site_id' => :'nsx_site_id',
        :'license_edition_type' => :'license_edition_type',
        :'license_key' => :'license_key',
        :'total_firewall_ipfix_profiles' => :'total_firewall_ipfix_profiles',
        :'host_number_of_host_node_cpu_cores' => :'host_number_of_host_node_cpu_cores',
        :'edge_number_of_edge_node_cpu_cores' => :'edge_number_of_edge_node_cpu_cores',
        :'last_update_timestamp' => :'last_update_timestamp'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'raw_host_core_count_distributed_firewall' => :'String',
        :'raw_host_core_count_distributed_intelligence' => :'String',
        :'raw_host_core_count_distributed_ipfix' => :'String',
        :'raw_host_core_count_distributed_baremetal' => :'String',
        :'raw_host_core_count_distributed_intelligence_baremetal' => :'String',
        :'raw_host_core_count_distributed_ipfix_baremetal' => :'String',
        :'raw_host_core_count_distributed_idps' => :'String',
        :'raw_host_core_count_distributed_mps' => :'String',
        :'raw_host_core_count_ndr' => :'String',
        :'raw_edge_core_count_gateway_firewall' => :'String',
        :'raw_edge_core_count_gateway_tls' => :'String',
        :'raw_edge_core_count_gateway_idps' => :'String',
        :'raw_edge_core_count_gateway_mps' => :'String',
        :'dpu_core_count_all_editions' => :'String',
        :'licensed_host_core_count_distributed_firewall' => :'String',
        :'licensed_host_core_count_distributed_intelligence' => :'String',
        :'licensed_host_core_count_distributed_ipfix' => :'String',
        :'licensed_host_core_count_distributed_baremetal' => :'String',
        :'licensed_host_core_count_distributed_intelligence_baremetal' => :'String',
        :'licensed_host_core_count_distributed_ipfix_baremetal' => :'String',
        :'licensed_host_core_count_distributed_idps' => :'String',
        :'licensed_host_core_count_distributed_mps' => :'String',
        :'licensed_host_core_count_ndr' => :'String',
        :'licensed_edge_core_count_gateway_firewall' => :'String',
        :'licensed_edge_core_count_gateway_tls' => :'String',
        :'licensed_edge_core_count_gateway_idps' => :'String',
        :'licensed_edge_core_count_gateway_mps' => :'String',
        :'licensed_total_core_count_firewall_edition' => :'String',
        :'licensed_total_core_count_firewall_atp_edition' => :'String',
        :'max_raw_core_count_per_host' => :'String',
        :'max_raw_core_count_per_socket' => :'String',
        :'max_socket_count_per_host' => :'String',
        :'num_edge_small_factor' => :'String',
        :'num_edge_medium_factor' => :'String',
        :'num_edge_large_factor' => :'String',
        :'num_edge_xlarge_factor' => :'String',
        :'num_edge_baremetal_at_recommended_cores' => :'String',
        :'num_edge_baremetal_at_minimum_cores' => :'String',
        :'number_of_nsgroups' => :'String',
        :'number_of_prepared_hosts' => :'String',
        :'number_of_virtual_machines' => :'String',
        :'number_of_tier_0_gateways' => :'String',
        :'number_of_tier_1_gateways' => :'String',
        :'number_of_dfw_rules' => :'String',
        :'number_of_firewall_rules' => :'String',
        :'intelligence_deployed' => :'String',
        :'recommendation_sessions_total' => :'String',
        :'napp_appliance_version' => :'String',
        :'number_of_ids_gateway_rules' => :'String',
        :'number_of_ids_security_policies' => :'String',
        :'mps_total_number_of_profiles' => :'String',
        :'mps_number_of_dfw_ids_rules_with_custom_mps_profiles' => :'String',
        :'mps_number_of_gateway_ids_rules_with_custom_mps_profiles' => :'String',
        :'nta_enabled' => :'String',
        :'nsx_manager_version' => :'String',
        :'nsx_deployment_id' => :'String',
        :'nsx_site_id' => :'String',
        :'license_edition_type' => :'String',
        :'license_key' => :'String',
        :'total_firewall_ipfix_profiles' => :'String',
        :'host_number_of_host_node_cpu_cores' => :'String',
        :'edge_number_of_edge_node_cpu_cores' => :'String',
        :'last_update_timestamp' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'raw_host_core_count_distributed_firewall')
        self.raw_host_core_count_distributed_firewall = attributes[:'raw_host_core_count_distributed_firewall']
      end

      if attributes.has_key?(:'raw_host_core_count_distributed_intelligence')
        self.raw_host_core_count_distributed_intelligence = attributes[:'raw_host_core_count_distributed_intelligence']
      end

      if attributes.has_key?(:'raw_host_core_count_distributed_ipfix')
        self.raw_host_core_count_distributed_ipfix = attributes[:'raw_host_core_count_distributed_ipfix']
      end

      if attributes.has_key?(:'raw_host_core_count_distributed_baremetal')
        self.raw_host_core_count_distributed_baremetal = attributes[:'raw_host_core_count_distributed_baremetal']
      end

      if attributes.has_key?(:'raw_host_core_count_distributed_intelligence_baremetal')
        self.raw_host_core_count_distributed_intelligence_baremetal = attributes[:'raw_host_core_count_distributed_intelligence_baremetal']
      end

      if attributes.has_key?(:'raw_host_core_count_distributed_ipfix_baremetal')
        self.raw_host_core_count_distributed_ipfix_baremetal = attributes[:'raw_host_core_count_distributed_ipfix_baremetal']
      end

      if attributes.has_key?(:'raw_host_core_count_distributed_idps')
        self.raw_host_core_count_distributed_idps = attributes[:'raw_host_core_count_distributed_idps']
      end

      if attributes.has_key?(:'raw_host_core_count_distributed_mps')
        self.raw_host_core_count_distributed_mps = attributes[:'raw_host_core_count_distributed_mps']
      end

      if attributes.has_key?(:'raw_host_core_count_ndr')
        self.raw_host_core_count_ndr = attributes[:'raw_host_core_count_ndr']
      end

      if attributes.has_key?(:'raw_edge_core_count_gateway_firewall')
        self.raw_edge_core_count_gateway_firewall = attributes[:'raw_edge_core_count_gateway_firewall']
      end

      if attributes.has_key?(:'raw_edge_core_count_gateway_tls')
        self.raw_edge_core_count_gateway_tls = attributes[:'raw_edge_core_count_gateway_tls']
      end

      if attributes.has_key?(:'raw_edge_core_count_gateway_idps')
        self.raw_edge_core_count_gateway_idps = attributes[:'raw_edge_core_count_gateway_idps']
      end

      if attributes.has_key?(:'raw_edge_core_count_gateway_mps')
        self.raw_edge_core_count_gateway_mps = attributes[:'raw_edge_core_count_gateway_mps']
      end

      if attributes.has_key?(:'dpu_core_count_all_editions')
        self.dpu_core_count_all_editions = attributes[:'dpu_core_count_all_editions']
      end

      if attributes.has_key?(:'licensed_host_core_count_distributed_firewall')
        self.licensed_host_core_count_distributed_firewall = attributes[:'licensed_host_core_count_distributed_firewall']
      end

      if attributes.has_key?(:'licensed_host_core_count_distributed_intelligence')
        self.licensed_host_core_count_distributed_intelligence = attributes[:'licensed_host_core_count_distributed_intelligence']
      end

      if attributes.has_key?(:'licensed_host_core_count_distributed_ipfix')
        self.licensed_host_core_count_distributed_ipfix = attributes[:'licensed_host_core_count_distributed_ipfix']
      end

      if attributes.has_key?(:'licensed_host_core_count_distributed_baremetal')
        self.licensed_host_core_count_distributed_baremetal = attributes[:'licensed_host_core_count_distributed_baremetal']
      end

      if attributes.has_key?(:'licensed_host_core_count_distributed_intelligence_baremetal')
        self.licensed_host_core_count_distributed_intelligence_baremetal = attributes[:'licensed_host_core_count_distributed_intelligence_baremetal']
      end

      if attributes.has_key?(:'licensed_host_core_count_distributed_ipfix_baremetal')
        self.licensed_host_core_count_distributed_ipfix_baremetal = attributes[:'licensed_host_core_count_distributed_ipfix_baremetal']
      end

      if attributes.has_key?(:'licensed_host_core_count_distributed_idps')
        self.licensed_host_core_count_distributed_idps = attributes[:'licensed_host_core_count_distributed_idps']
      end

      if attributes.has_key?(:'licensed_host_core_count_distributed_mps')
        self.licensed_host_core_count_distributed_mps = attributes[:'licensed_host_core_count_distributed_mps']
      end

      if attributes.has_key?(:'licensed_host_core_count_ndr')
        self.licensed_host_core_count_ndr = attributes[:'licensed_host_core_count_ndr']
      end

      if attributes.has_key?(:'licensed_edge_core_count_gateway_firewall')
        self.licensed_edge_core_count_gateway_firewall = attributes[:'licensed_edge_core_count_gateway_firewall']
      end

      if attributes.has_key?(:'licensed_edge_core_count_gateway_tls')
        self.licensed_edge_core_count_gateway_tls = attributes[:'licensed_edge_core_count_gateway_tls']
      end

      if attributes.has_key?(:'licensed_edge_core_count_gateway_idps')
        self.licensed_edge_core_count_gateway_idps = attributes[:'licensed_edge_core_count_gateway_idps']
      end

      if attributes.has_key?(:'licensed_edge_core_count_gateway_mps')
        self.licensed_edge_core_count_gateway_mps = attributes[:'licensed_edge_core_count_gateway_mps']
      end

      if attributes.has_key?(:'licensed_total_core_count_firewall_edition')
        self.licensed_total_core_count_firewall_edition = attributes[:'licensed_total_core_count_firewall_edition']
      end

      if attributes.has_key?(:'licensed_total_core_count_firewall_atp_edition')
        self.licensed_total_core_count_firewall_atp_edition = attributes[:'licensed_total_core_count_firewall_atp_edition']
      end

      if attributes.has_key?(:'max_raw_core_count_per_host')
        self.max_raw_core_count_per_host = attributes[:'max_raw_core_count_per_host']
      end

      if attributes.has_key?(:'max_raw_core_count_per_socket')
        self.max_raw_core_count_per_socket = attributes[:'max_raw_core_count_per_socket']
      end

      if attributes.has_key?(:'max_socket_count_per_host')
        self.max_socket_count_per_host = attributes[:'max_socket_count_per_host']
      end

      if attributes.has_key?(:'num_edge_small_factor')
        self.num_edge_small_factor = attributes[:'num_edge_small_factor']
      end

      if attributes.has_key?(:'num_edge_medium_factor')
        self.num_edge_medium_factor = attributes[:'num_edge_medium_factor']
      end

      if attributes.has_key?(:'num_edge_large_factor')
        self.num_edge_large_factor = attributes[:'num_edge_large_factor']
      end

      if attributes.has_key?(:'num_edge_xlarge_factor')
        self.num_edge_xlarge_factor = attributes[:'num_edge_xlarge_factor']
      end

      if attributes.has_key?(:'num_edge_baremetal_at_recommended_cores')
        self.num_edge_baremetal_at_recommended_cores = attributes[:'num_edge_baremetal_at_recommended_cores']
      end

      if attributes.has_key?(:'num_edge_baremetal_at_minimum_cores')
        self.num_edge_baremetal_at_minimum_cores = attributes[:'num_edge_baremetal_at_minimum_cores']
      end

      if attributes.has_key?(:'number_of_nsgroups')
        self.number_of_nsgroups = attributes[:'number_of_nsgroups']
      end

      if attributes.has_key?(:'number_of_prepared_hosts')
        self.number_of_prepared_hosts = attributes[:'number_of_prepared_hosts']
      end

      if attributes.has_key?(:'number_of_virtual_machines')
        self.number_of_virtual_machines = attributes[:'number_of_virtual_machines']
      end

      if attributes.has_key?(:'number_of_tier_0_gateways')
        self.number_of_tier_0_gateways = attributes[:'number_of_tier_0_gateways']
      end

      if attributes.has_key?(:'number_of_tier_1_gateways')
        self.number_of_tier_1_gateways = attributes[:'number_of_tier_1_gateways']
      end

      if attributes.has_key?(:'number_of_dfw_rules')
        self.number_of_dfw_rules = attributes[:'number_of_dfw_rules']
      end

      if attributes.has_key?(:'number_of_firewall_rules')
        self.number_of_firewall_rules = attributes[:'number_of_firewall_rules']
      end

      if attributes.has_key?(:'intelligence_deployed')
        self.intelligence_deployed = attributes[:'intelligence_deployed']
      end

      if attributes.has_key?(:'recommendation_sessions_total')
        self.recommendation_sessions_total = attributes[:'recommendation_sessions_total']
      end

      if attributes.has_key?(:'napp_appliance_version')
        self.napp_appliance_version = attributes[:'napp_appliance_version']
      end

      if attributes.has_key?(:'number_of_ids_gateway_rules')
        self.number_of_ids_gateway_rules = attributes[:'number_of_ids_gateway_rules']
      end

      if attributes.has_key?(:'number_of_ids_security_policies')
        self.number_of_ids_security_policies = attributes[:'number_of_ids_security_policies']
      end

      if attributes.has_key?(:'mps_total_number_of_profiles')
        self.mps_total_number_of_profiles = attributes[:'mps_total_number_of_profiles']
      end

      if attributes.has_key?(:'mps_number_of_dfw_ids_rules_with_custom_mps_profiles')
        self.mps_number_of_dfw_ids_rules_with_custom_mps_profiles = attributes[:'mps_number_of_dfw_ids_rules_with_custom_mps_profiles']
      end

      if attributes.has_key?(:'mps_number_of_gateway_ids_rules_with_custom_mps_profiles')
        self.mps_number_of_gateway_ids_rules_with_custom_mps_profiles = attributes[:'mps_number_of_gateway_ids_rules_with_custom_mps_profiles']
      end

      if attributes.has_key?(:'nta_enabled')
        self.nta_enabled = attributes[:'nta_enabled']
      else
        self.nta_enabled = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'nsx_manager_version')
        self.nsx_manager_version = attributes[:'nsx_manager_version']
      end

      if attributes.has_key?(:'nsx_deployment_id')
        self.nsx_deployment_id = attributes[:'nsx_deployment_id']
      end

      if attributes.has_key?(:'nsx_site_id')
        self.nsx_site_id = attributes[:'nsx_site_id']
      end

      if attributes.has_key?(:'license_edition_type')
        self.license_edition_type = attributes[:'license_edition_type']
      end

      if attributes.has_key?(:'license_key')
        self.license_key = attributes[:'license_key']
      end

      if attributes.has_key?(:'total_firewall_ipfix_profiles')
        self.total_firewall_ipfix_profiles = attributes[:'total_firewall_ipfix_profiles']
      end

      if attributes.has_key?(:'host_number_of_host_node_cpu_cores')
        self.host_number_of_host_node_cpu_cores = attributes[:'host_number_of_host_node_cpu_cores']
      end

      if attributes.has_key?(:'edge_number_of_edge_node_cpu_cores')
        self.edge_number_of_edge_node_cpu_cores = attributes[:'edge_number_of_edge_node_cpu_cores']
      end

      if attributes.has_key?(:'last_update_timestamp')
        self.last_update_timestamp = attributes[:'last_update_timestamp']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          raw_host_core_count_distributed_firewall == o.raw_host_core_count_distributed_firewall &&
          raw_host_core_count_distributed_intelligence == o.raw_host_core_count_distributed_intelligence &&
          raw_host_core_count_distributed_ipfix == o.raw_host_core_count_distributed_ipfix &&
          raw_host_core_count_distributed_baremetal == o.raw_host_core_count_distributed_baremetal &&
          raw_host_core_count_distributed_intelligence_baremetal == o.raw_host_core_count_distributed_intelligence_baremetal &&
          raw_host_core_count_distributed_ipfix_baremetal == o.raw_host_core_count_distributed_ipfix_baremetal &&
          raw_host_core_count_distributed_idps == o.raw_host_core_count_distributed_idps &&
          raw_host_core_count_distributed_mps == o.raw_host_core_count_distributed_mps &&
          raw_host_core_count_ndr == o.raw_host_core_count_ndr &&
          raw_edge_core_count_gateway_firewall == o.raw_edge_core_count_gateway_firewall &&
          raw_edge_core_count_gateway_tls == o.raw_edge_core_count_gateway_tls &&
          raw_edge_core_count_gateway_idps == o.raw_edge_core_count_gateway_idps &&
          raw_edge_core_count_gateway_mps == o.raw_edge_core_count_gateway_mps &&
          dpu_core_count_all_editions == o.dpu_core_count_all_editions &&
          licensed_host_core_count_distributed_firewall == o.licensed_host_core_count_distributed_firewall &&
          licensed_host_core_count_distributed_intelligence == o.licensed_host_core_count_distributed_intelligence &&
          licensed_host_core_count_distributed_ipfix == o.licensed_host_core_count_distributed_ipfix &&
          licensed_host_core_count_distributed_baremetal == o.licensed_host_core_count_distributed_baremetal &&
          licensed_host_core_count_distributed_intelligence_baremetal == o.licensed_host_core_count_distributed_intelligence_baremetal &&
          licensed_host_core_count_distributed_ipfix_baremetal == o.licensed_host_core_count_distributed_ipfix_baremetal &&
          licensed_host_core_count_distributed_idps == o.licensed_host_core_count_distributed_idps &&
          licensed_host_core_count_distributed_mps == o.licensed_host_core_count_distributed_mps &&
          licensed_host_core_count_ndr == o.licensed_host_core_count_ndr &&
          licensed_edge_core_count_gateway_firewall == o.licensed_edge_core_count_gateway_firewall &&
          licensed_edge_core_count_gateway_tls == o.licensed_edge_core_count_gateway_tls &&
          licensed_edge_core_count_gateway_idps == o.licensed_edge_core_count_gateway_idps &&
          licensed_edge_core_count_gateway_mps == o.licensed_edge_core_count_gateway_mps &&
          licensed_total_core_count_firewall_edition == o.licensed_total_core_count_firewall_edition &&
          licensed_total_core_count_firewall_atp_edition == o.licensed_total_core_count_firewall_atp_edition &&
          max_raw_core_count_per_host == o.max_raw_core_count_per_host &&
          max_raw_core_count_per_socket == o.max_raw_core_count_per_socket &&
          max_socket_count_per_host == o.max_socket_count_per_host &&
          num_edge_small_factor == o.num_edge_small_factor &&
          num_edge_medium_factor == o.num_edge_medium_factor &&
          num_edge_large_factor == o.num_edge_large_factor &&
          num_edge_xlarge_factor == o.num_edge_xlarge_factor &&
          num_edge_baremetal_at_recommended_cores == o.num_edge_baremetal_at_recommended_cores &&
          num_edge_baremetal_at_minimum_cores == o.num_edge_baremetal_at_minimum_cores &&
          number_of_nsgroups == o.number_of_nsgroups &&
          number_of_prepared_hosts == o.number_of_prepared_hosts &&
          number_of_virtual_machines == o.number_of_virtual_machines &&
          number_of_tier_0_gateways == o.number_of_tier_0_gateways &&
          number_of_tier_1_gateways == o.number_of_tier_1_gateways &&
          number_of_dfw_rules == o.number_of_dfw_rules &&
          number_of_firewall_rules == o.number_of_firewall_rules &&
          intelligence_deployed == o.intelligence_deployed &&
          recommendation_sessions_total == o.recommendation_sessions_total &&
          napp_appliance_version == o.napp_appliance_version &&
          number_of_ids_gateway_rules == o.number_of_ids_gateway_rules &&
          number_of_ids_security_policies == o.number_of_ids_security_policies &&
          mps_total_number_of_profiles == o.mps_total_number_of_profiles &&
          mps_number_of_dfw_ids_rules_with_custom_mps_profiles == o.mps_number_of_dfw_ids_rules_with_custom_mps_profiles &&
          mps_number_of_gateway_ids_rules_with_custom_mps_profiles == o.mps_number_of_gateway_ids_rules_with_custom_mps_profiles &&
          nta_enabled == o.nta_enabled &&
          nsx_manager_version == o.nsx_manager_version &&
          nsx_deployment_id == o.nsx_deployment_id &&
          nsx_site_id == o.nsx_site_id &&
          license_edition_type == o.license_edition_type &&
          license_key == o.license_key &&
          total_firewall_ipfix_profiles == o.total_firewall_ipfix_profiles &&
          host_number_of_host_node_cpu_cores == o.host_number_of_host_node_cpu_cores &&
          edge_number_of_edge_node_cpu_cores == o.edge_number_of_edge_node_cpu_cores &&
          last_update_timestamp == o.last_update_timestamp
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [raw_host_core_count_distributed_firewall, raw_host_core_count_distributed_intelligence, raw_host_core_count_distributed_ipfix, raw_host_core_count_distributed_baremetal, raw_host_core_count_distributed_intelligence_baremetal, raw_host_core_count_distributed_ipfix_baremetal, raw_host_core_count_distributed_idps, raw_host_core_count_distributed_mps, raw_host_core_count_ndr, raw_edge_core_count_gateway_firewall, raw_edge_core_count_gateway_tls, raw_edge_core_count_gateway_idps, raw_edge_core_count_gateway_mps, dpu_core_count_all_editions, licensed_host_core_count_distributed_firewall, licensed_host_core_count_distributed_intelligence, licensed_host_core_count_distributed_ipfix, licensed_host_core_count_distributed_baremetal, licensed_host_core_count_distributed_intelligence_baremetal, licensed_host_core_count_distributed_ipfix_baremetal, licensed_host_core_count_distributed_idps, licensed_host_core_count_distributed_mps, licensed_host_core_count_ndr, licensed_edge_core_count_gateway_firewall, licensed_edge_core_count_gateway_tls, licensed_edge_core_count_gateway_idps, licensed_edge_core_count_gateway_mps, licensed_total_core_count_firewall_edition, licensed_total_core_count_firewall_atp_edition, max_raw_core_count_per_host, max_raw_core_count_per_socket, max_socket_count_per_host, num_edge_small_factor, num_edge_medium_factor, num_edge_large_factor, num_edge_xlarge_factor, num_edge_baremetal_at_recommended_cores, num_edge_baremetal_at_minimum_cores, number_of_nsgroups, number_of_prepared_hosts, number_of_virtual_machines, number_of_tier_0_gateways, number_of_tier_1_gateways, number_of_dfw_rules, number_of_firewall_rules, intelligence_deployed, recommendation_sessions_total, napp_appliance_version, number_of_ids_gateway_rules, number_of_ids_security_policies, mps_total_number_of_profiles, mps_number_of_dfw_ids_rules_with_custom_mps_profiles, mps_number_of_gateway_ids_rules_with_custom_mps_profiles, nta_enabled, nsx_manager_version, nsx_deployment_id, nsx_site_id, license_edition_type, license_key, total_firewall_ipfix_profiles, host_number_of_host_node_cpu_cores, edge_number_of_edge_node_cpu_cores, last_update_timestamp].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
