=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class OspfStatusInfo
    # Tier0 interface name.
    attr_accessor :interface_name

    # Multicast source address.
    attr_accessor :source_address

    # Priority of the neighbor.
    attr_accessor :priority

    # OSPF neighbor state.
    attr_accessor :state

    # Time since last change in state.
    attr_accessor :last_state_change

    # Time remaining in before considering OSPF neighbor dead.
    attr_accessor :dead_time

    # Retransmit request counter.
    attr_accessor :retransmit_counter

    # request counter.
    attr_accessor :request_counter

    # Database summary counter.
    attr_accessor :database_summary_counter

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'interface_name' => :'interface_name',
        :'source_address' => :'source_address',
        :'priority' => :'priority',
        :'state' => :'state',
        :'last_state_change' => :'last_state_change',
        :'dead_time' => :'dead_time',
        :'retransmit_counter' => :'retransmit_counter',
        :'request_counter' => :'request_counter',
        :'database_summary_counter' => :'database_summary_counter'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'interface_name' => :'String',
        :'source_address' => :'String',
        :'priority' => :'Integer',
        :'state' => :'String',
        :'last_state_change' => :'String',
        :'dead_time' => :'String',
        :'retransmit_counter' => :'Integer',
        :'request_counter' => :'Integer',
        :'database_summary_counter' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'interface_name')
        self.interface_name = attributes[:'interface_name']
      end

      if attributes.has_key?(:'source_address')
        self.source_address = attributes[:'source_address']
      end

      if attributes.has_key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'last_state_change')
        self.last_state_change = attributes[:'last_state_change']
      end

      if attributes.has_key?(:'dead_time')
        self.dead_time = attributes[:'dead_time']
      end

      if attributes.has_key?(:'retransmit_counter')
        self.retransmit_counter = attributes[:'retransmit_counter']
      end

      if attributes.has_key?(:'request_counter')
        self.request_counter = attributes[:'request_counter']
      end

      if attributes.has_key?(:'database_summary_counter')
        self.database_summary_counter = attributes[:'database_summary_counter']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          interface_name == o.interface_name &&
          source_address == o.source_address &&
          priority == o.priority &&
          state == o.state &&
          last_state_change == o.last_state_change &&
          dead_time == o.dead_time &&
          retransmit_counter == o.retransmit_counter &&
          request_counter == o.request_counter &&
          database_summary_counter == o.database_summary_counter
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [interface_name, source_address, priority, state, last_state_change, dead_time, retransmit_counter, request_counter, database_summary_counter].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
