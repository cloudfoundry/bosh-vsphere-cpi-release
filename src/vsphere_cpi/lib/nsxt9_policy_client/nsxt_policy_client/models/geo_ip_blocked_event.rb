=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Geo IP Blocked Event
  class GeoIpBlockedEvent
    # Source IP Address of Geo IP Blocked Event
    attr_accessor :source_ip_address

    # Destination IP Address of Geo IP Blocked Event
    attr_accessor :destination_ip_address

    # Gateway Firewall Rule Id of Geo IP Blocked Event
    attr_accessor :rule_id

    # Source Country Code of Geo IP Blocked Event
    attr_accessor :source_country_code

    # Destination Country Code of Geo IP Blocked Event
    attr_accessor :destination_country_code

    # Source Country Name of Geo IP Blocked Event
    attr_accessor :source_country_name

    # Destination Country Name of Geo IP Blocked Event
    attr_accessor :destination_country_name

    # Packet Hit Count between Start and End Timestamp
    attr_accessor :count

    # Direction of Traffic
    attr_accessor :direction

    # Start Timestamp when Last Blocked Event occurred for the Country with given IP Address
    attr_accessor :start_timestamp

    # End Timestamp when Last Blocked Event occurred for the Country with given IP Address
    attr_accessor :end_timestamp

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'source_ip_address' => :'source_ip_address',
        :'destination_ip_address' => :'destination_ip_address',
        :'rule_id' => :'rule_id',
        :'source_country_code' => :'source_country_code',
        :'destination_country_code' => :'destination_country_code',
        :'source_country_name' => :'source_country_name',
        :'destination_country_name' => :'destination_country_name',
        :'count' => :'count',
        :'direction' => :'direction',
        :'start_timestamp' => :'start_timestamp',
        :'end_timestamp' => :'end_timestamp'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'source_ip_address' => :'String',
        :'destination_ip_address' => :'String',
        :'rule_id' => :'Integer',
        :'source_country_code' => :'String',
        :'destination_country_code' => :'String',
        :'source_country_name' => :'String',
        :'destination_country_name' => :'String',
        :'count' => :'Integer',
        :'direction' => :'String',
        :'start_timestamp' => :'Integer',
        :'end_timestamp' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'source_ip_address')
        self.source_ip_address = attributes[:'source_ip_address']
      end

      if attributes.has_key?(:'destination_ip_address')
        self.destination_ip_address = attributes[:'destination_ip_address']
      end

      if attributes.has_key?(:'rule_id')
        self.rule_id = attributes[:'rule_id']
      end

      if attributes.has_key?(:'source_country_code')
        self.source_country_code = attributes[:'source_country_code']
      end

      if attributes.has_key?(:'destination_country_code')
        self.destination_country_code = attributes[:'destination_country_code']
      end

      if attributes.has_key?(:'source_country_name')
        self.source_country_name = attributes[:'source_country_name']
      end

      if attributes.has_key?(:'destination_country_name')
        self.destination_country_name = attributes[:'destination_country_name']
      end

      if attributes.has_key?(:'count')
        self.count = attributes[:'count']
      end

      if attributes.has_key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.has_key?(:'start_timestamp')
        self.start_timestamp = attributes[:'start_timestamp']
      end

      if attributes.has_key?(:'end_timestamp')
        self.end_timestamp = attributes[:'end_timestamp']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      direction_validator = EnumAttributeValidator.new('String', ['IN', 'OUT'])
      return false unless direction_validator.valid?(@direction)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(direction)
      validator = EnumAttributeValidator.new('String', ['IN', 'OUT'])
      unless validator.valid?(direction)
        fail ArgumentError, 'invalid value for "direction", must be one of #{validator.allowable_values}.'
      end
      @direction = direction
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          source_ip_address == o.source_ip_address &&
          destination_ip_address == o.destination_ip_address &&
          rule_id == o.rule_id &&
          source_country_code == o.source_country_code &&
          destination_country_code == o.destination_country_code &&
          source_country_name == o.source_country_name &&
          destination_country_name == o.destination_country_name &&
          count == o.count &&
          direction == o.direction &&
          start_timestamp == o.start_timestamp &&
          end_timestamp == o.end_timestamp
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [source_ip_address, destination_ip_address, rule_id, source_country_code, destination_country_code, source_country_name, destination_country_name, count, direction, start_timestamp, end_timestamp].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
