=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class GreTunnelEndpointStatusPerEdgeNode
    # Timestamp when the data was last updated
    attr_accessor :last_update_timestamp

    # Tunnel source address
    attr_accessor :source

    # ID of the tunnel router port
    attr_accessor :tunnel_port_id

    # Edge node policy path
    attr_accessor :edge_path

    # Tunnel run time status
    attr_accessor :runtime_status

    # Count of Tunnel run time status as \"UP\"
    attr_accessor :tunnel_up_count

    # Timestamp when the tunnel status was last updated as \"UP\"
    attr_accessor :tunnel_last_up_time

    # Count of Tunnel run time status as \"DOWN\"
    attr_accessor :tunnel_down_count

    # Timestamp when the tunnel status was last updated as \"DOWN\"
    attr_accessor :tunnel_last_down_time

    # The keepalive_status indicates Tunnel keepalive is administratively enabled or disabled
    attr_accessor :keepalive_status

    # Tunnel keepalive interval in seconds
    attr_accessor :keepalive_interval

    # Tunnel keepalive dead multiplier
    attr_accessor :keepalive_dead_multiplier

    # Total number of keepalive packets sent
    attr_accessor :keepalive_tx_count

    # Timestamp when the last keepalive sent
    attr_accessor :keepalive_last_tx_time

    # Total number of keepalive packets received
    attr_accessor :keepalive_rx_count

    # Timestamp when the last keepalive received
    attr_accessor :keepalive_last_rx_time

    # The keepalive_ack indicates Tunnel keepalive ACK is administratively enabled or disabled
    attr_accessor :keepalive_ack

    # Total number of keepalive ack packets sent
    attr_accessor :keepalive_ack_sent_count

    # Timestamp when the last keepalive ack sent
    attr_accessor :keepalive_last_ack_time

    # Tunnel Keepalive Admin State
    attr_accessor :keepalive_admin_state

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'last_update_timestamp' => :'last_update_timestamp',
        :'source' => :'source',
        :'tunnel_port_id' => :'tunnel_port_id',
        :'edge_path' => :'edge_path',
        :'runtime_status' => :'runtime_status',
        :'tunnel_up_count' => :'tunnel_up_count',
        :'tunnel_last_up_time' => :'tunnel_last_up_time',
        :'tunnel_down_count' => :'tunnel_down_count',
        :'tunnel_last_down_time' => :'tunnel_last_down_time',
        :'keepalive_status' => :'keepalive_status',
        :'keepalive_interval' => :'keepalive_interval',
        :'keepalive_dead_multiplier' => :'keepalive_dead_multiplier',
        :'keepalive_tx_count' => :'keepalive_tx_count',
        :'keepalive_last_tx_time' => :'keepalive_last_tx_time',
        :'keepalive_rx_count' => :'keepalive_rx_count',
        :'keepalive_last_rx_time' => :'keepalive_last_rx_time',
        :'keepalive_ack' => :'keepalive_ack',
        :'keepalive_ack_sent_count' => :'keepalive_ack_sent_count',
        :'keepalive_last_ack_time' => :'keepalive_last_ack_time',
        :'keepalive_admin_state' => :'keepalive_admin_state'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'last_update_timestamp' => :'Integer',
        :'source' => :'String',
        :'tunnel_port_id' => :'String',
        :'edge_path' => :'String',
        :'runtime_status' => :'String',
        :'tunnel_up_count' => :'Integer',
        :'tunnel_last_up_time' => :'Integer',
        :'tunnel_down_count' => :'Integer',
        :'tunnel_last_down_time' => :'Integer',
        :'keepalive_status' => :'String',
        :'keepalive_interval' => :'Integer',
        :'keepalive_dead_multiplier' => :'Integer',
        :'keepalive_tx_count' => :'Integer',
        :'keepalive_last_tx_time' => :'Integer',
        :'keepalive_rx_count' => :'Integer',
        :'keepalive_last_rx_time' => :'Integer',
        :'keepalive_ack' => :'String',
        :'keepalive_ack_sent_count' => :'Integer',
        :'keepalive_last_ack_time' => :'Integer',
        :'keepalive_admin_state' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'last_update_timestamp')
        self.last_update_timestamp = attributes[:'last_update_timestamp']
      end

      if attributes.has_key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.has_key?(:'tunnel_port_id')
        self.tunnel_port_id = attributes[:'tunnel_port_id']
      end

      if attributes.has_key?(:'edge_path')
        self.edge_path = attributes[:'edge_path']
      end

      if attributes.has_key?(:'runtime_status')
        self.runtime_status = attributes[:'runtime_status']
      end

      if attributes.has_key?(:'tunnel_up_count')
        self.tunnel_up_count = attributes[:'tunnel_up_count']
      end

      if attributes.has_key?(:'tunnel_last_up_time')
        self.tunnel_last_up_time = attributes[:'tunnel_last_up_time']
      end

      if attributes.has_key?(:'tunnel_down_count')
        self.tunnel_down_count = attributes[:'tunnel_down_count']
      end

      if attributes.has_key?(:'tunnel_last_down_time')
        self.tunnel_last_down_time = attributes[:'tunnel_last_down_time']
      end

      if attributes.has_key?(:'keepalive_status')
        self.keepalive_status = attributes[:'keepalive_status']
      end

      if attributes.has_key?(:'keepalive_interval')
        self.keepalive_interval = attributes[:'keepalive_interval']
      end

      if attributes.has_key?(:'keepalive_dead_multiplier')
        self.keepalive_dead_multiplier = attributes[:'keepalive_dead_multiplier']
      end

      if attributes.has_key?(:'keepalive_tx_count')
        self.keepalive_tx_count = attributes[:'keepalive_tx_count']
      end

      if attributes.has_key?(:'keepalive_last_tx_time')
        self.keepalive_last_tx_time = attributes[:'keepalive_last_tx_time']
      end

      if attributes.has_key?(:'keepalive_rx_count')
        self.keepalive_rx_count = attributes[:'keepalive_rx_count']
      end

      if attributes.has_key?(:'keepalive_last_rx_time')
        self.keepalive_last_rx_time = attributes[:'keepalive_last_rx_time']
      end

      if attributes.has_key?(:'keepalive_ack')
        self.keepalive_ack = attributes[:'keepalive_ack']
      end

      if attributes.has_key?(:'keepalive_ack_sent_count')
        self.keepalive_ack_sent_count = attributes[:'keepalive_ack_sent_count']
      end

      if attributes.has_key?(:'keepalive_last_ack_time')
        self.keepalive_last_ack_time = attributes[:'keepalive_last_ack_time']
      end

      if attributes.has_key?(:'keepalive_admin_state')
        self.keepalive_admin_state = attributes[:'keepalive_admin_state']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      runtime_status_validator = EnumAttributeValidator.new('String', ['UP', 'DOWN'])
      return false unless runtime_status_validator.valid?(@runtime_status)
      keepalive_status_validator = EnumAttributeValidator.new('String', ['KEEPALIVE_STATUS_ENABLE', 'KEEPALIVE_STATUS_DISABLE'])
      return false unless keepalive_status_validator.valid?(@keepalive_status)
      keepalive_ack_validator = EnumAttributeValidator.new('String', ['KEEPALIVE_ACK_ENABLE', 'KEEPALIVE_ACK_DISABLE'])
      return false unless keepalive_ack_validator.valid?(@keepalive_ack)
      keepalive_admin_state_validator = EnumAttributeValidator.new('String', ['ENABLED', 'DISABLED'])
      return false unless keepalive_admin_state_validator.valid?(@keepalive_admin_state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] runtime_status Object to be assigned
    def runtime_status=(runtime_status)
      validator = EnumAttributeValidator.new('String', ['UP', 'DOWN'])
      unless validator.valid?(runtime_status)
        fail ArgumentError, 'invalid value for "runtime_status", must be one of #{validator.allowable_values}.'
      end
      @runtime_status = runtime_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] keepalive_status Object to be assigned
    def keepalive_status=(keepalive_status)
      validator = EnumAttributeValidator.new('String', ['KEEPALIVE_STATUS_ENABLE', 'KEEPALIVE_STATUS_DISABLE'])
      unless validator.valid?(keepalive_status)
        fail ArgumentError, 'invalid value for "keepalive_status", must be one of #{validator.allowable_values}.'
      end
      @keepalive_status = keepalive_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] keepalive_ack Object to be assigned
    def keepalive_ack=(keepalive_ack)
      validator = EnumAttributeValidator.new('String', ['KEEPALIVE_ACK_ENABLE', 'KEEPALIVE_ACK_DISABLE'])
      unless validator.valid?(keepalive_ack)
        fail ArgumentError, 'invalid value for "keepalive_ack", must be one of #{validator.allowable_values}.'
      end
      @keepalive_ack = keepalive_ack
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] keepalive_admin_state Object to be assigned
    def keepalive_admin_state=(keepalive_admin_state)
      validator = EnumAttributeValidator.new('String', ['ENABLED', 'DISABLED'])
      unless validator.valid?(keepalive_admin_state)
        fail ArgumentError, 'invalid value for "keepalive_admin_state", must be one of #{validator.allowable_values}.'
      end
      @keepalive_admin_state = keepalive_admin_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          last_update_timestamp == o.last_update_timestamp &&
          source == o.source &&
          tunnel_port_id == o.tunnel_port_id &&
          edge_path == o.edge_path &&
          runtime_status == o.runtime_status &&
          tunnel_up_count == o.tunnel_up_count &&
          tunnel_last_up_time == o.tunnel_last_up_time &&
          tunnel_down_count == o.tunnel_down_count &&
          tunnel_last_down_time == o.tunnel_last_down_time &&
          keepalive_status == o.keepalive_status &&
          keepalive_interval == o.keepalive_interval &&
          keepalive_dead_multiplier == o.keepalive_dead_multiplier &&
          keepalive_tx_count == o.keepalive_tx_count &&
          keepalive_last_tx_time == o.keepalive_last_tx_time &&
          keepalive_rx_count == o.keepalive_rx_count &&
          keepalive_last_rx_time == o.keepalive_last_rx_time &&
          keepalive_ack == o.keepalive_ack &&
          keepalive_ack_sent_count == o.keepalive_ack_sent_count &&
          keepalive_last_ack_time == o.keepalive_last_ack_time &&
          keepalive_admin_state == o.keepalive_admin_state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [last_update_timestamp, source, tunnel_port_id, edge_path, runtime_status, tunnel_up_count, tunnel_last_up_time, tunnel_down_count, tunnel_last_down_time, keepalive_status, keepalive_interval, keepalive_dead_multiplier, keepalive_tx_count, keepalive_last_tx_time, keepalive_rx_count, keepalive_last_rx_time, keepalive_ack, keepalive_ack_sent_count, keepalive_last_ack_time, keepalive_admin_state].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
