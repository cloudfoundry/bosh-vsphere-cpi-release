=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Avi Load Balancer Controller config details.
  class ALBControllerConfiguration
    # OnBoarding workflow is initiated by VCF/LCM.
    attr_accessor :owned_by

    # The cluster IP of the Avi Load Balancer Controller cluster. This is mandatory parameter and required for single node Avi controller deployments as well. 
    attr_accessor :cluster_ip

    # Password for the Avi controller admin user. For deployment, this property is required. The password specified must be at least 8 characters in length. 
    attr_accessor :infra_admin_password

    # Username for server authentication.
    attr_accessor :infra_admin_username

    # List of NTP servers. 
    attr_accessor :ntp_servers

    # List of DNS servers. 
    attr_accessor :dns_servers

    # Is Avi Load Balancer Controller using default portal certificate. 
    attr_accessor :default_cert

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'owned_by' => :'owned_by',
        :'cluster_ip' => :'cluster_ip',
        :'infra_admin_password' => :'infra_admin_password',
        :'infra_admin_username' => :'infra_admin_username',
        :'ntp_servers' => :'ntp_servers',
        :'dns_servers' => :'dns_servers',
        :'default_cert' => :'default_cert'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'owned_by' => :'String',
        :'cluster_ip' => :'String',
        :'infra_admin_password' => :'String',
        :'infra_admin_username' => :'String',
        :'ntp_servers' => :'Array<String>',
        :'dns_servers' => :'Array<String>',
        :'default_cert' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'owned_by')
        self.owned_by = attributes[:'owned_by']
      end

      if attributes.has_key?(:'cluster_ip')
        self.cluster_ip = attributes[:'cluster_ip']
      end

      if attributes.has_key?(:'infra_admin_password')
        self.infra_admin_password = attributes[:'infra_admin_password']
      end

      if attributes.has_key?(:'infra_admin_username')
        self.infra_admin_username = attributes[:'infra_admin_username']
      end

      if attributes.has_key?(:'ntp_servers')
        if (value = attributes[:'ntp_servers']).is_a?(Array)
          self.ntp_servers = value
        end
      end

      if attributes.has_key?(:'dns_servers')
        if (value = attributes[:'dns_servers']).is_a?(Array)
          self.dns_servers = value
        end
      end

      if attributes.has_key?(:'default_cert')
        self.default_cert = attributes[:'default_cert']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @owned_by.nil?
        invalid_properties.push('invalid value for "owned_by", owned_by cannot be nil.')
      end

      if @cluster_ip.nil?
        invalid_properties.push('invalid value for "cluster_ip", cluster_ip cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @owned_by.nil?
      owned_by_validator = EnumAttributeValidator.new('String', ['LCM', 'VCF'])
      return false unless owned_by_validator.valid?(@owned_by)
      return false if @cluster_ip.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owned_by Object to be assigned
    def owned_by=(owned_by)
      validator = EnumAttributeValidator.new('String', ['LCM', 'VCF'])
      unless validator.valid?(owned_by)
        fail ArgumentError, 'invalid value for "owned_by", must be one of #{validator.allowable_values}.'
      end
      @owned_by = owned_by
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          owned_by == o.owned_by &&
          cluster_ip == o.cluster_ip &&
          infra_admin_password == o.infra_admin_password &&
          infra_admin_username == o.infra_admin_username &&
          ntp_servers == o.ntp_servers &&
          dns_servers == o.dns_servers &&
          default_cert == o.default_cert
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [owned_by, cluster_ip, infra_admin_password, infra_admin_username, ntp_servers, dns_servers, default_cert].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
