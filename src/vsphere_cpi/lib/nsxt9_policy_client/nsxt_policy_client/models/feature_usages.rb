=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class FeatureUsages
    # Distributed Firewall feature count.
    attr_accessor :distributed_firewall

    # Distributed Firewall on Bare Metal feature count.
    attr_accessor :distributed_baremetal

    # Distributed Intelligence feature count.
    attr_accessor :distributed_intelligence

    # Distributed Intelligence on Bare Metal feature count.
    attr_accessor :distributed_intelligence_baremetal

    # Distributed IPFIX feature count.
    attr_accessor :distributed_ipfix

    # Distributed IPFIX on Bare Metal feature count.
    attr_accessor :distributed_ipfix_baremetal

    # Distributed IDPS feature count.
    attr_accessor :distributed_idps

    # Distributed MPS feature count.
    attr_accessor :distributed_mps

    # Gateway stateful firewall feature count
    attr_accessor :gateway_firewall

    # Gateway TLS feature count.
    attr_accessor :gateway_tls

    # Gateway IDPS feature count.
    attr_accessor :gateway_idps

    # Gateway MPS feature count
    attr_accessor :gateway_mps

    # Network Detection Response feature count.
    attr_accessor :network_detection_response

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'distributed_firewall' => :'DISTRIBUTED_FIREWALL',
        :'distributed_baremetal' => :'DISTRIBUTED_BAREMETAL',
        :'distributed_intelligence' => :'DISTRIBUTED_INTELLIGENCE',
        :'distributed_intelligence_baremetal' => :'DISTRIBUTED_INTELLIGENCE_BAREMETAL',
        :'distributed_ipfix' => :'DISTRIBUTED_IPFIX',
        :'distributed_ipfix_baremetal' => :'DISTRIBUTED_IPFIX_BAREMETAL',
        :'distributed_idps' => :'DISTRIBUTED_IDPS',
        :'distributed_mps' => :'DISTRIBUTED_MPS',
        :'gateway_firewall' => :'GATEWAY_FIREWALL',
        :'gateway_tls' => :'GATEWAY_TLS',
        :'gateway_idps' => :'GATEWAY_IDPS',
        :'gateway_mps' => :'GATEWAY_MPS',
        :'network_detection_response' => :'NETWORK_DETECTION_RESPONSE'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'distributed_firewall' => :'String',
        :'distributed_baremetal' => :'String',
        :'distributed_intelligence' => :'String',
        :'distributed_intelligence_baremetal' => :'String',
        :'distributed_ipfix' => :'String',
        :'distributed_ipfix_baremetal' => :'String',
        :'distributed_idps' => :'String',
        :'distributed_mps' => :'String',
        :'gateway_firewall' => :'String',
        :'gateway_tls' => :'String',
        :'gateway_idps' => :'String',
        :'gateway_mps' => :'String',
        :'network_detection_response' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'DISTRIBUTED_FIREWALL')
        self.distributed_firewall = attributes[:'DISTRIBUTED_FIREWALL']
      else
        self.distributed_firewall = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'DISTRIBUTED_BAREMETAL')
        self.distributed_baremetal = attributes[:'DISTRIBUTED_BAREMETAL']
      else
        self.distributed_baremetal = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'DISTRIBUTED_INTELLIGENCE')
        self.distributed_intelligence = attributes[:'DISTRIBUTED_INTELLIGENCE']
      else
        self.distributed_intelligence = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'DISTRIBUTED_INTELLIGENCE_BAREMETAL')
        self.distributed_intelligence_baremetal = attributes[:'DISTRIBUTED_INTELLIGENCE_BAREMETAL']
      else
        self.distributed_intelligence_baremetal = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'DISTRIBUTED_IPFIX')
        self.distributed_ipfix = attributes[:'DISTRIBUTED_IPFIX']
      else
        self.distributed_ipfix = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'DISTRIBUTED_IPFIX_BAREMETAL')
        self.distributed_ipfix_baremetal = attributes[:'DISTRIBUTED_IPFIX_BAREMETAL']
      else
        self.distributed_ipfix_baremetal = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'DISTRIBUTED_IDPS')
        self.distributed_idps = attributes[:'DISTRIBUTED_IDPS']
      else
        self.distributed_idps = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'DISTRIBUTED_MPS')
        self.distributed_mps = attributes[:'DISTRIBUTED_MPS']
      else
        self.distributed_mps = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'GATEWAY_FIREWALL')
        self.gateway_firewall = attributes[:'GATEWAY_FIREWALL']
      else
        self.gateway_firewall = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'GATEWAY_TLS')
        self.gateway_tls = attributes[:'GATEWAY_TLS']
      else
        self.gateway_tls = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'GATEWAY_IDPS')
        self.gateway_idps = attributes[:'GATEWAY_IDPS']
      else
        self.gateway_idps = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'GATEWAY_MPS')
        self.gateway_mps = attributes[:'GATEWAY_MPS']
      else
        self.gateway_mps = 'UNAVAILABLE'
      end

      if attributes.has_key?(:'NETWORK_DETECTION_RESPONSE')
        self.network_detection_response = attributes[:'NETWORK_DETECTION_RESPONSE']
      else
        self.network_detection_response = 'UNAVAILABLE'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          distributed_firewall == o.distributed_firewall &&
          distributed_baremetal == o.distributed_baremetal &&
          distributed_intelligence == o.distributed_intelligence &&
          distributed_intelligence_baremetal == o.distributed_intelligence_baremetal &&
          distributed_ipfix == o.distributed_ipfix &&
          distributed_ipfix_baremetal == o.distributed_ipfix_baremetal &&
          distributed_idps == o.distributed_idps &&
          distributed_mps == o.distributed_mps &&
          gateway_firewall == o.gateway_firewall &&
          gateway_tls == o.gateway_tls &&
          gateway_idps == o.gateway_idps &&
          gateway_mps == o.gateway_mps &&
          network_detection_response == o.network_detection_response
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [distributed_firewall, distributed_baremetal, distributed_intelligence, distributed_intelligence_baremetal, distributed_ipfix, distributed_ipfix_baremetal, distributed_idps, distributed_mps, gateway_firewall, gateway_tls, gateway_idps, gateway_mps, network_detection_response].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
