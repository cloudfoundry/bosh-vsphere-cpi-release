=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # single edge TN switch specification
  class PolicyEdgeTransportNodeSwitch
    # If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given edge transport node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness. 
    attr_accessor :switch_name

    # switch profiles bound to this edge Tn switch. If a profile path is not provided for any HostSwitchProfileType that is supported by the transport node, the corresponding default profile will be bound to the edge Tn switch. 
    attr_accessor :profile_paths

    # Overlay transport zone path for switch configuration
    attr_accessor :overlay_transport_zone_paths

    # Vlan transport zone paths for switch configuration
    attr_accessor :vlan_transport_zone_paths

    # Physical NICs connected to the edge Tn switch
    attr_accessor :pnics

    # Edge Tn Switch tunnel configuration
    attr_accessor :tunnel_endpoints

    # This should be configured only on a single edge switch.  This configuration will be used by overlay traffic that is meant to be sent between NSX inter site domains. 
    attr_accessor :remote_tunnel_endpoint

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'switch_name' => :'switch_name',
        :'profile_paths' => :'profile_paths',
        :'overlay_transport_zone_paths' => :'overlay_transport_zone_paths',
        :'vlan_transport_zone_paths' => :'vlan_transport_zone_paths',
        :'pnics' => :'pnics',
        :'tunnel_endpoints' => :'tunnel_endpoints',
        :'remote_tunnel_endpoint' => :'remote_tunnel_endpoint'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'switch_name' => :'String',
        :'profile_paths' => :'Array<PolicyEdgeTransportNodeSwitchProfileTypePathEntry>',
        :'overlay_transport_zone_paths' => :'Array<String>',
        :'vlan_transport_zone_paths' => :'Array<String>',
        :'pnics' => :'Array<PolicyEdgeTransportNodePnic>',
        :'tunnel_endpoints' => :'Array<PolicyEdgeTransportNodeSwitchTunnelEndPoint>',
        :'remote_tunnel_endpoint' => :'Array<PolicyEdgeTransportNodeRtepConfig>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'switch_name')
        self.switch_name = attributes[:'switch_name']
      else
        self.switch_name = 'nsxDefaultHostSwitch'
      end

      if attributes.has_key?(:'profile_paths')
        if (value = attributes[:'profile_paths']).is_a?(Array)
          self.profile_paths = value
        end
      end

      if attributes.has_key?(:'overlay_transport_zone_paths')
        if (value = attributes[:'overlay_transport_zone_paths']).is_a?(Array)
          self.overlay_transport_zone_paths = value
        end
      end

      if attributes.has_key?(:'vlan_transport_zone_paths')
        if (value = attributes[:'vlan_transport_zone_paths']).is_a?(Array)
          self.vlan_transport_zone_paths = value
        end
      end

      if attributes.has_key?(:'pnics')
        if (value = attributes[:'pnics']).is_a?(Array)
          self.pnics = value
        end
      end

      if attributes.has_key?(:'tunnel_endpoints')
        if (value = attributes[:'tunnel_endpoints']).is_a?(Array)
          self.tunnel_endpoints = value
        end
      end

      if attributes.has_key?(:'remote_tunnel_endpoint')
        if (value = attributes[:'remote_tunnel_endpoint']).is_a?(Array)
          self.remote_tunnel_endpoint = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @pnics.nil?
        invalid_properties.push('invalid value for "pnics", pnics cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @pnics.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          switch_name == o.switch_name &&
          profile_paths == o.profile_paths &&
          overlay_transport_zone_paths == o.overlay_transport_zone_paths &&
          vlan_transport_zone_paths == o.vlan_transport_zone_paths &&
          pnics == o.pnics &&
          tunnel_endpoints == o.tunnel_endpoints &&
          remote_tunnel_endpoint == o.remote_tunnel_endpoint
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [switch_name, profile_paths, overlay_transport_zone_paths, vlan_transport_zone_paths, pnics, tunnel_endpoints, remote_tunnel_endpoint].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
