=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class AgentStatus
    # Agent status
    attr_accessor :status

    # Agent name
    attr_accessor :name

    # Describe what makes the status not UP
    attr_accessor :status_description

    # Timestamp of the last status change, in epoch milliseconds
    attr_accessor :last_status_changed_time

    # List of agent subcomponent statuses
    attr_accessor :components

    attr_accessor :resource_usage

    # Periodically collected critical health metrics.
    attr_accessor :health_metrics

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'name' => :'name',
        :'status_description' => :'status_description',
        :'last_status_changed_time' => :'last_status_changed_time',
        :'components' => :'components',
        :'resource_usage' => :'resource_usage',
        :'health_metrics' => :'health_metrics'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'status' => :'String',
        :'name' => :'String',
        :'status_description' => :'String',
        :'last_status_changed_time' => :'Integer',
        :'components' => :'Array<AgentSubStatus>',
        :'resource_usage' => :'AgentResource',
        :'health_metrics' => :'Array<ComponentHealthMetric>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'status_description')
        self.status_description = attributes[:'status_description']
      end

      if attributes.has_key?(:'last_status_changed_time')
        self.last_status_changed_time = attributes[:'last_status_changed_time']
      end

      if attributes.has_key?(:'components')
        if (value = attributes[:'components']).is_a?(Array)
          self.components = value
        end
      end

      if attributes.has_key?(:'resource_usage')
        self.resource_usage = attributes[:'resource_usage']
      end

      if attributes.has_key?(:'health_metrics')
        if (value = attributes[:'health_metrics']).is_a?(Array)
          self.health_metrics = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['UP', 'DOWN', 'UNKNOWN', 'DEGRADED'])
      return false unless status_validator.valid?(@status)
      name_validator = EnumAttributeValidator.new('String', ['NSX_AGENT', 'NSX_OPSAGENT', 'NSX_CFGAGENT', 'NSX_NESTDB', 'NSX_EXPORTER', 'NSX_VDPI', 'NSX_VDL2', 'NSX_SWSEC', 'NSX_OBSRV', 'NSX_KCP', 'NSX_FC', 'NSX_VSWITCH', 'NSX_VDR', 'NSX_ENS', 'NSX_PROXY', 'NSX_PLATFORM_CLIENT', 'NSX_SHA'])
      return false unless name_validator.valid?(@name)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['UP', 'DOWN', 'UNKNOWN', 'DEGRADED'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(name)
      validator = EnumAttributeValidator.new('String', ['NSX_AGENT', 'NSX_OPSAGENT', 'NSX_CFGAGENT', 'NSX_NESTDB', 'NSX_EXPORTER', 'NSX_VDPI', 'NSX_VDL2', 'NSX_SWSEC', 'NSX_OBSRV', 'NSX_KCP', 'NSX_FC', 'NSX_VSWITCH', 'NSX_VDR', 'NSX_ENS', 'NSX_PROXY', 'NSX_PLATFORM_CLIENT', 'NSX_SHA'])
      unless validator.valid?(name)
        fail ArgumentError, 'invalid value for "name", must be one of #{validator.allowable_values}.'
      end
      @name = name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          name == o.name &&
          status_description == o.status_description &&
          last_status_changed_time == o.last_status_changed_time &&
          components == o.components &&
          resource_usage == o.resource_usage &&
          health_metrics == o.health_metrics
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [status, name, status_description, last_status_changed_time, components, resource_usage, health_metrics].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
