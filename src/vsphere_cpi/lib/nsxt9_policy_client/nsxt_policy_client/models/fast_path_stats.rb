=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class FastPathStats
    # Num of flow tables on the host.
    attr_accessor :num_flow_tables

    # The number of flow table entries in a flow table.
    attr_accessor :flow_table_size

    # Total number of flows in all flow tables.
    attr_accessor :num_flows

    # Total number of flows created.
    attr_accessor :num_flows_created

    # Number of flow hits.
    attr_accessor :hits

    # Packets that are processed by slowpath because of a flow miss. This has no overlap with the slowpath counters.
    attr_accessor :miss

    # Packets that are always targeted to be processed by slowpath such as broadcast/multicast packets.
    attr_accessor :slowpath

    # The number of flow insertion failures.
    attr_accessor :insertion_errors

    # The number of flow tables in which 95% of entries are filled.
    attr_accessor :flow_table_occupancy_95_pct

    # The number of flow tables in which 90-95% of entries are filled.
    attr_accessor :flow_table_occupancy_90_pct

    # The number of flow tables in which 75-90% of entries are filled.
    attr_accessor :flow_table_occupancy_75_pct

    # The number of flow tables in which 50-75% of entries are filled.
    attr_accessor :flow_table_occupancy_50_pct

    # The number of flow tables in which 25-50% of entries are filled.
    attr_accessor :flow_table_occupancy_25_pct

    # The number of flow tables in which up to 25% of entries are filled.
    attr_accessor :flow_table_occupancy_0_pct

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'num_flow_tables' => :'num_flow_tables',
        :'flow_table_size' => :'flow_table_size',
        :'num_flows' => :'num_flows',
        :'num_flows_created' => :'num_flows_created',
        :'hits' => :'hits',
        :'miss' => :'miss',
        :'slowpath' => :'slowpath',
        :'insertion_errors' => :'insertion_errors',
        :'flow_table_occupancy_95_pct' => :'flow_table_occupancy_95_pct',
        :'flow_table_occupancy_90_pct' => :'flow_table_occupancy_90_pct',
        :'flow_table_occupancy_75_pct' => :'flow_table_occupancy_75_pct',
        :'flow_table_occupancy_50_pct' => :'flow_table_occupancy_50_pct',
        :'flow_table_occupancy_25_pct' => :'flow_table_occupancy_25_pct',
        :'flow_table_occupancy_0_pct' => :'flow_table_occupancy_0_pct'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'num_flow_tables' => :'Integer',
        :'flow_table_size' => :'Integer',
        :'num_flows' => :'Integer',
        :'num_flows_created' => :'Integer',
        :'hits' => :'Integer',
        :'miss' => :'Integer',
        :'slowpath' => :'Integer',
        :'insertion_errors' => :'Integer',
        :'flow_table_occupancy_95_pct' => :'Integer',
        :'flow_table_occupancy_90_pct' => :'Integer',
        :'flow_table_occupancy_75_pct' => :'Integer',
        :'flow_table_occupancy_50_pct' => :'Integer',
        :'flow_table_occupancy_25_pct' => :'Integer',
        :'flow_table_occupancy_0_pct' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'num_flow_tables')
        self.num_flow_tables = attributes[:'num_flow_tables']
      end

      if attributes.has_key?(:'flow_table_size')
        self.flow_table_size = attributes[:'flow_table_size']
      end

      if attributes.has_key?(:'num_flows')
        self.num_flows = attributes[:'num_flows']
      end

      if attributes.has_key?(:'num_flows_created')
        self.num_flows_created = attributes[:'num_flows_created']
      end

      if attributes.has_key?(:'hits')
        self.hits = attributes[:'hits']
      end

      if attributes.has_key?(:'miss')
        self.miss = attributes[:'miss']
      end

      if attributes.has_key?(:'slowpath')
        self.slowpath = attributes[:'slowpath']
      end

      if attributes.has_key?(:'insertion_errors')
        self.insertion_errors = attributes[:'insertion_errors']
      end

      if attributes.has_key?(:'flow_table_occupancy_95_pct')
        self.flow_table_occupancy_95_pct = attributes[:'flow_table_occupancy_95_pct']
      end

      if attributes.has_key?(:'flow_table_occupancy_90_pct')
        self.flow_table_occupancy_90_pct = attributes[:'flow_table_occupancy_90_pct']
      end

      if attributes.has_key?(:'flow_table_occupancy_75_pct')
        self.flow_table_occupancy_75_pct = attributes[:'flow_table_occupancy_75_pct']
      end

      if attributes.has_key?(:'flow_table_occupancy_50_pct')
        self.flow_table_occupancy_50_pct = attributes[:'flow_table_occupancy_50_pct']
      end

      if attributes.has_key?(:'flow_table_occupancy_25_pct')
        self.flow_table_occupancy_25_pct = attributes[:'flow_table_occupancy_25_pct']
      end

      if attributes.has_key?(:'flow_table_occupancy_0_pct')
        self.flow_table_occupancy_0_pct = attributes[:'flow_table_occupancy_0_pct']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          num_flow_tables == o.num_flow_tables &&
          flow_table_size == o.flow_table_size &&
          num_flows == o.num_flows &&
          num_flows_created == o.num_flows_created &&
          hits == o.hits &&
          miss == o.miss &&
          slowpath == o.slowpath &&
          insertion_errors == o.insertion_errors &&
          flow_table_occupancy_95_pct == o.flow_table_occupancy_95_pct &&
          flow_table_occupancy_90_pct == o.flow_table_occupancy_90_pct &&
          flow_table_occupancy_75_pct == o.flow_table_occupancy_75_pct &&
          flow_table_occupancy_50_pct == o.flow_table_occupancy_50_pct &&
          flow_table_occupancy_25_pct == o.flow_table_occupancy_25_pct &&
          flow_table_occupancy_0_pct == o.flow_table_occupancy_0_pct
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [num_flow_tables, flow_table_size, num_flows, num_flows_created, hits, miss, slowpath, insertion_errors, flow_table_occupancy_95_pct, flow_table_occupancy_90_pct, flow_table_occupancy_75_pct, flow_table_occupancy_50_pct, flow_table_occupancy_25_pct, flow_table_occupancy_0_pct].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
