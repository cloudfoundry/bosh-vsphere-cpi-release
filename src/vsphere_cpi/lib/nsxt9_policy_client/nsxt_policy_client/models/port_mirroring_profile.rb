=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Mirrors Data from source to destination
  class PortMirroringProfile
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    # Schema for this resource
    attr_accessor :_schema

    # The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.
    attr_accessor :_revision

    # The type of this resource.
    attr_accessor :resource_type

    # ID of the user who created this resource
    attr_accessor :_create_user

    # Timestamp of resource creation
    attr_accessor :_create_time

    # ID of the user who last modified this resource
    attr_accessor :_last_modified_user

    # Timestamp of last modification
    attr_accessor :_last_modified_time

    # Indicates system owned resource
    attr_accessor :_system_owned

    # Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity. 
    attr_accessor :_protection

    # Unique identifier of this resource
    attr_accessor :id

    # Defaults to ID if not set
    attr_accessor :display_name

    # Description of this resource
    attr_accessor :description

    # Opaque identifiers meaningful to the API user
    attr_accessor :tags

    # Absolute path of this object
    attr_accessor :path

    # Path relative from its parent
    attr_accessor :relative_path

    # Path of its parent
    attr_accessor :parent_path

    # This path is populated only in case of multi-site scenario. Currently it is supported only for LM objects. When LM is onboarded to multi-site platform like NAPP or GM, remote_path will be set to the globally unique path across multi-site topology . It is generated based on local site-name and uses /org tree namespace. Note: It is populated only for LM objects. Not supported on the GM. 
    attr_accessor :remote_path

    # This is a UUID generated by the GM/LM to uniquely identify entities in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites. 
    attr_accessor :unique_id

    # This is a UUID generated by the system for realizing the entity object. In most cases this should be same as 'unique_id' of the entity. However, in some cases this can be different because of entities have migrated their unique identifier to NSX Policy intent objects later in the timeline and did not use unique_id for realization. Realization id is helpful for users to debug data path to correlate the configuration with corresponding intent. 
    attr_accessor :realization_id

    # This is a UUID generated by the system for knowing who owns this object. This is used in NSX+. 
    attr_accessor :owner_id

    # This is a UUID generated by the system for knowing which site owns an object. This is used in NSX+. 
    attr_accessor :origin_site_id

    # Subtree for this type within policy tree containing nested elements. Note that  this type is applicable to be used in Hierarchical API only. 
    attr_accessor :children

    # Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object get deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects. 
    attr_accessor :marked_for_delete

    # Global intent objects cannot be modified locally by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties. 
    attr_accessor :overridden

    # Data from source group will be copied to members of destination group. Only IPSET group and group with membership criteria VM is supported. IPSET group allows only three ip's. 
    attr_accessor :destination_group

    # Port mirroring profile direction
    attr_accessor :direction

    # If this property is set, the packet will be truncated to the provided length. If this property is unset, entire packet will be mirrored. 
    attr_accessor :snap_length

    # User can provide Mirror Destination type e.g GRE, ERSPAN_TWO or ERSPAN_THREE.If profile type is REMOTE_L3_SPAN, encapsulation type is used else ignored.
    attr_accessor :encapsulation_type

    # User-configurable 32-bit key only for GRE
    attr_accessor :gre_key

    # Used by physical switch for the mirror traffic forwarding. Must be provided and only effective when encapsulation type is ERSPAN type II or type III. 
    attr_accessor :erspan_id

    # Allows user to select type of port mirroring session.
    attr_accessor :profile_type

    # User can provide Mirror stack or Default stack to send mirror traffic. If profile type is REMOTE_L3_SPAN, tcp_ip_stack type is used else ignored.
    attr_accessor :tcp_ip_stack

    # An array of 5-tuples used to filter packets for the mirror session. If not provided, all the packets will be mirrored. This field is with filter_action which defines whether packets matching the filter will be included or excluded
    attr_accessor :port_mirroring_filters

    # If set to INCLUDE, packets matching all filters will be mirrored. If set to EXCLUDE, packets NOT matching any filters will be mirrored. 
    attr_accessor :filter_action

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'_revision' => :'_revision',
        :'resource_type' => :'resource_type',
        :'_create_user' => :'_create_user',
        :'_create_time' => :'_create_time',
        :'_last_modified_user' => :'_last_modified_user',
        :'_last_modified_time' => :'_last_modified_time',
        :'_system_owned' => :'_system_owned',
        :'_protection' => :'_protection',
        :'id' => :'id',
        :'display_name' => :'display_name',
        :'description' => :'description',
        :'tags' => :'tags',
        :'path' => :'path',
        :'relative_path' => :'relative_path',
        :'parent_path' => :'parent_path',
        :'remote_path' => :'remote_path',
        :'unique_id' => :'unique_id',
        :'realization_id' => :'realization_id',
        :'owner_id' => :'owner_id',
        :'origin_site_id' => :'origin_site_id',
        :'children' => :'children',
        :'marked_for_delete' => :'marked_for_delete',
        :'overridden' => :'overridden',
        :'destination_group' => :'destination_group',
        :'direction' => :'direction',
        :'snap_length' => :'snap_length',
        :'encapsulation_type' => :'encapsulation_type',
        :'gre_key' => :'gre_key',
        :'erspan_id' => :'erspan_id',
        :'profile_type' => :'profile_type',
        :'tcp_ip_stack' => :'tcp_ip_stack',
        :'port_mirroring_filters' => :'port_mirroring_filters',
        :'filter_action' => :'filter_action'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'_revision' => :'Integer',
        :'resource_type' => :'String',
        :'_create_user' => :'String',
        :'_create_time' => :'Integer',
        :'_last_modified_user' => :'String',
        :'_last_modified_time' => :'Integer',
        :'_system_owned' => :'BOOLEAN',
        :'_protection' => :'String',
        :'id' => :'String',
        :'display_name' => :'String',
        :'description' => :'String',
        :'tags' => :'Array<Tag>',
        :'path' => :'String',
        :'relative_path' => :'String',
        :'parent_path' => :'String',
        :'remote_path' => :'String',
        :'unique_id' => :'String',
        :'realization_id' => :'String',
        :'owner_id' => :'String',
        :'origin_site_id' => :'String',
        :'children' => :'Array<ChildPolicyConfigResource>',
        :'marked_for_delete' => :'BOOLEAN',
        :'overridden' => :'BOOLEAN',
        :'destination_group' => :'String',
        :'direction' => :'String',
        :'snap_length' => :'Integer',
        :'encapsulation_type' => :'String',
        :'gre_key' => :'Integer',
        :'erspan_id' => :'Integer',
        :'profile_type' => :'String',
        :'tcp_ip_stack' => :'String',
        :'port_mirroring_filters' => :'Array<PortMirrorFilter>',
        :'filter_action' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'_revision')
        self._revision = attributes[:'_revision']
      end

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'_create_user')
        self._create_user = attributes[:'_create_user']
      end

      if attributes.has_key?(:'_create_time')
        self._create_time = attributes[:'_create_time']
      end

      if attributes.has_key?(:'_last_modified_user')
        self._last_modified_user = attributes[:'_last_modified_user']
      end

      if attributes.has_key?(:'_last_modified_time')
        self._last_modified_time = attributes[:'_last_modified_time']
      end

      if attributes.has_key?(:'_system_owned')
        self._system_owned = attributes[:'_system_owned']
      end

      if attributes.has_key?(:'_protection')
        self._protection = attributes[:'_protection']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.has_key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.has_key?(:'relative_path')
        self.relative_path = attributes[:'relative_path']
      end

      if attributes.has_key?(:'parent_path')
        self.parent_path = attributes[:'parent_path']
      end

      if attributes.has_key?(:'remote_path')
        self.remote_path = attributes[:'remote_path']
      end

      if attributes.has_key?(:'unique_id')
        self.unique_id = attributes[:'unique_id']
      end

      if attributes.has_key?(:'realization_id')
        self.realization_id = attributes[:'realization_id']
      end

      if attributes.has_key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

      if attributes.has_key?(:'origin_site_id')
        self.origin_site_id = attributes[:'origin_site_id']
      end

      if attributes.has_key?(:'children')
        if (value = attributes[:'children']).is_a?(Array)
          self.children = value
        end
      end

      if attributes.has_key?(:'marked_for_delete')
        self.marked_for_delete = attributes[:'marked_for_delete']
      else
        self.marked_for_delete = false
      end

      if attributes.has_key?(:'overridden')
        self.overridden = attributes[:'overridden']
      else
        self.overridden = false
      end

      if attributes.has_key?(:'destination_group')
        self.destination_group = attributes[:'destination_group']
      end

      if attributes.has_key?(:'direction')
        self.direction = attributes[:'direction']
      else
        self.direction = 'BIDIRECTIONAL'
      end

      if attributes.has_key?(:'snap_length')
        self.snap_length = attributes[:'snap_length']
      end

      if attributes.has_key?(:'encapsulation_type')
        self.encapsulation_type = attributes[:'encapsulation_type']
      else
        self.encapsulation_type = 'GRE'
      end

      if attributes.has_key?(:'gre_key')
        self.gre_key = attributes[:'gre_key']
      else
        self.gre_key = 0
      end

      if attributes.has_key?(:'erspan_id')
        self.erspan_id = attributes[:'erspan_id']
      else
        self.erspan_id = 0
      end

      if attributes.has_key?(:'profile_type')
        self.profile_type = attributes[:'profile_type']
      else
        self.profile_type = 'REMOTE_L3_SPAN'
      end

      if attributes.has_key?(:'tcp_ip_stack')
        self.tcp_ip_stack = attributes[:'tcp_ip_stack']
      else
        self.tcp_ip_stack = 'Default'
      end

      if attributes.has_key?(:'port_mirroring_filters')
        if (value = attributes[:'port_mirroring_filters']).is_a?(Array)
          self.port_mirroring_filters = value
        end
      end

      if attributes.has_key?(:'filter_action')
        self.filter_action = attributes[:'filter_action']
      else
        self.filter_action = 'INCLUDE'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@display_name.nil? && @display_name.to_s.length > 255
        invalid_properties.push('invalid value for "display_name", the character length must be smaller than or equal to 255.')
      end

      if !@description.nil? && @description.to_s.length > 1024
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 1024.')
      end

      if @destination_group.nil?
        invalid_properties.push('invalid value for "destination_group", destination_group cannot be nil.')
      end

      if !@snap_length.nil? && @snap_length > 65535
        invalid_properties.push('invalid value for "snap_length", must be smaller than or equal to 65535.')
      end

      if !@snap_length.nil? && @snap_length < 60
        invalid_properties.push('invalid value for "snap_length", must be greater than or equal to 60.')
      end

      if !@gre_key.nil? && @gre_key < 0
        invalid_properties.push('invalid value for "gre_key", must be greater than or equal to 0.')
      end

      if !@erspan_id.nil? && @erspan_id > 1023
        invalid_properties.push('invalid value for "erspan_id", must be smaller than or equal to 1023.')
      end

      if !@erspan_id.nil? && @erspan_id < 0
        invalid_properties.push('invalid value for "erspan_id", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@display_name.nil? && @display_name.to_s.length > 255
      return false if !@description.nil? && @description.to_s.length > 1024
      return false if @destination_group.nil?
      direction_validator = EnumAttributeValidator.new('String', ['INGRESS', 'EGRESS', 'BIDIRECTIONAL'])
      return false unless direction_validator.valid?(@direction)
      return false if !@snap_length.nil? && @snap_length > 65535
      return false if !@snap_length.nil? && @snap_length < 60
      encapsulation_type_validator = EnumAttributeValidator.new('String', ['GRE', 'ERSPAN_TWO', 'ERSPAN_THREE'])
      return false unless encapsulation_type_validator.valid?(@encapsulation_type)
      return false if !@gre_key.nil? && @gre_key < 0
      return false if !@erspan_id.nil? && @erspan_id > 1023
      return false if !@erspan_id.nil? && @erspan_id < 0
      profile_type_validator = EnumAttributeValidator.new('String', ['REMOTE_L3_SPAN', 'LOGICAL_SPAN'])
      return false unless profile_type_validator.valid?(@profile_type)
      tcp_ip_stack_validator = EnumAttributeValidator.new('String', ['Default', 'Mirror'])
      return false unless tcp_ip_stack_validator.valid?(@tcp_ip_stack)
      filter_action_validator = EnumAttributeValidator.new('String', ['INCLUDE', 'EXCLUDE'])
      return false unless filter_action_validator.valid?(@filter_action)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if !display_name.nil? && display_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "display_name", the character length must be smaller than or equal to 255.'
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 1024
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 1024.'
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(direction)
      validator = EnumAttributeValidator.new('String', ['INGRESS', 'EGRESS', 'BIDIRECTIONAL'])
      unless validator.valid?(direction)
        fail ArgumentError, 'invalid value for "direction", must be one of #{validator.allowable_values}.'
      end
      @direction = direction
    end

    # Custom attribute writer method with validation
    # @param [Object] snap_length Value to be assigned
    def snap_length=(snap_length)
      if !snap_length.nil? && snap_length > 65535
        fail ArgumentError, 'invalid value for "snap_length", must be smaller than or equal to 65535.'
      end

      if !snap_length.nil? && snap_length < 60
        fail ArgumentError, 'invalid value for "snap_length", must be greater than or equal to 60.'
      end

      @snap_length = snap_length
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] encapsulation_type Object to be assigned
    def encapsulation_type=(encapsulation_type)
      validator = EnumAttributeValidator.new('String', ['GRE', 'ERSPAN_TWO', 'ERSPAN_THREE'])
      unless validator.valid?(encapsulation_type)
        fail ArgumentError, 'invalid value for "encapsulation_type", must be one of #{validator.allowable_values}.'
      end
      @encapsulation_type = encapsulation_type
    end

    # Custom attribute writer method with validation
    # @param [Object] gre_key Value to be assigned
    def gre_key=(gre_key)
      if !gre_key.nil? && gre_key < 0
        fail ArgumentError, 'invalid value for "gre_key", must be greater than or equal to 0.'
      end

      @gre_key = gre_key
    end

    # Custom attribute writer method with validation
    # @param [Object] erspan_id Value to be assigned
    def erspan_id=(erspan_id)
      if !erspan_id.nil? && erspan_id > 1023
        fail ArgumentError, 'invalid value for "erspan_id", must be smaller than or equal to 1023.'
      end

      if !erspan_id.nil? && erspan_id < 0
        fail ArgumentError, 'invalid value for "erspan_id", must be greater than or equal to 0.'
      end

      @erspan_id = erspan_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] profile_type Object to be assigned
    def profile_type=(profile_type)
      validator = EnumAttributeValidator.new('String', ['REMOTE_L3_SPAN', 'LOGICAL_SPAN'])
      unless validator.valid?(profile_type)
        fail ArgumentError, 'invalid value for "profile_type", must be one of #{validator.allowable_values}.'
      end
      @profile_type = profile_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tcp_ip_stack Object to be assigned
    def tcp_ip_stack=(tcp_ip_stack)
      validator = EnumAttributeValidator.new('String', ['Default', 'Mirror'])
      unless validator.valid?(tcp_ip_stack)
        fail ArgumentError, 'invalid value for "tcp_ip_stack", must be one of #{validator.allowable_values}.'
      end
      @tcp_ip_stack = tcp_ip_stack
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] filter_action Object to be assigned
    def filter_action=(filter_action)
      validator = EnumAttributeValidator.new('String', ['INCLUDE', 'EXCLUDE'])
      unless validator.valid?(filter_action)
        fail ArgumentError, 'invalid value for "filter_action", must be one of #{validator.allowable_values}.'
      end
      @filter_action = filter_action
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          _revision == o._revision &&
          resource_type == o.resource_type &&
          _create_user == o._create_user &&
          _create_time == o._create_time &&
          _last_modified_user == o._last_modified_user &&
          _last_modified_time == o._last_modified_time &&
          _system_owned == o._system_owned &&
          _protection == o._protection &&
          id == o.id &&
          display_name == o.display_name &&
          description == o.description &&
          tags == o.tags &&
          path == o.path &&
          relative_path == o.relative_path &&
          parent_path == o.parent_path &&
          remote_path == o.remote_path &&
          unique_id == o.unique_id &&
          realization_id == o.realization_id &&
          owner_id == o.owner_id &&
          origin_site_id == o.origin_site_id &&
          children == o.children &&
          marked_for_delete == o.marked_for_delete &&
          overridden == o.overridden &&
          destination_group == o.destination_group &&
          direction == o.direction &&
          snap_length == o.snap_length &&
          encapsulation_type == o.encapsulation_type &&
          gre_key == o.gre_key &&
          erspan_id == o.erspan_id &&
          profile_type == o.profile_type &&
          tcp_ip_stack == o.tcp_ip_stack &&
          port_mirroring_filters == o.port_mirroring_filters &&
          filter_action == o.filter_action
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, _revision, resource_type, _create_user, _create_time, _last_modified_user, _last_modified_time, _system_owned, _protection, id, display_name, description, tags, path, relative_path, parent_path, remote_path, unique_id, realization_id, owner_id, origin_site_id, children, marked_for_delete, overridden, destination_group, direction, snap_length, encapsulation_type, gre_key, erspan_id, profile_type, tcp_ip_stack, port_mirroring_filters, filter_action].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
