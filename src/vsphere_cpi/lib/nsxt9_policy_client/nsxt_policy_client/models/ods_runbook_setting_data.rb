=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Configuration items for an Online Diagnostic System Runbook. 
  class OdsRunbookSettingData
    # The flag that indicates whether the runbook is enabled. 
    attr_accessor :enabled

    # Timeout of runbook execution in seconds. 
    attr_accessor :timeout

    # Maximum number of runbook executions allowed in a throttling cycle. Runbook execution will be throttled once the threshold is reached. This option does not take effect when the throttling is disabled. 
    attr_accessor :threshold_number

    # Duration of throttling cycle for runbook execution in minutes. It controls the minimum time between execution of a runbook and avoids executing a runbook too frequently in a short time. If the throttling cycle is set to 0, throttling is disabled. 
    attr_accessor :throttle_cycle

    attr_accessor :timeout_range

    attr_accessor :threshold_number_range

    attr_accessor :throttle_cycle_range

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'enabled' => :'enabled',
        :'timeout' => :'timeout',
        :'threshold_number' => :'threshold_number',
        :'throttle_cycle' => :'throttle_cycle',
        :'timeout_range' => :'timeout_range',
        :'threshold_number_range' => :'threshold_number_range',
        :'throttle_cycle_range' => :'throttle_cycle_range'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'enabled' => :'BOOLEAN',
        :'timeout' => :'Integer',
        :'threshold_number' => :'Integer',
        :'throttle_cycle' => :'Integer',
        :'timeout_range' => :'OdsRunbookParameterRange',
        :'threshold_number_range' => :'OdsRunbookParameterRange',
        :'throttle_cycle_range' => :'OdsRunbookParameterRange'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'enabled')
        self.enabled = attributes[:'enabled']
      else
        self.enabled = true
      end

      if attributes.has_key?(:'timeout')
        self.timeout = attributes[:'timeout']
      end

      if attributes.has_key?(:'threshold_number')
        self.threshold_number = attributes[:'threshold_number']
      end

      if attributes.has_key?(:'throttle_cycle')
        self.throttle_cycle = attributes[:'throttle_cycle']
      end

      if attributes.has_key?(:'timeout_range')
        self.timeout_range = attributes[:'timeout_range']
      end

      if attributes.has_key?(:'threshold_number_range')
        self.threshold_number_range = attributes[:'threshold_number_range']
      end

      if attributes.has_key?(:'throttle_cycle_range')
        self.throttle_cycle_range = attributes[:'throttle_cycle_range']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@timeout.nil? && @timeout > 86400
        invalid_properties.push('invalid value for "timeout", must be smaller than or equal to 86400.')
      end

      if !@timeout.nil? && @timeout < 1
        invalid_properties.push('invalid value for "timeout", must be greater than or equal to 1.')
      end

      if !@threshold_number.nil? && @threshold_number > 10000
        invalid_properties.push('invalid value for "threshold_number", must be smaller than or equal to 10000.')
      end

      if !@threshold_number.nil? && @threshold_number < 1
        invalid_properties.push('invalid value for "threshold_number", must be greater than or equal to 1.')
      end

      if !@throttle_cycle.nil? && @throttle_cycle > 1440
        invalid_properties.push('invalid value for "throttle_cycle", must be smaller than or equal to 1440.')
      end

      if !@throttle_cycle.nil? && @throttle_cycle < 0
        invalid_properties.push('invalid value for "throttle_cycle", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@timeout.nil? && @timeout > 86400
      return false if !@timeout.nil? && @timeout < 1
      return false if !@threshold_number.nil? && @threshold_number > 10000
      return false if !@threshold_number.nil? && @threshold_number < 1
      return false if !@throttle_cycle.nil? && @throttle_cycle > 1440
      return false if !@throttle_cycle.nil? && @throttle_cycle < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] timeout Value to be assigned
    def timeout=(timeout)
      if !timeout.nil? && timeout > 86400
        fail ArgumentError, 'invalid value for "timeout", must be smaller than or equal to 86400.'
      end

      if !timeout.nil? && timeout < 1
        fail ArgumentError, 'invalid value for "timeout", must be greater than or equal to 1.'
      end

      @timeout = timeout
    end

    # Custom attribute writer method with validation
    # @param [Object] threshold_number Value to be assigned
    def threshold_number=(threshold_number)
      if !threshold_number.nil? && threshold_number > 10000
        fail ArgumentError, 'invalid value for "threshold_number", must be smaller than or equal to 10000.'
      end

      if !threshold_number.nil? && threshold_number < 1
        fail ArgumentError, 'invalid value for "threshold_number", must be greater than or equal to 1.'
      end

      @threshold_number = threshold_number
    end

    # Custom attribute writer method with validation
    # @param [Object] throttle_cycle Value to be assigned
    def throttle_cycle=(throttle_cycle)
      if !throttle_cycle.nil? && throttle_cycle > 1440
        fail ArgumentError, 'invalid value for "throttle_cycle", must be smaller than or equal to 1440.'
      end

      if !throttle_cycle.nil? && throttle_cycle < 0
        fail ArgumentError, 'invalid value for "throttle_cycle", must be greater than or equal to 0.'
      end

      @throttle_cycle = throttle_cycle
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enabled == o.enabled &&
          timeout == o.timeout &&
          threshold_number == o.threshold_number &&
          throttle_cycle == o.throttle_cycle &&
          timeout_range == o.timeout_range &&
          threshold_number_range == o.threshold_number_range &&
          throttle_cycle_range == o.throttle_cycle_range
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [enabled, timeout, threshold_number, throttle_cycle, timeout_range, threshold_number_range, throttle_cycle_range].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
