=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Node network interface properties
  class NodeInterfaceProperties
    # Interface administration status
    attr_accessor :admin_status

    # Interface ID
    attr_accessor :interface_id

    # UUID of the interface
    attr_accessor :interface_uuid

    # Interface administration status
    attr_accessor :link_status

    # Interface MTU
    attr_accessor :mtu

    # Interface Type
    attr_accessor :interface_type

    # Connected switch
    attr_accessor :connected_switch

    # Type of switch associated with the interface.
    attr_accessor :connected_switch_type

    # IP Alias
    attr_accessor :interface_alias

    # Source of status data
    attr_accessor :source

    # Interface capability for Enhanced Networking Stack
    attr_accessor :ens_capable

    # Indicates whether interface is enabled for Enhanced Networking Stack
    attr_accessor :ens_enabled

    # This boolean property describes if network interface is capable for Enhanced Networking Stack interrupt
    attr_accessor :ens_interrupt_capable

    # This boolean property describes if network interface is enabled for Enhanced Networking Stack interrupt
    attr_accessor :ens_interrupt_enabled

    # Indicates whether interface is managed by the host
    attr_accessor :host_managed

    # LPort Attachment Id assigned to VIRTUAL network interface of a node
    attr_accessor :lport_attachment_id

    # Indicates whether backing of VIRTUAL network interface is managed by NSX
    attr_accessor :backing_nsx_managed

    # Device name.
    attr_accessor :device

    # Driver name.
    attr_accessor :driver

    # Device key.
    attr_accessor :key

    # PCI device.
    attr_accessor :pci

    # If interface is backed by data processing unit (DPU) and state of DPU is MANAGED, then this property is true. 
    attr_accessor :dpu_backed

    # Interface speed in Mbps.
    attr_accessor :speed

    # Data processing unit ID if the interface is backed by a DPU.
    attr_accessor :dpu_id

    # This property shows the current state of virtual tunnel end point (VTEP). If not in NORMAL state, then overlay workloads using this TEP will face network outage. In those cases, check if TEP has valid IP or any other underlay connectivity issues, and enable TEP HA to failover workloads to other healthy TEPs. Note that MAINTENANCE state is triggered by user and TEP will be disabled. 
    attr_accessor :state

    # Specifies the Data processing unit dpu alias(device alias) if the interface is backed by a DPU.
    attr_accessor :dpu_alias

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'admin_status' => :'admin_status',
        :'interface_id' => :'interface_id',
        :'interface_uuid' => :'interface_uuid',
        :'link_status' => :'link_status',
        :'mtu' => :'mtu',
        :'interface_type' => :'interface_type',
        :'connected_switch' => :'connected_switch',
        :'connected_switch_type' => :'connected_switch_type',
        :'interface_alias' => :'interface_alias',
        :'source' => :'source',
        :'ens_capable' => :'ens_capable',
        :'ens_enabled' => :'ens_enabled',
        :'ens_interrupt_capable' => :'ens_interrupt_capable',
        :'ens_interrupt_enabled' => :'ens_interrupt_enabled',
        :'host_managed' => :'host_managed',
        :'lport_attachment_id' => :'lport_attachment_id',
        :'backing_nsx_managed' => :'backing_nsx_managed',
        :'device' => :'device',
        :'driver' => :'driver',
        :'key' => :'key',
        :'pci' => :'pci',
        :'dpu_backed' => :'dpu_backed',
        :'speed' => :'speed',
        :'dpu_id' => :'dpu_id',
        :'state' => :'state',
        :'dpu_alias' => :'dpu_alias'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'admin_status' => :'String',
        :'interface_id' => :'String',
        :'interface_uuid' => :'String',
        :'link_status' => :'String',
        :'mtu' => :'Integer',
        :'interface_type' => :'String',
        :'connected_switch' => :'String',
        :'connected_switch_type' => :'String',
        :'interface_alias' => :'Array<NodeInterfaceAlias>',
        :'source' => :'String',
        :'ens_capable' => :'BOOLEAN',
        :'ens_enabled' => :'BOOLEAN',
        :'ens_interrupt_capable' => :'BOOLEAN',
        :'ens_interrupt_enabled' => :'BOOLEAN',
        :'host_managed' => :'BOOLEAN',
        :'lport_attachment_id' => :'String',
        :'backing_nsx_managed' => :'BOOLEAN',
        :'device' => :'String',
        :'driver' => :'String',
        :'key' => :'String',
        :'pci' => :'String',
        :'dpu_backed' => :'BOOLEAN',
        :'speed' => :'Float',
        :'dpu_id' => :'String',
        :'state' => :'String',
        :'dpu_alias' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'admin_status')
        self.admin_status = attributes[:'admin_status']
      end

      if attributes.has_key?(:'interface_id')
        self.interface_id = attributes[:'interface_id']
      end

      if attributes.has_key?(:'interface_uuid')
        self.interface_uuid = attributes[:'interface_uuid']
      end

      if attributes.has_key?(:'link_status')
        self.link_status = attributes[:'link_status']
      end

      if attributes.has_key?(:'mtu')
        self.mtu = attributes[:'mtu']
      end

      if attributes.has_key?(:'interface_type')
        self.interface_type = attributes[:'interface_type']
      end

      if attributes.has_key?(:'connected_switch')
        self.connected_switch = attributes[:'connected_switch']
      end

      if attributes.has_key?(:'connected_switch_type')
        self.connected_switch_type = attributes[:'connected_switch_type']
      end

      if attributes.has_key?(:'interface_alias')
        if (value = attributes[:'interface_alias']).is_a?(Array)
          self.interface_alias = value
        end
      end

      if attributes.has_key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.has_key?(:'ens_capable')
        self.ens_capable = attributes[:'ens_capable']
      end

      if attributes.has_key?(:'ens_enabled')
        self.ens_enabled = attributes[:'ens_enabled']
      end

      if attributes.has_key?(:'ens_interrupt_capable')
        self.ens_interrupt_capable = attributes[:'ens_interrupt_capable']
      end

      if attributes.has_key?(:'ens_interrupt_enabled')
        self.ens_interrupt_enabled = attributes[:'ens_interrupt_enabled']
      end

      if attributes.has_key?(:'host_managed')
        self.host_managed = attributes[:'host_managed']
      end

      if attributes.has_key?(:'lport_attachment_id')
        self.lport_attachment_id = attributes[:'lport_attachment_id']
      end

      if attributes.has_key?(:'backing_nsx_managed')
        self.backing_nsx_managed = attributes[:'backing_nsx_managed']
      end

      if attributes.has_key?(:'device')
        self.device = attributes[:'device']
      end

      if attributes.has_key?(:'driver')
        self.driver = attributes[:'driver']
      end

      if attributes.has_key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.has_key?(:'pci')
        self.pci = attributes[:'pci']
      end

      if attributes.has_key?(:'dpu_backed')
        self.dpu_backed = attributes[:'dpu_backed']
      end

      if attributes.has_key?(:'speed')
        self.speed = attributes[:'speed']
      end

      if attributes.has_key?(:'dpu_id')
        self.dpu_id = attributes[:'dpu_id']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'dpu_alias')
        self.dpu_alias = attributes[:'dpu_alias']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      admin_status_validator = EnumAttributeValidator.new('String', ['UP', 'DOWN'])
      return false unless admin_status_validator.valid?(@admin_status)
      link_status_validator = EnumAttributeValidator.new('String', ['UP', 'DOWN'])
      return false unless link_status_validator.valid?(@link_status)
      interface_type_validator = EnumAttributeValidator.new('String', ['PHYSICAL', 'VIRTUAL', 'BOND', 'TEAMING'])
      return false unless interface_type_validator.valid?(@interface_type)
      connected_switch_type_validator = EnumAttributeValidator.new('String', ['VSS', 'DVS', 'N-VDS'])
      return false unless connected_switch_type_validator.valid?(@connected_switch_type)
      source_validator = EnumAttributeValidator.new('String', ['realtime', 'cached'])
      return false unless source_validator.valid?(@source)
      state_validator = EnumAttributeValidator.new('String', ['INVALID_STATE', 'INIT', 'NORMAL', 'IP_WAITING', 'BFD_DOWN', 'MAINTENANCE'])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] admin_status Object to be assigned
    def admin_status=(admin_status)
      validator = EnumAttributeValidator.new('String', ['UP', 'DOWN'])
      unless validator.valid?(admin_status)
        fail ArgumentError, 'invalid value for "admin_status", must be one of #{validator.allowable_values}.'
      end
      @admin_status = admin_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_status Object to be assigned
    def link_status=(link_status)
      validator = EnumAttributeValidator.new('String', ['UP', 'DOWN'])
      unless validator.valid?(link_status)
        fail ArgumentError, 'invalid value for "link_status", must be one of #{validator.allowable_values}.'
      end
      @link_status = link_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interface_type Object to be assigned
    def interface_type=(interface_type)
      validator = EnumAttributeValidator.new('String', ['PHYSICAL', 'VIRTUAL', 'BOND', 'TEAMING'])
      unless validator.valid?(interface_type)
        fail ArgumentError, 'invalid value for "interface_type", must be one of #{validator.allowable_values}.'
      end
      @interface_type = interface_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] connected_switch_type Object to be assigned
    def connected_switch_type=(connected_switch_type)
      validator = EnumAttributeValidator.new('String', ['VSS', 'DVS', 'N-VDS'])
      unless validator.valid?(connected_switch_type)
        fail ArgumentError, 'invalid value for "connected_switch_type", must be one of #{validator.allowable_values}.'
      end
      @connected_switch_type = connected_switch_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(source)
      validator = EnumAttributeValidator.new('String', ['realtime', 'cached'])
      unless validator.valid?(source)
        fail ArgumentError, 'invalid value for "source", must be one of #{validator.allowable_values}.'
      end
      @source = source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ['INVALID_STATE', 'INIT', 'NORMAL', 'IP_WAITING', 'BFD_DOWN', 'MAINTENANCE'])
      unless validator.valid?(state)
        fail ArgumentError, 'invalid value for "state", must be one of #{validator.allowable_values}.'
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          admin_status == o.admin_status &&
          interface_id == o.interface_id &&
          interface_uuid == o.interface_uuid &&
          link_status == o.link_status &&
          mtu == o.mtu &&
          interface_type == o.interface_type &&
          connected_switch == o.connected_switch &&
          connected_switch_type == o.connected_switch_type &&
          interface_alias == o.interface_alias &&
          source == o.source &&
          ens_capable == o.ens_capable &&
          ens_enabled == o.ens_enabled &&
          ens_interrupt_capable == o.ens_interrupt_capable &&
          ens_interrupt_enabled == o.ens_interrupt_enabled &&
          host_managed == o.host_managed &&
          lport_attachment_id == o.lport_attachment_id &&
          backing_nsx_managed == o.backing_nsx_managed &&
          device == o.device &&
          driver == o.driver &&
          key == o.key &&
          pci == o.pci &&
          dpu_backed == o.dpu_backed &&
          speed == o.speed &&
          dpu_id == o.dpu_id &&
          state == o.state &&
          dpu_alias == o.dpu_alias
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [admin_status, interface_id, interface_uuid, link_status, mtu, interface_type, connected_switch, connected_switch_type, interface_alias, source, ens_capable, ens_enabled, ens_interrupt_capable, ens_interrupt_enabled, host_managed, lport_attachment_id, backing_nsx_managed, device, driver, key, pci, dpu_backed, speed, dpu_id, state, dpu_alias].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
