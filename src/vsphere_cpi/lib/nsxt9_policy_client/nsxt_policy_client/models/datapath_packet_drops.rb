=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class DatapathPacketDrops
    # RX drops at vswtich due to forged mac.
    attr_accessor :hostswitch_received_forged_mac_packet_drops

    # RX Drops at vswitch due to network mismatch.
    attr_accessor :hostswitch_network_mismatch_packet_drops

    # Overlay RX drops.
    attr_accessor :overlay_received_packet_drops

    # Overlay TX drops.
    attr_accessor :overlay_transmitted_packet_drops

    # Overlay uplink RX drops.
    attr_accessor :overlay_uplink_received_packet_drops

    # Overlay uplink TX drops.
    attr_accessor :overlay_uplink_transmitted_packet_drops

    # L3 drops due to reverse path forwarding.
    attr_accessor :l3_reverse_path_forwarding_packet_drops

    # L3 Drops due to no route.
    attr_accessor :l3_no_route_packet_drops

    # L3 Drops due to unreachable neighbor.
    attr_accessor :l3_neighbor_unreachable_packet_drops

    # L3 Drops due to hop limit (TTL).
    attr_accessor :l3_hop_limit_packet_drops

    # Drops due to broadcast rate limiting.
    attr_accessor :broadcast_rate_limiting_packet_drops

    # Drops due to workload DHCP not allowed.
    attr_accessor :workload_dhcp_not_allowed_packet_drops

    # Drops due to spoofguard.
    attr_accessor :spoof_guard_packet_drops

    # Drops due to workload ipv6 router advertisement guard.
    attr_accessor :workload_ipv6_ra_guard_packet_drops

    # Drops due to BPDU filtering.
    attr_accessor :workload_bpdu_filter_packet_drops

    # Firewall total packet drops.
    attr_accessor :firewall_total_packet_drops

    # Drops due to Firewall packet rejects.
    attr_accessor :firewall_packet_rejects

    # Drop due to Firewall detected malformed packet.
    attr_accessor :firewall_malformed_packet_drops

    # Drops due to Firewall detected internal error.
    attr_accessor :firewall_internal_error_packet_drops

    # Drops due to Firewall state table full.
    attr_accessor :firewall_state_table_full_packet_drops

    # Firewall rule drops at RX.
    attr_accessor :firewall_rule_received_packet_drops

    # Firewall rule drops at TX.
    attr_accessor :firewall_rule_transmitted_packet_drops

    # Firewall state check drops.
    attr_accessor :firewall_state_check_packet_drops

    # Firewall flood limit drops.
    attr_accessor :firewall_flood_limit_packet_drops

    # Drops by the Fastpath.
    attr_accessor :fastpath_packet_drops

    # Drops due to parsing errors.
    attr_accessor :packet_parsing_error_drops

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'hostswitch_received_forged_mac_packet_drops' => :'hostswitch_received_forged_mac_packet_drops',
        :'hostswitch_network_mismatch_packet_drops' => :'hostswitch_network_mismatch_packet_drops',
        :'overlay_received_packet_drops' => :'overlay_received_packet_drops',
        :'overlay_transmitted_packet_drops' => :'overlay_transmitted_packet_drops',
        :'overlay_uplink_received_packet_drops' => :'overlay_uplink_received_packet_drops',
        :'overlay_uplink_transmitted_packet_drops' => :'overlay_uplink_transmitted_packet_drops',
        :'l3_reverse_path_forwarding_packet_drops' => :'l3_reverse_path_forwarding_packet_drops',
        :'l3_no_route_packet_drops' => :'l3_no_route_packet_drops',
        :'l3_neighbor_unreachable_packet_drops' => :'l3_neighbor_unreachable_packet_drops',
        :'l3_hop_limit_packet_drops' => :'l3_hop_limit_packet_drops',
        :'broadcast_rate_limiting_packet_drops' => :'broadcast_rate_limiting_packet_drops',
        :'workload_dhcp_not_allowed_packet_drops' => :'workload_dhcp_not_allowed_packet_drops',
        :'spoof_guard_packet_drops' => :'spoof_guard_packet_drops',
        :'workload_ipv6_ra_guard_packet_drops' => :'workload_ipv6_ra_guard_packet_drops',
        :'workload_bpdu_filter_packet_drops' => :'workload_bpdu_filter_packet_drops',
        :'firewall_total_packet_drops' => :'firewall_total_packet_drops',
        :'firewall_packet_rejects' => :'firewall_packet_rejects',
        :'firewall_malformed_packet_drops' => :'firewall_malformed_packet_drops',
        :'firewall_internal_error_packet_drops' => :'firewall_internal_error_packet_drops',
        :'firewall_state_table_full_packet_drops' => :'firewall_state_table_full_packet_drops',
        :'firewall_rule_received_packet_drops' => :'firewall_rule_received_packet_drops',
        :'firewall_rule_transmitted_packet_drops' => :'firewall_rule_transmitted_packet_drops',
        :'firewall_state_check_packet_drops' => :'firewall_state_check_packet_drops',
        :'firewall_flood_limit_packet_drops' => :'firewall_flood_limit_packet_drops',
        :'fastpath_packet_drops' => :'fastpath_packet_drops',
        :'packet_parsing_error_drops' => :'packet_parsing_error_drops'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'hostswitch_received_forged_mac_packet_drops' => :'Integer',
        :'hostswitch_network_mismatch_packet_drops' => :'Integer',
        :'overlay_received_packet_drops' => :'Integer',
        :'overlay_transmitted_packet_drops' => :'Integer',
        :'overlay_uplink_received_packet_drops' => :'Integer',
        :'overlay_uplink_transmitted_packet_drops' => :'Integer',
        :'l3_reverse_path_forwarding_packet_drops' => :'Integer',
        :'l3_no_route_packet_drops' => :'Integer',
        :'l3_neighbor_unreachable_packet_drops' => :'Integer',
        :'l3_hop_limit_packet_drops' => :'Integer',
        :'broadcast_rate_limiting_packet_drops' => :'Integer',
        :'workload_dhcp_not_allowed_packet_drops' => :'Integer',
        :'spoof_guard_packet_drops' => :'Integer',
        :'workload_ipv6_ra_guard_packet_drops' => :'Integer',
        :'workload_bpdu_filter_packet_drops' => :'Integer',
        :'firewall_total_packet_drops' => :'Integer',
        :'firewall_packet_rejects' => :'Integer',
        :'firewall_malformed_packet_drops' => :'Integer',
        :'firewall_internal_error_packet_drops' => :'Integer',
        :'firewall_state_table_full_packet_drops' => :'Integer',
        :'firewall_rule_received_packet_drops' => :'Integer',
        :'firewall_rule_transmitted_packet_drops' => :'Integer',
        :'firewall_state_check_packet_drops' => :'Integer',
        :'firewall_flood_limit_packet_drops' => :'Integer',
        :'fastpath_packet_drops' => :'Integer',
        :'packet_parsing_error_drops' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'hostswitch_received_forged_mac_packet_drops')
        self.hostswitch_received_forged_mac_packet_drops = attributes[:'hostswitch_received_forged_mac_packet_drops']
      end

      if attributes.has_key?(:'hostswitch_network_mismatch_packet_drops')
        self.hostswitch_network_mismatch_packet_drops = attributes[:'hostswitch_network_mismatch_packet_drops']
      end

      if attributes.has_key?(:'overlay_received_packet_drops')
        self.overlay_received_packet_drops = attributes[:'overlay_received_packet_drops']
      end

      if attributes.has_key?(:'overlay_transmitted_packet_drops')
        self.overlay_transmitted_packet_drops = attributes[:'overlay_transmitted_packet_drops']
      end

      if attributes.has_key?(:'overlay_uplink_received_packet_drops')
        self.overlay_uplink_received_packet_drops = attributes[:'overlay_uplink_received_packet_drops']
      end

      if attributes.has_key?(:'overlay_uplink_transmitted_packet_drops')
        self.overlay_uplink_transmitted_packet_drops = attributes[:'overlay_uplink_transmitted_packet_drops']
      end

      if attributes.has_key?(:'l3_reverse_path_forwarding_packet_drops')
        self.l3_reverse_path_forwarding_packet_drops = attributes[:'l3_reverse_path_forwarding_packet_drops']
      end

      if attributes.has_key?(:'l3_no_route_packet_drops')
        self.l3_no_route_packet_drops = attributes[:'l3_no_route_packet_drops']
      end

      if attributes.has_key?(:'l3_neighbor_unreachable_packet_drops')
        self.l3_neighbor_unreachable_packet_drops = attributes[:'l3_neighbor_unreachable_packet_drops']
      end

      if attributes.has_key?(:'l3_hop_limit_packet_drops')
        self.l3_hop_limit_packet_drops = attributes[:'l3_hop_limit_packet_drops']
      end

      if attributes.has_key?(:'broadcast_rate_limiting_packet_drops')
        self.broadcast_rate_limiting_packet_drops = attributes[:'broadcast_rate_limiting_packet_drops']
      end

      if attributes.has_key?(:'workload_dhcp_not_allowed_packet_drops')
        self.workload_dhcp_not_allowed_packet_drops = attributes[:'workload_dhcp_not_allowed_packet_drops']
      end

      if attributes.has_key?(:'spoof_guard_packet_drops')
        self.spoof_guard_packet_drops = attributes[:'spoof_guard_packet_drops']
      end

      if attributes.has_key?(:'workload_ipv6_ra_guard_packet_drops')
        self.workload_ipv6_ra_guard_packet_drops = attributes[:'workload_ipv6_ra_guard_packet_drops']
      end

      if attributes.has_key?(:'workload_bpdu_filter_packet_drops')
        self.workload_bpdu_filter_packet_drops = attributes[:'workload_bpdu_filter_packet_drops']
      end

      if attributes.has_key?(:'firewall_total_packet_drops')
        self.firewall_total_packet_drops = attributes[:'firewall_total_packet_drops']
      end

      if attributes.has_key?(:'firewall_packet_rejects')
        self.firewall_packet_rejects = attributes[:'firewall_packet_rejects']
      end

      if attributes.has_key?(:'firewall_malformed_packet_drops')
        self.firewall_malformed_packet_drops = attributes[:'firewall_malformed_packet_drops']
      end

      if attributes.has_key?(:'firewall_internal_error_packet_drops')
        self.firewall_internal_error_packet_drops = attributes[:'firewall_internal_error_packet_drops']
      end

      if attributes.has_key?(:'firewall_state_table_full_packet_drops')
        self.firewall_state_table_full_packet_drops = attributes[:'firewall_state_table_full_packet_drops']
      end

      if attributes.has_key?(:'firewall_rule_received_packet_drops')
        self.firewall_rule_received_packet_drops = attributes[:'firewall_rule_received_packet_drops']
      end

      if attributes.has_key?(:'firewall_rule_transmitted_packet_drops')
        self.firewall_rule_transmitted_packet_drops = attributes[:'firewall_rule_transmitted_packet_drops']
      end

      if attributes.has_key?(:'firewall_state_check_packet_drops')
        self.firewall_state_check_packet_drops = attributes[:'firewall_state_check_packet_drops']
      end

      if attributes.has_key?(:'firewall_flood_limit_packet_drops')
        self.firewall_flood_limit_packet_drops = attributes[:'firewall_flood_limit_packet_drops']
      end

      if attributes.has_key?(:'fastpath_packet_drops')
        self.fastpath_packet_drops = attributes[:'fastpath_packet_drops']
      end

      if attributes.has_key?(:'packet_parsing_error_drops')
        self.packet_parsing_error_drops = attributes[:'packet_parsing_error_drops']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          hostswitch_received_forged_mac_packet_drops == o.hostswitch_received_forged_mac_packet_drops &&
          hostswitch_network_mismatch_packet_drops == o.hostswitch_network_mismatch_packet_drops &&
          overlay_received_packet_drops == o.overlay_received_packet_drops &&
          overlay_transmitted_packet_drops == o.overlay_transmitted_packet_drops &&
          overlay_uplink_received_packet_drops == o.overlay_uplink_received_packet_drops &&
          overlay_uplink_transmitted_packet_drops == o.overlay_uplink_transmitted_packet_drops &&
          l3_reverse_path_forwarding_packet_drops == o.l3_reverse_path_forwarding_packet_drops &&
          l3_no_route_packet_drops == o.l3_no_route_packet_drops &&
          l3_neighbor_unreachable_packet_drops == o.l3_neighbor_unreachable_packet_drops &&
          l3_hop_limit_packet_drops == o.l3_hop_limit_packet_drops &&
          broadcast_rate_limiting_packet_drops == o.broadcast_rate_limiting_packet_drops &&
          workload_dhcp_not_allowed_packet_drops == o.workload_dhcp_not_allowed_packet_drops &&
          spoof_guard_packet_drops == o.spoof_guard_packet_drops &&
          workload_ipv6_ra_guard_packet_drops == o.workload_ipv6_ra_guard_packet_drops &&
          workload_bpdu_filter_packet_drops == o.workload_bpdu_filter_packet_drops &&
          firewall_total_packet_drops == o.firewall_total_packet_drops &&
          firewall_packet_rejects == o.firewall_packet_rejects &&
          firewall_malformed_packet_drops == o.firewall_malformed_packet_drops &&
          firewall_internal_error_packet_drops == o.firewall_internal_error_packet_drops &&
          firewall_state_table_full_packet_drops == o.firewall_state_table_full_packet_drops &&
          firewall_rule_received_packet_drops == o.firewall_rule_received_packet_drops &&
          firewall_rule_transmitted_packet_drops == o.firewall_rule_transmitted_packet_drops &&
          firewall_state_check_packet_drops == o.firewall_state_check_packet_drops &&
          firewall_flood_limit_packet_drops == o.firewall_flood_limit_packet_drops &&
          fastpath_packet_drops == o.fastpath_packet_drops &&
          packet_parsing_error_drops == o.packet_parsing_error_drops
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [hostswitch_received_forged_mac_packet_drops, hostswitch_network_mismatch_packet_drops, overlay_received_packet_drops, overlay_transmitted_packet_drops, overlay_uplink_received_packet_drops, overlay_uplink_transmitted_packet_drops, l3_reverse_path_forwarding_packet_drops, l3_no_route_packet_drops, l3_neighbor_unreachable_packet_drops, l3_hop_limit_packet_drops, broadcast_rate_limiting_packet_drops, workload_dhcp_not_allowed_packet_drops, spoof_guard_packet_drops, workload_ipv6_ra_guard_packet_drops, workload_bpdu_filter_packet_drops, firewall_total_packet_drops, firewall_packet_rejects, firewall_malformed_packet_drops, firewall_internal_error_packet_drops, firewall_state_table_full_packet_drops, firewall_rule_received_packet_drops, firewall_rule_transmitted_packet_drops, firewall_state_check_packet_drops, firewall_flood_limit_packet_drops, fastpath_packet_drops, packet_parsing_error_drops].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
