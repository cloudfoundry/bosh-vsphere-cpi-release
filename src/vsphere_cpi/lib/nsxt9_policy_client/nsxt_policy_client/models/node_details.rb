=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class NodeDetails
    # Type of the nodes supported in security usage computation |eg. \"ESX\" or \"EDGE_NODE\" or \"HOST_BAREMETAL\" or \"EDGE_BAREMETAL\".
    attr_accessor :node_type

    # Uuid of node.
    attr_accessor :node_id

    # UUID of compute manager, Populated for node_type ESX and EDGE_NODE whose LCM is done by NSX.
    attr_accessor :compute_manager_id

    # vcenter cluster id, Only for ESX node.
    attr_accessor :vcenter_cluster_id

    # vcenter node id, Populated for node_type ESX and EDGE_NODE whose LCM is done by NSX.
    attr_accessor :vcenter_node_id

    # List of the features enabled on the node.
    attr_accessor :features_enabled

    # Raw cores of a node.
    attr_accessor :raw_cores

    # CPU sockets of a node.
    attr_accessor :cpu_socket

    # License edition product family used on the node.
    attr_accessor :product_family

    # Maintenance mode of the node.
    attr_accessor :maintenance_mode

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'node_type' => :'node_type',
        :'node_id' => :'node_id',
        :'compute_manager_id' => :'compute_manager_id',
        :'vcenter_cluster_id' => :'vcenter_cluster_id',
        :'vcenter_node_id' => :'vcenter_node_id',
        :'features_enabled' => :'features_enabled',
        :'raw_cores' => :'raw_cores',
        :'cpu_socket' => :'cpu_socket',
        :'product_family' => :'product_family',
        :'maintenance_mode' => :'maintenance_mode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'node_type' => :'String',
        :'node_id' => :'String',
        :'compute_manager_id' => :'String',
        :'vcenter_cluster_id' => :'String',
        :'vcenter_node_id' => :'String',
        :'features_enabled' => :'Array<String>',
        :'raw_cores' => :'String',
        :'cpu_socket' => :'String',
        :'product_family' => :'String',
        :'maintenance_mode' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'node_type')
        self.node_type = attributes[:'node_type']
      end

      if attributes.has_key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.has_key?(:'compute_manager_id')
        self.compute_manager_id = attributes[:'compute_manager_id']
      end

      if attributes.has_key?(:'vcenter_cluster_id')
        self.vcenter_cluster_id = attributes[:'vcenter_cluster_id']
      end

      if attributes.has_key?(:'vcenter_node_id')
        self.vcenter_node_id = attributes[:'vcenter_node_id']
      end

      if attributes.has_key?(:'features_enabled')
        if (value = attributes[:'features_enabled']).is_a?(Array)
          self.features_enabled = value
        end
      end

      if attributes.has_key?(:'raw_cores')
        self.raw_cores = attributes[:'raw_cores']
      end

      if attributes.has_key?(:'cpu_socket')
        self.cpu_socket = attributes[:'cpu_socket']
      end

      if attributes.has_key?(:'product_family')
        self.product_family = attributes[:'product_family']
      end

      if attributes.has_key?(:'maintenance_mode')
        self.maintenance_mode = attributes[:'maintenance_mode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      node_type_validator = EnumAttributeValidator.new('String', ['ESX', 'EDGE_NODE', 'HOST_BAREMETAL', 'EDGE_BAREMETAL'])
      return false unless node_type_validator.valid?(@node_type)
      maintenance_mode_validator = EnumAttributeValidator.new('String', ['ENABLED', 'FORCE_ENABLED', 'DISABLED'])
      return false unless maintenance_mode_validator.valid?(@maintenance_mode)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] node_type Object to be assigned
    def node_type=(node_type)
      validator = EnumAttributeValidator.new('String', ['ESX', 'EDGE_NODE', 'HOST_BAREMETAL', 'EDGE_BAREMETAL'])
      unless validator.valid?(node_type)
        fail ArgumentError, 'invalid value for "node_type", must be one of #{validator.allowable_values}.'
      end
      @node_type = node_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] maintenance_mode Object to be assigned
    def maintenance_mode=(maintenance_mode)
      validator = EnumAttributeValidator.new('String', ['ENABLED', 'FORCE_ENABLED', 'DISABLED'])
      unless validator.valid?(maintenance_mode)
        fail ArgumentError, 'invalid value for "maintenance_mode", must be one of #{validator.allowable_values}.'
      end
      @maintenance_mode = maintenance_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          node_type == o.node_type &&
          node_id == o.node_id &&
          compute_manager_id == o.compute_manager_id &&
          vcenter_cluster_id == o.vcenter_cluster_id &&
          vcenter_node_id == o.vcenter_node_id &&
          features_enabled == o.features_enabled &&
          raw_cores == o.raw_cores &&
          cpu_socket == o.cpu_socket &&
          product_family == o.product_family &&
          maintenance_mode == o.maintenance_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [node_type, node_id, compute_manager_id, vcenter_cluster_id, vcenter_node_id, features_enabled, raw_cores, cpu_socket, product_family, maintenance_mode].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
