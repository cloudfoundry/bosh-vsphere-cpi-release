=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class LogicalRouterStatusPerNode
    # id of the transport node where the router status is retrieved.
    attr_accessor :transport_node_id

    # Only populated by Policy APIs
    attr_accessor :edge_path

    # id of the service router where the router status is retrieved.
    attr_accessor :service_router_id

    # A service router's HA status on an edge node
    attr_accessor :high_availability_status

    # This field is populated for sateful active-active mode. Runtime state is only synced among nodes in the same sub cluster. 
    attr_accessor :sub_cluster_id

    # Service High availability status of service group linked with sub cluster. 
    attr_accessor :service_group_ha_status

    # True if edge transport node is a member of default sub cluster 
    attr_accessor :is_default_sub_cluster

    # This field is populated only for VMC on AWS. It is the ID of the traffic group associated with the edge node. 
    attr_accessor :traffic_group_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transport_node_id' => :'transport_node_id',
        :'edge_path' => :'edge_path',
        :'service_router_id' => :'service_router_id',
        :'high_availability_status' => :'high_availability_status',
        :'sub_cluster_id' => :'sub_cluster_id',
        :'service_group_ha_status' => :'service_group_ha_status',
        :'is_default_sub_cluster' => :'is_default_sub_cluster',
        :'traffic_group_id' => :'traffic_group_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'transport_node_id' => :'String',
        :'edge_path' => :'String',
        :'service_router_id' => :'String',
        :'high_availability_status' => :'String',
        :'sub_cluster_id' => :'String',
        :'service_group_ha_status' => :'String',
        :'is_default_sub_cluster' => :'BOOLEAN',
        :'traffic_group_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'transport_node_id')
        self.transport_node_id = attributes[:'transport_node_id']
      end

      if attributes.has_key?(:'edge_path')
        self.edge_path = attributes[:'edge_path']
      end

      if attributes.has_key?(:'service_router_id')
        self.service_router_id = attributes[:'service_router_id']
      end

      if attributes.has_key?(:'high_availability_status')
        self.high_availability_status = attributes[:'high_availability_status']
      end

      if attributes.has_key?(:'sub_cluster_id')
        self.sub_cluster_id = attributes[:'sub_cluster_id']
      end

      if attributes.has_key?(:'service_group_ha_status')
        self.service_group_ha_status = attributes[:'service_group_ha_status']
      end

      if attributes.has_key?(:'is_default_sub_cluster')
        self.is_default_sub_cluster = attributes[:'is_default_sub_cluster']
      else
        self.is_default_sub_cluster = false
      end

      if attributes.has_key?(:'traffic_group_id')
        self.traffic_group_id = attributes[:'traffic_group_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @transport_node_id.nil?
        invalid_properties.push('invalid value for "transport_node_id", transport_node_id cannot be nil.')
      end

      if @high_availability_status.nil?
        invalid_properties.push('invalid value for "high_availability_status", high_availability_status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @transport_node_id.nil?
      return false if @high_availability_status.nil?
      high_availability_status_validator = EnumAttributeValidator.new('String', ['ACTIVE', 'STANDBY', 'DOWN', 'SYNC', 'UNKNOWN', 'ADMIN_DOWN'])
      return false unless high_availability_status_validator.valid?(@high_availability_status)
      service_group_ha_status_validator = EnumAttributeValidator.new('String', ['UNKNOWN', 'ACTIVE', 'STANDBY'])
      return false unless service_group_ha_status_validator.valid?(@service_group_ha_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] high_availability_status Object to be assigned
    def high_availability_status=(high_availability_status)
      validator = EnumAttributeValidator.new('String', ['ACTIVE', 'STANDBY', 'DOWN', 'SYNC', 'UNKNOWN', 'ADMIN_DOWN'])
      unless validator.valid?(high_availability_status)
        fail ArgumentError, 'invalid value for "high_availability_status", must be one of #{validator.allowable_values}.'
      end
      @high_availability_status = high_availability_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service_group_ha_status Object to be assigned
    def service_group_ha_status=(service_group_ha_status)
      validator = EnumAttributeValidator.new('String', ['UNKNOWN', 'ACTIVE', 'STANDBY'])
      unless validator.valid?(service_group_ha_status)
        fail ArgumentError, 'invalid value for "service_group_ha_status", must be one of #{validator.allowable_values}.'
      end
      @service_group_ha_status = service_group_ha_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transport_node_id == o.transport_node_id &&
          edge_path == o.edge_path &&
          service_router_id == o.service_router_id &&
          high_availability_status == o.high_availability_status &&
          sub_cluster_id == o.sub_cluster_id &&
          service_group_ha_status == o.service_group_ha_status &&
          is_default_sub_cluster == o.is_default_sub_cluster &&
          traffic_group_id == o.traffic_group_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [transport_node_id, edge_path, service_router_id, high_availability_status, sub_cluster_id, service_group_ha_status, is_default_sub_cluster, traffic_group_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
