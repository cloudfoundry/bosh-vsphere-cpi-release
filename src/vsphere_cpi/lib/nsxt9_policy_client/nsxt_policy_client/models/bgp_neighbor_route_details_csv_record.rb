=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # BGP neighbor learned/advertised route details.
  class BgpNeighborRouteDetailsCsvRecord
    # Logical router id
    attr_accessor :logical_router_id

    # BGP neighbor id
    attr_accessor :neighbor_id

    # BGP neighbor peer IP address.
    attr_accessor :neighbor_address

    # Transport node id
    attr_accessor :transport_node_id

    # BGP neighbor source address.
    attr_accessor :source_address

    # CIDR network address.
    attr_accessor :network

    # Next hop IP address.
    attr_accessor :next_hop

    # BGP Local Preference attribute.
    attr_accessor :local_pref

    # BGP Weight attribute.
    attr_accessor :weight

    # BGP Multi Exit Discriminator attribute.
    attr_accessor :med

    # BGP AS path attribute.
    attr_accessor :as_path

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'logical_router_id' => :'logical_router_id',
        :'neighbor_id' => :'neighbor_id',
        :'neighbor_address' => :'neighbor_address',
        :'transport_node_id' => :'transport_node_id',
        :'source_address' => :'source_address',
        :'network' => :'network',
        :'next_hop' => :'next_hop',
        :'local_pref' => :'local_pref',
        :'weight' => :'weight',
        :'med' => :'med',
        :'as_path' => :'as_path'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'logical_router_id' => :'String',
        :'neighbor_id' => :'String',
        :'neighbor_address' => :'String',
        :'transport_node_id' => :'String',
        :'source_address' => :'String',
        :'network' => :'String',
        :'next_hop' => :'String',
        :'local_pref' => :'Integer',
        :'weight' => :'Integer',
        :'med' => :'Integer',
        :'as_path' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'logical_router_id')
        self.logical_router_id = attributes[:'logical_router_id']
      end

      if attributes.has_key?(:'neighbor_id')
        self.neighbor_id = attributes[:'neighbor_id']
      end

      if attributes.has_key?(:'neighbor_address')
        self.neighbor_address = attributes[:'neighbor_address']
      end

      if attributes.has_key?(:'transport_node_id')
        self.transport_node_id = attributes[:'transport_node_id']
      end

      if attributes.has_key?(:'source_address')
        self.source_address = attributes[:'source_address']
      end

      if attributes.has_key?(:'network')
        self.network = attributes[:'network']
      end

      if attributes.has_key?(:'next_hop')
        self.next_hop = attributes[:'next_hop']
      end

      if attributes.has_key?(:'local_pref')
        self.local_pref = attributes[:'local_pref']
      end

      if attributes.has_key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.has_key?(:'med')
        self.med = attributes[:'med']
      end

      if attributes.has_key?(:'as_path')
        self.as_path = attributes[:'as_path']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          logical_router_id == o.logical_router_id &&
          neighbor_id == o.neighbor_id &&
          neighbor_address == o.neighbor_address &&
          transport_node_id == o.transport_node_id &&
          source_address == o.source_address &&
          network == o.network &&
          next_hop == o.next_hop &&
          local_pref == o.local_pref &&
          weight == o.weight &&
          med == o.med &&
          as_path == o.as_path
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [logical_router_id, neighbor_id, neighbor_address, transport_node_id, source_address, network, next_hop, local_pref, weight, med, as_path].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
