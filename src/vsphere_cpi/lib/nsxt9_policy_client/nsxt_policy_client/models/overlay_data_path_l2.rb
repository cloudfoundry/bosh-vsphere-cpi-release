=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class OverlayDataPathL2
    # Count of ND packets failed to send on uplinks for CCP unaware bindings.
    attr_accessor :nd_proxy_req_fail_drops

    # Count of packets for which MAC learn was skipped at uplink input IOChain.
    attr_accessor :uplink_rx_skip_mac_learn

    # Number of packet's SMAC learning failed at uplink due to MAC table full.
    attr_accessor :mac_tbl_update_full

    # Total drops at VDL2LeafOutput IOChain of a switchport.
    attr_accessor :leaf_tx_drops

    # VDL2LeafInput drops on an LS due to system errors.
    attr_accessor :leaf_rx_system_err_drops

    # VDL2LeafInput drops as trunk port is not in logical switch.
    attr_accessor :leaf_rx_ref_port_not_found_drops

    # Total drops at VDL2LeafInput IOChain of a switchport.
    attr_accessor :leaf_rx_drops

    # Drop at uplink input IOChain due to failure to remove guest VLAN tag.
    attr_accessor :uplink_rx_guest_vlan_drops

    # Drop at uplink input IOChain due to system errors.
    attr_accessor :uplink_rx_system_err_drops

    # Count of packets from underlay that are dropped at uplink input IOChain.
    attr_accessor :uplink_rx_drops

    # Total DVS sent packet drops at uplink output IOChain.
    attr_accessor :uplink_tx_drops

    # Count of packets dropped at uplink IOChain due to uplink teaming failure.
    attr_accessor :uplink_tx_teaming_drops

    # Packet drops at uplink IOChain due to incorrect uplink VLAN configuration.
    attr_accessor :uplink_tx_invalid_state_drops

    # Count of invalid packets dropped at uplink IOChain.
    attr_accessor :uplink_tx_invalid_frame_drops

    # Count of packets to nested TN dropped at uplink output IOChain.
    attr_accessor :uplink_tx_nested_tn_repl_drops

    # Count of ARP response failed for each ARP suppressed packets.
    attr_accessor :arp_proxy_resp_drops

    # Count of ND response failed for each ND suppressed packets.
    attr_accessor :nd_proxy_resp_drops

    # Count of BUM replicated packet drops destined to nested TN.
    attr_accessor :nested_tn_mcast_proxy_same_vlan_tx_drops

    # Count of BUM replicated packet drops destined to nested TN.
    attr_accessor :nested_tn_mcast_proxy_diff_vlan_tx_drops

    # Count of BUM replicated packets dropped at MTEP TN at uplink input IOChain.
    attr_accessor :mcast_proxy_rx_drops

    # Count of BUM packets dropped at uplink output IOChain.
    attr_accessor :mcast_proxy_tx_drops

    # Drop at uplink port input IOChain due to incorrect destination VTEP IP.
    attr_accessor :uplink_rx_wrong_dest_drops

    # Count of packets dropped at uplink input IOChain due to incorrect Encap.
    attr_accessor :uplink_rx_invalid_encap_drops

    # Count of ARPs failed to send on uplinks for CCP unaware bindings.
    attr_accessor :arp_proxy_req_fail_drops

    # Count of unknown unicast packets at uplink output IOChain.
    attr_accessor :uplink_tx_ucast_flood

    # Count of unicast packets flooded onto remote VTEPs due to MAC table full.
    attr_accessor :mac_tbl_lookup_flood

    # Count of IP multicast packets dropped at unexpected DR uplink.
    attr_accessor :uplink_rx_mcast_invalid_druplink_drops

    # Number of VM MAC query to CCP failure due to MAC table full.
    attr_accessor :mac_tbl_lookup_full

    # Count of unknown IP-MAC binding message from CCP for ARP suppression.
    attr_accessor :arp_proxy_resp_unknown

    # Count of unknown IP-MAC binding message from CCP for ND suppression.
    attr_accessor :nd_proxy_resp_unknown

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'nd_proxy_req_fail_drops' => :'nd_proxy_req_fail_drops',
        :'uplink_rx_skip_mac_learn' => :'uplink_rx_skip_mac_learn',
        :'mac_tbl_update_full' => :'mac_tbl_update_full',
        :'leaf_tx_drops' => :'leaf_tx_drops',
        :'leaf_rx_system_err_drops' => :'leaf_rx_system_err_drops',
        :'leaf_rx_ref_port_not_found_drops' => :'leaf_rx_ref_port_not_found_drops',
        :'leaf_rx_drops' => :'leaf_rx_drops',
        :'uplink_rx_guest_vlan_drops' => :'uplink_rx_guest_vlan_drops',
        :'uplink_rx_system_err_drops' => :'uplink_rx_system_err_drops',
        :'uplink_rx_drops' => :'uplink_rx_drops',
        :'uplink_tx_drops' => :'uplink_tx_drops',
        :'uplink_tx_teaming_drops' => :'uplink_tx_teaming_drops',
        :'uplink_tx_invalid_state_drops' => :'uplink_tx_invalid_state_drops',
        :'uplink_tx_invalid_frame_drops' => :'uplink_tx_invalid_frame_drops',
        :'uplink_tx_nested_tn_repl_drops' => :'uplink_tx_nested_tn_repl_drops',
        :'arp_proxy_resp_drops' => :'arp_proxy_resp_drops',
        :'nd_proxy_resp_drops' => :'nd_proxy_resp_drops',
        :'nested_tn_mcast_proxy_same_vlan_tx_drops' => :'nested_tn_mcast_proxy_same_vlan_tx_drops',
        :'nested_tn_mcast_proxy_diff_vlan_tx_drops' => :'nested_tn_mcast_proxy_diff_vlan_tx_drops',
        :'mcast_proxy_rx_drops' => :'mcast_proxy_rx_drops',
        :'mcast_proxy_tx_drops' => :'mcast_proxy_tx_drops',
        :'uplink_rx_wrong_dest_drops' => :'uplink_rx_wrong_dest_drops',
        :'uplink_rx_invalid_encap_drops' => :'uplink_rx_invalid_encap_drops',
        :'arp_proxy_req_fail_drops' => :'arp_proxy_req_fail_drops',
        :'uplink_tx_ucast_flood' => :'uplink_tx_ucast_flood',
        :'mac_tbl_lookup_flood' => :'mac_tbl_lookup_flood',
        :'uplink_rx_mcast_invalid_druplink_drops' => :'uplink_rx_mcast_invalid_druplink_drops',
        :'mac_tbl_lookup_full' => :'mac_tbl_lookup_full',
        :'arp_proxy_resp_unknown' => :'arp_proxy_resp_unknown',
        :'nd_proxy_resp_unknown' => :'nd_proxy_resp_unknown'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'nd_proxy_req_fail_drops' => :'Integer',
        :'uplink_rx_skip_mac_learn' => :'Integer',
        :'mac_tbl_update_full' => :'Integer',
        :'leaf_tx_drops' => :'Integer',
        :'leaf_rx_system_err_drops' => :'Integer',
        :'leaf_rx_ref_port_not_found_drops' => :'Integer',
        :'leaf_rx_drops' => :'Integer',
        :'uplink_rx_guest_vlan_drops' => :'Integer',
        :'uplink_rx_system_err_drops' => :'Integer',
        :'uplink_rx_drops' => :'Integer',
        :'uplink_tx_drops' => :'Integer',
        :'uplink_tx_teaming_drops' => :'Integer',
        :'uplink_tx_invalid_state_drops' => :'Integer',
        :'uplink_tx_invalid_frame_drops' => :'Integer',
        :'uplink_tx_nested_tn_repl_drops' => :'Integer',
        :'arp_proxy_resp_drops' => :'Integer',
        :'nd_proxy_resp_drops' => :'Integer',
        :'nested_tn_mcast_proxy_same_vlan_tx_drops' => :'Integer',
        :'nested_tn_mcast_proxy_diff_vlan_tx_drops' => :'Integer',
        :'mcast_proxy_rx_drops' => :'Integer',
        :'mcast_proxy_tx_drops' => :'Integer',
        :'uplink_rx_wrong_dest_drops' => :'Integer',
        :'uplink_rx_invalid_encap_drops' => :'Integer',
        :'arp_proxy_req_fail_drops' => :'Integer',
        :'uplink_tx_ucast_flood' => :'Integer',
        :'mac_tbl_lookup_flood' => :'Integer',
        :'uplink_rx_mcast_invalid_druplink_drops' => :'Integer',
        :'mac_tbl_lookup_full' => :'Integer',
        :'arp_proxy_resp_unknown' => :'Integer',
        :'nd_proxy_resp_unknown' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'nd_proxy_req_fail_drops')
        self.nd_proxy_req_fail_drops = attributes[:'nd_proxy_req_fail_drops']
      end

      if attributes.has_key?(:'uplink_rx_skip_mac_learn')
        self.uplink_rx_skip_mac_learn = attributes[:'uplink_rx_skip_mac_learn']
      end

      if attributes.has_key?(:'mac_tbl_update_full')
        self.mac_tbl_update_full = attributes[:'mac_tbl_update_full']
      end

      if attributes.has_key?(:'leaf_tx_drops')
        self.leaf_tx_drops = attributes[:'leaf_tx_drops']
      end

      if attributes.has_key?(:'leaf_rx_system_err_drops')
        self.leaf_rx_system_err_drops = attributes[:'leaf_rx_system_err_drops']
      end

      if attributes.has_key?(:'leaf_rx_ref_port_not_found_drops')
        self.leaf_rx_ref_port_not_found_drops = attributes[:'leaf_rx_ref_port_not_found_drops']
      end

      if attributes.has_key?(:'leaf_rx_drops')
        self.leaf_rx_drops = attributes[:'leaf_rx_drops']
      end

      if attributes.has_key?(:'uplink_rx_guest_vlan_drops')
        self.uplink_rx_guest_vlan_drops = attributes[:'uplink_rx_guest_vlan_drops']
      end

      if attributes.has_key?(:'uplink_rx_system_err_drops')
        self.uplink_rx_system_err_drops = attributes[:'uplink_rx_system_err_drops']
      end

      if attributes.has_key?(:'uplink_rx_drops')
        self.uplink_rx_drops = attributes[:'uplink_rx_drops']
      end

      if attributes.has_key?(:'uplink_tx_drops')
        self.uplink_tx_drops = attributes[:'uplink_tx_drops']
      end

      if attributes.has_key?(:'uplink_tx_teaming_drops')
        self.uplink_tx_teaming_drops = attributes[:'uplink_tx_teaming_drops']
      end

      if attributes.has_key?(:'uplink_tx_invalid_state_drops')
        self.uplink_tx_invalid_state_drops = attributes[:'uplink_tx_invalid_state_drops']
      end

      if attributes.has_key?(:'uplink_tx_invalid_frame_drops')
        self.uplink_tx_invalid_frame_drops = attributes[:'uplink_tx_invalid_frame_drops']
      end

      if attributes.has_key?(:'uplink_tx_nested_tn_repl_drops')
        self.uplink_tx_nested_tn_repl_drops = attributes[:'uplink_tx_nested_tn_repl_drops']
      end

      if attributes.has_key?(:'arp_proxy_resp_drops')
        self.arp_proxy_resp_drops = attributes[:'arp_proxy_resp_drops']
      end

      if attributes.has_key?(:'nd_proxy_resp_drops')
        self.nd_proxy_resp_drops = attributes[:'nd_proxy_resp_drops']
      end

      if attributes.has_key?(:'nested_tn_mcast_proxy_same_vlan_tx_drops')
        self.nested_tn_mcast_proxy_same_vlan_tx_drops = attributes[:'nested_tn_mcast_proxy_same_vlan_tx_drops']
      end

      if attributes.has_key?(:'nested_tn_mcast_proxy_diff_vlan_tx_drops')
        self.nested_tn_mcast_proxy_diff_vlan_tx_drops = attributes[:'nested_tn_mcast_proxy_diff_vlan_tx_drops']
      end

      if attributes.has_key?(:'mcast_proxy_rx_drops')
        self.mcast_proxy_rx_drops = attributes[:'mcast_proxy_rx_drops']
      end

      if attributes.has_key?(:'mcast_proxy_tx_drops')
        self.mcast_proxy_tx_drops = attributes[:'mcast_proxy_tx_drops']
      end

      if attributes.has_key?(:'uplink_rx_wrong_dest_drops')
        self.uplink_rx_wrong_dest_drops = attributes[:'uplink_rx_wrong_dest_drops']
      end

      if attributes.has_key?(:'uplink_rx_invalid_encap_drops')
        self.uplink_rx_invalid_encap_drops = attributes[:'uplink_rx_invalid_encap_drops']
      end

      if attributes.has_key?(:'arp_proxy_req_fail_drops')
        self.arp_proxy_req_fail_drops = attributes[:'arp_proxy_req_fail_drops']
      end

      if attributes.has_key?(:'uplink_tx_ucast_flood')
        self.uplink_tx_ucast_flood = attributes[:'uplink_tx_ucast_flood']
      end

      if attributes.has_key?(:'mac_tbl_lookup_flood')
        self.mac_tbl_lookup_flood = attributes[:'mac_tbl_lookup_flood']
      end

      if attributes.has_key?(:'uplink_rx_mcast_invalid_druplink_drops')
        self.uplink_rx_mcast_invalid_druplink_drops = attributes[:'uplink_rx_mcast_invalid_druplink_drops']
      end

      if attributes.has_key?(:'mac_tbl_lookup_full')
        self.mac_tbl_lookup_full = attributes[:'mac_tbl_lookup_full']
      end

      if attributes.has_key?(:'arp_proxy_resp_unknown')
        self.arp_proxy_resp_unknown = attributes[:'arp_proxy_resp_unknown']
      end

      if attributes.has_key?(:'nd_proxy_resp_unknown')
        self.nd_proxy_resp_unknown = attributes[:'nd_proxy_resp_unknown']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          nd_proxy_req_fail_drops == o.nd_proxy_req_fail_drops &&
          uplink_rx_skip_mac_learn == o.uplink_rx_skip_mac_learn &&
          mac_tbl_update_full == o.mac_tbl_update_full &&
          leaf_tx_drops == o.leaf_tx_drops &&
          leaf_rx_system_err_drops == o.leaf_rx_system_err_drops &&
          leaf_rx_ref_port_not_found_drops == o.leaf_rx_ref_port_not_found_drops &&
          leaf_rx_drops == o.leaf_rx_drops &&
          uplink_rx_guest_vlan_drops == o.uplink_rx_guest_vlan_drops &&
          uplink_rx_system_err_drops == o.uplink_rx_system_err_drops &&
          uplink_rx_drops == o.uplink_rx_drops &&
          uplink_tx_drops == o.uplink_tx_drops &&
          uplink_tx_teaming_drops == o.uplink_tx_teaming_drops &&
          uplink_tx_invalid_state_drops == o.uplink_tx_invalid_state_drops &&
          uplink_tx_invalid_frame_drops == o.uplink_tx_invalid_frame_drops &&
          uplink_tx_nested_tn_repl_drops == o.uplink_tx_nested_tn_repl_drops &&
          arp_proxy_resp_drops == o.arp_proxy_resp_drops &&
          nd_proxy_resp_drops == o.nd_proxy_resp_drops &&
          nested_tn_mcast_proxy_same_vlan_tx_drops == o.nested_tn_mcast_proxy_same_vlan_tx_drops &&
          nested_tn_mcast_proxy_diff_vlan_tx_drops == o.nested_tn_mcast_proxy_diff_vlan_tx_drops &&
          mcast_proxy_rx_drops == o.mcast_proxy_rx_drops &&
          mcast_proxy_tx_drops == o.mcast_proxy_tx_drops &&
          uplink_rx_wrong_dest_drops == o.uplink_rx_wrong_dest_drops &&
          uplink_rx_invalid_encap_drops == o.uplink_rx_invalid_encap_drops &&
          arp_proxy_req_fail_drops == o.arp_proxy_req_fail_drops &&
          uplink_tx_ucast_flood == o.uplink_tx_ucast_flood &&
          mac_tbl_lookup_flood == o.mac_tbl_lookup_flood &&
          uplink_rx_mcast_invalid_druplink_drops == o.uplink_rx_mcast_invalid_druplink_drops &&
          mac_tbl_lookup_full == o.mac_tbl_lookup_full &&
          arp_proxy_resp_unknown == o.arp_proxy_resp_unknown &&
          nd_proxy_resp_unknown == o.nd_proxy_resp_unknown
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [nd_proxy_req_fail_drops, uplink_rx_skip_mac_learn, mac_tbl_update_full, leaf_tx_drops, leaf_rx_system_err_drops, leaf_rx_ref_port_not_found_drops, leaf_rx_drops, uplink_rx_guest_vlan_drops, uplink_rx_system_err_drops, uplink_rx_drops, uplink_tx_drops, uplink_tx_teaming_drops, uplink_tx_invalid_state_drops, uplink_tx_invalid_frame_drops, uplink_tx_nested_tn_repl_drops, arp_proxy_resp_drops, nd_proxy_resp_drops, nested_tn_mcast_proxy_same_vlan_tx_drops, nested_tn_mcast_proxy_diff_vlan_tx_drops, mcast_proxy_rx_drops, mcast_proxy_tx_drops, uplink_rx_wrong_dest_drops, uplink_rx_invalid_encap_drops, arp_proxy_req_fail_drops, uplink_tx_ucast_flood, mac_tbl_lookup_flood, uplink_rx_mcast_invalid_druplink_drops, mac_tbl_lookup_full, arp_proxy_resp_unknown, nd_proxy_resp_unknown].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
