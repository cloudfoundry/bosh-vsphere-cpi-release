=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  class SwsecCounters
    # Number of received IPv4 packets
    attr_accessor :rx_ipv4_pkts

    # Number of transmitted  IPv4 packets
    attr_accessor :tx_ipv4_pkts

    # Number of received IPv6 packets
    attr_accessor :rx_ipv6_pkts

    # Number of received non-IP packets
    attr_accessor :tx_ipv6_pkts

    # Number of transmitted IPv6 packets
    attr_accessor :rx_arp_pkts

    # Number of received ARP packets
    attr_accessor :tx_arp_pkts

    # Number of transmitted ARP packets
    attr_accessor :rx_garp_pkts

    # Number of transmitted non-IP packets
    attr_accessor :tx_non_ip_pkts

    # Number of transmitted Gratuitous ARP (GARP) packets
    attr_accessor :rx_non_ip_pkts

    # Number of IPv6 ND (Neighbor Discovery) NS (Neighbor Solicitation) packets
    attr_accessor :rx_ns_pkts

    # Number of IPv6 ND (Neighbor Discovery) NA (Neighbor Advertisement) packets which, were unsolicited
    attr_accessor :rx_unsolicited_na_pkts

    # Number of IPv6 ND (Neighbor Discovery) NA (Neighbor Advertisement) packets
    attr_accessor :rx_na_pkts

    # Number of DHCPv6 packets dropped by DHCP Client Block. DHCP Client Block prevents a VM from acquiring DHCP IP address by blocking DHCP requests
    attr_accessor :dhcp_client_block_ipv6_drops

    # Number of DHCPv6 packets dropped by DHCP Server Block. DHCP Server Block blocks traffic from a DHCP Server to a DHCP Client
    attr_accessor :dhcp_server_block_ipv6_drops

    # Number of IPv4 DHCP packets dropped by DHCP Client Block. DHCP Client Block prevents a VM from acquiring DHCP IP address by blocking DHCP requests
    attr_accessor :dhcp_client_block_ipv4_drops

    # Number of IPv4 DHCP packets dropped by DHCP Server Block. DHCP Server Block blocks traffic from a DHCP Server to a DHCP Client
    attr_accessor :dhcp_server_block_ipv4_drops

    # Number of IPv4 DHCP packets dropped because addresses in the payload were not valid
    attr_accessor :dhcp_client_validate_ipv4_drops

    # Number of IPv4 packets dropped by Spoof Guard. SpoofGuard protects against IP spoofing by maintaining a reference table of , VM names and IP addresses
    attr_accessor :spoof_guard_ipv4_drops

    # Number of IPv6 packets dropped by Spoof Guard. SpoofGuard protects against IP spoofing by maintaining a reference table of , VM names and IP addresses
    attr_accessor :spoof_guard_arp_drops

    # Number of IPv6 Neighbor Discovery (ND) packets dropped by Spoof Guard. SpoofGuard protects against ND Spoofing by filtering out ND packets whose addresses, do not match the VM's address
    attr_accessor :spoof_guard_ipv6_drops

    # Number of ARP packets dropped by Spoof Guard. Spoof Guard protects against malicious ARP spoofing attacks by keeping track of , MAC and IP addresses
    attr_accessor :spoof_guard_nd_drops

    # Number of Non-IP packets dropped by Spoof Guard
    attr_accessor :spoof_guard_non_ip_drops

    # Number of packets dropped by BPDU Filtering. When the BPDU Filter is enabled, traffic to the configured BPDU destination MAC addresses
    attr_accessor :bpdu_filter_drops

    # Number of ingress packets dropped by broadcast Rate Limiting
    attr_accessor :rx_rate_limit_bcast_drops

    # Number of ingress packets dropped by multicast Rate Limiting
    attr_accessor :rx_rate_limit_mcast_drops

    # Number of egress packets dropped by broadcast Rate Limiting
    attr_accessor :tx_rate_limit_bcast_drops

    # Number of egress packets dropped by multicast Rate Limiting
    attr_accessor :tx_rate_limit_mcast_drops

    # Number of IPv6 Neighbor Discovery (ND) packets which were not correctly parsed
    attr_accessor :ra_guard_drops

    # Number of IPv 6 Router Advertisement packets dropped by RA Guard.
    attr_accessor :nd_parse_errors

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'rx_ipv4_pkts' => :'rx_ipv4_pkts',
        :'tx_ipv4_pkts' => :'tx_ipv4_pkts',
        :'rx_ipv6_pkts' => :'rx_ipv6_pkts',
        :'tx_ipv6_pkts' => :'tx_ipv6_pkts',
        :'rx_arp_pkts' => :'rx_arp_pkts',
        :'tx_arp_pkts' => :'tx_arp_pkts',
        :'rx_garp_pkts' => :'rx_garp_pkts',
        :'tx_non_ip_pkts' => :'tx_non_ip_pkts',
        :'rx_non_ip_pkts' => :'rx_non_ip_pkts',
        :'rx_ns_pkts' => :'rx_ns_pkts',
        :'rx_unsolicited_na_pkts' => :'rx_unsolicited_na_pkts',
        :'rx_na_pkts' => :'rx_na_pkts',
        :'dhcp_client_block_ipv6_drops' => :'dhcp_client_block_ipv6_drops',
        :'dhcp_server_block_ipv6_drops' => :'dhcp_server_block_ipv6_drops',
        :'dhcp_client_block_ipv4_drops' => :'dhcp_client_block_ipv4_drops',
        :'dhcp_server_block_ipv4_drops' => :'dhcp_server_block_ipv4_drops',
        :'dhcp_client_validate_ipv4_drops' => :'dhcp_client_validate_ipv4_drops',
        :'spoof_guard_ipv4_drops' => :'spoof_guard_ipv4_drops',
        :'spoof_guard_arp_drops' => :'spoof_guard_arp_drops',
        :'spoof_guard_ipv6_drops' => :'spoof_guard_ipv6_drops',
        :'spoof_guard_nd_drops' => :'spoof_guard_nd_drops',
        :'spoof_guard_non_ip_drops' => :'spoof_guard_non_ip_drops',
        :'bpdu_filter_drops' => :'bpdu_filter_drops',
        :'rx_rate_limit_bcast_drops' => :'rx_rate_limit_bcast_drops',
        :'rx_rate_limit_mcast_drops' => :'rx_rate_limit_mcast_drops',
        :'tx_rate_limit_bcast_drops' => :'tx_rate_limit_bcast_drops',
        :'tx_rate_limit_mcast_drops' => :'tx_rate_limit_mcast_drops',
        :'ra_guard_drops' => :'ra_guard_drops',
        :'nd_parse_errors' => :'nd_parse_errors'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'rx_ipv4_pkts' => :'Integer',
        :'tx_ipv4_pkts' => :'Integer',
        :'rx_ipv6_pkts' => :'Integer',
        :'tx_ipv6_pkts' => :'Integer',
        :'rx_arp_pkts' => :'Integer',
        :'tx_arp_pkts' => :'Integer',
        :'rx_garp_pkts' => :'Integer',
        :'tx_non_ip_pkts' => :'Integer',
        :'rx_non_ip_pkts' => :'Integer',
        :'rx_ns_pkts' => :'Integer',
        :'rx_unsolicited_na_pkts' => :'Integer',
        :'rx_na_pkts' => :'Integer',
        :'dhcp_client_block_ipv6_drops' => :'Integer',
        :'dhcp_server_block_ipv6_drops' => :'Integer',
        :'dhcp_client_block_ipv4_drops' => :'Integer',
        :'dhcp_server_block_ipv4_drops' => :'Integer',
        :'dhcp_client_validate_ipv4_drops' => :'Integer',
        :'spoof_guard_ipv4_drops' => :'Integer',
        :'spoof_guard_arp_drops' => :'Integer',
        :'spoof_guard_ipv6_drops' => :'Integer',
        :'spoof_guard_nd_drops' => :'Integer',
        :'spoof_guard_non_ip_drops' => :'Integer',
        :'bpdu_filter_drops' => :'Integer',
        :'rx_rate_limit_bcast_drops' => :'Integer',
        :'rx_rate_limit_mcast_drops' => :'Integer',
        :'tx_rate_limit_bcast_drops' => :'Integer',
        :'tx_rate_limit_mcast_drops' => :'Integer',
        :'ra_guard_drops' => :'Integer',
        :'nd_parse_errors' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'rx_ipv4_pkts')
        self.rx_ipv4_pkts = attributes[:'rx_ipv4_pkts']
      end

      if attributes.has_key?(:'tx_ipv4_pkts')
        self.tx_ipv4_pkts = attributes[:'tx_ipv4_pkts']
      end

      if attributes.has_key?(:'rx_ipv6_pkts')
        self.rx_ipv6_pkts = attributes[:'rx_ipv6_pkts']
      end

      if attributes.has_key?(:'tx_ipv6_pkts')
        self.tx_ipv6_pkts = attributes[:'tx_ipv6_pkts']
      end

      if attributes.has_key?(:'rx_arp_pkts')
        self.rx_arp_pkts = attributes[:'rx_arp_pkts']
      end

      if attributes.has_key?(:'tx_arp_pkts')
        self.tx_arp_pkts = attributes[:'tx_arp_pkts']
      end

      if attributes.has_key?(:'rx_garp_pkts')
        self.rx_garp_pkts = attributes[:'rx_garp_pkts']
      end

      if attributes.has_key?(:'tx_non_ip_pkts')
        self.tx_non_ip_pkts = attributes[:'tx_non_ip_pkts']
      end

      if attributes.has_key?(:'rx_non_ip_pkts')
        self.rx_non_ip_pkts = attributes[:'rx_non_ip_pkts']
      end

      if attributes.has_key?(:'rx_ns_pkts')
        self.rx_ns_pkts = attributes[:'rx_ns_pkts']
      end

      if attributes.has_key?(:'rx_unsolicited_na_pkts')
        self.rx_unsolicited_na_pkts = attributes[:'rx_unsolicited_na_pkts']
      end

      if attributes.has_key?(:'rx_na_pkts')
        self.rx_na_pkts = attributes[:'rx_na_pkts']
      end

      if attributes.has_key?(:'dhcp_client_block_ipv6_drops')
        self.dhcp_client_block_ipv6_drops = attributes[:'dhcp_client_block_ipv6_drops']
      end

      if attributes.has_key?(:'dhcp_server_block_ipv6_drops')
        self.dhcp_server_block_ipv6_drops = attributes[:'dhcp_server_block_ipv6_drops']
      end

      if attributes.has_key?(:'dhcp_client_block_ipv4_drops')
        self.dhcp_client_block_ipv4_drops = attributes[:'dhcp_client_block_ipv4_drops']
      end

      if attributes.has_key?(:'dhcp_server_block_ipv4_drops')
        self.dhcp_server_block_ipv4_drops = attributes[:'dhcp_server_block_ipv4_drops']
      end

      if attributes.has_key?(:'dhcp_client_validate_ipv4_drops')
        self.dhcp_client_validate_ipv4_drops = attributes[:'dhcp_client_validate_ipv4_drops']
      end

      if attributes.has_key?(:'spoof_guard_ipv4_drops')
        self.spoof_guard_ipv4_drops = attributes[:'spoof_guard_ipv4_drops']
      end

      if attributes.has_key?(:'spoof_guard_arp_drops')
        self.spoof_guard_arp_drops = attributes[:'spoof_guard_arp_drops']
      end

      if attributes.has_key?(:'spoof_guard_ipv6_drops')
        self.spoof_guard_ipv6_drops = attributes[:'spoof_guard_ipv6_drops']
      end

      if attributes.has_key?(:'spoof_guard_nd_drops')
        self.spoof_guard_nd_drops = attributes[:'spoof_guard_nd_drops']
      end

      if attributes.has_key?(:'spoof_guard_non_ip_drops')
        self.spoof_guard_non_ip_drops = attributes[:'spoof_guard_non_ip_drops']
      end

      if attributes.has_key?(:'bpdu_filter_drops')
        self.bpdu_filter_drops = attributes[:'bpdu_filter_drops']
      end

      if attributes.has_key?(:'rx_rate_limit_bcast_drops')
        self.rx_rate_limit_bcast_drops = attributes[:'rx_rate_limit_bcast_drops']
      end

      if attributes.has_key?(:'rx_rate_limit_mcast_drops')
        self.rx_rate_limit_mcast_drops = attributes[:'rx_rate_limit_mcast_drops']
      end

      if attributes.has_key?(:'tx_rate_limit_bcast_drops')
        self.tx_rate_limit_bcast_drops = attributes[:'tx_rate_limit_bcast_drops']
      end

      if attributes.has_key?(:'tx_rate_limit_mcast_drops')
        self.tx_rate_limit_mcast_drops = attributes[:'tx_rate_limit_mcast_drops']
      end

      if attributes.has_key?(:'ra_guard_drops')
        self.ra_guard_drops = attributes[:'ra_guard_drops']
      end

      if attributes.has_key?(:'nd_parse_errors')
        self.nd_parse_errors = attributes[:'nd_parse_errors']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          rx_ipv4_pkts == o.rx_ipv4_pkts &&
          tx_ipv4_pkts == o.tx_ipv4_pkts &&
          rx_ipv6_pkts == o.rx_ipv6_pkts &&
          tx_ipv6_pkts == o.tx_ipv6_pkts &&
          rx_arp_pkts == o.rx_arp_pkts &&
          tx_arp_pkts == o.tx_arp_pkts &&
          rx_garp_pkts == o.rx_garp_pkts &&
          tx_non_ip_pkts == o.tx_non_ip_pkts &&
          rx_non_ip_pkts == o.rx_non_ip_pkts &&
          rx_ns_pkts == o.rx_ns_pkts &&
          rx_unsolicited_na_pkts == o.rx_unsolicited_na_pkts &&
          rx_na_pkts == o.rx_na_pkts &&
          dhcp_client_block_ipv6_drops == o.dhcp_client_block_ipv6_drops &&
          dhcp_server_block_ipv6_drops == o.dhcp_server_block_ipv6_drops &&
          dhcp_client_block_ipv4_drops == o.dhcp_client_block_ipv4_drops &&
          dhcp_server_block_ipv4_drops == o.dhcp_server_block_ipv4_drops &&
          dhcp_client_validate_ipv4_drops == o.dhcp_client_validate_ipv4_drops &&
          spoof_guard_ipv4_drops == o.spoof_guard_ipv4_drops &&
          spoof_guard_arp_drops == o.spoof_guard_arp_drops &&
          spoof_guard_ipv6_drops == o.spoof_guard_ipv6_drops &&
          spoof_guard_nd_drops == o.spoof_guard_nd_drops &&
          spoof_guard_non_ip_drops == o.spoof_guard_non_ip_drops &&
          bpdu_filter_drops == o.bpdu_filter_drops &&
          rx_rate_limit_bcast_drops == o.rx_rate_limit_bcast_drops &&
          rx_rate_limit_mcast_drops == o.rx_rate_limit_mcast_drops &&
          tx_rate_limit_bcast_drops == o.tx_rate_limit_bcast_drops &&
          tx_rate_limit_mcast_drops == o.tx_rate_limit_mcast_drops &&
          ra_guard_drops == o.ra_guard_drops &&
          nd_parse_errors == o.nd_parse_errors
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [rx_ipv4_pkts, tx_ipv4_pkts, rx_ipv6_pkts, tx_ipv6_pkts, rx_arp_pkts, tx_arp_pkts, rx_garp_pkts, tx_non_ip_pkts, rx_non_ip_pkts, rx_ns_pkts, rx_unsolicited_na_pkts, rx_na_pkts, dhcp_client_block_ipv6_drops, dhcp_server_block_ipv6_drops, dhcp_client_block_ipv4_drops, dhcp_server_block_ipv4_drops, dhcp_client_validate_ipv4_drops, spoof_guard_ipv4_drops, spoof_guard_arp_drops, spoof_guard_ipv6_drops, spoof_guard_nd_drops, spoof_guard_non_ip_drops, bpdu_filter_drops, rx_rate_limit_bcast_drops, rx_rate_limit_mcast_drops, tx_rate_limit_bcast_drops, tx_rate_limit_mcast_drops, ra_guard_drops, nd_parse_errors].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
