=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # Contains realized state of the segment port. For example: transport node on which the port is located, discovered and realized address bindings of the port. 
  class SegmentPortState
    # Identifiers of the transport nodes where the port is located
    attr_accessor :transport_node_ids

    # Contains the list of address bindings for a segment port that were automatically dicovered using various snooping methods like ARP, DHCP etc. 
    attr_accessor :discovered_bindings

    # List of segment port bindings that are realized. This list may be populated from the discovered bindings or manual user specified bindings. This binding configuration can be used by features such as firewall, spoof-guard, traceflow etc. 
    attr_accessor :realized_bindings

    attr_accessor :external_address_binding

    # If any address binding discovered on the port is also found on other port on the same segment, then it is included in the duplicate bindings list along with the ID of the port with which it conflicts. 
    attr_accessor :duplicate_bindings

    attr_accessor :attachment

    # Real time ethernet config state on the port. The state is set as VALID if the corresponding Transport node's host switch has vSwitch-RT config set and INVALID if not. If a corresponding Transport node cannot be found then the state is set as UNKNOWN. 
    attr_accessor :real_time_eth_config_state

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transport_node_ids' => :'transport_node_ids',
        :'discovered_bindings' => :'discovered_bindings',
        :'realized_bindings' => :'realized_bindings',
        :'external_address_binding' => :'external_address_binding',
        :'duplicate_bindings' => :'duplicate_bindings',
        :'attachment' => :'attachment',
        :'real_time_eth_config_state' => :'real_time_eth_config_state'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'transport_node_ids' => :'Array<String>',
        :'discovered_bindings' => :'Array<AddressBindingEntry>',
        :'realized_bindings' => :'Array<AddressBindingEntry>',
        :'external_address_binding' => :'PolicyVpcLogPortEipBinding',
        :'duplicate_bindings' => :'Array<DuplicateAddressBindingEntry>',
        :'attachment' => :'SegmentPortAttachmentState',
        :'real_time_eth_config_state' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'transport_node_ids')
        if (value = attributes[:'transport_node_ids']).is_a?(Array)
          self.transport_node_ids = value
        end
      end

      if attributes.has_key?(:'discovered_bindings')
        if (value = attributes[:'discovered_bindings']).is_a?(Array)
          self.discovered_bindings = value
        end
      end

      if attributes.has_key?(:'realized_bindings')
        if (value = attributes[:'realized_bindings']).is_a?(Array)
          self.realized_bindings = value
        end
      end

      if attributes.has_key?(:'external_address_binding')
        self.external_address_binding = attributes[:'external_address_binding']
      end

      if attributes.has_key?(:'duplicate_bindings')
        if (value = attributes[:'duplicate_bindings']).is_a?(Array)
          self.duplicate_bindings = value
        end
      end

      if attributes.has_key?(:'attachment')
        self.attachment = attributes[:'attachment']
      end

      if attributes.has_key?(:'real_time_eth_config_state')
        self.real_time_eth_config_state = attributes[:'real_time_eth_config_state']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      real_time_eth_config_state_validator = EnumAttributeValidator.new('String', ['VALID', 'INVALID', 'UNKNOWN'])
      return false unless real_time_eth_config_state_validator.valid?(@real_time_eth_config_state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] real_time_eth_config_state Object to be assigned
    def real_time_eth_config_state=(real_time_eth_config_state)
      validator = EnumAttributeValidator.new('String', ['VALID', 'INVALID', 'UNKNOWN'])
      unless validator.valid?(real_time_eth_config_state)
        fail ArgumentError, 'invalid value for "real_time_eth_config_state", must be one of #{validator.allowable_values}.'
      end
      @real_time_eth_config_state = real_time_eth_config_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transport_node_ids == o.transport_node_ids &&
          discovered_bindings == o.discovered_bindings &&
          realized_bindings == o.realized_bindings &&
          external_address_binding == o.external_address_binding &&
          duplicate_bindings == o.duplicate_bindings &&
          attachment == o.attachment &&
          real_time_eth_config_state == o.real_time_eth_config_state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [transport_node_ids, discovered_bindings, realized_bindings, external_address_binding, duplicate_bindings, attachment, real_time_eth_config_state].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
