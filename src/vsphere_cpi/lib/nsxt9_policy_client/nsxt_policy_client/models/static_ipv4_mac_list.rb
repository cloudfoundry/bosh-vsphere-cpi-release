=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'date'

module Nsxt9PolicyClient
  # IP and MAC assignment specification for Static IP List.
  class StaticIpv4MacList
    attr_accessor :ip_assignment_type

    # List of IPs and MACs for transport node host switch virtual tunnel endpoints
    attr_accessor :ip_mac_list

    # Gateway IP
    attr_accessor :default_gateway

    # Subnet mask
    attr_accessor :subnet_mask

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ip_assignment_type' => :'ip_assignment_type',
        :'ip_mac_list' => :'ip_mac_list',
        :'default_gateway' => :'default_gateway',
        :'subnet_mask' => :'subnet_mask'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'ip_assignment_type' => :'String',
        :'ip_mac_list' => :'Array<IpMacPair>',
        :'default_gateway' => :'String',
        :'subnet_mask' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ip_assignment_type')
        self.ip_assignment_type = attributes[:'ip_assignment_type']
      end

      if attributes.has_key?(:'ip_mac_list')
        if (value = attributes[:'ip_mac_list']).is_a?(Array)
          self.ip_mac_list = value
        end
      end

      if attributes.has_key?(:'default_gateway')
        self.default_gateway = attributes[:'default_gateway']
      end

      if attributes.has_key?(:'subnet_mask')
        self.subnet_mask = attributes[:'subnet_mask']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @ip_assignment_type.nil?
        invalid_properties.push('invalid value for "ip_assignment_type", ip_assignment_type cannot be nil.')
      end

      if @ip_mac_list.nil?
        invalid_properties.push('invalid value for "ip_mac_list", ip_mac_list cannot be nil.')
      end

      if @default_gateway.nil?
        invalid_properties.push('invalid value for "default_gateway", default_gateway cannot be nil.')
      end

      if @subnet_mask.nil?
        invalid_properties.push('invalid value for "subnet_mask", subnet_mask cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @ip_assignment_type.nil?
      ip_assignment_type_validator = EnumAttributeValidator.new('String', ['StaticIpv4', 'StaticIpv4Pool', 'StaticIpv4List', 'Dhcpv4', 'StaticIpv6', 'StaticIpv6Pool', 'StaticIpv6List', 'StaticIpv6MacList', 'StaticIpv4MacList', 'Dhcpv6', 'AutoConf', 'NoAssignment'])
      return false unless ip_assignment_type_validator.valid?(@ip_assignment_type)
      return false if @ip_mac_list.nil?
      return false if @default_gateway.nil?
      return false if @subnet_mask.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_assignment_type Object to be assigned
    def ip_assignment_type=(ip_assignment_type)
      validator = EnumAttributeValidator.new('String', ['StaticIpv4', 'StaticIpv4Pool', 'StaticIpv4List', 'Dhcpv4', 'StaticIpv6', 'StaticIpv6Pool', 'StaticIpv6List', 'StaticIpv6MacList', 'StaticIpv4MacList', 'Dhcpv6', 'AutoConf', 'NoAssignment'])
      unless validator.valid?(ip_assignment_type)
        fail ArgumentError, 'invalid value for "ip_assignment_type", must be one of #{validator.allowable_values}.'
      end
      @ip_assignment_type = ip_assignment_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ip_assignment_type == o.ip_assignment_type &&
          ip_mac_list == o.ip_mac_list &&
          default_gateway == o.default_gateway &&
          subnet_mask == o.subnet_mask
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ip_assignment_type, ip_mac_list, default_gateway, subnet_mask].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Nsxt9PolicyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
