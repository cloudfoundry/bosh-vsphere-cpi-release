=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SegmentFirewallApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def create_or_update_infra_segment_security_feature(segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = create_or_update_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def create_or_update_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentFirewallApi.create_or_update_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentFirewallApi.create_or_update_infra_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SegmentFirewallApi.create_or_update_infra_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentFirewallApi#create_or_update_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def create_or_update_tier1_segment_security_feature(tier_1_id, segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = create_or_update_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def create_or_update_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentFirewallApi.create_or_update_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentFirewallApi.create_or_update_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentFirewallApi.create_or_update_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SegmentFirewallApi.create_or_update_tier1_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentFirewallApi#create_or_update_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def patch_infra_segment_security_feature(segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = patch_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def patch_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentFirewallApi.patch_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentFirewallApi.patch_infra_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SegmentFirewallApi.patch_infra_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentFirewallApi#patch_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def patch_tier1_segment_security_feature(tier_1_id, segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = patch_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def patch_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentFirewallApi.patch_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentFirewallApi.patch_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentFirewallApi.patch_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SegmentFirewallApi.patch_tier1_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentFirewallApi#patch_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
