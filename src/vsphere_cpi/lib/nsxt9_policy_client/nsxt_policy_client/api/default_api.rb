=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Metrics agent intent resource
    # Create Metrics agent intent resource
    # @param metrics_agent 
    # @param [Hash] opts the optional parameters
    # @return [MetricsAgent]
    def create_or_update_metrics_agent(metrics_agent, opts = {})
      data, _status_code, _headers = create_or_update_metrics_agent_with_http_info(metrics_agent, opts)
      data
    end

    # Create Metrics agent intent resource
    # Create Metrics agent intent resource
    # @param metrics_agent 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetricsAgent, Fixnum, Hash)>] MetricsAgent data, response status code and response headers
    def create_or_update_metrics_agent_with_http_info(metrics_agent, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_or_update_metrics_agent ...'
      end
      # verify the required parameter 'metrics_agent' is set
      if @api_client.config.client_side_validation && metrics_agent.nil?
        fail ArgumentError, "Missing the required parameter 'metrics_agent' when calling DefaultApi.create_or_update_metrics_agent"
      end
      # resource path
      local_var_path = '/infra/sites/agents/metrics'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(metrics_agent)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MetricsAgent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_or_update_metrics_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of maintenance mode for Analytics agents
    # Get current status of maintenance mode for Analytics agents
    # @param [Hash] opts the optional parameters
    # @return [AnalyticsMaintenanceMode]
    def get_analytics_agent_maintenance_mode(opts = {})
      data, _status_code, _headers = get_analytics_agent_maintenance_mode_with_http_info(opts)
      data
    end

    # Get current status of maintenance mode for Analytics agents
    # Get current status of maintenance mode for Analytics agents
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticsMaintenanceMode, Fixnum, Hash)>] AnalyticsMaintenanceMode data, response status code and response headers
    def get_analytics_agent_maintenance_mode_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_analytics_agent_maintenance_mode ...'
      end
      # resource path
      local_var_path = '/infra/sites/agents/intelligence/maintenance'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticsMaintenanceMode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_analytics_agent_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch current Metric agent config
    # Fetch current Metric agent config
    # @param [Hash] opts the optional parameters
    # @return [MetricsAgent]
    def get_metrics_agent(opts = {})
      data, _status_code, _headers = get_metrics_agent_with_http_info(opts)
      data
    end

    # Fetch current Metric agent config
    # Fetch current Metric agent config
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetricsAgent, Fixnum, Hash)>] MetricsAgent data, response status code and response headers
    def get_metrics_agent_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_metrics_agent ...'
      end
      # resource path
      local_var_path = '/infra/sites/agents/metrics'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MetricsAgent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_metrics_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get ip address usage for vpc
    # Retrieves the usage information for IP addresses within a specific VPC. This information provides insights into the allocation and utilization of ipaddress by the VPC and its subnets. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcIpAddressBlocks]
    def get_vpc_ip_address_usage(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_ip_address_usage_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get ip address usage for vpc
    # Retrieves the usage information for IP addresses within a specific VPC. This information provides insights into the allocation and utilization of ipaddress by the VPC and its subnets. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcIpAddressBlocks, Fixnum, Hash)>] VpcIpAddressBlocks data, response status code and response headers
    def get_vpc_ip_address_usage_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_vpc_ip_address_usage ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DefaultApi.get_vpc_ip_address_usage"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DefaultApi.get_vpc_ip_address_usage"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling DefaultApi.get_vpc_ip_address_usage"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/ip-address-usage'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcIpAddressBlocks')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_vpc_ip_address_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Metrics agent intent resource
    # Create Metrics agent intent resource
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param metrics_agent 
    # @param [Hash] opts the optional parameters
    # @return [MetricsAgent]
    def orgs_org_id_projects_project_id_infra_create_or_update_metrics_agent(org_id, project_id, metrics_agent, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_metrics_agent_with_http_info(org_id, project_id, metrics_agent, opts)
      data
    end

    # Create Metrics agent intent resource
    # Create Metrics agent intent resource
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param metrics_agent 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetricsAgent, Fixnum, Hash)>] MetricsAgent data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_metrics_agent_with_http_info(org_id, project_id, metrics_agent, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.orgs_org_id_projects_project_id_infra_create_or_update_metrics_agent ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DefaultApi.orgs_org_id_projects_project_id_infra_create_or_update_metrics_agent"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DefaultApi.orgs_org_id_projects_project_id_infra_create_or_update_metrics_agent"
      end
      # verify the required parameter 'metrics_agent' is set
      if @api_client.config.client_side_validation && metrics_agent.nil?
        fail ArgumentError, "Missing the required parameter 'metrics_agent' when calling DefaultApi.orgs_org_id_projects_project_id_infra_create_or_update_metrics_agent"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/sites/agents/metrics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(metrics_agent)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MetricsAgent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#orgs_org_id_projects_project_id_infra_create_or_update_metrics_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of maintenance mode for Analytics agents
    # Get current status of maintenance mode for Analytics agents
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [AnalyticsMaintenanceMode]
    def orgs_org_id_projects_project_id_infra_get_analytics_agent_maintenance_mode(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_analytics_agent_maintenance_mode_with_http_info(org_id, project_id, opts)
      data
    end

    # Get current status of maintenance mode for Analytics agents
    # Get current status of maintenance mode for Analytics agents
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticsMaintenanceMode, Fixnum, Hash)>] AnalyticsMaintenanceMode data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_analytics_agent_maintenance_mode_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.orgs_org_id_projects_project_id_infra_get_analytics_agent_maintenance_mode ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DefaultApi.orgs_org_id_projects_project_id_infra_get_analytics_agent_maintenance_mode"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DefaultApi.orgs_org_id_projects_project_id_infra_get_analytics_agent_maintenance_mode"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/sites/agents/intelligence/maintenance'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticsMaintenanceMode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#orgs_org_id_projects_project_id_infra_get_analytics_agent_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch current Metric agent config
    # Fetch current Metric agent config
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [MetricsAgent]
    def orgs_org_id_projects_project_id_infra_get_metrics_agent(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_metrics_agent_with_http_info(org_id, project_id, opts)
      data
    end

    # Fetch current Metric agent config
    # Fetch current Metric agent config
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetricsAgent, Fixnum, Hash)>] MetricsAgent data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_metrics_agent_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.orgs_org_id_projects_project_id_infra_get_metrics_agent ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DefaultApi.orgs_org_id_projects_project_id_infra_get_metrics_agent"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DefaultApi.orgs_org_id_projects_project_id_infra_get_metrics_agent"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/sites/agents/metrics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MetricsAgent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#orgs_org_id_projects_project_id_infra_get_metrics_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Activate/deactivate maintenance mode for Analytics agents
    # Activate/deactivate maintenance mode for Analytics agents
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param analytics_maintenance_mode 
    # @param [Hash] opts the optional parameters
    # @return [AnalyticsMaintenanceMode]
    def orgs_org_id_projects_project_id_infra_update_analytics_agent_maintenance_mode(org_id, project_id, analytics_maintenance_mode, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_analytics_agent_maintenance_mode_with_http_info(org_id, project_id, analytics_maintenance_mode, opts)
      data
    end

    # Activate/deactivate maintenance mode for Analytics agents
    # Activate/deactivate maintenance mode for Analytics agents
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param analytics_maintenance_mode 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticsMaintenanceMode, Fixnum, Hash)>] AnalyticsMaintenanceMode data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_analytics_agent_maintenance_mode_with_http_info(org_id, project_id, analytics_maintenance_mode, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.orgs_org_id_projects_project_id_infra_update_analytics_agent_maintenance_mode ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DefaultApi.orgs_org_id_projects_project_id_infra_update_analytics_agent_maintenance_mode"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DefaultApi.orgs_org_id_projects_project_id_infra_update_analytics_agent_maintenance_mode"
      end
      # verify the required parameter 'analytics_maintenance_mode' is set
      if @api_client.config.client_side_validation && analytics_maintenance_mode.nil?
        fail ArgumentError, "Missing the required parameter 'analytics_maintenance_mode' when calling DefaultApi.orgs_org_id_projects_project_id_infra_update_analytics_agent_maintenance_mode"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/sites/agents/intelligence/maintenance'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(analytics_maintenance_mode)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticsMaintenanceMode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#orgs_org_id_projects_project_id_infra_update_analytics_agent_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Activate/deactivate maintenance mode for Analytics agents
    # Activate/deactivate maintenance mode for Analytics agents
    # @param analytics_maintenance_mode 
    # @param [Hash] opts the optional parameters
    # @return [AnalyticsMaintenanceMode]
    def update_analytics_agent_maintenance_mode(analytics_maintenance_mode, opts = {})
      data, _status_code, _headers = update_analytics_agent_maintenance_mode_with_http_info(analytics_maintenance_mode, opts)
      data
    end

    # Activate/deactivate maintenance mode for Analytics agents
    # Activate/deactivate maintenance mode for Analytics agents
    # @param analytics_maintenance_mode 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticsMaintenanceMode, Fixnum, Hash)>] AnalyticsMaintenanceMode data, response status code and response headers
    def update_analytics_agent_maintenance_mode_with_http_info(analytics_maintenance_mode, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_analytics_agent_maintenance_mode ...'
      end
      # verify the required parameter 'analytics_maintenance_mode' is set
      if @api_client.config.client_side_validation && analytics_maintenance_mode.nil?
        fail ArgumentError, "Missing the required parameter 'analytics_maintenance_mode' when calling DefaultApi.update_analytics_agent_maintenance_mode"
      end
      # resource path
      local_var_path = '/infra/sites/agents/intelligence/maintenance'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(analytics_maintenance_mode)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticsMaintenanceMode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_analytics_agent_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
