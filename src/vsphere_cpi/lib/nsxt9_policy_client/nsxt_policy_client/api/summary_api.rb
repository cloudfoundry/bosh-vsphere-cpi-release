=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SummaryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier0_ipsec_vpn_session_summary(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_ipsec_vpn_session_summary_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier0_ipsec_vpn_session_summary_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SummaryApi.get_tier0_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SummaryApi.get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SummaryApi.get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SummaryApi.get_tier0_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SummaryApi#get_tier0_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier0_vpn_ipsec_vpn_session_summary(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SummaryApi.get_tier0_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SummaryApi.get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SummaryApi.get_tier0_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SummaryApi#get_tier0_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier1_ipsec_vpn_session_summary(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_ipsec_vpn_session_summary_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier1_ipsec_vpn_session_summary_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SummaryApi.get_tier1_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SummaryApi.get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SummaryApi.get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SummaryApi.get_tier1_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SummaryApi#get_tier1_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier1_vpn_ipsec_vpn_session_summary(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SummaryApi.get_tier1_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SummaryApi.get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SummaryApi.get_tier1_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SummaryApi#get_tier1_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary(org_id, project_id, tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SummaryApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SummaryApi#orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary(org_id, project_id, tier_0_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SummaryApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SummaryApi#orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary(org_id, project_id, tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SummaryApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SummaryApi#orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SummaryApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SummaryApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SummaryApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
