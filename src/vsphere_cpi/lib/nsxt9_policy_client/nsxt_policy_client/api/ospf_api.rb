=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class OSPFApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update a OSPF Area config
    # If OSPF Area config is not already present, create OSPF Area config. If it already exists, replace the OSPF Area config with this object. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param area_id 
    # @param ospf_area_config 
    # @param [Hash] opts the optional parameters
    # @return [OspfAreaConfig]
    def create_or_replace_ospf_area_config(tier_0_id, locale_service_id, area_id, ospf_area_config, opts = {})
      data, _status_code, _headers = create_or_replace_ospf_area_config_with_http_info(tier_0_id, locale_service_id, area_id, ospf_area_config, opts)
      data
    end

    # Create or update a OSPF Area config
    # If OSPF Area config is not already present, create OSPF Area config. If it already exists, replace the OSPF Area config with this object. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param area_id 
    # @param ospf_area_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OspfAreaConfig, Fixnum, Hash)>] OspfAreaConfig data, response status code and response headers
    def create_or_replace_ospf_area_config_with_http_info(tier_0_id, locale_service_id, area_id, ospf_area_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.create_or_replace_ospf_area_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.create_or_replace_ospf_area_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.create_or_replace_ospf_area_config"
      end
      # verify the required parameter 'area_id' is set
      if @api_client.config.client_side_validation && area_id.nil?
        fail ArgumentError, "Missing the required parameter 'area_id' when calling OSPFApi.create_or_replace_ospf_area_config"
      end
      # verify the required parameter 'ospf_area_config' is set
      if @api_client.config.client_side_validation && ospf_area_config.nil?
        fail ArgumentError, "Missing the required parameter 'ospf_area_config' when calling OSPFApi.create_or_replace_ospf_area_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf/areas/{area-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'area-id' + '}', area_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ospf_area_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OspfAreaConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#create_or_replace_ospf_area_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a OSPF routing config
    # If OSPF routing config is not already present, create OSPF routing config. If it already exists, replace the OSPF routing config with this object. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param ospf_routing_config 
    # @param [Hash] opts the optional parameters
    # @return [OspfRoutingConfig]
    def create_or_replace_ospf_routing_config(tier_0_id, locale_service_id, ospf_routing_config, opts = {})
      data, _status_code, _headers = create_or_replace_ospf_routing_config_with_http_info(tier_0_id, locale_service_id, ospf_routing_config, opts)
      data
    end

    # Create or update a OSPF routing config
    # If OSPF routing config is not already present, create OSPF routing config. If it already exists, replace the OSPF routing config with this object. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param ospf_routing_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OspfRoutingConfig, Fixnum, Hash)>] OspfRoutingConfig data, response status code and response headers
    def create_or_replace_ospf_routing_config_with_http_info(tier_0_id, locale_service_id, ospf_routing_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.create_or_replace_ospf_routing_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.create_or_replace_ospf_routing_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.create_or_replace_ospf_routing_config"
      end
      # verify the required parameter 'ospf_routing_config' is set
      if @api_client.config.client_side_validation && ospf_routing_config.nil?
        fail ArgumentError, "Missing the required parameter 'ospf_routing_config' when calling OSPFApi.create_or_replace_ospf_routing_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ospf_routing_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OspfRoutingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#create_or_replace_ospf_routing_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete OSPF Area config
    # Delete OSPF Area config 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param area_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ospf_area_config(tier_0_id, locale_service_id, area_id, opts = {})
      delete_ospf_area_config_with_http_info(tier_0_id, locale_service_id, area_id, opts)
      nil
    end

    # Delete OSPF Area config
    # Delete OSPF Area config 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param area_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ospf_area_config_with_http_info(tier_0_id, locale_service_id, area_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.delete_ospf_area_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.delete_ospf_area_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.delete_ospf_area_config"
      end
      # verify the required parameter 'area_id' is set
      if @api_client.config.client_side_validation && area_id.nil?
        fail ArgumentError, "Missing the required parameter 'area_id' when calling OSPFApi.delete_ospf_area_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf/areas/{area-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'area-id' + '}', area_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#delete_ospf_area_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get OSPF database information
    # Get OSPF database information. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :area_id OSPF area identifier
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyOspfDatabaseListResult]
    def get_ospf_database(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = get_ospf_database_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Get OSPF database information
    # Get OSPF database information. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :area_id OSPF area identifier
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyOspfDatabaseListResult, Fixnum, Hash)>] PolicyOspfDatabaseListResult data, response status code and response headers
    def get_ospf_database_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.get_ospf_database ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.get_ospf_database"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.get_ospf_database"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.get_ospf_database, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.get_ospf_database, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf/database'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'area_id'] = opts[:'area_id'] if !opts[:'area_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyOspfDatabaseListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#get_ospf_database\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get OSPF Database information in CSV format
    # Get OSPF Database information in CSV format. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :area_id OSPF area identifier
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OspfDatabaseListResultInCsvFormat]
    def get_ospf_database_in_csv_format(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = get_ospf_database_in_csv_format_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Get OSPF Database information in CSV format
    # Get OSPF Database information in CSV format. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :area_id OSPF area identifier
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OspfDatabaseListResultInCsvFormat, Fixnum, Hash)>] OspfDatabaseListResultInCsvFormat data, response status code and response headers
    def get_ospf_database_in_csv_format_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.get_ospf_database_in_csv_format ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.get_ospf_database_in_csv_format"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.get_ospf_database_in_csv_format"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.get_ospf_database_in_csv_format, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.get_ospf_database_in_csv_format, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf/database?format=csv'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'area_id'] = opts[:'area_id'] if !opts[:'area_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OspfDatabaseListResultInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#get_ospf_database_in_csv_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get OSPF neighbor information
    # Get OSPF neighbor information. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :neighbor_address IPv4 or IPv6 address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OspfNeighborsStatusListResult]
    def get_ospf_neighbors(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = get_ospf_neighbors_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Get OSPF neighbor information
    # Get OSPF neighbor information. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :neighbor_address IPv4 or IPv6 address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OspfNeighborsStatusListResult, Fixnum, Hash)>] OspfNeighborsStatusListResult data, response status code and response headers
    def get_ospf_neighbors_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.get_ospf_neighbors ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.get_ospf_neighbors"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.get_ospf_neighbors"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.get_ospf_neighbors, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.get_ospf_neighbors, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf/neighbors'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'neighbor_address'] = opts[:'neighbor_address'] if !opts[:'neighbor_address'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OspfNeighborsStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#get_ospf_neighbors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get OSPF route information
    # Get OSPF route information. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix CIDR network address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OspfRoutesListResult]
    def get_ospf_routes(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = get_ospf_routes_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Get OSPF route information
    # Get OSPF route information. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix CIDR network address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OspfRoutesListResult, Fixnum, Hash)>] OspfRoutesListResult data, response status code and response headers
    def get_ospf_routes_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.get_ospf_routes ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.get_ospf_routes"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.get_ospf_routes"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.get_ospf_routes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.get_ospf_routes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf/routes'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OspfRoutesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#get_ospf_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get OSPF route information in CSV format
    # Get OSPF route information in CSV format. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix CIDR network address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OspfRoutesListResultInCsvFormat]
    def get_ospf_routes_in_csv_format(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = get_ospf_routes_in_csv_format_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Get OSPF route information in CSV format
    # Get OSPF route information in CSV format. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix CIDR network address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OspfRoutesListResultInCsvFormat, Fixnum, Hash)>] OspfRoutesListResultInCsvFormat data, response status code and response headers
    def get_ospf_routes_in_csv_format_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.get_ospf_routes_in_csv_format ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.get_ospf_routes_in_csv_format"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.get_ospf_routes_in_csv_format"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.get_ospf_routes_in_csv_format, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.get_ospf_routes_in_csv_format, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf/routes?format=csv'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OspfRoutesListResultInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#get_ospf_routes_in_csv_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List OSPF area configurations
    # List all OSPF area configurations. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OspfAreaConfigListResult]
    def list_policy_ospf_area_config(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_policy_ospf_area_config_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # List OSPF area configurations
    # List all OSPF area configurations. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OspfAreaConfigListResult, Fixnum, Hash)>] OspfAreaConfigListResult data, response status code and response headers
    def list_policy_ospf_area_config_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.list_policy_ospf_area_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.list_policy_ospf_area_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.list_policy_ospf_area_config"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.list_policy_ospf_area_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OSPFApi.list_policy_ospf_area_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf/areas'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OspfAreaConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#list_policy_ospf_area_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a OSPF Area config
    # If OSPF Area config is not already present, create OSPF Area config. If it already exists, replace the OSPF Area config with this object. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param area_id 
    # @param ospf_area_config 
    # @param [Hash] opts the optional parameters
    # @return [OspfAreaConfig]
    def patch_ospf_area_config(tier_0_id, locale_service_id, area_id, ospf_area_config, opts = {})
      data, _status_code, _headers = patch_ospf_area_config_with_http_info(tier_0_id, locale_service_id, area_id, ospf_area_config, opts)
      data
    end

    # Create or update a OSPF Area config
    # If OSPF Area config is not already present, create OSPF Area config. If it already exists, replace the OSPF Area config with this object. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param area_id 
    # @param ospf_area_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OspfAreaConfig, Fixnum, Hash)>] OspfAreaConfig data, response status code and response headers
    def patch_ospf_area_config_with_http_info(tier_0_id, locale_service_id, area_id, ospf_area_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.patch_ospf_area_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.patch_ospf_area_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.patch_ospf_area_config"
      end
      # verify the required parameter 'area_id' is set
      if @api_client.config.client_side_validation && area_id.nil?
        fail ArgumentError, "Missing the required parameter 'area_id' when calling OSPFApi.patch_ospf_area_config"
      end
      # verify the required parameter 'ospf_area_config' is set
      if @api_client.config.client_side_validation && ospf_area_config.nil?
        fail ArgumentError, "Missing the required parameter 'ospf_area_config' when calling OSPFApi.patch_ospf_area_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf/areas/{area-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'area-id' + '}', area_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ospf_area_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OspfAreaConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#patch_ospf_area_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a OSPF routing config
    # If OSPF routing config is not already present, create OSPF routing config. If it already exists, replace the OSPF routing config with this object. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param ospf_routing_config 
    # @param [Hash] opts the optional parameters
    # @return [OspfRoutingConfig]
    def patch_ospf_routing_config(tier_0_id, locale_service_id, ospf_routing_config, opts = {})
      data, _status_code, _headers = patch_ospf_routing_config_with_http_info(tier_0_id, locale_service_id, ospf_routing_config, opts)
      data
    end

    # Create or update a OSPF routing config
    # If OSPF routing config is not already present, create OSPF routing config. If it already exists, replace the OSPF routing config with this object. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param ospf_routing_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OspfRoutingConfig, Fixnum, Hash)>] OspfRoutingConfig data, response status code and response headers
    def patch_ospf_routing_config_with_http_info(tier_0_id, locale_service_id, ospf_routing_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.patch_ospf_routing_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.patch_ospf_routing_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.patch_ospf_routing_config"
      end
      # verify the required parameter 'ospf_routing_config' is set
      if @api_client.config.client_side_validation && ospf_routing_config.nil?
        fail ArgumentError, "Missing the required parameter 'ospf_routing_config' when calling OSPFApi.patch_ospf_routing_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ospf_routing_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OspfRoutingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#patch_ospf_routing_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read OSPF Area config
    # Read OSPF Area config 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param area_id 
    # @param [Hash] opts the optional parameters
    # @return [OspfAreaConfig]
    def read_ospf_area_config(tier_0_id, locale_service_id, area_id, opts = {})
      data, _status_code, _headers = read_ospf_area_config_with_http_info(tier_0_id, locale_service_id, area_id, opts)
      data
    end

    # Read OSPF Area config
    # Read OSPF Area config 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param area_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OspfAreaConfig, Fixnum, Hash)>] OspfAreaConfig data, response status code and response headers
    def read_ospf_area_config_with_http_info(tier_0_id, locale_service_id, area_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.read_ospf_area_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.read_ospf_area_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.read_ospf_area_config"
      end
      # verify the required parameter 'area_id' is set
      if @api_client.config.client_side_validation && area_id.nil?
        fail ArgumentError, "Missing the required parameter 'area_id' when calling OSPFApi.read_ospf_area_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf/areas/{area-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'area-id' + '}', area_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OspfAreaConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#read_ospf_area_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read OSPF routing config
    # Read OSPF routing config 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [OspfRoutingConfig]
    def read_ospf_routing_config(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = read_ospf_routing_config_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Read OSPF routing config
    # Read OSPF routing config 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OspfRoutingConfig, Fixnum, Hash)>] OspfRoutingConfig data, response status code and response headers
    def read_ospf_routing_config_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OSPFApi.read_ospf_routing_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling OSPFApi.read_ospf_routing_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling OSPFApi.read_ospf_routing_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ospf'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OspfRoutingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OSPFApi#read_ospf_routing_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
