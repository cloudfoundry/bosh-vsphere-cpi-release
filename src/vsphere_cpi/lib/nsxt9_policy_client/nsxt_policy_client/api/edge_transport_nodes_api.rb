=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class EdgeTransportNodesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update a LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, update it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNode]
    def create_or_update_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      data, _status_code, _headers = create_or_update_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts)
      data
    end

    # Create or update a LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, update it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNode, Fixnum, Hash)>] PolicyEdgeTransportNode data, response status code and response headers
    def create_or_update_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.create_or_update_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.create_or_update_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.create_or_update_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EdgeTransportNodesApi.create_or_update_policy_edge_transport_node"
      end
      # verify the required parameter 'policy_edge_transport_node' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node' when calling EdgeTransportNodesApi.create_or_update_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#create_or_update_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Edge Transport Node
    # Delete Edge Transport Node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      delete_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      nil
    end

    # Delete Edge Transport Node
    # Delete Edge Transport Node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.delete_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.delete_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.delete_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EdgeTransportNodesApi.delete_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#delete_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Transport Node under an Enforcement Point
    # Read an Edge Transport Node  under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNode]
    def get_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # Read an Edge Transport Node under an Enforcement Point
    # Read an Edge Transport Node  under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNode, Fixnum, Hash)>] PolicyEdgeTransportNode data, response status code and response headers
    def get_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.get_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#get_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read counters for edge transport node interfaces.
    # This API returns the counters of the specified interface. The counters reset on reboot or redeploy of the appliance or restart of the data plane. NSX Manager polls the edge-transport-node every minute (by default) to update the data returned on this API. If you need near realtime values, use the query parameter \\\"?source=realtime\\\" to the API and it will make NSX Manager collect the statistics from the edge transport node and returns the updated counters. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [NodeInterfaceStatisticsProperties]
    def get_policy_edge_transport_node_interface_statistics(site_id, enforcementpoint_id, edge_transport_node_id, interface_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_interface_statistics_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, interface_id, opts)
      data
    end

    # Read counters for edge transport node interfaces.
    # This API returns the counters of the specified interface. The counters reset on reboot or redeploy of the appliance or restart of the data plane. NSX Manager polls the edge-transport-node every minute (by default) to update the data returned on this API. If you need near realtime values, use the query parameter \\\&quot;?source&#x3D;realtime\\\&quot; to the API and it will make NSX Manager collect the statistics from the edge transport node and returns the updated counters. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfaceStatisticsProperties, Fixnum, Hash)>] NodeInterfaceStatisticsProperties data, response status code and response headers
    def get_policy_edge_transport_node_interface_statistics_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.get_policy_edge_transport_node_interface_statistics ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node_interface_statistics"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node_interface_statistics"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node_interface_statistics"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node_interface_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/network/interfaces/{interface-id}/statistics'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfaceStatisticsProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#get_policy_edge_transport_node_interface_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy EdgeTransport Node's State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNodeState]
    def get_policy_edge_transport_node_state(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_state_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # Get a Policy EdgeTransport Node&#39;s State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNodeState, Fixnum, Hash)>] PolicyEdgeTransportNodeState data, response status code and response headers
    def get_policy_edge_transport_node_state_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.get_policy_edge_transport_node_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node_state"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node_state"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#get_policy_edge_transport_node_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy EdgeTransport Node's status info under an Enforcement Point
    # Returns information about the current status of the edge transport node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [TransportNodeStatus]
    def get_policy_edge_transport_node_status(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_status_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # Get a Policy EdgeTransport Node&#39;s status info under an Enforcement Point
    # Returns information about the current status of the edge transport node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(TransportNodeStatus, Fixnum, Hash)>] TransportNodeStatus data, response status code and response headers
    def get_policy_edge_transport_node_status_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.get_policy_edge_transport_node_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node_status"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_node_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#get_policy_edge_transport_node_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get datapath troubleshoot config of edge transport nodes
    # This API is used to fetch the control packet drop log config at enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNodeDatapathTroubleshooting]
    def get_policy_edge_transport_nodes_troubleshoot_config(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Get datapath troubleshoot config of edge transport nodes
    # This API is used to fetch the control packet drop log config at enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNodeDatapathTroubleshooting, Fixnum, Hash)>] PolicyEdgeTransportNodeDatapathTroubleshooting data, response status code and response headers
    def get_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.get_policy_edge_transport_nodes_troubleshoot_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_nodes_troubleshoot_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling EdgeTransportNodesApi.get_policy_edge_transport_nodes_troubleshoot_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-transport-nodes/troubleshoot/datapath'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeDatapathTroubleshooting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#get_policy_edge_transport_nodes_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Transport Node under an Enforcement Point
    # List Edge Transport Nodes under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :in_maintenance_mode Maintenance mode flag
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :management_ip Edge transport node management IP address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_zone_path Transport zone path
    # @return [PolicyEdgeTransportNodeListResult]
    def list_policy_edge_transport_node(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List Edge Transport Node under an Enforcement Point
    # List Edge Transport Nodes under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :in_maintenance_mode Maintenance mode flag
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :management_ip Edge transport node management IP address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_zone_path Transport zone path
    # @return [Array<(PolicyEdgeTransportNodeListResult, Fixnum, Hash)>] PolicyEdgeTransportNodeListResult data, response status code and response headers
    def list_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.list_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.list_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.list_policy_edge_transport_node"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeTransportNodesApi.list_policy_edge_transport_node, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeTransportNodesApi.list_policy_edge_transport_node, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'in_maintenance_mode'] = opts[:'in_maintenance_mode'] if !opts[:'in_maintenance_mode'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'management_ip'] = opts[:'management_ip'] if !opts[:'management_ip'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'transport_zone_path'] = opts[:'transport_zone_path'] if !opts[:'transport_zone_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#list_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the specified edge transport node's network interfaces.
    # Returns the number of interfaces on the edge transport node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :admin_status Admin status of the interface
    # @option opts [String] :source Data source type.
    # @return [NodeInterfacePropertiesListResult]
    def list_policy_edge_transport_node_interfaces(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_node_interfaces_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # List the specified edge transport node&#39;s network interfaces.
    # Returns the number of interfaces on the edge transport node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :admin_status Admin status of the interface
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfacePropertiesListResult, Fixnum, Hash)>] NodeInterfacePropertiesListResult data, response status code and response headers
    def list_policy_edge_transport_node_interfaces_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.list_policy_edge_transport_node_interfaces ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.list_policy_edge_transport_node_interfaces"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.list_policy_edge_transport_node_interfaces"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EdgeTransportNodesApi.list_policy_edge_transport_node_interfaces"
      end
      if @api_client.config.client_side_validation && opts[:'admin_status'] && !['UP', 'DOWN'].include?(opts[:'admin_status'])
        fail ArgumentError, 'invalid value for "admin_status", must be one of UP, DOWN'
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/network/interfaces'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'admin_status'] = opts[:'admin_status'] if !opts[:'admin_status'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfacePropertiesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#list_policy_edge_transport_node_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy EdgeTransport Node's State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mm_state maintenance mode state
    # @option opts [String] :status Realized state of transport nodes
    # @option opts [String] :vtep_ip Virtual tunnel endpoint ip address of transport node
    # @return [PolicyEdgeTransportNodeStateListResult]
    def list_policy_edge_transport_nodes_state(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_nodes_state_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Get a Policy EdgeTransport Node&#39;s State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mm_state maintenance mode state
    # @option opts [String] :status Realized state of transport nodes
    # @option opts [String] :vtep_ip Virtual tunnel endpoint ip address of transport node
    # @return [Array<(PolicyEdgeTransportNodeStateListResult, Fixnum, Hash)>] PolicyEdgeTransportNodeStateListResult data, response status code and response headers
    def list_policy_edge_transport_nodes_state_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.list_policy_edge_transport_nodes_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.list_policy_edge_transport_nodes_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.list_policy_edge_transport_nodes_state"
      end
      if @api_client.config.client_side_validation && opts[:'mm_state'] && !['ENTERING', 'ENABLED', 'EXITING', 'DISABLED'].include?(opts[:'mm_state'])
        fail ArgumentError, 'invalid value for "mm_state", must be one of ENTERING, ENABLED, EXITING, DISABLED'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['PENDING', 'IN_PROGRESS', 'SUCCESS', 'PARTIAL_SUCCESS', 'FAILED', 'ORPHANED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDING, IN_PROGRESS, SUCCESS, PARTIAL_SUCCESS, FAILED, ORPHANED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'mm_state'] = opts[:'mm_state'] if !opts[:'mm_state'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'vtep_ip'] = opts[:'vtep_ip'] if !opts[:'vtep_ip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#list_policy_edge_transport_nodes_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of all edge transport nodes. The service layer does not support source = realtime or cached.
    # Get high-level summary of all edge transport nodes. The service layer does not support source = realtime or cached.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusListResult]
    def list_policy_edge_transport_nodes_status(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_nodes_status_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Get high-level summary of all edge transport nodes. The service layer does not support source &#x3D; realtime or cached.
    # Get high-level summary of all edge transport nodes. The service layer does not support source &#x3D; realtime or cached.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_policy_edge_transport_nodes_status_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.list_policy_edge_transport_nodes_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.list_policy_edge_transport_nodes_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.list_policy_edge_transport_nodes_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeTransportNodesApi.list_policy_edge_transport_nodes_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeTransportNodesApi.list_policy_edge_transport_nodes_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED', 'UNKNOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED, UNKNOWN'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_dfw_heap_stats'] = opts[:'include_dfw_heap_stats'] if !opts[:'include_dfw_heap_stats'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#list_policy_edge_transport_nodes_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a new LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, patch it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      patch_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts)
      nil
    end

    # Patch a new LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, patch it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.patch_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.patch_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.patch_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EdgeTransportNodesApi.patch_policy_edge_transport_node"
      end
      # verify the required parameter 'policy_edge_transport_node' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node' when calling EdgeTransportNodesApi.patch_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#patch_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable or Disable the datapath troubleshoot config on edge transport nodes
    # This API is used to enable/disable the control packet drop log config in all edge transport nodes at the enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param policy_edge_transport_node_datapath_troubleshooting 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_transport_nodes_troubleshoot_config(site_id, enforcement_point_id, policy_edge_transport_node_datapath_troubleshooting, opts = {})
      patch_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, policy_edge_transport_node_datapath_troubleshooting, opts)
      nil
    end

    # Enable or Disable the datapath troubleshoot config on edge transport nodes
    # This API is used to enable/disable the control packet drop log config in all edge transport nodes at the enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param policy_edge_transport_node_datapath_troubleshooting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, policy_edge_transport_node_datapath_troubleshooting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.patch_policy_edge_transport_nodes_troubleshoot_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.patch_policy_edge_transport_nodes_troubleshoot_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling EdgeTransportNodesApi.patch_policy_edge_transport_nodes_troubleshoot_config"
      end
      # verify the required parameter 'policy_edge_transport_node_datapath_troubleshooting' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node_datapath_troubleshooting.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node_datapath_troubleshooting' when calling EdgeTransportNodesApi.patch_policy_edge_transport_nodes_troubleshoot_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-transport-nodes/troubleshoot/datapath'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node_datapath_troubleshooting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#patch_policy_edge_transport_nodes_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Edge Transport Node Enter Maintenance Mode Action API
    # Put edge transport node into maintenance mode if there is no VIFs attached. When EdgeTransportNode is in maintenance mode, no configuration changes are allowed. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def policy_edge_transport_node_enter_maintenance_mode(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      policy_edge_transport_node_enter_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      nil
    end

    # Policy Edge Transport Node Enter Maintenance Mode Action API
    # Put edge transport node into maintenance mode if there is no VIFs attached. When EdgeTransportNode is in maintenance mode, no configuration changes are allowed. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def policy_edge_transport_node_enter_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.policy_edge_transport_node_enter_maintenance_mode ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.policy_edge_transport_node_enter_maintenance_mode"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.policy_edge_transport_node_enter_maintenance_mode"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EdgeTransportNodesApi.policy_edge_transport_node_enter_maintenance_mode"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/action/enter-maintenance-mode'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#policy_edge_transport_node_enter_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Edge Transport Node Exit Maintenance Mode Action API
    # This APi will exit from maintenance mode 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def policy_edge_transport_node_exit_maintenance_mode(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      policy_edge_transport_node_exit_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      nil
    end

    # Policy Edge Transport Node Exit Maintenance Mode Action API
    # This APi will exit from maintenance mode 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def policy_edge_transport_node_exit_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.policy_edge_transport_node_exit_maintenance_mode ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.policy_edge_transport_node_exit_maintenance_mode"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.policy_edge_transport_node_exit_maintenance_mode"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EdgeTransportNodesApi.policy_edge_transport_node_exit_maintenance_mode"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/action/exit-maintenance-mode'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#policy_edge_transport_node_exit_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Redeploy Edge Transport Node
    # Redeploys an edge transport node at NSX Manager that replaces the edge transport node with identifier &lt;node-id&gt;. If NSX Manager can access the specified edge node, then the node is put into maintenance mode and then the associated VM is deleted. This is a means to reset all configuration on the edge node. The communication channel between NSX Manager and edge is established after this operation. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNode]
    def redeploy_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      data, _status_code, _headers = redeploy_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts)
      data
    end

    # Redeploy Edge Transport Node
    # Redeploys an edge transport node at NSX Manager that replaces the edge transport node with identifier &amp;lt;node-id&amp;gt;. If NSX Manager can access the specified edge node, then the node is put into maintenance mode and then the associated VM is deleted. This is a means to reset all configuration on the edge node. The communication channel between NSX Manager and edge is established after this operation. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNode, Fixnum, Hash)>] PolicyEdgeTransportNode data, response status code and response headers
    def redeploy_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeTransportNodesApi.redeploy_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeTransportNodesApi.redeploy_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeTransportNodesApi.redeploy_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EdgeTransportNodesApi.redeploy_policy_edge_transport_node"
      end
      # verify the required parameter 'policy_edge_transport_node' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node' when calling EdgeTransportNodesApi.redeploy_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/action/redeploy'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeTransportNodesApi#redeploy_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
