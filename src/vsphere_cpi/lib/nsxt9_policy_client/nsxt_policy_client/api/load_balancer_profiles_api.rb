=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class LoadBalancerProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_app_profile(lb_app_profile_id, opts = {})
      delete_lb_app_profile_with_http_info(lb_app_profile_id, opts)
      nil
    end

    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_app_profile_with_http_info(lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.delete_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling LoadBalancerProfilesApi.delete_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#delete_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_client_ssl_profile(lb_client_ssl_profile_id, opts = {})
      delete_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts)
      nil
    end

    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.delete_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling LoadBalancerProfilesApi.delete_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#delete_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_monitor_profile(lb_monitor_profile_id, opts = {})
      delete_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts)
      nil
    end

    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.delete_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling LoadBalancerProfilesApi.delete_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#delete_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_persistence_profile(lb_persistence_profile_id, opts = {})
      delete_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts)
      nil
    end

    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.delete_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling LoadBalancerProfilesApi.delete_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#delete_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_server_ssl_profile(lb_server_ssl_profile_id, opts = {})
      delete_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts)
      nil
    end

    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.delete_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling LoadBalancerProfilesApi.delete_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#delete_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      delete_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts)
      nil
    end

    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.delete_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#delete_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      delete_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts)
      nil
    end

    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.delete_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#delete_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      delete_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts)
      nil
    end

    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.delete_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#delete_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      delete_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts)
      nil
    end

    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.delete_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#delete_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      delete_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts)
      nil
    end

    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.delete_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling LoadBalancerProfilesApi.delete_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#delete_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBAppProfileListResult]
    def list_lb_app_profiles(opts = {})
      data, _status_code, _headers = list_lb_app_profiles_with_http_info(opts)
      data
    end

    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBAppProfileListResult, Fixnum, Hash)>] LBAppProfileListResult data, response status code and response headers
    def list_lb_app_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.list_lb_app_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_lb_app_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_lb_app_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-app-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#list_lb_app_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBClientSslProfileListResult]
    def list_lb_client_ssl_profiles(opts = {})
      data, _status_code, _headers = list_lb_client_ssl_profiles_with_http_info(opts)
      data
    end

    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBClientSslProfileListResult, Fixnum, Hash)>] LBClientSslProfileListResult data, response status code and response headers
    def list_lb_client_ssl_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.list_lb_client_ssl_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_lb_client_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_lb_client_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#list_lb_client_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBMonitorProfiles for infra
    # Paginated list of all LBMonitorProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBMonitorProfileListResult]
    def list_lb_monitor_profiles(opts = {})
      data, _status_code, _headers = list_lb_monitor_profiles_with_http_info(opts)
      data
    end

    # List LBMonitorProfiles for infra
    # Paginated list of all LBMonitorProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBMonitorProfileListResult, Fixnum, Hash)>] LBMonitorProfileListResult data, response status code and response headers
    def list_lb_monitor_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.list_lb_monitor_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_lb_monitor_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_lb_monitor_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-monitor-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#list_lb_monitor_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPersistenceProfiles for infra
    # Paginated list of all LBPersistenceProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPersistenceProfileListResult]
    def list_lb_persistence_profiles(opts = {})
      data, _status_code, _headers = list_lb_persistence_profiles_with_http_info(opts)
      data
    end

    # List LBPersistenceProfiles for infra
    # Paginated list of all LBPersistenceProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPersistenceProfileListResult, Fixnum, Hash)>] LBPersistenceProfileListResult data, response status code and response headers
    def list_lb_persistence_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.list_lb_persistence_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_lb_persistence_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_lb_persistence_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-persistence-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#list_lb_persistence_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServerSslProfileListResult]
    def list_lb_server_ssl_profiles(opts = {})
      data, _status_code, _headers = list_lb_server_ssl_profiles_with_http_info(opts)
      data
    end

    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServerSslProfileListResult, Fixnum, Hash)>] LBServerSslProfileListResult data, response status code and response headers
    def list_lb_server_ssl_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.list_lb_server_ssl_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_lb_server_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_lb_server_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#list_lb_server_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of supported SSL ciphers and protocols
    # Retrieve a list of supported SSL ciphers and protocols.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbSslCipherAndProtocolListResult]
    def list_ssl_ciphers_and_protocols(opts = {})
      data, _status_code, _headers = list_ssl_ciphers_and_protocols_with_http_info(opts)
      data
    end

    # Retrieve a list of supported SSL ciphers and protocols
    # Retrieve a list of supported SSL ciphers and protocols.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbSslCipherAndProtocolListResult, Fixnum, Hash)>] LbSslCipherAndProtocolListResult data, response status code and response headers
    def list_ssl_ciphers_and_protocols_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.list_ssl_ciphers_and_protocols ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_ssl_ciphers_and_protocols, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_ssl_ciphers_and_protocols, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-ssl-ciphers-and-protocols'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LbSslCipherAndProtocolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#list_ssl_ciphers_and_protocols\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBAppProfileListResult]
    def list_vpc_lb_app_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_app_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBAppProfileListResult, Fixnum, Hash)>] LBAppProfileListResult data, response status code and response headers
    def list_vpc_lb_app_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.list_vpc_lb_app_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.list_vpc_lb_app_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.list_vpc_lb_app_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.list_vpc_lb_app_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_vpc_lb_app_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_vpc_lb_app_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#list_vpc_lb_app_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBClientSslProfileListResult]
    def list_vpc_lb_client_ssl_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_client_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBClientSslProfileListResult, Fixnum, Hash)>] LBClientSslProfileListResult data, response status code and response headers
    def list_vpc_lb_client_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.list_vpc_lb_client_ssl_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.list_vpc_lb_client_ssl_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.list_vpc_lb_client_ssl_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.list_vpc_lb_client_ssl_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_vpc_lb_client_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_vpc_lb_client_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#list_vpc_lb_client_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBMonitorProfiles specified Vpc
    # Paginated list of all LBMonitorProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBMonitorProfileListResult]
    def list_vpc_lb_monitor_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_monitor_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBMonitorProfiles specified Vpc
    # Paginated list of all LBMonitorProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBMonitorProfileListResult, Fixnum, Hash)>] LBMonitorProfileListResult data, response status code and response headers
    def list_vpc_lb_monitor_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.list_vpc_lb_monitor_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.list_vpc_lb_monitor_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.list_vpc_lb_monitor_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.list_vpc_lb_monitor_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_vpc_lb_monitor_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_vpc_lb_monitor_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#list_vpc_lb_monitor_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPersistenceProfiles for the specified Vpc
    # Paginated list of all LBPersistenceProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPersistenceProfileListResult]
    def list_vpc_lb_persistence_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_persistence_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBPersistenceProfiles for the specified Vpc
    # Paginated list of all LBPersistenceProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPersistenceProfileListResult, Fixnum, Hash)>] LBPersistenceProfileListResult data, response status code and response headers
    def list_vpc_lb_persistence_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.list_vpc_lb_persistence_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.list_vpc_lb_persistence_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.list_vpc_lb_persistence_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.list_vpc_lb_persistence_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_vpc_lb_persistence_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_vpc_lb_persistence_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#list_vpc_lb_persistence_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServerSslProfileListResult]
    def list_vpc_lb_server_ssl_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_server_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServerSslProfileListResult, Fixnum, Hash)>] LBServerSslProfileListResult data, response status code and response headers
    def list_vpc_lb_server_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.list_vpc_lb_server_ssl_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.list_vpc_lb_server_ssl_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.list_vpc_lb_server_ssl_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.list_vpc_lb_server_ssl_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_vpc_lb_server_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancerProfilesApi.list_vpc_lb_server_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#list_vpc_lb_server_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_app_profile(lb_app_profile_id, lb_app_profile, opts = {})
      patch_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts)
      nil
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.patch_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling LoadBalancerProfilesApi.patch_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling LoadBalancerProfilesApi.patch_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#patch_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_client_ssl_profile(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      patch_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      nil
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.patch_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling LoadBalancerProfilesApi.patch_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling LoadBalancerProfilesApi.patch_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#patch_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_monitor_profile(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      patch_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts)
      nil
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.patch_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling LoadBalancerProfilesApi.patch_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling LoadBalancerProfilesApi.patch_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#patch_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_persistence_profile(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      patch_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts)
      nil
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.patch_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling LoadBalancerProfilesApi.patch_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling LoadBalancerProfilesApi.patch_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#patch_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_server_ssl_profile(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      patch_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      nil
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.patch_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling LoadBalancerProfilesApi.patch_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling LoadBalancerProfilesApi.patch_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#patch_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      patch_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts)
      nil
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.patch_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling LoadBalancerProfilesApi.patch_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#patch_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      patch_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      nil
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.patch_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling LoadBalancerProfilesApi.patch_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#patch_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      patch_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts)
      nil
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.patch_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling LoadBalancerProfilesApi.patch_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#patch_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      patch_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts)
      nil
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.patch_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling LoadBalancerProfilesApi.patch_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#patch_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      patch_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      nil
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.patch_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling LoadBalancerProfilesApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling LoadBalancerProfilesApi.patch_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#patch_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def read_lb_app_profile(lb_app_profile_id, opts = {})
      data, _status_code, _headers = read_lb_app_profile_with_http_info(lb_app_profile_id, opts)
      data
    end

    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def read_lb_app_profile_with_http_info(lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.read_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling LoadBalancerProfilesApi.read_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#read_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def read_lb_client_ssl_profile(lb_client_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts)
      data
    end

    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def read_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.read_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling LoadBalancerProfilesApi.read_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#read_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def read_lb_monitor_profile(lb_monitor_profile_id, opts = {})
      data, _status_code, _headers = read_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts)
      data
    end

    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def read_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.read_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling LoadBalancerProfilesApi.read_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#read_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def read_lb_persistence_profile(lb_persistence_profile_id, opts = {})
      data, _status_code, _headers = read_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts)
      data
    end

    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def read_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.read_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling LoadBalancerProfilesApi.read_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#read_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def read_lb_server_ssl_profile(lb_server_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts)
      data
    end

    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def read_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.read_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling LoadBalancerProfilesApi.read_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#read_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def read_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts)
      data
    end

    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def read_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.read_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling LoadBalancerProfilesApi.read_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#read_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def read_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts)
      data
    end

    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def read_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.read_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling LoadBalancerProfilesApi.read_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#read_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def read_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts)
      data
    end

    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def read_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.read_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling LoadBalancerProfilesApi.read_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#read_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def read_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts)
      data
    end

    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def read_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.read_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling LoadBalancerProfilesApi.read_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#read_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def read_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts)
      data
    end

    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def read_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.read_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling LoadBalancerProfilesApi.read_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#read_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def update_lb_app_profile(lb_app_profile_id, lb_app_profile, opts = {})
      data, _status_code, _headers = update_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts)
      data
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def update_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.update_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling LoadBalancerProfilesApi.update_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling LoadBalancerProfilesApi.update_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#update_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def update_lb_client_ssl_profile(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      data, _status_code, _headers = update_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      data
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def update_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.update_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling LoadBalancerProfilesApi.update_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling LoadBalancerProfilesApi.update_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#update_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def update_lb_monitor_profile(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      data, _status_code, _headers = update_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts)
      data
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def update_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.update_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling LoadBalancerProfilesApi.update_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling LoadBalancerProfilesApi.update_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#update_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def update_lb_persistence_profile(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      data, _status_code, _headers = update_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts)
      data
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def update_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.update_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling LoadBalancerProfilesApi.update_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling LoadBalancerProfilesApi.update_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#update_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def update_lb_server_ssl_profile(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      data, _status_code, _headers = update_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      data
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def update_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.update_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling LoadBalancerProfilesApi.update_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling LoadBalancerProfilesApi.update_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#update_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def update_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts)
      data
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def update_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.update_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling LoadBalancerProfilesApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling LoadBalancerProfilesApi.update_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#update_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def update_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      data
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def update_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.update_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling LoadBalancerProfilesApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling LoadBalancerProfilesApi.update_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#update_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def update_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts)
      data
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def update_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.update_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling LoadBalancerProfilesApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling LoadBalancerProfilesApi.update_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#update_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def update_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts)
      data
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def update_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.update_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling LoadBalancerProfilesApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling LoadBalancerProfilesApi.update_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#update_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def update_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      data
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def update_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerProfilesApi.update_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancerProfilesApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerProfilesApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancerProfilesApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling LoadBalancerProfilesApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling LoadBalancerProfilesApi.update_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerProfilesApi#update_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
