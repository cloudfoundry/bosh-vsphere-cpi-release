=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class NetworkServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or patch a custom DPD Profile
    # Create or patch dead peer detection (DPD) profile. Any change in profile affects all sessions consuming this profile. System will be provisioned with system owned editable default DPD profile. Any change in profile affects all sessions consuming this profile.
    # @param dpd_profile_id 
    # @param ip_sec_vpn_dpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_ip_sec_vpn_dpd_profile(dpd_profile_id, ip_sec_vpn_dpd_profile, opts = {})
      create_or_patch_ip_sec_vpn_dpd_profile_with_http_info(dpd_profile_id, ip_sec_vpn_dpd_profile, opts)
      nil
    end

    # Create or patch a custom DPD Profile
    # Create or patch dead peer detection (DPD) profile. Any change in profile affects all sessions consuming this profile. System will be provisioned with system owned editable default DPD profile. Any change in profile affects all sessions consuming this profile.
    # @param dpd_profile_id 
    # @param ip_sec_vpn_dpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_ip_sec_vpn_dpd_profile_with_http_info(dpd_profile_id, ip_sec_vpn_dpd_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_ip_sec_vpn_dpd_profile ...'
      end
      # verify the required parameter 'dpd_profile_id' is set
      if @api_client.config.client_side_validation && dpd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dpd_profile_id' when calling NetworkServicesApi.create_or_patch_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'ip_sec_vpn_dpd_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_dpd_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_dpd_profile' when calling NetworkServicesApi.create_or_patch_ip_sec_vpn_dpd_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-dpd-profiles/{dpd-profile-id}'.sub('{' + 'dpd-profile-id' + '}', dpd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_dpd_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_ip_sec_vpn_dpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom internet key exchange (IKE) Profile
    # Create or patch custom internet key exchange (IKE) Profile. IKE Profile is a reusable profile that captures IKE and phase one negotiation parameters. System will be pre provisioned with system owned editable default IKE profile and suggested set of profiles that can be used for peering with popular remote peers like AWS VPN. User can create custom profiles as needed. Any change in profile affects all sessions consuming this profile.
    # @param ike_profile_id 
    # @param ip_sec_vpn_ike_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_ip_sec_vpn_ike_profile(ike_profile_id, ip_sec_vpn_ike_profile, opts = {})
      create_or_patch_ip_sec_vpn_ike_profile_with_http_info(ike_profile_id, ip_sec_vpn_ike_profile, opts)
      nil
    end

    # Create or patch a custom internet key exchange (IKE) Profile
    # Create or patch custom internet key exchange (IKE) Profile. IKE Profile is a reusable profile that captures IKE and phase one negotiation parameters. System will be pre provisioned with system owned editable default IKE profile and suggested set of profiles that can be used for peering with popular remote peers like AWS VPN. User can create custom profiles as needed. Any change in profile affects all sessions consuming this profile.
    # @param ike_profile_id 
    # @param ip_sec_vpn_ike_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_ip_sec_vpn_ike_profile_with_http_info(ike_profile_id, ip_sec_vpn_ike_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_ip_sec_vpn_ike_profile ...'
      end
      # verify the required parameter 'ike_profile_id' is set
      if @api_client.config.client_side_validation && ike_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ike_profile_id' when calling NetworkServicesApi.create_or_patch_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'ip_sec_vpn_ike_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_ike_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_ike_profile' when calling NetworkServicesApi.create_or_patch_ip_sec_vpn_ike_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-ike-profiles/{ike-profile-id}'.sub('{' + 'ike-profile-id' + '}', ike_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_ike_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_ip_sec_vpn_ike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom IPSec tunnel Profile
    # Create or patch custom IPSec tunnel profile. IPSec tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. System will be provisioned with system owned editable default IPSec tunnel profile. Any change in profile affects all sessions consuming this profile.
    # @param tunnel_profile_id 
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_ip_sec_vpn_tunnel_profile(tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts = {})
      create_or_patch_ip_sec_vpn_tunnel_profile_with_http_info(tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts)
      nil
    end

    # Create or patch a custom IPSec tunnel Profile
    # Create or patch custom IPSec tunnel profile. IPSec tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. System will be provisioned with system owned editable default IPSec tunnel profile. Any change in profile affects all sessions consuming this profile.
    # @param tunnel_profile_id 
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_ip_sec_vpn_tunnel_profile_with_http_info(tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_ip_sec_vpn_tunnel_profile ...'
      end
      # verify the required parameter 'tunnel_profile_id' is set
      if @api_client.config.client_side_validation && tunnel_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_profile_id' when calling NetworkServicesApi.create_or_patch_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'ip_sec_vpn_tunnel_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_tunnel_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_tunnel_profile' when calling NetworkServicesApi.create_or_patch_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-tunnel-profiles/{tunnel-profile-id}'.sub('{' + 'tunnel-profile-id' + '}', tunnel_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_tunnel_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, merge with the existing L2Vpn. This is a patch. This API is deprecated. Please use PATCH /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/<l2vpn-id> instead. If used, this deprecated API will result in an L2VPNSession being internally created/patched: - L2VPNSession: /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-services/   default/sessions/L2VPN_<l2vpn-id>. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      create_or_patch_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts)
      nil
    end

    # Create or patch an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, merge with the existing L2Vpn. This is a patch. This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/&lt;l2vpn-id&gt; instead. If used, this deprecated API will result in an L2VPNSession being internally created/patched: - L2VPNSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-services/   default/sessions/L2VPN_&lt;l2vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling NetworkServicesApi.create_or_patch_l2_vpn"
      end
      # verify the required parameter 'l2_vpn' is set
      if @api_client.config.client_side_validation && l2_vpn.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn' when calling NetworkServicesApi.create_or_patch_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch L2VPN service under Tier-0
    # Create or patch L2VPN service for given Tier-0 locale service.  <br> This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the   new VPN path instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l2_vpn_service(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      create_or_patch_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts)
      nil
    end

    # Create or patch L2VPN service under Tier-0
    # Create or patch L2VPN service for given Tier-0 locale service.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the   new VPN path instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling NetworkServicesApi.create_or_patch_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-0
    # Create or patch an L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode.  <br> This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/ l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:  Please note that request is validated and any error messages returned from validation may include the new VPN path  instead of the deprecated path. Both new path and old path refer to same resource.  Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      create_or_patch_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-0
    # Create or patch an L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:  Please note that request is validated and any error messages returned from validation may include the new VPN path  instead of the deprecated path. Both new path and old path refer to same resource.  Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling NetworkServicesApi.create_or_patch_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-0 from Peer Codes
    # Create or patch an L2VPN session under Tier-0 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. Note:  Please note that request is validated and any error messages returned from validation may include the new VPN path  instead of the deprecated path. Both new path and old path refer to same resource.  Also VPN path returned in the Alarm, GPRR payload may include the new VPN path.  <br> This API is deprecated. Please use POST /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;?action=create_with_peer_code instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l2_vpn_session_from_peer_codes(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts = {})
      create_or_patch_l2_vpn_session_from_peer_codes_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-0 from Peer Codes
    # Create or patch an L2VPN session under Tier-0 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. Note:  Please note that request is validated and any error messages returned from validation may include the new VPN path  instead of the deprecated path. Both new path and old path refer to same resource.  Also VPN path returned in the Alarm, GPRR payload may include the new VPN path.  &lt;br&gt; This API is deprecated. Please use POST /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;?action&#x3D;create_with_peer_code instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l2_vpn_session_from_peer_codes_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_l2_vpn_session_from_peer_codes ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'l2_vpn_session_data' is set
      if @api_client.config.client_side_validation && l2_vpn_session_data.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session_data' when calling NetworkServicesApi.create_or_patch_l2_vpn_session_from_peer_codes"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}?action=create_with_peer_code'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_l2_vpn_session_from_peer_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L3Vpn
    # Create the new L3Vpn if it does not exist. If the L3Vpn already exists, merge with the the existing one. This is a patch. - If the passed L3Vpn is a policy-based one and has new L3VpnRules, add them to the existing L3VpnRules. - If the passed L3Vpn is a policy-based one and also has existing L3VpnRules, update the existing L3VpnRules. This API is deprecated. Please use the following APIs instead: - PATCH /infra/ipsec-vpn-tunnel-profiles/&lt;tunnel-profile-id&gt; to patch the IPSecVpnTunnelProfile. - PATCH /infra/ipsec-vpn-ike-profiles/&lt;ike-profile-id&gt; to patch the IPSecVpnIkeProfile. - PATCH /infra/ipsec-vpn-dpd-profiles/&lt;dpd-profile-id&gt; to patch the IPSecVpnDpdProfile. - PATCH /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/local-endpoints/&lt;local-endpoint-id&gt; to patch the IPSecVpnLocalEndpoint. - PATCH /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/sessions/&lt;l3vpn-id&gt; to patch the IPSecVpnSession. If used, this deprecated API will result in the following objects being internally created/patched: - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/   ipsec-vpn-services/default/local-endpoints/&lt;local-endpoint-id&gt;. If an object with the same   \"local_address\" already exists, then it will be re-used. - IPSecVpnSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/   ipsec-vpn-services/default/sessions/L3VPN_&lt;l3vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param l3_vpn 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l3_vpn(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts = {})
      create_or_patch_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts)
      nil
    end

    # Create or patch an L3Vpn
    # Create the new L3Vpn if it does not exist. If the L3Vpn already exists, merge with the the existing one. This is a patch. - If the passed L3Vpn is a policy-based one and has new L3VpnRules, add them to the existing L3VpnRules. - If the passed L3Vpn is a policy-based one and also has existing L3VpnRules, update the existing L3VpnRules. This API is deprecated. Please use the following APIs instead: - PATCH /infra/ipsec-vpn-tunnel-profiles/&amp;lt;tunnel-profile-id&amp;gt; to patch the IPSecVpnTunnelProfile. - PATCH /infra/ipsec-vpn-ike-profiles/&amp;lt;ike-profile-id&amp;gt; to patch the IPSecVpnIkeProfile. - PATCH /infra/ipsec-vpn-dpd-profiles/&amp;lt;dpd-profile-id&amp;gt; to patch the IPSecVpnDpdProfile. - PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; to patch the IPSecVpnLocalEndpoint. - PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/sessions/&amp;lt;l3vpn-id&amp;gt; to patch the IPSecVpnSession. If used, this deprecated API will result in the following objects being internally created/patched: - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/   ipsec-vpn-services/default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt;. If an object with the same   \&quot;local_address\&quot; already exists, then it will be re-used. - IPSecVpnSession: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/   ipsec-vpn-services/default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param l3_vpn 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_l3_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_l3_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_l3_vpn"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling NetworkServicesApi.create_or_patch_l3_vpn"
      end
      # verify the required parameter 'l3_vpn' is set
      if @api_client.config.client_side_validation && l3_vpn.nil?
        fail ArgumentError, "Missing the required parameter 'l3_vpn' when calling NetworkServicesApi.create_or_patch_l3_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l3_vpn)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_l3_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given locale service under Tier-0.  <br> This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints/&lt;local-endpoint-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_ip_sec_vpn_local_endpoint(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      create_or_patch_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      nil
    end

    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier0_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service for given locale service under Tier-0.  <br> This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/ ipsec-vpn-services/&lt;service-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      create_or_patch_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts)
      nil
    end

    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service for given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier0_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-0.  <br> This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling NetworkServicesApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      nil
    end

    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_ip_sec_vpn_service(tier_0_id, service_id, ip_sec_vpn_service, opts = {})
      create_or_patch_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, ip_sec_vpn_service, opts)
      nil
    end

    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier0_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_ip_sec_vpn_session(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling NetworkServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier0_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch L2VPN service under Tier-0
    # Create or patch L2VPN service for given Tier-0
    # @param tier_0_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_l2_vpn_service(tier_0_id, service_id, l2_vpn_service, opts = {})
      create_or_patch_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, l2_vpn_service, opts)
      nil
    end

    # Create or patch L2VPN service under Tier-0
    # Create or patch L2VPN service for given Tier-0
    # @param tier_0_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier0_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-0
    # Create or patch an L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_l2_vpn_session(tier_0_id, service_id, session_id, l2_vpn_session, opts = {})
      create_or_patch_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-0
    # Create or patch an L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier0_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-0 from Peer Codes
    # Create or patch an L2VPN session under Tier-0 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes(tier_0_id, service_id, session_id, l2_vpn_session_data, opts = {})
      create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session_data, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-0 from Peer Codes
    # Create or patch an L2VPN session under Tier-0 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'l2_vpn_session_data' is set
      if @api_client.config.client_side_validation && l2_vpn_session_data.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session_data' when calling NetworkServicesApi.create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}?action=create_with_peer_code'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given locale service under Tier-1.  <br> This API is deprecated. Please use PATCH /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ local-endpoints/&lt;local-endpoint-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_ip_sec_vpn_local_endpoint(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      create_or_patch_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      nil
    end

    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service for a given locale service under Tier-1.  <br> This API is deprecated. Please use PATCH /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_ip_sec_vpn_service(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      create_or_patch_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts)
      nil
    end

    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-1.  <br> This API is deprecated. Please use PATCH /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling NetworkServicesApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1 locale service.  <br> This API is deprecated. Please use PATCH /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_l2_vpn_service(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      create_or_patch_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts)
      nil
    end

    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1 locale service.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode.  <br> This API is deprecated. Please use PATCH /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_l2_vpn_session(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      create_or_patch_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode.  <br> This API is deprecated. Please use POST /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;?action=create_with_peer_code instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_l2_vpn_session_from_peer_codes(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts = {})
      create_or_patch_tier1_l2_vpn_session_from_peer_codes_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode.  &lt;br&gt; This API is deprecated. Please use POST /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;?action&#x3D;create_with_peer_code instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_l2_vpn_session_from_peer_codes_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'l2_vpn_session_data' is set
      if @api_client.config.client_side_validation && l2_vpn_session_data.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session_data' when calling NetworkServicesApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}?action=create_with_peer_code'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_l2_vpn_session_from_peer_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given ipsec vpn service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      nil
    end

    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given ipsec vpn service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_ip_sec_vpn_service(tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      create_or_patch_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, ip_sec_vpn_service, opts)
      nil
    end

    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_ip_sec_vpn_session(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling NetworkServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_l2_vpn_service(tier_1_id, service_id, l2_vpn_service, opts = {})
      create_or_patch_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, l2_vpn_service, opts)
      nil
    end

    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_l2_vpn_session(tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      create_or_patch_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes(tier_1_id, service_id, session_id, l2_vpn_session_data, opts = {})
      create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session_data, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'l2_vpn_session_data' is set
      if @api_client.config.client_side_validation && l2_vpn_session_data.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session_data' when calling NetworkServicesApi.create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}?action=create_with_peer_code'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, update the existing L2Vpn. This is a full replace. This API is deprecated. Please use PUT /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/<l2vpn-id> instead. If used, this deprecated API will result in an L2VPNSession being internally created/updated: - L2VPNSession: /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-services/   default/sessions/L2VPN_<l2vpn-id>. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [L2Vpn]
    def create_or_replace_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      data, _status_code, _headers = create_or_replace_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts)
      data
    end

    # Create or replace an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, update the existing L2Vpn. This is a full replace. This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/&lt;l2vpn-id&gt; instead. If used, this deprecated API will result in an L2VPNSession being internally created/updated: - L2VPNSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-services/   default/sessions/L2VPN_&lt;l2vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2Vpn, Fixnum, Hash)>] L2Vpn data, response status code and response headers
    def create_or_replace_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_replace_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_replace_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_replace_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling NetworkServicesApi.create_or_replace_l2_vpn"
      end
      # verify the required parameter 'l2_vpn' is set
      if @api_client.config.client_side_validation && l2_vpn.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn' when calling NetworkServicesApi.create_or_replace_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_replace_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace an L3Vpn
    # Create a new L3Vpn if the L3Vpn with given id does not already exist. If the L3Vpn with the given id already exists, replace the existing L3Vpn. This a full replace. This API is deprecated. Please use the following APIs instead: - PUT /infra/ipsec-vpn-tunnel-profiles/&lt;tunnel-profile-id&gt; to update the IPSecVpnTunnelProfile. - PUT /infra/ipsec-vpn-ike-profiles/&lt;ike-profile-id&gt; to update the IPSecVpnIkeProfile. - PUT /infra/ipsec-vpn-dpd-profiles/&lt;dpd-profile-id&gt; to update the IPSecVpnDpdProfile. - PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/local-endpoints/&lt;local-endpoint-id&gt; to update the IPSecVpnLocalEndpoint. - PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/sessions/&lt;l3vpn-id&gt; to update the IPSecVpnSession. If used, this deprecated API will result in the following objects being internally created/updated: - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/   ipsec-vpn-services/default/local-endpoints/&lt;local-endpoint-id&gt;. If an object with the same   \"local_address\" already exists, then it will be re-used. - IPSecVpnSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/   ipsec-vpn-services/default/sessions/L3VPN_&lt;l3vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param l3_vpn 
    # @param [Hash] opts the optional parameters
    # @return [L3Vpn]
    def create_or_replace_l3_vpn(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts = {})
      data, _status_code, _headers = create_or_replace_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts)
      data
    end

    # Create or replace an L3Vpn
    # Create a new L3Vpn if the L3Vpn with given id does not already exist. If the L3Vpn with the given id already exists, replace the existing L3Vpn. This a full replace. This API is deprecated. Please use the following APIs instead: - PUT /infra/ipsec-vpn-tunnel-profiles/&amp;lt;tunnel-profile-id&amp;gt; to update the IPSecVpnTunnelProfile. - PUT /infra/ipsec-vpn-ike-profiles/&amp;lt;ike-profile-id&amp;gt; to update the IPSecVpnIkeProfile. - PUT /infra/ipsec-vpn-dpd-profiles/&amp;lt;dpd-profile-id&amp;gt; to update the IPSecVpnDpdProfile. - PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; to update the IPSecVpnLocalEndpoint. - PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/sessions/&amp;lt;l3vpn-id&amp;gt; to update the IPSecVpnSession. If used, this deprecated API will result in the following objects being internally created/updated: - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/   ipsec-vpn-services/default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt;. If an object with the same   \&quot;local_address\&quot; already exists, then it will be re-used. - IPSecVpnSession: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/   ipsec-vpn-services/default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param l3_vpn 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L3Vpn, Fixnum, Hash)>] L3Vpn data, response status code and response headers
    def create_or_replace_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_replace_l3_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_replace_l3_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_replace_l3_vpn"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling NetworkServicesApi.create_or_replace_l3_vpn"
      end
      # verify the required parameter 'l3_vpn' is set
      if @api_client.config.client_side_validation && l3_vpn.nil?
        fail ArgumentError, "Missing the required parameter 'l3_vpn' when calling NetworkServicesApi.create_or_replace_l3_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l3_vpn)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_replace_l3_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the GET/PUT response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def create_or_replace_policy_nat_rule(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      data, _status_code, _headers = create_or_replace_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      data
    end

    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the GET/PUT response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def create_or_replace_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_replace_policy_nat_rule ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling NetworkServicesApi.create_or_replace_policy_nat_rule"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_replace_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) NAT rule cannot be applied to a loopback interface or a label referencing loopback interfaces. For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the PUT/GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def create_or_replace_policy_nat_rule_on_tier0(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      data, _status_code, _headers = create_or_replace_policy_nat_rule_on_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      data
    end

    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) NAT rule cannot be applied to a loopback interface or a label referencing loopback interfaces. For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the PUT/GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def create_or_replace_policy_nat_rule_on_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_replace_policy_nat_rule_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_replace_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.create_or_replace_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.create_or_replace_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling NetworkServicesApi.create_or_replace_policy_nat_rule_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_replace_policy_nat_rule_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update NAT Rule
    # Update NAT Rule on VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_vpc_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [PolicyVpcNatRule]
    def create_or_replace_policy_nat_rule_on_vpc(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts = {})
      data, _status_code, _headers = create_or_replace_policy_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts)
      data
    end

    # Update NAT Rule
    # Update NAT Rule on VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_vpc_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyVpcNatRule, Fixnum, Hash)>] PolicyVpcNatRule data, response status code and response headers
    def create_or_replace_policy_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_replace_policy_nat_rule_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'policy_vpc_nat_rule' is set
      if @api_client.config.client_side_validation && policy_vpc_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_vpc_nat_rule' when calling NetworkServicesApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_vpc_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyVpcNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_replace_policy_nat_rule_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace a custom IPSec tunnel Profile
    # Create or patch dead peer detection (DPD) profile. Any change in profile affects all sessions consuming this profile. System will be provisioned with system owned editable default DPD profile. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param dpd_profile_id 
    # @param ip_sec_vpn_dpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnDpdProfile]
    def create_or_update_ip_sec_vpn_dpd_profile(dpd_profile_id, ip_sec_vpn_dpd_profile, opts = {})
      data, _status_code, _headers = create_or_update_ip_sec_vpn_dpd_profile_with_http_info(dpd_profile_id, ip_sec_vpn_dpd_profile, opts)
      data
    end

    # Create or fully replace a custom IPSec tunnel Profile
    # Create or patch dead peer detection (DPD) profile. Any change in profile affects all sessions consuming this profile. System will be provisioned with system owned editable default DPD profile. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param dpd_profile_id 
    # @param ip_sec_vpn_dpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnDpdProfile, Fixnum, Hash)>] IPSecVpnDpdProfile data, response status code and response headers
    def create_or_update_ip_sec_vpn_dpd_profile_with_http_info(dpd_profile_id, ip_sec_vpn_dpd_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_ip_sec_vpn_dpd_profile ...'
      end
      # verify the required parameter 'dpd_profile_id' is set
      if @api_client.config.client_side_validation && dpd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dpd_profile_id' when calling NetworkServicesApi.create_or_update_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'ip_sec_vpn_dpd_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_dpd_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_dpd_profile' when calling NetworkServicesApi.create_or_update_ip_sec_vpn_dpd_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-dpd-profiles/{dpd-profile-id}'.sub('{' + 'dpd-profile-id' + '}', dpd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_dpd_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnDpdProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_ip_sec_vpn_dpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace a custom internet key exchange (IKE) Profile
    # Create or fully replace custom internet key exchange (IKE) Profile. IKE Profile is a reusable profile that captures IKE and phase one negotiation parameters. System will be pre provisioned with system owned editable default IKE profile and suggested set of profiles that can be used for peering with popular remote peers like AWS VPN. User can create custom profiles as needed. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param ike_profile_id 
    # @param ip_sec_vpn_ike_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnIkeProfile]
    def create_or_update_ip_sec_vpn_ike_profile(ike_profile_id, ip_sec_vpn_ike_profile, opts = {})
      data, _status_code, _headers = create_or_update_ip_sec_vpn_ike_profile_with_http_info(ike_profile_id, ip_sec_vpn_ike_profile, opts)
      data
    end

    # Create or fully replace a custom internet key exchange (IKE) Profile
    # Create or fully replace custom internet key exchange (IKE) Profile. IKE Profile is a reusable profile that captures IKE and phase one negotiation parameters. System will be pre provisioned with system owned editable default IKE profile and suggested set of profiles that can be used for peering with popular remote peers like AWS VPN. User can create custom profiles as needed. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param ike_profile_id 
    # @param ip_sec_vpn_ike_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnIkeProfile, Fixnum, Hash)>] IPSecVpnIkeProfile data, response status code and response headers
    def create_or_update_ip_sec_vpn_ike_profile_with_http_info(ike_profile_id, ip_sec_vpn_ike_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_ip_sec_vpn_ike_profile ...'
      end
      # verify the required parameter 'ike_profile_id' is set
      if @api_client.config.client_side_validation && ike_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ike_profile_id' when calling NetworkServicesApi.create_or_update_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'ip_sec_vpn_ike_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_ike_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_ike_profile' when calling NetworkServicesApi.create_or_update_ip_sec_vpn_ike_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-ike-profiles/{ike-profile-id}'.sub('{' + 'ike-profile-id' + '}', ike_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_ike_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnIkeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_ip_sec_vpn_ike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace a custom IPSec tunnel Profile
    # Create or fully replace custom IPSec tunnel profile. IPSec tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. System will be provisioned with system owned editable default IPSec tunnel profile. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param tunnel_profile_id 
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnTunnelProfile]
    def create_or_update_ip_sec_vpn_tunnel_profile(tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts = {})
      data, _status_code, _headers = create_or_update_ip_sec_vpn_tunnel_profile_with_http_info(tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts)
      data
    end

    # Create or fully replace a custom IPSec tunnel Profile
    # Create or fully replace custom IPSec tunnel profile. IPSec tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. System will be provisioned with system owned editable default IPSec tunnel profile. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param tunnel_profile_id 
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnTunnelProfile, Fixnum, Hash)>] IPSecVpnTunnelProfile data, response status code and response headers
    def create_or_update_ip_sec_vpn_tunnel_profile_with_http_info(tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_ip_sec_vpn_tunnel_profile ...'
      end
      # verify the required parameter 'tunnel_profile_id' is set
      if @api_client.config.client_side_validation && tunnel_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_profile_id' when calling NetworkServicesApi.create_or_update_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'ip_sec_vpn_tunnel_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_tunnel_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_tunnel_profile' when calling NetworkServicesApi.create_or_update_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-tunnel-profiles/{tunnel-profile-id}'.sub('{' + 'tunnel-profile-id' + '}', tunnel_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_tunnel_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnTunnelProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN service under Tier-0
    # Create or fully replace L2VPN service for given Tier-0 locale service. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def create_or_update_l2_vpn_service(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts)
      data
    end

    # Create or fully replace L2VPN service under Tier-0
    # Create or fully replace L2VPN service for given Tier-0 locale service. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def create_or_update_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_update_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_update_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling NetworkServicesApi.create_or_update_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN session under Tier-0
    # Create or fully replace L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/ l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:   The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path   Both paths refer to the same object.   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def create_or_update_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts)
      data
    end

    # Create or fully replace L2VPN session under Tier-0
    # Create or fully replace L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:   The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path   Both paths refer to the same object.   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def create_or_update_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling NetworkServicesApi.create_or_update_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given locale service under Tier-0. Revision is optional for creation and required for update. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path  <br> This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints/&lt;local-endpoint-id&gt; instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def create_or_update_tier0_ip_sec_vpn_local_endpoint(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = create_or_update_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given locale service under Tier-0. Revision is optional for creation and required for update. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def create_or_update_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier0_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service for given locale service under Tier-0. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def create_or_update_tier0_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts)
      data
    end

    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service for given locale service under Tier-0. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def create_or_update_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier0_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-0. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-0. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling NetworkServicesApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under given Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def create_or_update_tier0_vpn_ip_sec_vpn_service(tier_0_id, service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, ip_sec_vpn_service, opts)
      data
    end

    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under given Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def create_or_update_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier0_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given ipsec vpn service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier0_vpn_ip_sec_vpn_session(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given ipsec vpn service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling NetworkServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier0_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN service under Tier-0
    # Create or fully replace L2VPN service for given Tier-0. Revision is optional for creation and required for update.
    # @param tier_0_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def create_or_update_tier0_vpn_l2_vpn_service(tier_0_id, service_id, l2_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, l2_vpn_service, opts)
      data
    end

    # Create or fully replace L2VPN service under Tier-0
    # Create or fully replace L2VPN service for given Tier-0. Revision is optional for creation and required for update.
    # @param tier_0_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def create_or_update_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier0_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling NetworkServicesApi.create_or_update_tier0_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier0_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN session under Tier-0
    # Create or fully replace L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def create_or_update_tier0_vpn_l2_vpn_session(tier_0_id, service_id, session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session, opts)
      data
    end

    # Create or fully replace L2VPN session under Tier-0
    # Create or fully replace L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def create_or_update_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier0_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_update_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling NetworkServicesApi.create_or_update_tier0_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier0_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given locale service under Tier-1. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ local-endpoints/&lt;local-endpoint-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def create_or_update_tier1_ip_sec_vpn_local_endpoint(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = create_or_update_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given locale service under Tier-1. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def create_or_update_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier1_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service for a given locale service under Tier-1. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def create_or_update_tier1_ip_sec_vpn_service(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts)
      data
    end

    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service for a given locale service under Tier-1. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def create_or_update_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier1_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-1. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-1. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling NetworkServicesApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1 locale service. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def create_or_update_tier1_l2_vpn_service(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts)
      data
    end

    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1 locale service. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def create_or_update_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier1_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_update_tier1_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_update_tier1_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier1_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling NetworkServicesApi.create_or_update_tier1_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier1_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt; instead. Note:    The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def create_or_update_tier1_l2_vpn_session(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts)
      data
    end

    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt; instead. Note:    The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def create_or_update_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier1_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_update_tier1_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.create_or_update_tier1_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier1_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_update_tier1_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling NetworkServicesApi.create_or_update_tier1_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier1_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def create_or_update_tier1_vpn_ip_sec_vpn_service(tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, ip_sec_vpn_service, opts)
      data
    end

    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def create_or_update_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier1_vpn_ip_sec_vpn_session(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling NetworkServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1. Revision is optional for creation and required for update.
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def create_or_update_tier1_vpn_l2_vpn_service(tier_1_id, service_id, l2_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, l2_vpn_service, opts)
      data
    end

    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1. Revision is optional for creation and required for update.
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def create_or_update_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling NetworkServicesApi.create_or_update_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def create_or_update_tier1_vpn_l2_vpn_session(tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session, opts)
      data
    end

    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def create_or_update_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.create_or_update_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling NetworkServicesApi.create_or_update_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#create_or_update_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete custom dead peer detection (DPD) profile
    # Delete custom dead peer detection (DPD) profile. Profile can not be deleted if profile has references to it.
    # @param dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ip_sec_vpn_dpd_profile(dpd_profile_id, opts = {})
      delete_ip_sec_vpn_dpd_profile_with_http_info(dpd_profile_id, opts)
      nil
    end

    # Delete custom dead peer detection (DPD) profile
    # Delete custom dead peer detection (DPD) profile. Profile can not be deleted if profile has references to it.
    # @param dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpn_dpd_profile_with_http_info(dpd_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_ip_sec_vpn_dpd_profile ...'
      end
      # verify the required parameter 'dpd_profile_id' is set
      if @api_client.config.client_side_validation && dpd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dpd_profile_id' when calling NetworkServicesApi.delete_ip_sec_vpn_dpd_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-dpd-profiles/{dpd-profile-id}'.sub('{' + 'dpd-profile-id' + '}', dpd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_ip_sec_vpn_dpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete custom IKE Profile
    # Delete custom IKE Profile. Profile can not be deleted if profile has references to it.
    # @param ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ip_sec_vpn_ike_profile(ike_profile_id, opts = {})
      delete_ip_sec_vpn_ike_profile_with_http_info(ike_profile_id, opts)
      nil
    end

    # Delete custom IKE Profile
    # Delete custom IKE Profile. Profile can not be deleted if profile has references to it.
    # @param ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpn_ike_profile_with_http_info(ike_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_ip_sec_vpn_ike_profile ...'
      end
      # verify the required parameter 'ike_profile_id' is set
      if @api_client.config.client_side_validation && ike_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ike_profile_id' when calling NetworkServicesApi.delete_ip_sec_vpn_ike_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-ike-profiles/{ike-profile-id}'.sub('{' + 'ike-profile-id' + '}', ike_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_ip_sec_vpn_ike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete custom IPSec tunnel Profile
    # Delete custom IPSec tunnel Profile. Profile can not be deleted if profile has references to it.
    # @param tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ip_sec_vpn_tunnel_profile(tunnel_profile_id, opts = {})
      delete_ip_sec_vpn_tunnel_profile_with_http_info(tunnel_profile_id, opts)
      nil
    end

    # Delete custom IPSec tunnel Profile
    # Delete custom IPSec tunnel Profile. Profile can not be deleted if profile has references to it.
    # @param tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpn_tunnel_profile_with_http_info(tunnel_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_ip_sec_vpn_tunnel_profile ...'
      end
      # verify the required parameter 'tunnel_profile_id' is set
      if @api_client.config.client_side_validation && tunnel_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_profile_id' when calling NetworkServicesApi.delete_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-tunnel-profiles/{tunnel-profile-id}'.sub('{' + 'tunnel-profile-id' + '}', tunnel_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an L2Vpn
    # Delete the L2Vpn with the given id. This API is deprecated. Please use DELETE /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/<l2vpn-id> instead. If used, this deprecated API will result in the L2VPNSession being deleted: - L2VPNSession: /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-services/   default/sessions/L2VPN_<l2vpn-id>. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      delete_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts)
      nil
    end

    # Delete an L2Vpn
    # Delete the L2Vpn with the given id. This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/&lt;l2vpn-id&gt; instead. If used, this deprecated API will result in the L2VPNSession being deleted: - L2VPNSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-services/   default/sessions/L2VPN_&lt;l2vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling NetworkServicesApi.delete_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN service under Tier-0
    # Delete L2VPN service for given Tier-0 locale service.  <br> This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_l2_vpn_service(tier_0_id, locale_service_id, service_id, opts = {})
      delete_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      nil
    end

    # Delete L2VPN service under Tier-0
    # Delete L2VPN service for given Tier-0 locale service.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN session under Tier-0
    # Delete L2VPN session under Tier-0. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.  <br> This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/ l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the    new VPN path instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      delete_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete L2VPN session under Tier-0
    # Delete L2VPN session under Tier-0. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the    new VPN path instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.delete_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an L3Vpn
    # Delete the L3Vpn with the given id. This API is deprecated. Please use the following APIs instead: - DELETE /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/ default/sessions/L3VPN_&lt;l3vpn-id&gt; to delete the associated IPSecVpnSession. - DELETE /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/ default/local-endpoints/&lt;local-endpoint-id&gt; to delete the associated IPSecVpnLocalEndpoint. - DELETE /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt; to delete the associated IPSecVpnTunnelProfile. - DELETE /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt; to delete the associated IPSecVpnIkeProfile. - DELETE /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt; to delete the associated IPSecVpnDpdProfile. If used, this deprecated API will result in the following objects being internally deleted: - IPSecVpnSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ ipsec-vpn-services/default/sessions/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ ipsec-vpn-services/default/local-endpoints/&lt;local-endpoint-id&gt; when not used by other IPSecVpnSessions. - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_l3_vpn(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      delete_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts)
      nil
    end

    # Delete an L3Vpn
    # Delete the L3Vpn with the given id. This API is deprecated. Please use the following APIs instead: - DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/ default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt; to delete the associated IPSecVpnSession. - DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/ default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; to delete the associated IPSecVpnLocalEndpoint. - DELETE /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to delete the associated IPSecVpnTunnelProfile. - DELETE /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to delete the associated IPSecVpnIkeProfile. - DELETE /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to delete the associated IPSecVpnDpdProfile. If used, this deprecated API will result in the following objects being internally deleted: - IPSecVpnSession: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ ipsec-vpn-services/default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ ipsec-vpn-services/default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; when not used by other IPSecVpnSessions. - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_l3_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_l3_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_l3_vpn"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling NetworkServicesApi.delete_l3_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_l3_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_app_profile(lb_app_profile_id, opts = {})
      delete_lb_app_profile_with_http_info(lb_app_profile_id, opts)
      nil
    end

    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_app_profile_with_http_info(lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling NetworkServicesApi.delete_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_client_ssl_profile(lb_client_ssl_profile_id, opts = {})
      delete_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts)
      nil
    end

    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling NetworkServicesApi.delete_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_monitor_profile(lb_monitor_profile_id, opts = {})
      delete_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts)
      nil
    end

    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling NetworkServicesApi.delete_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_persistence_profile(lb_persistence_profile_id, opts = {})
      delete_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts)
      nil
    end

    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling NetworkServicesApi.delete_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPool and all the entities contained by this LBPool
    # Delete the LBPool along with all the entities contained by this LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_pool(lb_pool_id, opts = {})
      delete_lb_pool_with_http_info(lb_pool_id, opts)
      nil
    end

    # Delete LBPool and all the entities contained by this LBPool
    # Delete the LBPool along with all the entities contained by this LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_pool_with_http_info(lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_lb_pool ...'
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling NetworkServicesApi.delete_lb_pool"
      end
      # resource path
      local_var_path = '/infra/lb-pools/{lb-pool-id}'.sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_server_ssl_profile(lb_server_ssl_profile_id, opts = {})
      delete_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts)
      nil
    end

    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling NetworkServicesApi.delete_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBService and all the entities contained by this LBService
    # Delete the LBService along with all the entities contained by this LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_service(lb_service_id, opts = {})
      delete_lb_service_with_http_info(lb_service_id, opts)
      nil
    end

    # Delete LBService and all the entities contained by this LBService
    # Delete the LBService along with all the entities contained by this LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_service_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_lb_service ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.delete_lb_service"
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBVirtualServer and all the entities contained by this LBVirtualServer.
    # Delete the LBVirtualServer along with all the entities contained by this LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_virtual_server(lb_virtual_server_id, opts = {})
      delete_lb_virtual_server_with_http_info(lb_virtual_server_id, opts)
      nil
    end

    # Delete LBVirtualServer and all the entities contained by this LBVirtualServer.
    # Delete the LBVirtualServer along with all the entities contained by this LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_virtual_server_with_http_info(lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_lb_virtual_server ...'
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling NetworkServicesApi.delete_lb_virtual_server"
      end
      # resource path
      local_var_path = '/infra/lb-virtual-servers/{lb-virtual-server-id}'.sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Metadata Proxy Config
    # API will delete Metadata Proxy Config with ID profile-id
    # @param metadata_proxy_id Metadata Proxy ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_metadata_proxy_config(metadata_proxy_id, opts = {})
      delete_metadata_proxy_config_with_http_info(metadata_proxy_id, opts)
      nil
    end

    # Delete Metadata Proxy Config
    # API will delete Metadata Proxy Config with ID profile-id
    # @param metadata_proxy_id Metadata Proxy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_metadata_proxy_config_with_http_info(metadata_proxy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_metadata_proxy_config ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling NetworkServicesApi.delete_metadata_proxy_config"
      end
      # resource path
      local_var_path = '/infra/metadata-proxies/{metadata-proxy-id}'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_metadata_proxy_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NAT Rule
    # Delete NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_nat_rule(tier_1_id, nat_id, nat_rule_id, opts = {})
      delete_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts)
      nil
    end

    # Delete NAT Rule
    # Delete NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_policy_nat_rule ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.delete_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.delete_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.delete_policy_nat_rule"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NAT Rule
    # Delete NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_nat_rule_from_tier0(tier_0_id, nat_id, nat_rule_id, opts = {})
      delete_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts)
      nil
    end

    # Delete NAT Rule
    # Delete NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_policy_nat_rule_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.delete_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.delete_policy_nat_rule_from_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_policy_nat_rule_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NAT Rule
    # Delete NAT Rule from VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema.
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_nat_rule_on_vpc(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      delete_policy_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts)
      nil
    end

    # Delete NAT Rule
    # Delete NAT Rule from VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema.
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_policy_nat_rule_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.delete_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.delete_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.delete_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.delete_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.delete_policy_nat_rule_on_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_policy_nat_rule_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given locale service under Tier-0.  <br> This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints/&lt;local-endpoint-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_ip_sec_vpn_local_endpoint(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      delete_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts)
      nil
    end

    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier0_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.delete_tier0_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier0_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN service
    # Delete IPSec VPN service for given locale service under Tier-0.  <br> This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, opts = {})
      delete_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      nil
    end

    # Delete IPSec VPN service
    # Delete IPSec VPN service for given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier0_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier0_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier0_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-0.  <br> This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      delete_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.delete_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_vpn_ip_sec_vpn_local_endpoint(tier_0_id, service_id, local_endpoint_id, opts = {})
      delete_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, opts)
      nil
    end

    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier0_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.delete_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier0_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN service
    # Delete IPSec VPN service for under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_vpn_ip_sec_vpn_service(tier_0_id, service_id, opts = {})
      delete_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, opts)
      nil
    end

    # Delete IPSec VPN service
    # Delete IPSec VPN service for under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier0_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier0_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier0_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_vpn_ip_sec_vpn_session(tier_0_id, service_id, session_id, opts = {})
      delete_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier0_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.delete_tier0_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier0_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN service under Tier-0
    # Delete L2VPN service for given Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_vpn_l2_vpn_service(tier_0_id, service_id, opts = {})
      delete_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, opts)
      nil
    end

    # Delete L2VPN service under Tier-0
    # Delete L2VPN service for given Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier0_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier0_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier0_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN session under Tier-0
    # Delete L2VPN session under Tier-0. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_vpn_l2_vpn_session(tier_0_id, service_id, session_id, opts = {})
      delete_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts)
      nil
    end

    # Delete L2VPN session under Tier-0
    # Delete L2VPN session under Tier-0. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier0_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.delete_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.delete_tier0_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier0_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given locale service under Tier-1.  <br> This API is deprecated. Please use DELETE /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ local-endpoints/&lt;local-endpoint-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_ip_sec_vpn_local_endpoint(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      delete_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts)
      nil
    end

    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier1_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.delete_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.delete_tier1_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier1_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN service
    # Delete IPSec VPN service for a given locale service under Tier-1.  <br> This API is deprecated. Please use DELETE /infra/tier-1s/&lt;tier-1-id&gt;/psec-vpn-services/&lt;service-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_ip_sec_vpn_service(tier_1_id, locale_service_id, service_id, opts = {})
      delete_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      nil
    end

    # Delete IPSec VPN service
    # Delete IPSec VPN service for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/psec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier1_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.delete_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier1_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier1_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-1.  <br> This API is deprecated. Please use DELETE /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the    new VPN path instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      delete_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the    new VPN path instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.delete_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.delete_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1 locale service.  <br> This API is deprecated. Please use DELETE /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_l2_vpn_service(tier_1_id, locale_service_id, service_id, opts = {})
      delete_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      nil
    end

    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1 locale service.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier1_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.delete_tier1_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_tier1_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier1_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier1_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.  <br> This API is deprecated. Please use DELETE /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_l2_vpn_session(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      delete_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier1_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.delete_tier1_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.delete_tier1_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier1_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.delete_tier1_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier1_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_vpn_ip_sec_vpn_local_endpoint(tier_1_id, service_id, local_endpoint_id, opts = {})
      delete_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, opts)
      nil
    end

    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN service
    # Delete given IPSec VPN service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_vpn_ip_sec_vpn_service(tier_1_id, service_id, opts = {})
      delete_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, opts)
      nil
    end

    # Delete IPSec VPN service
    # Delete given IPSec VPN service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.delete_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec-vpn service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_vpn_ip_sec_vpn_session(tier_1_id, service_id, session_id, opts = {})
      delete_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec-vpn service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.delete_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_vpn_l2_vpn_service(tier_1_id, service_id, opts = {})
      delete_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, opts)
      nil
    end

    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.delete_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_vpn_l2_vpn_session(tier_1_id, service_id, session_id, opts = {})
      delete_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts)
      nil
    end

    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.delete_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      delete_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts)
      nil
    end

    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling NetworkServicesApi.delete_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      delete_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts)
      nil
    end

    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling NetworkServicesApi.delete_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      delete_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts)
      nil
    end

    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling NetworkServicesApi.delete_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      delete_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts)
      nil
    end

    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling NetworkServicesApi.delete_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPool and all the entities contained by this LBPool
    # Delete the LBPool along with all the entities contained by this LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      delete_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts)
      nil
    end

    # Delete LBPool and all the entities contained by this LBPool
    # Delete the LBPool along with all the entities contained by this LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.delete_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.delete_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.delete_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling NetworkServicesApi.delete_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      delete_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts)
      nil
    end

    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling NetworkServicesApi.delete_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the load balancer and all the entities contained by this load balancer 
    # Delete the load balancer and all the entities contained by this load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      delete_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      nil
    end

    # Delete the load balancer and all the entities contained by this load balancer 
    # Delete the load balancer and all the entities contained by this load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.delete_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.delete_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.delete_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling NetworkServicesApi.delete_vpc_lb_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBVirtualServer and all the entities contained by this LBVirtualServer.
    # Delete the LBVirtualServer along with all the entities contained by this LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      delete_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts)
      nil
    end

    # Delete LBVirtualServer and all the entities contained by this LBVirtualServer.
    # Delete the LBVirtualServer along with all the entities contained by this LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.delete_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.delete_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.delete_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.delete_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling NetworkServicesApi.delete_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#delete_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get dead peer detection (DPD) profile
    # Get custom dead peer detection (DPD) profile, given the particular id.
    # @param dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnDpdProfile]
    def get_ip_sec_vpn_dpd_profile(dpd_profile_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_dpd_profile_with_http_info(dpd_profile_id, opts)
      data
    end

    # Get dead peer detection (DPD) profile
    # Get custom dead peer detection (DPD) profile, given the particular id.
    # @param dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnDpdProfile, Fixnum, Hash)>] IPSecVpnDpdProfile data, response status code and response headers
    def get_ip_sec_vpn_dpd_profile_with_http_info(dpd_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_ip_sec_vpn_dpd_profile ...'
      end
      # verify the required parameter 'dpd_profile_id' is set
      if @api_client.config.client_side_validation && dpd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dpd_profile_id' when calling NetworkServicesApi.get_ip_sec_vpn_dpd_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-dpd-profiles/{dpd-profile-id}'.sub('{' + 'dpd-profile-id' + '}', dpd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnDpdProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_ip_sec_vpn_dpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IKE Profile
    # Get custom IKE Profile, given the particular id.
    # @param ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnIkeProfile]
    def get_ip_sec_vpn_ike_profile(ike_profile_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_ike_profile_with_http_info(ike_profile_id, opts)
      data
    end

    # Get IKE Profile
    # Get custom IKE Profile, given the particular id.
    # @param ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnIkeProfile, Fixnum, Hash)>] IPSecVpnIkeProfile data, response status code and response headers
    def get_ip_sec_vpn_ike_profile_with_http_info(ike_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_ip_sec_vpn_ike_profile ...'
      end
      # verify the required parameter 'ike_profile_id' is set
      if @api_client.config.client_side_validation && ike_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ike_profile_id' when calling NetworkServicesApi.get_ip_sec_vpn_ike_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-ike-profiles/{ike-profile-id}'.sub('{' + 'ike-profile-id' + '}', ike_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnIkeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_ip_sec_vpn_ike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec tunnel Profile
    # Get custom IPSec tunnel Profile, given the particular id.
    # @param tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnTunnelProfile]
    def get_ip_sec_vpn_tunnel_profile(tunnel_profile_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_tunnel_profile_with_http_info(tunnel_profile_id, opts)
      data
    end

    # Get IPSec tunnel Profile
    # Get custom IPSec tunnel Profile, given the particular id.
    # @param tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnTunnelProfile, Fixnum, Hash)>] IPSecVpnTunnelProfile data, response status code and response headers
    def get_ip_sec_vpn_tunnel_profile_with_http_info(tunnel_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_ip_sec_vpn_tunnel_profile ...'
      end
      # verify the required parameter 'tunnel_profile_id' is set
      if @api_client.config.client_side_validation && tunnel_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_profile_id' when calling NetworkServicesApi.get_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = '/infra/ipsec-vpn-tunnel-profiles/{tunnel-profile-id}'.sub('{' + 'tunnel-profile-id' + '}', tunnel_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnTunnelProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service under Tier-0
    # Get L2VPN service for given Tier-0 locale service.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def get_l2_vpn_service(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get L2VPN service under Tier-0
    # Get L2VPN service for given Tier-0 locale service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def get_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN Session under Tier-0
    # Get L2VPN session under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:    The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def get_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN Session under Tier-0
    # Get L2VPN session under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:    The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def get_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-0 L2VPN session configuration for the peer site
    # Get peer config for the Tier-0 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/peer-config instead. Note:   The \"transport_tunnel_path\" returned in the payload wil be a new vpn path instead of the deprecated API path.   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VPNSessionPeerConfig]
    def get_l2_vpn_session_peer_config(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get Tier-0 L2VPN session configuration for the peer site
    # Get peer config for the Tier-0 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/peer-config instead. Note:   The \&quot;transport_tunnel_path\&quot; returned in the payload wil be a new vpn path instead of the deprecated API path.   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VPNSessionPeerConfig, Fixnum, Hash)>] AggregateL2VPNSessionPeerConfig data, response status code and response headers
    def get_l2_vpn_session_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_l2_vpn_session_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_l2_vpn_session_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_l2_vpn_session_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN session statistics under Tier-0
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics from the enforcement point are returned.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/statistics instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateL2VPNSessionStatistics]
    def get_l2_vpn_session_statistics(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_statistics_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN session statistics under Tier-0
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics from the enforcement point are returned.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/statistics instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateL2VPNSessionStatistics, Fixnum, Hash)>] AggregateL2VPNSessionStatistics data, response status code and response headers
    def get_l2_vpn_session_statistics_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_l2_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_l2_vpn_session_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_l2_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_l2_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_l2_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_l2_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN session detailed status under Tier-0
    # - no enforcement point path specified: detailed tatus is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed tatus is fetched realtime from the enforcement point. - source=cached: cached detailed status is returned.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/detailed-status instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateL2VPNSessionStatus]
    def get_l2_vpn_session_status(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_status_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN session detailed status under Tier-0
    # - no enforcement point path specified: detailed tatus is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed tatus is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status is returned.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/detailed-status instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateL2VPNSessionStatus, Fixnum, Hash)>] AggregateL2VPNSessionStatus data, response status code and response headers
    def get_l2_vpn_session_status_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_l2_vpn_session_status ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_l2_vpn_session_status"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_l2_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_l2_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_l2_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_l2_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2Vpn statistics
    # Get statistics of an L2Vpn. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/L2VPN_&lt;l2vpn-id&gt;/statistics instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VpnStatistics]
    def get_l2_vpn_statistics(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_statistics_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts)
      data
    end

    # Get L2Vpn statistics
    # Get statistics of an L2Vpn. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/ &amp;lt;locale-service-id&amp;gt;/l2vpn-services/default/sessions/L2VPN_&amp;lt;l2vpn-id&amp;gt;/statistics instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VpnStatistics, Fixnum, Hash)>] AggregateL2VpnStatistics data, response status code and response headers
    def get_l2_vpn_statistics_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_l2_vpn_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_l2_vpn_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_l2_vpn_statistics"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling NetworkServicesApi.get_l2_vpn_statistics"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VpnStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_l2_vpn_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L3Vpn statistics
    # Get statistics of an L3Vpn. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/ipsec-vpn-services/default/sessions/L3VPN_&lt;l3vpn-id&gt;/statistics instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL3VpnStatistics]
    def get_l3_vpn_statistics(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      data, _status_code, _headers = get_l3_vpn_statistics_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts)
      data
    end

    # Get L3Vpn statistics
    # Get statistics of an L3Vpn. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/ &amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;/statistics instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL3VpnStatistics, Fixnum, Hash)>] AggregateL3VpnStatistics data, response status code and response headers
    def get_l3_vpn_statistics_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_l3_vpn_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_l3_vpn_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_l3_vpn_statistics"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling NetworkServicesApi.get_l3_vpn_statistics"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL3VpnStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_l3_vpn_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read load balancer usage for the given node
    # API is used to retrieve node usage for load balancer which contains basic information, LB entity usages and capacities for the given node. Currently only edge node is supported. The parameter ?node_path=&lt;node-path&gt; is required. For example, ?node_path= /infra/sites/default/enforcement-points/default/edge-clusters/ 85175e0b-4d74-461d-83e1-f3b785adef9c/edge-nodes/0.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param node_path The node path for load balancer node usage
    # @param [Hash] opts the optional parameters
    # @return [LBNodeUsage]
    def get_lb_node_usage(node_path, opts = {})
      data, _status_code, _headers = get_lb_node_usage_with_http_info(node_path, opts)
      data
    end

    # Read load balancer usage for the given node
    # API is used to retrieve node usage for load balancer which contains basic information, LB entity usages and capacities for the given node. Currently only edge node is supported. The parameter ?node_path&#x3D;&amp;lt;node-path&amp;gt; is required. For example, ?node_path&#x3D; /infra/sites/default/enforcement-points/default/edge-clusters/ 85175e0b-4d74-461d-83e1-f3b785adef9c/edge-nodes/0.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param node_path The node path for load balancer node usage
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBNodeUsage, Fixnum, Hash)>] LBNodeUsage data, response status code and response headers
    def get_lb_node_usage_with_http_info(node_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_lb_node_usage ...'
      end
      # verify the required parameter 'node_path' is set
      if @api_client.config.client_side_validation && node_path.nil?
        fail ArgumentError, "Missing the required parameter 'node_path' when calling NetworkServicesApi.get_lb_node_usage"
      end
      # resource path
      local_var_path = '/infra/lb-node-usage'

      # query parameters
      query_params = {}
      query_params[:'node_path'] = node_path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBNodeUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_lb_node_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read load balancer node usage summary
    # The API is used to retrieve the load balancer node usage summary of all nodes for every enforcement point. - If the parameter ?include_usages=true exists, the property node_usages are included in response. By default, the property node_usages is not included in response. - If parameter ?enforcement_point_path=&lt;enforcement-point-path&gt; exists, only node usage summary from specific enforcement point is included in response. If no enforcement point path is specified, information will be aggregated from each enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path enforcement point path
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [AggregateLBNodeUsageSummary]
    def get_lb_node_usage_summary(opts = {})
      data, _status_code, _headers = get_lb_node_usage_summary_with_http_info(opts)
      data
    end

    # Read load balancer node usage summary
    # The API is used to retrieve the load balancer node usage summary of all nodes for every enforcement point. - If the parameter ?include_usages&#x3D;true exists, the property node_usages are included in response. By default, the property node_usages is not included in response. - If parameter ?enforcement_point_path&#x3D;&amp;lt;enforcement-point-path&amp;gt; exists, only node usage summary from specific enforcement point is included in response. If no enforcement point path is specified, information will be aggregated from each enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path enforcement point path
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [Array<(AggregateLBNodeUsageSummary, Fixnum, Hash)>] AggregateLBNodeUsageSummary data, response status code and response headers
    def get_lb_node_usage_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_lb_node_usage_summary ...'
      end
      # resource path
      local_var_path = '/infra/lb-node-usage-summary'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_usages'] = opts[:'include_usages'] if !opts[:'include_usages'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBNodeUsageSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_lb_node_usage_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatistics]
    def get_lb_pool_statistics(lb_service_id, lb_pool_id, opts = {})
      data, _status_code, _headers = get_lb_pool_statistics_with_http_info(lb_service_id, lb_pool_id, opts)
      data
    end

    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatistics, Fixnum, Hash)>] AggregateLBPoolStatistics data, response status code and response headers
    def get_lb_pool_statistics_with_http_info(lb_service_id, lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_lb_pool_statistics ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.get_lb_pool_statistics"
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling NetworkServicesApi.get_lb_pool_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-pools/{lb-pool-id}/statistics'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_lb_pool_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatus]
    def get_lb_pool_status(lb_service_id, lb_pool_id, opts = {})
      data, _status_code, _headers = get_lb_pool_status_with_http_info(lb_service_id, lb_pool_id, opts)
      data
    end

    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatus, Fixnum, Hash)>] AggregateLBPoolStatus data, response status code and response headers
    def get_lb_pool_status_with_http_info(lb_service_id, lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_lb_pool_status ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.get_lb_pool_status"
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling NetworkServicesApi.get_lb_pool_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-pools/{lb-pool-id}/detailed-status'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_lb_pool_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBService statistics information
    # Get LBServiceStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceStatistics]
    def get_lb_service_statistics(lb_service_id, opts = {})
      data, _status_code, _headers = get_lb_service_statistics_with_http_info(lb_service_id, opts)
      data
    end

    # Get LBService statistics information
    # Get LBServiceStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceStatistics, Fixnum, Hash)>] AggregateLBServiceStatistics data, response status code and response headers
    def get_lb_service_statistics_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_lb_service_statistics ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.get_lb_service_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/statistics'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_lb_service_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBService status information
    # Get LBService detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_instance_details Flag to indicate whether include detail information (default to false)
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_ids The UUIDs of transport nodes
    # @return [AggregateLBServiceStatus]
    def get_lb_service_status(lb_service_id, opts = {})
      data, _status_code, _headers = get_lb_service_status_with_http_info(lb_service_id, opts)
      data
    end

    # Get LBService status information
    # Get LBService detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_instance_details Flag to indicate whether include detail information
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_ids The UUIDs of transport nodes
    # @return [Array<(AggregateLBServiceStatus, Fixnum, Hash)>] AggregateLBServiceStatus data, response status code and response headers
    def get_lb_service_status_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_lb_service_status ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.get_lb_service_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/detailed-status'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_instance_details'] = opts[:'include_instance_details'] if !opts[:'include_instance_details'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_ids'] = opts[:'transport_node_ids'] if !opts[:'transport_node_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_lb_service_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBService usage information
    # Get LBServiceUsage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceUsage]
    def get_lb_service_usage(lb_service_id, opts = {})
      data, _status_code, _headers = get_lb_service_usage_with_http_info(lb_service_id, opts)
      data
    end

    # Get LBService usage information
    # Get LBServiceUsage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceUsage, Fixnum, Hash)>] AggregateLBServiceUsage data, response status code and response headers
    def get_lb_service_usage_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_lb_service_usage ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.get_lb_service_usage"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/service-usage'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_lb_service_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read load balancer service usage summary
    # API is used to retrieve the load balancer usage summary for all load balancer services. If the parameter ?include_usages=true exists, the property service-usages is included in the response. By default, service-usages is not included in the response.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [LBServiceUsageSummary]
    def get_lb_service_usage_summary(opts = {})
      data, _status_code, _headers = get_lb_service_usage_summary_with_http_info(opts)
      data
    end

    # Read load balancer service usage summary
    # API is used to retrieve the load balancer usage summary for all load balancer services. If the parameter ?include_usages&#x3D;true exists, the property service-usages is included in the response. By default, service-usages is not included in the response.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [Array<(LBServiceUsageSummary, Fixnum, Hash)>] LBServiceUsageSummary data, response status code and response headers
    def get_lb_service_usage_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_lb_service_usage_summary ...'
      end
      # resource path
      local_var_path = '/infra/lb-service-usage-summary'

      # query parameters
      query_params = {}
      query_params[:'include_usages'] = opts[:'include_usages'] if !opts[:'include_usages'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServiceUsageSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_lb_service_usage_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatistics]
    def get_lb_virtual_server_statistics(lb_service_id, lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_lb_virtual_server_statistics_with_http_info(lb_service_id, lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatistics, Fixnum, Hash)>] AggregateLBVirtualServerStatistics data, response status code and response headers
    def get_lb_virtual_server_statistics_with_http_info(lb_service_id, lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_lb_virtual_server_statistics ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.get_lb_virtual_server_statistics"
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling NetworkServicesApi.get_lb_virtual_server_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/statistics'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_lb_virtual_server_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatus]
    def get_lb_virtual_server_status(lb_service_id, lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_lb_virtual_server_status_with_http_info(lb_service_id, lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatus, Fixnum, Hash)>] AggregateLBVirtualServerStatus data, response status code and response headers
    def get_lb_virtual_server_status_with_http_info(lb_service_id, lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_lb_virtual_server_status ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.get_lb_virtual_server_status"
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling NetworkServicesApi.get_lb_virtual_server_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/detailed-status'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_lb_virtual_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GET Policy NAT types.
    # Get either of the two supported sections (USER and NAT64) under the given VPC ID. The USER section allows IPV4 based NAT rules, while the NAT64 rules allow translating IPV6 packets to IPV4 packets. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param nat_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyNat]
    def get_policy_nat_on_vpc(org_id, project_id, vpc_id, nat_id, opts = {})
      data, _status_code, _headers = get_policy_nat_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, opts)
      data
    end

    # GET Policy NAT types.
    # Get either of the two supported sections (USER and NAT64) under the given VPC ID. The USER section allows IPV4 based NAT rules, while the NAT64 rules allow translating IPV6 packets to IPV4 packets. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param nat_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNat, Fixnum, Hash)>] PolicyNat data, response status code and response headers
    def get_policy_nat_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_policy_nat_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_policy_nat_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_policy_nat_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.get_policy_nat_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.get_policy_nat_on_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_policy_nat_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def get_policy_nat_rule(tier_1_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def get_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_policy_nat_rule ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.get_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.get_policy_nat_rule"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT/PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def get_policy_nat_rule_from_tier0(tier_0_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT/PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def get_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_policy_nat_rule_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.get_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.get_policy_nat_rule_from_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_policy_nat_rule_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyNatRuleStatisticsListResult]
    def get_policy_nat_rule_statistics_from_tier0(tier_0_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_policy_nat_rule_statistics_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyNatRuleStatisticsListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsListResult data, response status code and response headers
    def get_policy_nat_rule_statistics_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_policy_nat_rule_statistics_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_policy_nat_rule_statistics_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.get_policy_nat_rule_statistics_from_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.get_policy_nat_rule_statistics_from_tier0"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['aggregate'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of aggregate'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_policy_nat_rule_statistics_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyNatRuleStatisticsListResult]
    def get_policy_nat_rule_statistics_from_tier1(tier_1_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_policy_nat_rule_statistics_from_tier1_with_http_info(tier_1_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyNatRuleStatisticsListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsListResult data, response status code and response headers
    def get_policy_nat_rule_statistics_from_tier1_with_http_info(tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_policy_nat_rule_statistics_from_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_policy_nat_rule_statistics_from_tier1"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.get_policy_nat_rule_statistics_from_tier1"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.get_policy_nat_rule_statistics_from_tier1"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['aggregate'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of aggregate'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_policy_nat_rule_statistics_from_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyVpcNatRule]
    def get_policy_vpc_nat_rule_on_vpc(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_policy_vpc_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyVpcNatRule, Fixnum, Hash)>] PolicyVpcNatRule data, response status code and response headers
    def get_policy_vpc_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_policy_vpc_nat_rule_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.get_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.get_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.get_policy_vpc_nat_rule_on_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyVpcNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_policy_vpc_nat_rule_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyNatRuleStatisticsListResult]
    def get_policy_vpc_nat_rule_statistics(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_policy_vpc_nat_rule_statistics_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyNatRuleStatisticsListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsListResult data, response status code and response headers
    def get_policy_vpc_nat_rule_statistics_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_policy_vpc_nat_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_policy_vpc_nat_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_policy_vpc_nat_rule_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.get_policy_vpc_nat_rule_statistics"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.get_policy_vpc_nat_rule_statistics"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.get_policy_vpc_nat_rule_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['aggregate'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of aggregate'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules/{nat-rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_policy_vpc_nat_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with Project. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path=&lt;service-cluster-path&gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [AggregateLBNodeCapacitySummary]
    def get_project_lb_node_capacity_status(org_id, project_id, opts = {})
      data, _status_code, _headers = get_project_lb_node_capacity_status_with_http_info(org_id, project_id, opts)
      data
    end

    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with Project. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path&#x3D;&amp;lt;service-cluster-path&amp;gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBNodeCapacitySummary, Fixnum, Hash)>] AggregateLBNodeCapacitySummary data, response status code and response headers
    def get_project_lb_node_capacity_status_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_project_lb_node_capacity_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_project_lb_node_capacity_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_project_lb_node_capacity_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/lb-node-capacity-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'service_cluster_path'] = opts[:'service_cluster_path'] if !opts[:'service_cluster_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBNodeCapacitySummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_project_lb_node_capacity_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints/&lt;local-endpoint-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def get_tier0_ip_sec_vpn_local_endpoint(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts)
      data
    end

    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def get_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;/peer-config instead. Note:    Please note that request is validated and any error messages returned from validation may include    the new VPN path instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier0_ip_sec_vpn_peer_config(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;/peer-config instead. Note:    Please note that request is validated and any error messages returned from validation may include    the new VPN path instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier0_ip_sec_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service
    # Get IPSec VPN service for given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def get_tier0_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN service
    # Get IPSec VPN service for given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def get_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session statistics under Tier-0
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics from enforcement point are returned.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/statisticsinstead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatistics]
    def get_tier0_ip_sec_vpn_session_statistics(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_session_statistics_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session statistics under Tier-0
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics from enforcement point are returned.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/statisticsinstead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatistics, Fixnum, Hash)>] AggregateIPSecVpnSessionStatistics data, response status code and response headers
    def get_tier0_ip_sec_vpn_session_statistics_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session detailed status under Tier-0
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed status is fetched realtime from the enforcement point. - source=cached: cached detailed status from enforcement point is returned.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/detailed-status instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatus]
    def get_tier0_ip_sec_vpn_session_status(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_session_status_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session detailed status under Tier-0
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed status is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status from enforcement point is returned.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/detailed-status instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatus, Fixnum, Hash)>] AggregateIPSecVpnSessionStatus data, response status code and response headers
    def get_tier0_ip_sec_vpn_session_status_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_ip_sec_vpn_session_status ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_ip_sec_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;?action=show_sensitive_data instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_ip_sec_vpn_session_with_sensitive_data(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;?action&#x3D;show_sensitive_data instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_ip_sec_vpn_session_with_sensitive_data ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_ip_sec_vpn_session_with_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_ip_sec_vpn_session_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier0_ipsec_vpn_session_summary(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_ipsec_vpn_session_summary_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier0_ipsec_vpn_session_summary_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2Vpn session remote mac for logical switch
    # Returns L2Vpn session remote macs for a logical switch. Data is fetched from enforcement point.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/remote-mac instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path Segment Path
    # @return [AggregateL2VpnSessionRemoteMac]
    def get_tier0_l2_vpn_session_remote_macs_for_ls(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_l2_vpn_session_remote_macs_for_ls_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2Vpn session remote mac for logical switch
    # Returns L2Vpn session remote macs for a logical switch. Data is fetched from enforcement point.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/remote-mac instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path Segment Path
    # @return [Array<(AggregateL2VpnSessionRemoteMac, Fixnum, Hash)>] AggregateL2VpnSessionRemoteMac data, response status code and response headers
    def get_tier0_l2_vpn_session_remote_macs_for_ls_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_l2_vpn_session_remote_macs_for_ls ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier0_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_l2_vpn_session_remote_macs_for_ls"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}/remote-mac'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VpnSessionRemoteMac')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_l2_vpn_session_remote_macs_for_ls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def get_tier0_vpn_ip_sec_vpn_local_endpoint(tier_0_id, service_id, local_endpoint_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, opts)
      data
    end

    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier0_vpn_ip_sec_vpn_peer_config(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_peer_config_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_peer_config_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service
    # Get IPSec VPN service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def get_tier0_vpn_ip_sec_vpn_service(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN service
    # Get IPSec VPN service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_vpn_ip_sec_vpn_session(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session statistics under Tier-0
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics are not supported for IPSec VPN session statistics.                  Statistics will always be fetched realtime even if source=cached. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatistics]
    def get_tier0_vpn_ip_sec_vpn_session_statistics(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session statistics under Tier-0
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics are not supported for IPSec VPN session statistics.                  Statistics will always be fetched realtime even if source&#x3D;cached. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatistics, Fixnum, Hash)>] AggregateIPSecVpnSessionStatistics data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session detailed status under Tier-0
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed status is fetched realtime from the enforcement point. - source=cached: cached detailed status from enforcement point is returned. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatus]
    def get_tier0_vpn_ip_sec_vpn_session_status(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_session_status_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session detailed status under Tier-0
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed status is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status from enforcement point is returned. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatus, Fixnum, Hash)>] AggregateIPSecVpnSessionStatus data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_session_status_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_status ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_ip_sec_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier0_vpn_ipsec_vpn_session_summary(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service under Tier-0
    # Get L2VPN service for given Tier-0
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def get_tier0_vpn_l2_vpn_service(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get L2VPN service under Tier-0
    # Get L2VPN service for given Tier-0
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def get_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN Session under Tier-0
    # Get L2VPN session under Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def get_tier0_vpn_l2_vpn_session(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN Session under Tier-0
    # Get L2VPN session under Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def get_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-0 L2VPN session configuration for the peer site
    # Get peer config for the Tier-0 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VPNSessionPeerConfig]
    def get_tier0_vpn_l2_vpn_session_peer_config(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_l2_vpn_session_peer_config_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get Tier-0 L2VPN session configuration for the peer site
    # Get peer config for the Tier-0 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VPNSessionPeerConfig, Fixnum, Hash)>] AggregateL2VPNSessionPeerConfig data, response status code and response headers
    def get_tier0_vpn_l2_vpn_session_peer_config_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_l2_vpn_session_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_l2_vpn_session_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2Vpn session remote mac for logical switch
    # Returns L2Vpn session remote macs for a logical switch. Data is fetched from enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/detailed-status instead. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path Segment Path
    # @return [AggregateL2VpnSessionRemoteMac]
    def get_tier0_vpn_l2_vpn_session_remote_macs_for_ls(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_l2_vpn_session_remote_macs_for_ls_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get L2Vpn session remote mac for logical switch
    # Returns L2Vpn session remote macs for a logical switch. Data is fetched from enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/detailed-status instead. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path Segment Path
    # @return [Array<(AggregateL2VpnSessionRemoteMac, Fixnum, Hash)>] AggregateL2VpnSessionRemoteMac data, response status code and response headers
    def get_tier0_vpn_l2_vpn_session_remote_macs_for_ls_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_l2_vpn_session_remote_macs_for_ls ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_remote_macs_for_ls"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}/remote-mac'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VpnSessionRemoteMac')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_l2_vpn_session_remote_macs_for_ls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN session statistics under Tier-0
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics from the enforcement point are returned. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateL2VPNSessionStatistics]
    def get_tier0_vpn_l2_vpn_session_statistics(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_l2_vpn_session_statistics_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN session statistics under Tier-0
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics from the enforcement point are returned. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateL2VPNSessionStatistics, Fixnum, Hash)>] AggregateL2VPNSessionStatistics data, response status code and response headers
    def get_tier0_vpn_l2_vpn_session_statistics_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_l2_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_l2_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN session detailed status under Tier-0
    # - no enforcement point path specified: detailed tatus is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed tatus is fetched realtime from the enforcement point. - source=cached: cached detailed status is returned. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateL2VPNSessionStatus]
    def get_tier0_vpn_l2_vpn_session_status(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_l2_vpn_session_status_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN session detailed status under Tier-0
    # - no enforcement point path specified: detailed tatus is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed tatus is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status is returned. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateL2VPNSessionStatus, Fixnum, Hash)>] AggregateL2VPNSessionStatus data, response status code and response headers
    def get_tier0_vpn_l2_vpn_session_status_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier0_vpn_l2_vpn_session_status ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier0_vpn_l2_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier0_vpn_l2_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ local-endpoints/&lt;local-endpoint-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def get_tier1_ip_sec_vpn_local_endpoint(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts)
      data
    end

    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def get_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;/peer-config instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier1_ip_sec_vpn_peer_config(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_peer_config_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;/peer-config instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier1_ip_sec_vpn_peer_config_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service
    # Get IPSec VPN service for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def get_tier1_ip_sec_vpn_service(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN service
    # Get IPSec VPN service for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def get_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics from enforcement point are returned.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/statistics instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatistics]
    def get_tier1_ip_sec_vpn_session_statistics(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_session_statistics_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics from enforcement point are returned.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/statistics instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatistics, Fixnum, Hash)>] AggregateIPSecVpnSessionStatistics data, response status code and response headers
    def get_tier1_ip_sec_vpn_session_statistics_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed status is fetched realtime from the enforcement point. - source=cached: cached detailed status from enforcement point is returned.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;/detailed-status instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatus]
    def get_tier1_ip_sec_vpn_session_status(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_session_status_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed status is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status from enforcement point is returned.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;/detailed-status instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatus, Fixnum, Hash)>] AggregateIPSecVpnSessionStatus data, response status code and response headers
    def get_tier1_ip_sec_vpn_session_status_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_ip_sec_vpn_session_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_ip_sec_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;?action=show_sensitive_data instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_ip_sec_vpn_session_with_sensitive_data(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;?action&#x3D;show_sensitive_data instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_ip_sec_vpn_session_with_sensitive_data ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_ip_sec_vpn_session_with_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_ip_sec_vpn_session_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier1_ipsec_vpn_session_summary(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_ipsec_vpn_session_summary_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier1_ipsec_vpn_session_summary_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1 locale service.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def get_tier1_l2_vpn_service(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1 locale service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def get_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt; instead. Note:    The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def get_tier1_l2_vpn_session(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt; instead. Note:    The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def get_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/peer-config instead. Note:    The API will return a new VPN path for \"transport_tunnel_path\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VPNSessionPeerConfig]
    def get_tier1_l2_vpn_session_peer_config(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_l2_vpn_session_peer_config_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/peer-config instead. Note:    The API will return a new VPN path for \&quot;transport_tunnel_path\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VPNSessionPeerConfig, Fixnum, Hash)>] AggregateL2VPNSessionPeerConfig data, response status code and response headers
    def get_tier1_l2_vpn_session_peer_config_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_l2_vpn_session_peer_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_l2_vpn_session_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2Vpn session remote mac for logical switch
    # Returns L2Vpn session remote macs for a logical switch. Data is fetched from enforcement point.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;/remote-mac instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path Segment Path
    # @return [AggregateL2VpnSessionRemoteMac]
    def get_tier1_l2_vpn_session_remote_macs_for_ls(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_l2_vpn_session_remote_macs_for_ls_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2Vpn session remote mac for logical switch
    # Returns L2Vpn session remote macs for a logical switch. Data is fetched from enforcement point.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;/remote-mac instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path Segment Path
    # @return [Array<(AggregateL2VpnSessionRemoteMac, Fixnum, Hash)>] AggregateL2VpnSessionRemoteMac data, response status code and response headers
    def get_tier1_l2_vpn_session_remote_macs_for_ls_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_l2_vpn_session_remote_macs_for_ls ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_remote_macs_for_ls"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}/remote-mac'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VpnSessionRemoteMac')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_l2_vpn_session_remote_macs_for_ls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics from the enforcement point are returned.  <br> This API is deprecated. Please use GET //infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/statistics instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateL2VPNSessionStatistics]
    def get_tier1_l2_vpn_session_statistics(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_l2_vpn_session_statistics_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics from the enforcement point are returned.  &lt;br&gt; This API is deprecated. Please use GET //infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/statistics instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateL2VPNSessionStatistics, Fixnum, Hash)>] AggregateL2VPNSessionStatistics data, response status code and response headers
    def get_tier1_l2_vpn_session_statistics_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_l2_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_l2_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed tatus is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed tatus is fetched realtime from the enforcement point. - source=cached: cached detailed status is returned. sessions/&lt;session-id&gt;/detailed-status instead.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateL2VPNSessionStatus]
    def get_tier1_l2_vpn_session_status(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_l2_vpn_session_status_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed tatus is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed tatus is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status is returned. sessions/&amp;lt;session-id&amp;gt;/detailed-status instead.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateL2VPNSessionStatus, Fixnum, Hash)>] AggregateL2VPNSessionStatus data, response status code and response headers
    def get_tier1_l2_vpn_session_status_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_l2_vpn_session_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_status"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_l2_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_l2_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def get_tier1_vpn_ip_sec_vpn_local_endpoint(tier_1_id, service_id, local_endpoint_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, opts)
      data
    end

    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier1_vpn_ip_sec_vpn_peer_config(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_peer_config_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_peer_config_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service
    # Get given IPSec VPN service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def get_tier1_vpn_ip_sec_vpn_service(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN service
    # Get given IPSec VPN service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_vpn_ip_sec_vpn_session(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics from enforcement point are returned.                  Please note that cache synchronization  is based on triggering this API with                  source=realtime or empty source and not polling based. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatistics]
    def get_tier1_vpn_ip_sec_vpn_session_statistics(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics from enforcement point are returned.                  Please note that cache synchronization  is based on triggering this API with                  source&#x3D;realtime or empty source and not polling based. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatistics, Fixnum, Hash)>] AggregateIPSecVpnSessionStatistics data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed status is fetched realtime from the enforcement point. - source=cached: cached detailed status from enforcement point is returned. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatus]
    def get_tier1_vpn_ip_sec_vpn_session_status(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_session_status_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed status is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status from enforcement point is returned. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatus, Fixnum, Hash)>] AggregateIPSecVpnSessionStatus data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_session_status_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_ip_sec_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier1_vpn_ipsec_vpn_session_summary(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def get_tier1_vpn_l2_vpn_service(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def get_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def get_tier1_vpn_l2_vpn_session(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def get_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VPNSessionPeerConfig]
    def get_tier1_vpn_l2_vpn_session_peer_config(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_l2_vpn_session_peer_config_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VPNSessionPeerConfig, Fixnum, Hash)>] AggregateL2VPNSessionPeerConfig data, response status code and response headers
    def get_tier1_vpn_l2_vpn_session_peer_config_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_l2_vpn_session_peer_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_l2_vpn_session_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2Vpn session remote mac for logical switch
    # Returns L2Vpn session remote macs for a logical switch. Data is fetched from enforcement point. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path Segment Path
    # @return [AggregateL2VpnSessionRemoteMac]
    def get_tier1_vpn_l2_vpn_session_remote_macs_for_ls(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_l2_vpn_session_remote_macs_for_ls_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get L2Vpn session remote mac for logical switch
    # Returns L2Vpn session remote macs for a logical switch. Data is fetched from enforcement point. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path Segment Path
    # @return [Array<(AggregateL2VpnSessionRemoteMac, Fixnum, Hash)>] AggregateL2VpnSessionRemoteMac data, response status code and response headers
    def get_tier1_vpn_l2_vpn_session_remote_macs_for_ls_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_l2_vpn_session_remote_macs_for_ls ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_remote_macs_for_ls"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}/remote-mac'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VpnSessionRemoteMac')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_l2_vpn_session_remote_macs_for_ls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics from the enforcement point are returned. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateL2VPNSessionStatistics]
    def get_tier1_vpn_l2_vpn_session_statistics(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_l2_vpn_session_statistics_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics from the enforcement point are returned. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateL2VPNSessionStatistics, Fixnum, Hash)>] AggregateL2VPNSessionStatistics data, response status code and response headers
    def get_tier1_vpn_l2_vpn_session_statistics_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_l2_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_l2_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed tatus is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed tatus is fetched realtime from the enforcement point. - source=cached: cached detailed status is returned. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateL2VPNSessionStatus]
    def get_tier1_vpn_l2_vpn_session_status(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_l2_vpn_session_status_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed tatus is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed tatus is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status is returned. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateL2VPNSessionStatus, Fixnum, Hash)>] AggregateL2VPNSessionStatus data, response status code and response headers
    def get_tier1_vpn_l2_vpn_session_status_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_tier1_vpn_l2_vpn_session_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.get_tier1_vpn_l2_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_tier1_vpn_l2_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with VPC. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path=&lt;service-cluster-path&gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [AggregateLBNodeCapacitySummary]
    def get_vpc_lb_node_capacity_status(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_node_capacity_status_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with VPC. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path&#x3D;&amp;lt;service-cluster-path&amp;gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBNodeCapacitySummary, Fixnum, Hash)>] AggregateLBNodeCapacitySummary data, response status code and response headers
    def get_vpc_lb_node_capacity_status_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_vpc_lb_node_capacity_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_vpc_lb_node_capacity_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_vpc_lb_node_capacity_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.get_vpc_lb_node_capacity_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-node-capacity-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'service_cluster_path'] = opts[:'service_cluster_path'] if !opts[:'service_cluster_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBNodeCapacitySummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_vpc_lb_node_capacity_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatistics]
    def get_vpc_lb_pool_statistics(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_pool_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts)
      data
    end

    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatistics, Fixnum, Hash)>] AggregateLBPoolStatistics data, response status code and response headers
    def get_vpc_lb_pool_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_vpc_lb_pool_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling NetworkServicesApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling NetworkServicesApi.get_vpc_lb_pool_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-pools/{vpc-lb-pool-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_vpc_lb_pool_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatus]
    def get_vpc_lb_pool_status(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_pool_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts)
      data
    end

    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatus, Fixnum, Hash)>] AggregateLBPoolStatus data, response status code and response headers
    def get_vpc_lb_pool_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_vpc_lb_pool_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling NetworkServicesApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling NetworkServicesApi.get_vpc_lb_pool_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-pools/{vpc-lb-pool-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_vpc_lb_pool_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get load balancer statistics information
    # Get load balancer statistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceStatistics]
    def get_vpc_lb_service_statistics(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_service_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Get load balancer statistics information
    # Get load balancer statistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceStatistics, Fixnum, Hash)>] AggregateLBServiceStatistics data, response status code and response headers
    def get_vpc_lb_service_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_vpc_lb_service_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_vpc_lb_service_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_vpc_lb_service_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.get_vpc_lb_service_statistics"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling NetworkServicesApi.get_vpc_lb_service_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_vpc_lb_service_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get load balancer status information
    # Get load balancer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceStatus]
    def get_vpc_lb_service_status(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_service_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Get load balancer status information
    # Get load balancer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceStatus, Fixnum, Hash)>] AggregateLBServiceStatus data, response status code and response headers
    def get_vpc_lb_service_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_vpc_lb_service_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_vpc_lb_service_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_vpc_lb_service_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.get_vpc_lb_service_status"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling NetworkServicesApi.get_vpc_lb_service_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_vpc_lb_service_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get load balancer usage information
    # Get load balancer usage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceUsage]
    def get_vpc_lb_service_usage(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_service_usage_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Get load balancer usage information
    # Get load balancer usage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceUsage, Fixnum, Hash)>] AggregateLBServiceUsage data, response status code and response headers
    def get_vpc_lb_service_usage_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_vpc_lb_service_usage ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_vpc_lb_service_usage"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_vpc_lb_service_usage"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.get_vpc_lb_service_usage"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling NetworkServicesApi.get_vpc_lb_service_usage"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/usage'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_vpc_lb_service_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatistics]
    def get_vpc_lb_virtual_server_statistics(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_virtual_server_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatistics, Fixnum, Hash)>] AggregateLBVirtualServerStatistics data, response status code and response headers
    def get_vpc_lb_virtual_server_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_vpc_lb_virtual_server_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling NetworkServicesApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling NetworkServicesApi.get_vpc_lb_virtual_server_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_vpc_lb_virtual_server_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatus]
    def get_vpc_lb_virtual_server_status(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_virtual_server_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatus, Fixnum, Hash)>] AggregateLBVirtualServerStatus data, response status code and response headers
    def get_vpc_lb_virtual_server_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.get_vpc_lb_virtual_server_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling NetworkServicesApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling NetworkServicesApi.get_vpc_lb_virtual_server_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#get_vpc_lb_virtual_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def global_infra_get_policy_nat_rule(tier_1_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def global_infra_get_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_get_policy_nat_rule ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_get_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT/PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def global_infra_get_policy_nat_rule_from_tier0(tier_0_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT/PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def global_infra_get_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_get_policy_nat_rule_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule_from_tier0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_get_policy_nat_rule_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyNatRuleStatisticsListResult]
    def global_infra_get_policy_nat_rule_statistics_from_tier0(tier_0_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_nat_rule_statistics_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyNatRuleStatisticsListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsListResult data, response status code and response headers
    def global_infra_get_policy_nat_rule_statistics_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_get_policy_nat_rule_statistics_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule_statistics_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule_statistics_from_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule_statistics_from_tier0"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['aggregate'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of aggregate'
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_get_policy_nat_rule_statistics_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyNatRuleStatisticsListResult]
    def global_infra_get_policy_nat_rule_statistics_from_tier1(tier_1_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_nat_rule_statistics_from_tier1_with_http_info(tier_1_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyNatRuleStatisticsListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsListResult data, response status code and response headers
    def global_infra_get_policy_nat_rule_statistics_from_tier1_with_http_info(tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_get_policy_nat_rule_statistics_from_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule_statistics_from_tier1"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule_statistics_from_tier1"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.global_infra_get_policy_nat_rule_statistics_from_tier1"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['aggregate'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of aggregate'
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_get_policy_nat_rule_statistics_from_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List all NAT sections under the given Tier-0 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def global_infra_list_policy_nat_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_nat_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # List Policy NAT types.
    # List all NAT sections under the given Tier-0 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def global_infra_list_policy_nat_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_list_policy_nat_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.global_infra_list_policy_nat_on_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_on_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_on_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/nat'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_list_policy_nat_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def global_infra_list_policy_nat_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_nat_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def global_infra_list_policy_nat_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_list_policy_nat_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.global_infra_list_policy_nat_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_on_tier1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/nat'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_list_policy_nat_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleListResult]
    def global_infra_list_policy_nat_rules(tier_1_id, nat_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_nat_rules_with_http_info(tier_1_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleListResult, Fixnum, Hash)>] PolicyNatRuleListResult data, response status code and response headers
    def global_infra_list_policy_nat_rules_with_http_info(tier_1_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_list_policy_nat_rules ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.global_infra_list_policy_nat_rules"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.global_infra_list_policy_nat_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_list_policy_nat_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleListResult]
    def global_infra_list_policy_nat_rules_from_tier0(tier_0_id, nat_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_nat_rules_from_tier0_with_http_info(tier_0_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleListResult, Fixnum, Hash)>] PolicyNatRuleListResult data, response status code and response headers
    def global_infra_list_policy_nat_rules_from_tier0_with_http_info(tier_0_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_list_policy_nat_rules_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.global_infra_list_policy_nat_rules_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.global_infra_list_policy_nat_rules_from_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_rules_from_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_rules_from_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_list_policy_nat_rules_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules Statistics
    # List NAT Rules Statistics from Tier-0 denoted by Tier-0 ID.
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleStatisticsPerLogicalRouterListResult]
    def global_infra_list_policy_nat_rules_statistics_from_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_nat_rules_statistics_from_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # List NAT Rules Statistics
    # List NAT Rules Statistics from Tier-0 denoted by Tier-0 ID.
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleStatisticsPerLogicalRouterListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsPerLogicalRouterListResult data, response status code and response headers
    def global_infra_list_policy_nat_rules_statistics_from_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_list_policy_nat_rules_statistics_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.global_infra_list_policy_nat_rules_statistics_from_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_rules_statistics_from_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_rules_statistics_from_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/nat/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsPerLogicalRouterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_list_policy_nat_rules_statistics_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules Statistics
    # List NAT Rules Statistics from Tier-1 denoted by Tier-1 ID.
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleStatisticsPerLogicalRouterListResult]
    def global_infra_list_policy_nat_rules_statistics_from_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_nat_rules_statistics_from_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # List NAT Rules Statistics
    # List NAT Rules Statistics from Tier-1 denoted by Tier-1 ID.
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleStatisticsPerLogicalRouterListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsPerLogicalRouterListResult data, response status code and response headers
    def global_infra_list_policy_nat_rules_statistics_from_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_list_policy_nat_rules_statistics_from_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.global_infra_list_policy_nat_rules_statistics_from_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_rules_statistics_from_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.global_infra_list_policy_nat_rules_statistics_from_tier1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/nat/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsPerLogicalRouterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_list_policy_nat_rules_statistics_from_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [PolicyMetadataProxyStatistics]
    def global_infra_read_metadata_proxy_statistics(metadata_proxy_id, opts = {})
      data, _status_code, _headers = global_infra_read_metadata_proxy_statistics_with_http_info(metadata_proxy_id, opts)
      data
    end

    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyMetadataProxyStatistics, Fixnum, Hash)>] PolicyMetadataProxyStatistics data, response status code and response headers
    def global_infra_read_metadata_proxy_statistics_with_http_info(metadata_proxy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_read_metadata_proxy_statistics ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling NetworkServicesApi.global_infra_read_metadata_proxy_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/metadata-proxies/{metadata-proxy-id}/statistics'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyMetadataProxyStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_read_metadata_proxy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [PolicyMetadataProxyStatus]
    def global_infra_read_metadata_proxy_status(metadata_proxy_id, opts = {})
      data, _status_code, _headers = global_infra_read_metadata_proxy_status_with_http_info(metadata_proxy_id, opts)
      data
    end

    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyMetadataProxyStatus, Fixnum, Hash)>] PolicyMetadataProxyStatus data, response status code and response headers
    def global_infra_read_metadata_proxy_status_with_http_info(metadata_proxy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_read_metadata_proxy_status ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling NetworkServicesApi.global_infra_read_metadata_proxy_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/metadata-proxies/{metadata-proxy-id}/status'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyMetadataProxyStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_read_metadata_proxy_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_reset_tier0_vpn_ip_sec_vpn_session_statistics(tier_0_id, service_id, session_id, action, opts = {})
      global_infra_reset_tier0_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_0_id, service_id, session_id, action, opts)
      nil
    end

    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_reset_tier0_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_0_id, service_id, session_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_reset_tier0_vpn_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.global_infra_reset_tier0_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.global_infra_reset_tier0_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.global_infra_reset_tier0_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling NetworkServicesApi.global_infra_reset_tier0_vpn_ip_sec_vpn_session_statistics"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reset'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of reset"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_reset_tier0_vpn_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics(tier_1_id, service_id, session_id, action, opts = {})
      global_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_1_id, service_id, session_id, action, opts)
      nil
    end

    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_1_id, service_id, session_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.global_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.global_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.global_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.global_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling NetworkServicesApi.global_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reset'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of reset"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#global_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DPD profiles
    # Get paginated list of all DPD Profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnDpdProfileListResult]
    def list_ip_sec_vpn_dpd_profiles(opts = {})
      data, _status_code, _headers = list_ip_sec_vpn_dpd_profiles_with_http_info(opts)
      data
    end

    # List DPD profiles
    # Get paginated list of all DPD Profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnDpdProfileListResult, Fixnum, Hash)>] IPSecVpnDpdProfileListResult data, response status code and response headers
    def list_ip_sec_vpn_dpd_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_ip_sec_vpn_dpd_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_ip_sec_vpn_dpd_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_ip_sec_vpn_dpd_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipsec-vpn-dpd-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnDpdProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_ip_sec_vpn_dpd_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IKE profiles
    # Get paginated list of all IKE Profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnIkeProfileListResult]
    def list_ip_sec_vpn_ike_profiles(opts = {})
      data, _status_code, _headers = list_ip_sec_vpn_ike_profiles_with_http_info(opts)
      data
    end

    # List IKE profiles
    # Get paginated list of all IKE Profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnIkeProfileListResult, Fixnum, Hash)>] IPSecVpnIkeProfileListResult data, response status code and response headers
    def list_ip_sec_vpn_ike_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_ip_sec_vpn_ike_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_ip_sec_vpn_ike_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_ip_sec_vpn_ike_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipsec-vpn-ike-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnIkeProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_ip_sec_vpn_ike_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPSec tunnel profiles
    # Get paginated list of all IPSec tunnel Profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnTunnelProfileListResult]
    def list_ip_sec_vpn_tunnel_profiles(opts = {})
      data, _status_code, _headers = list_ip_sec_vpn_tunnel_profiles_with_http_info(opts)
      data
    end

    # List IPSec tunnel profiles
    # Get paginated list of all IPSec tunnel Profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnTunnelProfileListResult, Fixnum, Hash)>] IPSecVpnTunnelProfileListResult data, response status code and response headers
    def list_ip_sec_vpn_tunnel_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_ip_sec_vpn_tunnel_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_ip_sec_vpn_tunnel_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_ip_sec_vpn_tunnel_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipsec-vpn-tunnel-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnTunnelProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_ip_sec_vpn_tunnel_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service list result under Tier-0
    # Get paginated list of all L2VPN services under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNServiceListResult]
    def list_l2_vpn_services(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_l2_vpn_services_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Get L2VPN service list result under Tier-0
    # Get paginated list of all L2VPN services under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNServiceListResult, Fixnum, Hash)>] L2VPNServiceListResult data, response status code and response headers
    def list_l2_vpn_services_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_l2_vpn_services ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_l2_vpn_services"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_l2_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_l2_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_l2_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_l2_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN sessions list result under Tier-0
    # Get paginated list of all L2VPN sessions under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ l2vpn-services/&lt;service-id&gt;/sessions instead. Note:    The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNSessionListResult]
    def list_l2_vpn_sessions(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_l2_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get L2VPN sessions list result under Tier-0
    # Get paginated list of all L2VPN sessions under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ l2vpn-services/&amp;lt;service-id&amp;gt;/sessions instead. Note:    The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNSessionListResult, Fixnum, Hash)>] L2VPNSessionListResult data, response status code and response headers
    def list_l2_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_l2_vpn_sessions ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_l2_vpn_sessions"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_l2_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_l2_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List L2Vpns
    # Paginated list of L2Vpns. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions instead. If used, this deprecated API will only return L2Vpns that were created through the deprecated PATCH and PUT /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-context/ l2vpns/<l2vpn-id> APIs. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VpnListResult]
    def list_l2_vpns(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_l2_vpns_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # List L2Vpns
    # Paginated list of L2Vpns. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions instead. If used, this deprecated API will only return L2Vpns that were created through the deprecated PATCH and PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-context/ l2vpns/&lt;l2vpn-id&gt; APIs. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VpnListResult, Fixnum, Hash)>] L2VpnListResult data, response status code and response headers
    def list_l2_vpns_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_l2_vpns ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_l2_vpns"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_l2_vpns"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_l2_vpns, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_l2_vpns, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_l2_vpns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List L3Vpns
    # Paginated list of L3Vpns. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/sessions to list all IPSecVpnSessions. - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/local-endpoints to list all IPSecVpnLocalEndpoints. - GET /infra/ipsec-vpn-tunnel-profiles to list all IPSecVpnTunnelProfiles. - GET /infra/ipsec-vpn-ike-profiles to list all IPSecVpnIkeProfiles. - GET /infra/ipsec-vpn-dpd-profiles to list all IPSecVpnDpdProfiles. If used, this deprecated API will only return L3Vpns that were created through the deprecated PATCH and PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l3vpns/&lt;l3vpn-id&gt; APIs. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :l3vpn_session Resource type of L3Vpn Session
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L3VpnListResult]
    def list_l3_vpns(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_l3_vpns_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # List L3Vpns
    # Paginated list of L3Vpns. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/sessions to list all IPSecVpnSessions. - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/local-endpoints to list all IPSecVpnLocalEndpoints. - GET /infra/ipsec-vpn-tunnel-profiles to list all IPSecVpnTunnelProfiles. - GET /infra/ipsec-vpn-ike-profiles to list all IPSecVpnIkeProfiles. - GET /infra/ipsec-vpn-dpd-profiles to list all IPSecVpnDpdProfiles. If used, this deprecated API will only return L3Vpns that were created through the deprecated PATCH and PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/l3vpns/&amp;lt;l3vpn-id&amp;gt; APIs. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :l3vpn_session Resource type of L3Vpn Session
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L3VpnListResult, Fixnum, Hash)>] L3VpnListResult data, response status code and response headers
    def list_l3_vpns_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_l3_vpns ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_l3_vpns"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_l3_vpns"
      end
      if @api_client.config.client_side_validation && opts[:'l3vpn_session'] && !['PolicyBasedL3VpnSession', 'RouteBasedL3VpnSession'].include?(opts[:'l3vpn_session'])
        fail ArgumentError, 'invalid value for "l3vpn_session", must be one of PolicyBasedL3VpnSession, RouteBasedL3VpnSession'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_l3_vpns, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_l3_vpns, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'l3vpn_session'] = opts[:'l3vpn_session'] if !opts[:'l3vpn_session'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3VpnListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_l3_vpns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBAppProfileListResult]
    def list_lb_app_profiles(opts = {})
      data, _status_code, _headers = list_lb_app_profiles_with_http_info(opts)
      data
    end

    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBAppProfileListResult, Fixnum, Hash)>] LBAppProfileListResult data, response status code and response headers
    def list_lb_app_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_lb_app_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_app_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_app_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-app-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_lb_app_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBClientSslProfileListResult]
    def list_lb_client_ssl_profiles(opts = {})
      data, _status_code, _headers = list_lb_client_ssl_profiles_with_http_info(opts)
      data
    end

    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBClientSslProfileListResult, Fixnum, Hash)>] LBClientSslProfileListResult data, response status code and response headers
    def list_lb_client_ssl_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_lb_client_ssl_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_client_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_client_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_lb_client_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBMonitorProfiles for infra
    # Paginated list of all LBMonitorProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBMonitorProfileListResult]
    def list_lb_monitor_profiles(opts = {})
      data, _status_code, _headers = list_lb_monitor_profiles_with_http_info(opts)
      data
    end

    # List LBMonitorProfiles for infra
    # Paginated list of all LBMonitorProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBMonitorProfileListResult, Fixnum, Hash)>] LBMonitorProfileListResult data, response status code and response headers
    def list_lb_monitor_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_lb_monitor_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_monitor_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_monitor_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-monitor-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_lb_monitor_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPersistenceProfiles for infra
    # Paginated list of all LBPersistenceProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPersistenceProfileListResult]
    def list_lb_persistence_profiles(opts = {})
      data, _status_code, _headers = list_lb_persistence_profiles_with_http_info(opts)
      data
    end

    # List LBPersistenceProfiles for infra
    # Paginated list of all LBPersistenceProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPersistenceProfileListResult, Fixnum, Hash)>] LBPersistenceProfileListResult data, response status code and response headers
    def list_lb_persistence_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_lb_persistence_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_persistence_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_persistence_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-persistence-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_lb_persistence_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPools
    # Paginated list of all LBPools.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPoolListResult]
    def list_lb_pools(opts = {})
      data, _status_code, _headers = list_lb_pools_with_http_info(opts)
      data
    end

    # List LBPools
    # Paginated list of all LBPools.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPoolListResult, Fixnum, Hash)>] LBPoolListResult data, response status code and response headers
    def list_lb_pools_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_lb_pools ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-pools'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_lb_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServerSslProfileListResult]
    def list_lb_server_ssl_profiles(opts = {})
      data, _status_code, _headers = list_lb_server_ssl_profiles_with_http_info(opts)
      data
    end

    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServerSslProfileListResult, Fixnum, Hash)>] LBServerSslProfileListResult data, response status code and response headers
    def list_lb_server_ssl_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_lb_server_ssl_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_server_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_server_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_lb_server_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBService
    # Paginated list of all LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServiceListResult]
    def list_lb_services(opts = {})
      data, _status_code, _headers = list_lb_services_with_http_info(opts)
      data
    end

    # List LBService
    # Paginated list of all LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServiceListResult, Fixnum, Hash)>] LBServiceListResult data, response status code and response headers
    def list_lb_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_lb_services ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-services'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_lb_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBVirtualServers
    # Paginated list of all LBVirtualServers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBVirtualServerListResult]
    def list_lb_virtual_servers(opts = {})
      data, _status_code, _headers = list_lb_virtual_servers_with_http_info(opts)
      data
    end

    # List LBVirtualServers
    # Paginated list of all LBVirtualServers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBVirtualServerListResult, Fixnum, Hash)>] LBVirtualServerListResult data, response status code and response headers
    def list_lb_virtual_servers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_lb_virtual_servers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_virtual_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_lb_virtual_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-virtual-servers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_lb_virtual_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Metadata Proxy Configurations
    # List all L2 Metadata Proxy Configurations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MetadataProxyConfigListResult]
    def list_metadata_proxy_config(opts = {})
      data, _status_code, _headers = list_metadata_proxy_config_with_http_info(opts)
      data
    end

    # List Metadata Proxy Configurations
    # List all L2 Metadata Proxy Configurations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MetadataProxyConfigListResult, Fixnum, Hash)>] MetadataProxyConfigListResult data, response status code and response headers
    def list_metadata_proxy_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_metadata_proxy_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_metadata_proxy_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_metadata_proxy_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/metadata-proxies'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MetadataProxyConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_metadata_proxy_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List all NAT sections under the given Tier-0 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def list_policy_nat_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = list_policy_nat_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # List Policy NAT types.
    # List all NAT sections under the given Tier-0 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def list_policy_nat_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_policy_nat_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_policy_nat_on_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_on_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_on_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_policy_nat_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def list_policy_nat_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = list_policy_nat_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def list_policy_nat_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_policy_nat_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_policy_nat_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_on_tier1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_policy_nat_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List the two supported sections (USER and NAT64) under the given VPC ID. The USER section allows IPV4 based NAT rules, while the NAT64 rules allow translating IPV6 packets to IPV4 packets. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def list_policy_nat_on_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_policy_nat_on_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List Policy NAT types.
    # List the two supported sections (USER and NAT64) under the given VPC ID. The USER section allows IPV4 based NAT rules, while the NAT64 rules allow translating IPV6 packets to IPV4 packets. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def list_policy_nat_on_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_policy_nat_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.list_policy_nat_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.list_policy_nat_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.list_policy_nat_on_vpc"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_on_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_on_vpc, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_policy_nat_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleListResult]
    def list_policy_nat_rules(tier_1_id, nat_id, opts = {})
      data, _status_code, _headers = list_policy_nat_rules_with_http_info(tier_1_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleListResult, Fixnum, Hash)>] PolicyNatRuleListResult data, response status code and response headers
    def list_policy_nat_rules_with_http_info(tier_1_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_policy_nat_rules ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_policy_nat_rules"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.list_policy_nat_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_policy_nat_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleListResult]
    def list_policy_nat_rules_from_tier0(tier_0_id, nat_id, opts = {})
      data, _status_code, _headers = list_policy_nat_rules_from_tier0_with_http_info(tier_0_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleListResult, Fixnum, Hash)>] PolicyNatRuleListResult data, response status code and response headers
    def list_policy_nat_rules_from_tier0_with_http_info(tier_0_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_policy_nat_rules_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_policy_nat_rules_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.list_policy_nat_rules_from_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_rules_from_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_rules_from_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_policy_nat_rules_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyVpcNatRuleListResult]
    def list_policy_nat_rules_on_vpc(org_id, project_id, vpc_id, nat_id, opts = {})
      data, _status_code, _headers = list_policy_nat_rules_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyVpcNatRuleListResult, Fixnum, Hash)>] PolicyVpcNatRuleListResult data, response status code and response headers
    def list_policy_nat_rules_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_policy_nat_rules_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.list_policy_nat_rules_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.list_policy_nat_rules_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.list_policy_nat_rules_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.list_policy_nat_rules_on_vpc"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_rules_on_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_rules_on_vpc, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyVpcNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_policy_nat_rules_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules Statistics
    # List NAT Rules Statistics from Tier-0 denoted by Tier-0 ID.
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleStatisticsPerLogicalRouterListResult]
    def list_policy_nat_rules_statistics_from_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = list_policy_nat_rules_statistics_from_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # List NAT Rules Statistics
    # List NAT Rules Statistics from Tier-0 denoted by Tier-0 ID.
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleStatisticsPerLogicalRouterListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsPerLogicalRouterListResult data, response status code and response headers
    def list_policy_nat_rules_statistics_from_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_policy_nat_rules_statistics_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_policy_nat_rules_statistics_from_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_rules_statistics_from_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_rules_statistics_from_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsPerLogicalRouterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_policy_nat_rules_statistics_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules Statistics
    # List NAT Rules Statistics from Tier-1 denoted by Tier-1 ID.
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleStatisticsPerLogicalRouterListResult]
    def list_policy_nat_rules_statistics_from_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = list_policy_nat_rules_statistics_from_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # List NAT Rules Statistics
    # List NAT Rules Statistics from Tier-1 denoted by Tier-1 ID.
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleStatisticsPerLogicalRouterListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsPerLogicalRouterListResult data, response status code and response headers
    def list_policy_nat_rules_statistics_from_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_policy_nat_rules_statistics_from_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_policy_nat_rules_statistics_from_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_rules_statistics_from_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_nat_rules_statistics_from_tier1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsPerLogicalRouterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_policy_nat_rules_statistics_from_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules Statistics
    # List NAT Rules Statistics from VPC denoted by VPC ID.
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleStatisticsPerLogicalRouterListResult]
    def list_policy_vpc_nat_rules_statistics(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_policy_vpc_nat_rules_statistics_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List NAT Rules Statistics
    # List NAT Rules Statistics from VPC denoted by VPC ID.
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleStatisticsPerLogicalRouterListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsPerLogicalRouterListResult data, response status code and response headers
    def list_policy_vpc_nat_rules_statistics_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_policy_vpc_nat_rules_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.list_policy_vpc_nat_rules_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.list_policy_vpc_nat_rules_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.list_policy_vpc_nat_rules_statistics"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_vpc_nat_rules_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_policy_vpc_nat_rules_statistics, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsPerLogicalRouterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_policy_vpc_nat_rules_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of supported SSL ciphers and protocols
    # Retrieve a list of supported SSL ciphers and protocols.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbSslCipherAndProtocolListResult]
    def list_ssl_ciphers_and_protocols(opts = {})
      data, _status_code, _headers = list_ssl_ciphers_and_protocols_with_http_info(opts)
      data
    end

    # Retrieve a list of supported SSL ciphers and protocols
    # Retrieve a list of supported SSL ciphers and protocols.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbSslCipherAndProtocolListResult, Fixnum, Hash)>] LbSslCipherAndProtocolListResult data, response status code and response headers
    def list_ssl_ciphers_and_protocols_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_ssl_ciphers_and_protocols ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_ssl_ciphers_and_protocols, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_ssl_ciphers_and_protocols, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-ssl-ciphers-and-protocols'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LbSslCipherAndProtocolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_ssl_ciphers_and_protocols\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnLocalEndpointListResult]
    def list_tier0_ip_sec_vpn_local_endpoints(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_ip_sec_vpn_local_endpoints_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnLocalEndpointListResult, Fixnum, Hash)>] IPSecVpnLocalEndpointListResult data, response status code and response headers
    def list_tier0_ip_sec_vpn_local_endpoints_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier0_ip_sec_vpn_local_endpoints ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_tier0_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_tier0_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_tier0_ip_sec_vpn_local_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier0_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for given locale service under Tier-0. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnServiceListResult]
    def list_tier0_ip_sec_vpn_services(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_tier0_ip_sec_vpn_services_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for given locale service under Tier-0. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnServiceListResult, Fixnum, Hash)>] IPSecVpnServiceListResult data, response status code and response headers
    def list_tier0_ip_sec_vpn_services_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier0_ip_sec_vpn_services ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_tier0_ip_sec_vpn_services"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_tier0_ip_sec_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier0_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier0_ip_sec_vpn_sessions(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_ip_sec_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier0_ip_sec_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier0_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_tier0_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_tier0_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_tier0_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier0_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnLocalEndpointListResult]
    def list_tier0_vpn_ip_sec_vpn_local_endpoints(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_vpn_ip_sec_vpn_local_endpoints_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnLocalEndpointListResult, Fixnum, Hash)>] IPSecVpnLocalEndpointListResult data, response status code and response headers
    def list_tier0_vpn_ip_sec_vpn_local_endpoints_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_local_endpoints ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_local_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/local-endpoints'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier0_vpn_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for given Tier-0. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnServiceListResult]
    def list_tier0_vpn_ip_sec_vpn_services(tier_0_id, opts = {})
      data, _status_code, _headers = list_tier0_vpn_ip_sec_vpn_services_with_http_info(tier_0_id, opts)
      data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for given Tier-0. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnServiceListResult, Fixnum, Hash)>] IPSecVpnServiceListResult data, response status code and response headers
    def list_tier0_vpn_ip_sec_vpn_services_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_services ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier0_vpn_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier0_vpn_ip_sec_vpn_sessions(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_vpn_ip_sec_vpn_sessions_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier0_vpn_ip_sec_vpn_sessions_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_vpn_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier0_vpn_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service list result under Tier-0
    # Get paginated list of all L2VPN services under Tier-0.
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNServiceListResult]
    def list_tier0_vpn_l2_vpn_services(tier_0_id, opts = {})
      data, _status_code, _headers = list_tier0_vpn_l2_vpn_services_with_http_info(tier_0_id, opts)
      data
    end

    # Get L2VPN service list result under Tier-0
    # Get paginated list of all L2VPN services under Tier-0.
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNServiceListResult, Fixnum, Hash)>] L2VPNServiceListResult data, response status code and response headers
    def list_tier0_vpn_l2_vpn_services_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier0_vpn_l2_vpn_services ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_tier0_vpn_l2_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_vpn_l2_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_vpn_l2_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier0_vpn_l2_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN sessions list result under Tier-0
    # Get paginated list of all L2VPN sessions under Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNSessionListResult]
    def list_tier0_vpn_l2_vpn_sessions(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_vpn_l2_vpn_sessions_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get L2VPN sessions list result under Tier-0
    # Get paginated list of all L2VPN sessions under Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNSessionListResult, Fixnum, Hash)>] L2VPNSessionListResult data, response status code and response headers
    def list_tier0_vpn_l2_vpn_sessions_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier0_vpn_l2_vpn_sessions ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.list_tier0_vpn_l2_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_tier0_vpn_l2_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_vpn_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier0_vpn_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier0_vpn_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnLocalEndpointListResult]
    def list_tier1_ip_sec_vpn_local_endpoints(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_ip_sec_vpn_local_endpoints_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnLocalEndpointListResult, Fixnum, Hash)>] IPSecVpnLocalEndpointListResult data, response status code and response headers
    def list_tier1_ip_sec_vpn_local_endpoints_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier1_ip_sec_vpn_local_endpoints ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_tier1_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_tier1_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_tier1_ip_sec_vpn_local_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier1_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnServiceListResult]
    def list_tier1_ip_sec_vpn_services(tier_1_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_tier1_ip_sec_vpn_services_with_http_info(tier_1_id, locale_service_id, opts)
      data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnServiceListResult, Fixnum, Hash)>] IPSecVpnServiceListResult data, response status code and response headers
    def list_tier1_ip_sec_vpn_services_with_http_info(tier_1_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier1_ip_sec_vpn_services ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_tier1_ip_sec_vpn_services"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_tier1_ip_sec_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier1_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier1_ip_sec_vpn_sessions(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_ip_sec_vpn_sessions_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier1_ip_sec_vpn_sessions_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier1_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_tier1_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_tier1_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_tier1_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier1_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNServiceListResult]
    def list_tier1_l2_vpn_services(tier_1_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_tier1_l2_vpn_services_with_http_info(tier_1_id, locale_service_id, opts)
      data
    end

    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNServiceListResult, Fixnum, Hash)>] L2VPNServiceListResult data, response status code and response headers
    def list_tier1_l2_vpn_services_with_http_info(tier_1_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier1_l2_vpn_services ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_tier1_l2_vpn_services"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_tier1_l2_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_l2_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_l2_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier1_l2_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/sessions instead. Note:    The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNSessionListResult]
    def list_tier1_l2_vpn_sessions(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_l2_vpn_sessions_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/sessions instead. Note:    The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNSessionListResult, Fixnum, Hash)>] L2VPNSessionListResult data, response status code and response headers
    def list_tier1_l2_vpn_sessions_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier1_l2_vpn_sessions ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_tier1_l2_vpn_sessions"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.list_tier1_l2_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_tier1_l2_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier1_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnLocalEndpointListResult]
    def list_tier1_vpn_ip_sec_vpn_local_endpoints(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_vpn_ip_sec_vpn_local_endpoints_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnLocalEndpointListResult, Fixnum, Hash)>] IPSecVpnLocalEndpointListResult data, response status code and response headers
    def list_tier1_vpn_ip_sec_vpn_local_endpoints_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_local_endpoints ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier1_vpn_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services under Tier-1. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnServiceListResult]
    def list_tier1_vpn_ip_sec_vpn_services(tier_1_id, opts = {})
      data, _status_code, _headers = list_tier1_vpn_ip_sec_vpn_services_with_http_info(tier_1_id, opts)
      data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services under Tier-1. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnServiceListResult, Fixnum, Hash)>] IPSecVpnServiceListResult data, response status code and response headers
    def list_tier1_vpn_ip_sec_vpn_services_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_services ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier1_vpn_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier1_vpn_ip_sec_vpn_sessions(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_vpn_ip_sec_vpn_sessions_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier1_vpn_ip_sec_vpn_sessions_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_vpn_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier1_vpn_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNServiceListResult]
    def list_tier1_vpn_l2_vpn_services(tier_1_id, opts = {})
      data, _status_code, _headers = list_tier1_vpn_l2_vpn_services_with_http_info(tier_1_id, opts)
      data
    end

    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNServiceListResult, Fixnum, Hash)>] L2VPNServiceListResult data, response status code and response headers
    def list_tier1_vpn_l2_vpn_services_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier1_vpn_l2_vpn_services ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_tier1_vpn_l2_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_vpn_l2_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_vpn_l2_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier1_vpn_l2_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNSessionListResult]
    def list_tier1_vpn_l2_vpn_sessions(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_vpn_l2_vpn_sessions_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNSessionListResult, Fixnum, Hash)>] L2VPNSessionListResult data, response status code and response headers
    def list_tier1_vpn_l2_vpn_sessions_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_tier1_vpn_l2_vpn_sessions ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.list_tier1_vpn_l2_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.list_tier1_vpn_l2_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_vpn_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_tier1_vpn_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_tier1_vpn_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBAppProfileListResult]
    def list_vpc_lb_app_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_app_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBAppProfileListResult, Fixnum, Hash)>] LBAppProfileListResult data, response status code and response headers
    def list_vpc_lb_app_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_vpc_lb_app_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.list_vpc_lb_app_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.list_vpc_lb_app_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.list_vpc_lb_app_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_app_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_app_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_vpc_lb_app_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBClientSslProfileListResult]
    def list_vpc_lb_client_ssl_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_client_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBClientSslProfileListResult, Fixnum, Hash)>] LBClientSslProfileListResult data, response status code and response headers
    def list_vpc_lb_client_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_vpc_lb_client_ssl_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.list_vpc_lb_client_ssl_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.list_vpc_lb_client_ssl_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.list_vpc_lb_client_ssl_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_client_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_client_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_vpc_lb_client_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBMonitorProfiles specified Vpc
    # Paginated list of all LBMonitorProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBMonitorProfileListResult]
    def list_vpc_lb_monitor_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_monitor_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBMonitorProfiles specified Vpc
    # Paginated list of all LBMonitorProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBMonitorProfileListResult, Fixnum, Hash)>] LBMonitorProfileListResult data, response status code and response headers
    def list_vpc_lb_monitor_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_vpc_lb_monitor_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.list_vpc_lb_monitor_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.list_vpc_lb_monitor_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.list_vpc_lb_monitor_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_monitor_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_monitor_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_vpc_lb_monitor_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPersistenceProfiles for the specified Vpc
    # Paginated list of all LBPersistenceProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPersistenceProfileListResult]
    def list_vpc_lb_persistence_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_persistence_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBPersistenceProfiles for the specified Vpc
    # Paginated list of all LBPersistenceProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPersistenceProfileListResult, Fixnum, Hash)>] LBPersistenceProfileListResult data, response status code and response headers
    def list_vpc_lb_persistence_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_vpc_lb_persistence_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.list_vpc_lb_persistence_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.list_vpc_lb_persistence_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.list_vpc_lb_persistence_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_persistence_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_persistence_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_vpc_lb_persistence_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPools
    # Paginated list of all LBPools.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPoolListResult]
    def list_vpc_lb_pools(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_pools_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBPools
    # Paginated list of all LBPools.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPoolListResult, Fixnum, Hash)>] LBPoolListResult data, response status code and response headers
    def list_vpc_lb_pools_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_vpc_lb_pools ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.list_vpc_lb_pools"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.list_vpc_lb_pools"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.list_vpc_lb_pools"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_vpc_lb_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServerSslProfileListResult]
    def list_vpc_lb_server_ssl_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_server_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServerSslProfileListResult, Fixnum, Hash)>] LBServerSslProfileListResult data, response status code and response headers
    def list_vpc_lb_server_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_vpc_lb_server_ssl_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.list_vpc_lb_server_ssl_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.list_vpc_lb_server_ssl_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.list_vpc_lb_server_ssl_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_server_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_server_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_vpc_lb_server_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List load balancers
    # Paginated list of all load balancers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServiceListResult]
    def list_vpc_lb_services(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_services_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List load balancers
    # Paginated list of all load balancers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServiceListResult, Fixnum, Hash)>] LBServiceListResult data, response status code and response headers
    def list_vpc_lb_services_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_vpc_lb_services ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.list_vpc_lb_services"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.list_vpc_lb_services"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.list_vpc_lb_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_vpc_lb_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBVirtualServers
    # Paginated list of all LBVirtualServers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBVirtualServerListResult]
    def list_vpc_lb_virtual_servers(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_virtual_servers_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBVirtualServers
    # Paginated list of all LBVirtualServers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBVirtualServerListResult, Fixnum, Hash)>] LBVirtualServerListResult data, response status code and response headers
    def list_vpc_lb_virtual_servers_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.list_vpc_lb_virtual_servers ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.list_vpc_lb_virtual_servers"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.list_vpc_lb_virtual_servers"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.list_vpc_lb_virtual_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_virtual_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.list_vpc_lb_virtual_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#list_vpc_lb_virtual_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom DPD Profile
    # Create or patch dead peer detection (DPD) profile. Any change in profile affects all sessions consuming this profile. System will be provisioned with system owned editable default DPD profile. Any change in profile affects all sessions consuming this profile.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dpd_profile_id 
    # @param ip_sec_vpn_dpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_dpd_profile(org_id, project_id, dpd_profile_id, ip_sec_vpn_dpd_profile, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_dpd_profile_with_http_info(org_id, project_id, dpd_profile_id, ip_sec_vpn_dpd_profile, opts)
      nil
    end

    # Create or patch a custom DPD Profile
    # Create or patch dead peer detection (DPD) profile. Any change in profile affects all sessions consuming this profile. System will be provisioned with system owned editable default DPD profile. Any change in profile affects all sessions consuming this profile.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dpd_profile_id 
    # @param ip_sec_vpn_dpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_dpd_profile_with_http_info(org_id, project_id, dpd_profile_id, ip_sec_vpn_dpd_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_dpd_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'dpd_profile_id' is set
      if @api_client.config.client_side_validation && dpd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dpd_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'ip_sec_vpn_dpd_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_dpd_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_dpd_profile' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_dpd_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-dpd-profiles/{dpd-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dpd-profile-id' + '}', dpd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_dpd_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_dpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom internet key exchange (IKE) Profile
    # Create or patch custom internet key exchange (IKE) Profile. IKE Profile is a reusable profile that captures IKE and phase one negotiation parameters. System will be pre provisioned with system owned editable default IKE profile and suggested set of profiles that can be used for peering with popular remote peers like AWS VPN. User can create custom profiles as needed. Any change in profile affects all sessions consuming this profile.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ike_profile_id 
    # @param ip_sec_vpn_ike_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_ike_profile(org_id, project_id, ike_profile_id, ip_sec_vpn_ike_profile, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_ike_profile_with_http_info(org_id, project_id, ike_profile_id, ip_sec_vpn_ike_profile, opts)
      nil
    end

    # Create or patch a custom internet key exchange (IKE) Profile
    # Create or patch custom internet key exchange (IKE) Profile. IKE Profile is a reusable profile that captures IKE and phase one negotiation parameters. System will be pre provisioned with system owned editable default IKE profile and suggested set of profiles that can be used for peering with popular remote peers like AWS VPN. User can create custom profiles as needed. Any change in profile affects all sessions consuming this profile.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ike_profile_id 
    # @param ip_sec_vpn_ike_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_ike_profile_with_http_info(org_id, project_id, ike_profile_id, ip_sec_vpn_ike_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_ike_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'ike_profile_id' is set
      if @api_client.config.client_side_validation && ike_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ike_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'ip_sec_vpn_ike_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_ike_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_ike_profile' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_ike_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-ike-profiles/{ike-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ike-profile-id' + '}', ike_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_ike_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_ike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom IPSec tunnel Profile
    # Create or patch custom IPSec tunnel profile. IPSec tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. System will be provisioned with system owned editable default IPSec tunnel profile. Any change in profile affects all sessions consuming this profile.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tunnel_profile_id 
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_tunnel_profile(org_id, project_id, tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_tunnel_profile_with_http_info(org_id, project_id, tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts)
      nil
    end

    # Create or patch a custom IPSec tunnel Profile
    # Create or patch custom IPSec tunnel profile. IPSec tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. System will be provisioned with system owned editable default IPSec tunnel profile. Any change in profile affects all sessions consuming this profile.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tunnel_profile_id 
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_tunnel_profile_with_http_info(org_id, project_id, tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_tunnel_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'tunnel_profile_id' is set
      if @api_client.config.client_side_validation && tunnel_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'ip_sec_vpn_tunnel_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_tunnel_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_tunnel_profile' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-tunnel-profiles/{tunnel-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tunnel-profile-id' + '}', tunnel_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_tunnel_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_patch_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given ipsec vpn service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      nil
    end

    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given ipsec vpn service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts)
      nil
    end

    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts)
      nil
    end

    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session_data, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session_data, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'l2_vpn_session_data' is set
      if @api_client.config.client_side_validation && l2_vpn_session_data.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session_data' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}?action=create_with_peer_code'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the GET/PUT response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      data
    end

    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the GET/PUT response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace a custom IPSec tunnel Profile
    # Create or patch dead peer detection (DPD) profile. Any change in profile affects all sessions consuming this profile. System will be provisioned with system owned editable default DPD profile. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dpd_profile_id 
    # @param ip_sec_vpn_dpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnDpdProfile]
    def orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_dpd_profile(org_id, project_id, dpd_profile_id, ip_sec_vpn_dpd_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_dpd_profile_with_http_info(org_id, project_id, dpd_profile_id, ip_sec_vpn_dpd_profile, opts)
      data
    end

    # Create or fully replace a custom IPSec tunnel Profile
    # Create or patch dead peer detection (DPD) profile. Any change in profile affects all sessions consuming this profile. System will be provisioned with system owned editable default DPD profile. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dpd_profile_id 
    # @param ip_sec_vpn_dpd_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnDpdProfile, Fixnum, Hash)>] IPSecVpnDpdProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_dpd_profile_with_http_info(org_id, project_id, dpd_profile_id, ip_sec_vpn_dpd_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_dpd_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'dpd_profile_id' is set
      if @api_client.config.client_side_validation && dpd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dpd_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'ip_sec_vpn_dpd_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_dpd_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_dpd_profile' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_dpd_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-dpd-profiles/{dpd-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dpd-profile-id' + '}', dpd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_dpd_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnDpdProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_dpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace a custom internet key exchange (IKE) Profile
    # Create or fully replace custom internet key exchange (IKE) Profile. IKE Profile is a reusable profile that captures IKE and phase one negotiation parameters. System will be pre provisioned with system owned editable default IKE profile and suggested set of profiles that can be used for peering with popular remote peers like AWS VPN. User can create custom profiles as needed. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ike_profile_id 
    # @param ip_sec_vpn_ike_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnIkeProfile]
    def orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_ike_profile(org_id, project_id, ike_profile_id, ip_sec_vpn_ike_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_ike_profile_with_http_info(org_id, project_id, ike_profile_id, ip_sec_vpn_ike_profile, opts)
      data
    end

    # Create or fully replace a custom internet key exchange (IKE) Profile
    # Create or fully replace custom internet key exchange (IKE) Profile. IKE Profile is a reusable profile that captures IKE and phase one negotiation parameters. System will be pre provisioned with system owned editable default IKE profile and suggested set of profiles that can be used for peering with popular remote peers like AWS VPN. User can create custom profiles as needed. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ike_profile_id 
    # @param ip_sec_vpn_ike_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnIkeProfile, Fixnum, Hash)>] IPSecVpnIkeProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_ike_profile_with_http_info(org_id, project_id, ike_profile_id, ip_sec_vpn_ike_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_ike_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'ike_profile_id' is set
      if @api_client.config.client_side_validation && ike_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ike_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'ip_sec_vpn_ike_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_ike_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_ike_profile' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_ike_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-ike-profiles/{ike-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ike-profile-id' + '}', ike_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_ike_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnIkeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_ike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace a custom IPSec tunnel Profile
    # Create or fully replace custom IPSec tunnel profile. IPSec tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. System will be provisioned with system owned editable default IPSec tunnel profile. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tunnel_profile_id 
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnTunnelProfile]
    def orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_tunnel_profile(org_id, project_id, tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_tunnel_profile_with_http_info(org_id, project_id, tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts)
      data
    end

    # Create or fully replace a custom IPSec tunnel Profile
    # Create or fully replace custom IPSec tunnel profile. IPSec tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. System will be provisioned with system owned editable default IPSec tunnel profile. Any change in profile affects all sessions consuming this profile. Revision is optional for creation and required for update.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tunnel_profile_id 
    # @param ip_sec_vpn_tunnel_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnTunnelProfile, Fixnum, Hash)>] IPSecVpnTunnelProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_tunnel_profile_with_http_info(org_id, project_id, tunnel_profile_id, ip_sec_vpn_tunnel_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_tunnel_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'tunnel_profile_id' is set
      if @api_client.config.client_side_validation && tunnel_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'ip_sec_vpn_tunnel_profile' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_tunnel_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_tunnel_profile' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-tunnel-profiles/{tunnel-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tunnel-profile-id' + '}', tunnel_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_tunnel_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnTunnelProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_update_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts)
      data
    end

    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1. Revision is optional for creation and required for update.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts)
      data
    end

    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1. Revision is optional for creation and required for update.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts)
      data
    end

    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete custom dead peer detection (DPD) profile
    # Delete custom dead peer detection (DPD) profile. Profile can not be deleted if profile has references to it.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_dpd_profile(org_id, project_id, dpd_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_dpd_profile_with_http_info(org_id, project_id, dpd_profile_id, opts)
      nil
    end

    # Delete custom dead peer detection (DPD) profile
    # Delete custom dead peer detection (DPD) profile. Profile can not be deleted if profile has references to it.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_dpd_profile_with_http_info(org_id, project_id, dpd_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_dpd_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'dpd_profile_id' is set
      if @api_client.config.client_side_validation && dpd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dpd_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_dpd_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-dpd-profiles/{dpd-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dpd-profile-id' + '}', dpd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_dpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete custom IKE Profile
    # Delete custom IKE Profile. Profile can not be deleted if profile has references to it.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_ike_profile(org_id, project_id, ike_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_ike_profile_with_http_info(org_id, project_id, ike_profile_id, opts)
      nil
    end

    # Delete custom IKE Profile
    # Delete custom IKE Profile. Profile can not be deleted if profile has references to it.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_ike_profile_with_http_info(org_id, project_id, ike_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_ike_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'ike_profile_id' is set
      if @api_client.config.client_side_validation && ike_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ike_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_ike_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-ike-profiles/{ike-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ike-profile-id' + '}', ike_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_ike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete custom IPSec tunnel Profile
    # Delete custom IPSec tunnel Profile. Profile can not be deleted if profile has references to it.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_tunnel_profile(org_id, project_id, tunnel_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_tunnel_profile_with_http_info(org_id, project_id, tunnel_profile_id, opts)
      nil
    end

    # Delete custom IPSec tunnel Profile
    # Delete custom IPSec tunnel Profile. Profile can not be deleted if profile has references to it.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_tunnel_profile_with_http_info(org_id, project_id, tunnel_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_tunnel_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'tunnel_profile_id' is set
      if @api_client.config.client_side_validation && tunnel_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-tunnel-profiles/{tunnel-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tunnel-profile-id' + '}', tunnel_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_delete_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NAT Rule
    # Delete NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_nat_rule(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts)
      nil
    end

    # Delete NAT Rule
    # Delete NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_delete_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts)
      nil
    end

    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN service
    # Delete given IPSec VPN service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service(org_id, project_id, tier_1_id, service_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      nil
    end

    # Delete IPSec VPN service
    # Delete given IPSec VPN service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec-vpn service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec-vpn service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service(org_id, project_id, tier_1_id, service_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      nil
    end

    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      nil
    end

    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get dead peer detection (DPD) profile
    # Get custom dead peer detection (DPD) profile, given the particular id.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnDpdProfile]
    def orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_dpd_profile(org_id, project_id, dpd_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_dpd_profile_with_http_info(org_id, project_id, dpd_profile_id, opts)
      data
    end

    # Get dead peer detection (DPD) profile
    # Get custom dead peer detection (DPD) profile, given the particular id.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dpd_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnDpdProfile, Fixnum, Hash)>] IPSecVpnDpdProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_dpd_profile_with_http_info(org_id, project_id, dpd_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_dpd_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_dpd_profile"
      end
      # verify the required parameter 'dpd_profile_id' is set
      if @api_client.config.client_side_validation && dpd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dpd_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_dpd_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-dpd-profiles/{dpd-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dpd-profile-id' + '}', dpd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnDpdProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_dpd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IKE Profile
    # Get custom IKE Profile, given the particular id.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnIkeProfile]
    def orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_ike_profile(org_id, project_id, ike_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_ike_profile_with_http_info(org_id, project_id, ike_profile_id, opts)
      data
    end

    # Get IKE Profile
    # Get custom IKE Profile, given the particular id.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ike_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnIkeProfile, Fixnum, Hash)>] IPSecVpnIkeProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_ike_profile_with_http_info(org_id, project_id, ike_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_ike_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_ike_profile"
      end
      # verify the required parameter 'ike_profile_id' is set
      if @api_client.config.client_side_validation && ike_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ike_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_ike_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-ike-profiles/{ike-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ike-profile-id' + '}', ike_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnIkeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_ike_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec tunnel Profile
    # Get custom IPSec tunnel Profile, given the particular id.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnTunnelProfile]
    def orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_tunnel_profile(org_id, project_id, tunnel_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_tunnel_profile_with_http_info(org_id, project_id, tunnel_profile_id, opts)
      data
    end

    # Get IPSec tunnel Profile
    # Get custom IPSec tunnel Profile, given the particular id.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tunnel_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnTunnelProfile, Fixnum, Hash)>] IPSecVpnTunnelProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_tunnel_profile_with_http_info(org_id, project_id, tunnel_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_tunnel_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_tunnel_profile"
      end
      # verify the required parameter 'tunnel_profile_id' is set
      if @api_client.config.client_side_validation && tunnel_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_profile_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_tunnel_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-tunnel-profiles/{tunnel-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tunnel-profile-id' + '}', tunnel_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnTunnelProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_ip_sec_vpn_tunnel_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def orgs_org_id_projects_project_id_infra_get_policy_nat_rule(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyNatRuleStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_policy_nat_rule_statistics_from_tier1(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_nat_rule_statistics_from_tier1_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyNatRuleStatisticsListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_nat_rule_statistics_from_tier1_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule_statistics_from_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule_statistics_from_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule_statistics_from_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule_statistics_from_tier1"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule_statistics_from_tier1"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule_statistics_from_tier1"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['aggregate'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of aggregate'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_policy_nat_rule_statistics_from_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session statistics under Tier-0
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics from enforcement point are returned.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/statisticsinstead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatistics]
    def orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_statistics(org_id, project_id, tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session statistics under Tier-0
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics from enforcement point are returned.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/statisticsinstead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatistics, Fixnum, Hash)>] AggregateIPSecVpnSessionStatistics data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session detailed status under Tier-0
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed status is fetched realtime from the enforcement point. - source=cached: cached detailed status from enforcement point is returned.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/detailed-status instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatus]
    def orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_status(org_id, project_id, tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_status_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session detailed status under Tier-0
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed status is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status from enforcement point is returned.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/detailed-status instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatus, Fixnum, Hash)>] AggregateIPSecVpnSessionStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_status_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier0_ip_sec_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary(org_id, project_id, tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary(org_id, project_id, tier_0_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics from enforcement point are returned.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/statistics instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatistics]
    def orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_statistics(org_id, project_id, tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics from enforcement point are returned.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/statistics instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatistics, Fixnum, Hash)>] AggregateIPSecVpnSessionStatistics data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed status is fetched realtime from the enforcement point. - source=cached: cached detailed status from enforcement point is returned.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;/detailed-status instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatus]
    def orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_status(org_id, project_id, tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_status_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed status is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status from enforcement point is returned.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;/detailed-status instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatus, Fixnum, Hash)>] AggregateIPSecVpnSessionStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_status_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_ip_sec_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary(org_id, project_id, tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts)
      data
    end

    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service
    # Get given IPSec VPN service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN service
    # Get given IPSec VPN service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics from enforcement point are returned.                  Please note that cache synchronization  is based on triggering this API with                  source=realtime or empty source and not polling based. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatistics]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_statistics(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics from enforcement point are returned.                  Please note that cache synchronization  is based on triggering this API with                  source&#x3D;realtime or empty source and not polling based. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatistics, Fixnum, Hash)>] AggregateIPSecVpnSessionStatistics data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed status is fetched realtime from the enforcement point. - source=cached: cached detailed status from enforcement point is returned. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateIPSecVpnSessionStatus]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_status(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_status_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed status is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed status is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status from enforcement point is returned. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateIPSecVpnSessionStatus, Fixnum, Hash)>] AggregateIPSecVpnSessionStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_status_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateIPSecVpnSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VPNSessionPeerConfig]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VPNSessionPeerConfig, Fixnum, Hash)>] AggregateL2VPNSessionPeerConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2Vpn session remote mac for logical switch
    # Returns L2Vpn session remote macs for a logical switch. Data is fetched from enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path Segment Path
    # @return [AggregateL2VpnSessionRemoteMac]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_remote_macs_for_ls(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_remote_macs_for_ls_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get L2Vpn session remote mac for logical switch
    # Returns L2Vpn session remote macs for a logical switch. Data is fetched from enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path Segment Path
    # @return [Array<(AggregateL2VpnSessionRemoteMac, Fixnum, Hash)>] AggregateL2VpnSessionRemoteMac data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_remote_macs_for_ls_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_remote_macs_for_ls ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_remote_macs_for_ls"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_remote_macs_for_ls"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}/remote-mac'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VpnSessionRemoteMac')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_remote_macs_for_ls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source=realtime: statistics are fetched realtime from the enforcement point. - source=cached: cached statistics from the enforcement point are returned. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateL2VPNSessionStatistics]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_statistics(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_statistics_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN session statistics under Tier-1
    # - no enforcement point path specified: statistics are evaluated on each enforcement point. - an enforcement point path is specified: statistics are evaluated only on the given enforcement point. - source&#x3D;realtime: statistics are fetched realtime from the enforcement point. - source&#x3D;cached: cached statistics from the enforcement point are returned. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateL2VPNSessionStatistics, Fixnum, Hash)>] AggregateL2VPNSessionStatistics data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_statistics_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_statistics"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed tatus is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source=realtime: detailed tatus is fetched realtime from the enforcement point. - source=cached: cached detailed status is returned. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateL2VPNSessionStatus]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_status(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_status_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN session detailed status under Tier-1
    # - no enforcement point path specified: detailed tatus is evaluated on each enforcement point. - an enforcement point path is specified: detailed status is evaluated only on the given enforcement point. - source&#x3D;realtime: detailed tatus is fetched realtime from the enforcement point. - source&#x3D;cached: cached detailed status is returned. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateL2VPNSessionStatus, Fixnum, Hash)>] AggregateL2VPNSessionStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_status_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_status"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_status"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_status"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DPD profiles
    # Get paginated list of all DPD Profiles.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnDpdProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_dpd_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_dpd_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List DPD profiles
    # Get paginated list of all DPD Profiles.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnDpdProfileListResult, Fixnum, Hash)>] IPSecVpnDpdProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_dpd_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_dpd_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_dpd_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_dpd_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_dpd_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_dpd_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-dpd-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnDpdProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_dpd_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IKE profiles
    # Get paginated list of all IKE Profiles.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnIkeProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_ike_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_ike_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List IKE profiles
    # Get paginated list of all IKE Profiles.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnIkeProfileListResult, Fixnum, Hash)>] IPSecVpnIkeProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_ike_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_ike_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_ike_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_ike_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_ike_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_ike_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-ike-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnIkeProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_ike_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPSec tunnel profiles
    # Get paginated list of all IPSec tunnel Profiles.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnTunnelProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_tunnel_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_tunnel_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List IPSec tunnel profiles
    # Get paginated list of all IPSec tunnel Profiles.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnTunnelProfileListResult, Fixnum, Hash)>] IPSecVpnTunnelProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_tunnel_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_tunnel_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_tunnel_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_tunnel_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_tunnel_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_tunnel_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipsec-vpn-tunnel-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnTunnelProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_list_ip_sec_vpn_tunnel_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_nat_rules(org_id, project_id, tier_1_id, nat_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_nat_rules_with_http_info(org_id, project_id, tier_1_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleListResult, Fixnum, Hash)>] PolicyNatRuleListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_nat_rules_with_http_info(org_id, project_id, tier_1_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_list_policy_nat_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules Statistics
    # List NAT Rules Statistics from Tier-1 denoted by Tier-1 ID.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleStatisticsPerLogicalRouterListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_nat_rules_statistics_from_tier1(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_nat_rules_statistics_from_tier1_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # List NAT Rules Statistics
    # List NAT Rules Statistics from Tier-1 denoted by Tier-1 ID.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleStatisticsPerLogicalRouterListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsPerLogicalRouterListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_nat_rules_statistics_from_tier1_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules_statistics_from_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules_statistics_from_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules_statistics_from_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules_statistics_from_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules_statistics_from_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules_statistics_from_tier1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsPerLogicalRouterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_list_policy_nat_rules_statistics_from_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnLocalEndpointListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnLocalEndpointListResult, Fixnum, Hash)>] IPSecVpnLocalEndpointListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnServiceListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnServiceListResult, Fixnum, Hash)>] IPSecVpnServiceListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNServiceListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNServiceListResult, Fixnum, Hash)>] L2VPNServiceListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNSessionListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNSessionListResult, Fixnum, Hash)>] L2VPNSessionListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Nat Rule
    # If a NAT Rule is not already present on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_nat_rule(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      nil
    end

    # Create or update a Nat Rule
    # If a NAT Rule is not already present on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_patch_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/statistics instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics(org_id, project_id, tier_0_id, locale_service_id, service_id, session_id, action, opts = {})
      orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, session_id, action, opts)
      nil
    end

    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/statistics instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, session_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reset'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of reset"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_reset_tier0_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/statistics instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics(org_id, project_id, tier_1_id, locale_service_id, service_id, session_id, action, opts = {})
      orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, session_id, action, opts)
      nil
    end

    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/statistics instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, session_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reset'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of reset"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_reset_tier1_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics(org_id, project_id, tier_1_id, service_id, session_id, action, opts = {})
      orgs_org_id_projects_project_id_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, action, opts)
      nil
    end

    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling NetworkServicesApi.orgs_org_id_projects_project_id_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reset'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of reset"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#orgs_org_id_projects_project_id_infra_reset_tier1_vpn_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_app_profile(lb_app_profile_id, lb_app_profile, opts = {})
      patch_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts)
      nil
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling NetworkServicesApi.patch_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling NetworkServicesApi.patch_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_client_ssl_profile(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      patch_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      nil
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling NetworkServicesApi.patch_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling NetworkServicesApi.patch_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_monitor_profile(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      patch_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts)
      nil
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling NetworkServicesApi.patch_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling NetworkServicesApi.patch_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_persistence_profile(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      patch_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts)
      nil
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling NetworkServicesApi.patch_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling NetworkServicesApi.patch_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPool
    # If a LBPool with the lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_pool(lb_pool_id, lb_pool, opts = {})
      patch_lb_pool_with_http_info(lb_pool_id, lb_pool, opts)
      nil
    end

    # Create or update a LBPool
    # If a LBPool with the lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_pool_with_http_info(lb_pool_id, lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_lb_pool ...'
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling NetworkServicesApi.patch_lb_pool"
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling NetworkServicesApi.patch_lb_pool"
      end
      # resource path
      local_var_path = '/infra/lb-pools/{lb-pool-id}'.sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_server_ssl_profile(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      patch_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      nil
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling NetworkServicesApi.patch_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling NetworkServicesApi.patch_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBService with the lb-service-id is not already present, create a new LBService. If it already exists, update the LBService. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_service(lb_service_id, lb_service, opts = {})
      patch_lb_service_with_http_info(lb_service_id, lb_service, opts)
      nil
    end

    # Create or update a LBVirtualServer
    # If a LBService with the lb-service-id is not already present, create a new LBService. If it already exists, update the LBService. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_service_with_http_info(lb_service_id, lb_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_lb_service ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.patch_lb_service"
      end
      # verify the required parameter 'lb_service' is set
      if @api_client.config.client_side_validation && lb_service.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service' when calling NetworkServicesApi.patch_lb_service"
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_virtual_server(lb_virtual_server_id, lb_virtual_server, opts = {})
      patch_lb_virtual_server_with_http_info(lb_virtual_server_id, lb_virtual_server, opts)
      nil
    end

    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_virtual_server_with_http_info(lb_virtual_server_id, lb_virtual_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_lb_virtual_server ...'
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling NetworkServicesApi.patch_lb_virtual_server"
      end
      # verify the required parameter 'lb_virtual_server' is set
      if @api_client.config.client_side_validation && lb_virtual_server.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server' when calling NetworkServicesApi.patch_lb_virtual_server"
      end
      # resource path
      local_var_path = '/infra/lb-virtual-servers/{lb-virtual-server-id}'.sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_virtual_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Metadata Proxy Config
    # API will create or update Metadata Proxy Config with ID profile-id. Maximum 10 Metadata Proxy Configurations are supported. 
    # @param metadata_proxy_id Metadata Proxy ID
    # @param metadata_proxy_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_metadata_proxy_config(metadata_proxy_id, metadata_proxy_config, opts = {})
      patch_metadata_proxy_config_with_http_info(metadata_proxy_id, metadata_proxy_config, opts)
      nil
    end

    # Create or update Metadata Proxy Config
    # API will create or update Metadata Proxy Config with ID profile-id. Maximum 10 Metadata Proxy Configurations are supported. 
    # @param metadata_proxy_id Metadata Proxy ID
    # @param metadata_proxy_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_metadata_proxy_config_with_http_info(metadata_proxy_id, metadata_proxy_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_metadata_proxy_config ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling NetworkServicesApi.patch_metadata_proxy_config"
      end
      # verify the required parameter 'metadata_proxy_config' is set
      if @api_client.config.client_side_validation && metadata_proxy_config.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_config' when calling NetworkServicesApi.patch_metadata_proxy_config"
      end
      # resource path
      local_var_path = '/infra/metadata-proxies/{metadata-proxy-id}'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(metadata_proxy_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_metadata_proxy_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Nat Rule
    # If a NAT Rule is not already present on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_nat_rule(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      patch_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      nil
    end

    # Create or update a Nat Rule
    # If a NAT Rule is not already present on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_policy_nat_rule ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.patch_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.patch_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.patch_policy_nat_rule"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling NetworkServicesApi.patch_policy_nat_rule"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a NAT Rule on tier-0
    # If a NAT Rule is not already present on Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) NAT rule cannot be applied to a loopback interface or a label referencing loopback interfaces. For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_nat_rule_on_tier0(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      patch_policy_nat_rule_on_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      nil
    end

    # Create or update a NAT Rule on tier-0
    # If a NAT Rule is not already present on Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) NAT rule cannot be applied to a loopback interface or a label referencing loopback interfaces. For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_nat_rule_on_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_policy_nat_rule_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.patch_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.patch_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.patch_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling NetworkServicesApi.patch_policy_nat_rule_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_policy_nat_rule_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Nat Rule
    # If a NAT Rule is not already present on VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_vpc_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_vpc_nat_rule_on_vpc(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts = {})
      patch_policy_vpc_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts)
      nil
    end

    # Create or update a Nat Rule
    # If a NAT Rule is not already present on VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_vpc_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_vpc_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_policy_vpc_nat_rule_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling NetworkServicesApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling NetworkServicesApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'policy_vpc_nat_rule' is set
      if @api_client.config.client_side_validation && policy_vpc_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_vpc_nat_rule' when calling NetworkServicesApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_vpc_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_policy_vpc_nat_rule_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      patch_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts)
      nil
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling NetworkServicesApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling NetworkServicesApi.patch_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      patch_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      nil
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling NetworkServicesApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling NetworkServicesApi.patch_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      patch_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts)
      nil
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling NetworkServicesApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling NetworkServicesApi.patch_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      patch_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts)
      nil
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling NetworkServicesApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling NetworkServicesApi.patch_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      patch_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts)
      nil
    end

    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling NetworkServicesApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling NetworkServicesApi.patch_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      patch_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      nil
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling NetworkServicesApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling NetworkServicesApi.patch_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn't exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [nil]
    def patch_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      patch_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts)
      nil
    end

    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn&#39;t exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling NetworkServicesApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'lb_service' is set
      if @api_client.config.client_side_validation && lb_service.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service' when calling NetworkServicesApi.patch_vpc_lb_service"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['allow_auto_relocation'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of allow_auto_relocation'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      patch_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts)
      nil
    end

    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.patch_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling NetworkServicesApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'lb_virtual_server' is set
      if @api_client.config.client_side_validation && lb_virtual_server.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server' when calling NetworkServicesApi.patch_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_virtual_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#patch_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an L2Vpn
    # Read the L2Vpn with the given id. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/L2VPN_<l2vpn-id> instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [L2Vpn]
    def read_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      data, _status_code, _headers = read_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts)
      data
    end

    # Read an L2Vpn
    # Read the L2Vpn with the given id. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/L2VPN_&lt;l2vpn-id&gt; instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2Vpn, Fixnum, Hash)>] L2Vpn data, response status code and response headers
    def read_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.read_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.read_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling NetworkServicesApi.read_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an L2Vpn Context
    # Read L2Vpn Context. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VpnContext]
    def read_l2_vpn_context(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = read_l2_vpn_context_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Read an L2Vpn Context
    # Read L2Vpn Context. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VpnContext, Fixnum, Hash)>] L2VpnContext data, response status code and response headers
    def read_l2_vpn_context_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_l2_vpn_context ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.read_l2_vpn_context"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.read_l2_vpn_context"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnContext')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_l2_vpn_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Peer Config for L2Vpn
    # Get peer config for the L2Vpn to configure the remote side of the tunnel. - no enforcement point path specified: L2Vpn Peer Codes will be evaluated on each enforcement point. - {enforcement_point_path}: L2Vpn Peer Codes are evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/L2VPN_<l2vpn-id>/peer-config  instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VpnPeerConfig]
    def read_l2_vpn_peer_config(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      data, _status_code, _headers = read_l2_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts)
      data
    end

    # Get Peer Config for L2Vpn
    # Get peer config for the L2Vpn to configure the remote side of the tunnel. - no enforcement point path specified: L2Vpn Peer Codes will be evaluated on each enforcement point. - {enforcement_point_path}: L2Vpn Peer Codes are evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/L2VPN_&lt;l2vpn-id&gt;/peer-config  instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VpnPeerConfig, Fixnum, Hash)>] AggregateL2VpnPeerConfig data, response status code and response headers
    def read_l2_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_l2_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.read_l2_vpn_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.read_l2_vpn_peer_config"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling NetworkServicesApi.read_l2_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VpnPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_l2_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an L3Vpn
    # Read the L3Vpn with the given id. No sensitive data is returned as part of the response. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/sessions/L3VPN_&lt;l3vpn-id&gt; to get the associated IPSecVpnSession. - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/local-endpoints/&lt;local-endpoint-id&gt; to get the associated IPSecVpnLocalEndpoint. - GET /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated   IPSecVpnTunnelProfile. - GET /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated IPSecVpnIkeProfile. - GET /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated IPSecVpnDpdProfile. If used, this deprecated API will not return L3Vpn with &lt;l3vpn-id&gt; id unless the associated IPSecVpnSession with L3VPN_&lt;l3vpn-id&gt; id exists. For example, if the IPSecVpnSession gets deleted using DELETE /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/ default/sessions/L3VPN_&lt;l3vpn-id&gt;, the deprecated API will throw an ObjectNotFoundException. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [L3Vpn]
    def read_l3_vpn(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      data, _status_code, _headers = read_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts)
      data
    end

    # Read an L3Vpn
    # Read the L3Vpn with the given id. No sensitive data is returned as part of the response. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated IPSecVpnSession. - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; to get the associated IPSecVpnLocalEndpoint. - GET /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated   IPSecVpnTunnelProfile. - GET /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated IPSecVpnIkeProfile. - GET /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated IPSecVpnDpdProfile. If used, this deprecated API will not return L3Vpn with &amp;lt;l3vpn-id&amp;gt; id unless the associated IPSecVpnSession with L3VPN_&amp;lt;l3vpn-id&amp;gt; id exists. For example, if the IPSecVpnSession gets deleted using DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/ default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;, the deprecated API will throw an ObjectNotFoundException. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L3Vpn, Fixnum, Hash)>] L3Vpn data, response status code and response headers
    def read_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_l3_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.read_l3_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.read_l3_vpn"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling NetworkServicesApi.read_l3_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_l3_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the L3Vpn Context
    # Read the L3Vpn Context under tier-0. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/ipsec-vpn-services/default instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [L3VpnContext]
    def read_l3_vpn_context(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = read_l3_vpn_context_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Read the L3Vpn Context
    # Read the L3Vpn Context under tier-0. This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/ &amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/default instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L3VpnContext, Fixnum, Hash)>] L3VpnContext data, response status code and response headers
    def read_l3_vpn_context_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_l3_vpn_context ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.read_l3_vpn_context"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.read_l3_vpn_context"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpn-context'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3VpnContext')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_l3_vpn_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download L3Vpn Config for Remote Site
    # Get the L3Vpn Configuration for the peer site. Peer config contains PSK; be careful when sharing or storing it. - no enforcement point path specified: L3Vpn Peer Config will be evaluated on each enforcement point. - {enforcement_point_path}: L3Vpn Peer Config is evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/ipsec-vpn-services/default/sessions/L3VPN_&lt;l3vpn-id&gt;/peer-config instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def read_l3_vpn_peer_config(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      data, _status_code, _headers = read_l3_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts)
      data
    end

    # Download L3Vpn Config for Remote Site
    # Get the L3Vpn Configuration for the peer site. Peer config contains PSK; be careful when sharing or storing it. - no enforcement point path specified: L3Vpn Peer Config will be evaluated on each enforcement point. - {enforcement_point_path}: L3Vpn Peer Config is evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/ &amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;/peer-config instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def read_l3_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_l3_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.read_l3_vpn_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.read_l3_vpn_peer_config"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling NetworkServicesApi.read_l3_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_l3_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an L3Vpn
    # Read the L3Vpn with the given id. Sensitive data is returned as part of the response. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/sessions/L3VPN_&lt;l3vpn-id&gt;?action=show_sensitive_data to get the associated   IPSecVpnSession. - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/local-endpoints/&lt;local-endpoint-id&gt; to get the associated IPSecVpnLocalEndpoint. - GET /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated   IPSecVpnTunnelProfile. - GET /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated IPSecVpnIkeProfile. - GET /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated IPSecVpnDpdProfile. If used, this deprecated API will not return L3Vpn with &lt;l3vpn-id&gt; id unless the associated IPSecVpnSession with L3VPN_&lt;l3vpn-id&gt; id exists. For example, if the IPSecVpnSession gets deleted using DELETE /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/ default/sessions/L3VPN_&lt;l3vpn-id&gt;, the deprecated API will throw an ObjectNotFoundException. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [L3Vpn]
    def read_l3_vpn_with_sensitive_data(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      data, _status_code, _headers = read_l3_vpn_with_sensitive_data_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts)
      data
    end

    # Read an L3Vpn
    # Read the L3Vpn with the given id. Sensitive data is returned as part of the response. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;?action&#x3D;show_sensitive_data to get the associated   IPSecVpnSession. - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; to get the associated IPSecVpnLocalEndpoint. - GET /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated   IPSecVpnTunnelProfile. - GET /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated IPSecVpnIkeProfile. - GET /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated IPSecVpnDpdProfile. If used, this deprecated API will not return L3Vpn with &amp;lt;l3vpn-id&amp;gt; id unless the associated IPSecVpnSession with L3VPN_&amp;lt;l3vpn-id&amp;gt; id exists. For example, if the IPSecVpnSession gets deleted using DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/ default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;, the deprecated API will throw an ObjectNotFoundException. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L3Vpn, Fixnum, Hash)>] L3Vpn data, response status code and response headers
    def read_l3_vpn_with_sensitive_data_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_l3_vpn_with_sensitive_data ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.read_l3_vpn_with_sensitive_data"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.read_l3_vpn_with_sensitive_data"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling NetworkServicesApi.read_l3_vpn_with_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}?action=show_sensitive_data'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_l3_vpn_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def read_lb_app_profile(lb_app_profile_id, opts = {})
      data, _status_code, _headers = read_lb_app_profile_with_http_info(lb_app_profile_id, opts)
      data
    end

    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def read_lb_app_profile_with_http_info(lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling NetworkServicesApi.read_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def read_lb_client_ssl_profile(lb_client_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts)
      data
    end

    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def read_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling NetworkServicesApi.read_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def read_lb_monitor_profile(lb_monitor_profile_id, opts = {})
      data, _status_code, _headers = read_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts)
      data
    end

    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def read_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling NetworkServicesApi.read_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def read_lb_persistence_profile(lb_persistence_profile_id, opts = {})
      data, _status_code, _headers = read_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts)
      data
    end

    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def read_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling NetworkServicesApi.read_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPool
    # Read a LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @return [LBPool]
    def read_lb_pool(lb_pool_id, opts = {})
      data, _status_code, _headers = read_lb_pool_with_http_info(lb_pool_id, opts)
      data
    end

    # Read LBPool
    # Read a LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPool, Fixnum, Hash)>] LBPool data, response status code and response headers
    def read_lb_pool_with_http_info(lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_lb_pool ...'
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling NetworkServicesApi.read_lb_pool"
      end
      # resource path
      local_var_path = '/infra/lb-pools/{lb-pool-id}'.sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def read_lb_server_ssl_profile(lb_server_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts)
      data
    end

    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def read_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling NetworkServicesApi.read_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBService
    # Read an LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @return [LBService]
    def read_lb_service(lb_service_id, opts = {})
      data, _status_code, _headers = read_lb_service_with_http_info(lb_service_id, opts)
      data
    end

    # Read LBService
    # Read an LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBService, Fixnum, Hash)>] LBService data, response status code and response headers
    def read_lb_service_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_lb_service ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.read_lb_service"
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the debug information of the load balancer service
    # API to download below information which will be used for debugging and troubleshooting. 1) Load balancer service 2) Load balancer associated virtual servers 3) Load balancer associated pools 4) Load balancer associated profiles such as persistence, SSL, application. 5) Load balancer associated monitors  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @return [LBServiceDebugInfo]
    def read_lb_service_debug_info(lb_service_id, opts = {})
      data, _status_code, _headers = read_lb_service_debug_info_with_http_info(lb_service_id, opts)
      data
    end

    # Read the debug information of the load balancer service
    # API to download below information which will be used for debugging and troubleshooting. 1) Load balancer service 2) Load balancer associated virtual servers 3) Load balancer associated pools 4) Load balancer associated profiles such as persistence, SSL, application. 5) Load balancer associated monitors  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServiceDebugInfo, Fixnum, Hash)>] LBServiceDebugInfo data, response status code and response headers
    def read_lb_service_debug_info_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_lb_service_debug_info ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.read_lb_service_debug_info"
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/debug-info'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServiceDebugInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_lb_service_debug_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBVirtualServer
    # Read a LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @return [LBVirtualServer]
    def read_lb_virtual_server(lb_virtual_server_id, opts = {})
      data, _status_code, _headers = read_lb_virtual_server_with_http_info(lb_virtual_server_id, opts)
      data
    end

    # Read LBVirtualServer
    # Read a LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBVirtualServer, Fixnum, Hash)>] LBVirtualServer data, response status code and response headers
    def read_lb_virtual_server_with_http_info(lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_lb_virtual_server ...'
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling NetworkServicesApi.read_lb_virtual_server"
      end
      # resource path
      local_var_path = '/infra/lb-virtual-servers/{lb-virtual-server-id}'.sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Metadata Proxy Config
    # API will read Metadata Proxy Config with ID profile-id
    # @param metadata_proxy_id Metadata Proxy ID
    # @param [Hash] opts the optional parameters
    # @return [MetadataProxyConfig]
    def read_metadata_proxy_config(metadata_proxy_id, opts = {})
      data, _status_code, _headers = read_metadata_proxy_config_with_http_info(metadata_proxy_id, opts)
      data
    end

    # Get Metadata Proxy Config
    # API will read Metadata Proxy Config with ID profile-id
    # @param metadata_proxy_id Metadata Proxy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetadataProxyConfig, Fixnum, Hash)>] MetadataProxyConfig data, response status code and response headers
    def read_metadata_proxy_config_with_http_info(metadata_proxy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_metadata_proxy_config ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling NetworkServicesApi.read_metadata_proxy_config"
      end
      # resource path
      local_var_path = '/infra/metadata-proxies/{metadata-proxy-id}'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MetadataProxyConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_metadata_proxy_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [PolicyMetadataProxyStatistics]
    def read_metadata_proxy_statistics(metadata_proxy_id, opts = {})
      data, _status_code, _headers = read_metadata_proxy_statistics_with_http_info(metadata_proxy_id, opts)
      data
    end

    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyMetadataProxyStatistics, Fixnum, Hash)>] PolicyMetadataProxyStatistics data, response status code and response headers
    def read_metadata_proxy_statistics_with_http_info(metadata_proxy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_metadata_proxy_statistics ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling NetworkServicesApi.read_metadata_proxy_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/metadata-proxies/{metadata-proxy-id}/statistics'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyMetadataProxyStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_metadata_proxy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [PolicyMetadataProxyStatus]
    def read_metadata_proxy_status(metadata_proxy_id, opts = {})
      data, _status_code, _headers = read_metadata_proxy_status_with_http_info(metadata_proxy_id, opts)
      data
    end

    # Get metadata proxy status
    # Get metadata proxy status
    # @param metadata_proxy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :segment_path String Path of the segment which is associated with this metadata proxy
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyMetadataProxyStatus, Fixnum, Hash)>] PolicyMetadataProxyStatus data, response status code and response headers
    def read_metadata_proxy_status_with_http_info(metadata_proxy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_metadata_proxy_status ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling NetworkServicesApi.read_metadata_proxy_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/metadata-proxies/{metadata-proxy-id}/status'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyMetadataProxyStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_metadata_proxy_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def read_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts)
      data
    end

    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def read_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling NetworkServicesApi.read_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def read_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts)
      data
    end

    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def read_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling NetworkServicesApi.read_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def read_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts)
      data
    end

    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def read_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling NetworkServicesApi.read_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def read_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts)
      data
    end

    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def read_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling NetworkServicesApi.read_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPool
    # Read a LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @return [LBPool]
    def read_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts)
      data
    end

    # Read LBPool
    # Read a LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPool, Fixnum, Hash)>] LBPool data, response status code and response headers
    def read_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.read_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.read_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.read_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling NetworkServicesApi.read_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def read_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts)
      data
    end

    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def read_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling NetworkServicesApi.read_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a load balancer
    # Read a load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @return [LBService]
    def read_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Read a load balancer
    # Read a load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBService, Fixnum, Hash)>] LBService data, response status code and response headers
    def read_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.read_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.read_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.read_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling NetworkServicesApi.read_vpc_lb_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBVirtualServer
    # Read a LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @return [LBVirtualServer]
    def read_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts)
      data
    end

    # Read LBVirtualServer
    # Read a LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBVirtualServer, Fixnum, Hash)>] LBVirtualServer data, response status code and response headers
    def read_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.read_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.read_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.read_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.read_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling NetworkServicesApi.read_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#read_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/statistics instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def reset_tier0_ip_sec_vpn_session_statistics(tier_0_id, locale_service_id, service_id, session_id, action, opts = {})
      reset_tier0_ip_sec_vpn_session_statistics_with_http_info(tier_0_id, locale_service_id, service_id, session_id, action, opts)
      nil
    end

    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/statistics instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_tier0_ip_sec_vpn_session_statistics_with_http_info(tier_0_id, locale_service_id, service_id, session_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.reset_tier0_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling NetworkServicesApi.reset_tier0_ip_sec_vpn_session_statistics"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reset'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of reset"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#reset_tier0_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def reset_tier0_vpn_ip_sec_vpn_session_statistics(tier_0_id, service_id, session_id, action, opts = {})
      reset_tier0_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_0_id, service_id, session_id, action, opts)
      nil
    end

    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_tier0_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_0_id, service_id, session_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.reset_tier0_vpn_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NetworkServicesApi.reset_tier0_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.reset_tier0_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.reset_tier0_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling NetworkServicesApi.reset_tier0_vpn_ip_sec_vpn_session_statistics"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reset'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of reset"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#reset_tier0_vpn_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/statistics instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def reset_tier1_ip_sec_vpn_session_statistics(tier_1_id, locale_service_id, service_id, session_id, action, opts = {})
      reset_tier1_ip_sec_vpn_session_statistics_with_http_info(tier_1_id, locale_service_id, service_id, session_id, action, opts)
      nil
    end

    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/statistics instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_tier1_ip_sec_vpn_session_statistics_with_http_info(tier_1_id, locale_service_id, service_id, session_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.reset_tier1_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling NetworkServicesApi.reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling NetworkServicesApi.reset_tier1_ip_sec_vpn_session_statistics"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reset'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of reset"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#reset_tier1_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def reset_tier1_vpn_ip_sec_vpn_session_statistics(tier_1_id, service_id, session_id, action, opts = {})
      reset_tier1_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_1_id, service_id, session_id, action, opts)
      nil
    end

    # Reset the statistics of the given VPN session
    # Resets the statistics of the given VPN session. Since source of data is enforcement point, data is reset there. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param action Action on statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_tier1_vpn_ip_sec_vpn_session_statistics_with_http_info(tier_1_id, service_id, session_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.reset_tier1_vpn_ip_sec_vpn_session_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NetworkServicesApi.reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling NetworkServicesApi.reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling NetworkServicesApi.reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling NetworkServicesApi.reset_tier1_vpn_ip_sec_vpn_session_statistics"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reset'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of reset"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#reset_tier1_vpn_ip_sec_vpn_session_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def update_lb_app_profile(lb_app_profile_id, lb_app_profile, opts = {})
      data, _status_code, _headers = update_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts)
      data
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def update_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling NetworkServicesApi.update_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling NetworkServicesApi.update_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def update_lb_client_ssl_profile(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      data, _status_code, _headers = update_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      data
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def update_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling NetworkServicesApi.update_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling NetworkServicesApi.update_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def update_lb_monitor_profile(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      data, _status_code, _headers = update_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts)
      data
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def update_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling NetworkServicesApi.update_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling NetworkServicesApi.update_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def update_lb_persistence_profile(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      data, _status_code, _headers = update_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts)
      data
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def update_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling NetworkServicesApi.update_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling NetworkServicesApi.update_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPool
    # If a LBPool with the lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [LBPool]
    def update_lb_pool(lb_pool_id, lb_pool, opts = {})
      data, _status_code, _headers = update_lb_pool_with_http_info(lb_pool_id, lb_pool, opts)
      data
    end

    # Create or update a LBPool
    # If a LBPool with the lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPool, Fixnum, Hash)>] LBPool data, response status code and response headers
    def update_lb_pool_with_http_info(lb_pool_id, lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_lb_pool ...'
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling NetworkServicesApi.update_lb_pool"
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling NetworkServicesApi.update_lb_pool"
      end
      # resource path
      local_var_path = '/infra/lb-pools/{lb-pool-id}'.sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def update_lb_server_ssl_profile(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      data, _status_code, _headers = update_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      data
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def update_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling NetworkServicesApi.update_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling NetworkServicesApi.update_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBService
    # If a LBService with the lb-service-id is not already present, create a new LBService. If it already exists, update the LBService. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @return [LBService]
    def update_lb_service(lb_service_id, lb_service, opts = {})
      data, _status_code, _headers = update_lb_service_with_http_info(lb_service_id, lb_service, opts)
      data
    end

    # Create or update a LBService
    # If a LBService with the lb-service-id is not already present, create a new LBService. If it already exists, update the LBService. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBService, Fixnum, Hash)>] LBService data, response status code and response headers
    def update_lb_service_with_http_info(lb_service_id, lb_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_lb_service ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling NetworkServicesApi.update_lb_service"
      end
      # verify the required parameter 'lb_service' is set
      if @api_client.config.client_side_validation && lb_service.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service' when calling NetworkServicesApi.update_lb_service"
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [LBVirtualServer]
    def update_lb_virtual_server(lb_virtual_server_id, lb_virtual_server, opts = {})
      data, _status_code, _headers = update_lb_virtual_server_with_http_info(lb_virtual_server_id, lb_virtual_server, opts)
      data
    end

    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBVirtualServer, Fixnum, Hash)>] LBVirtualServer data, response status code and response headers
    def update_lb_virtual_server_with_http_info(lb_virtual_server_id, lb_virtual_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_lb_virtual_server ...'
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling NetworkServicesApi.update_lb_virtual_server"
      end
      # verify the required parameter 'lb_virtual_server' is set
      if @api_client.config.client_side_validation && lb_virtual_server.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server' when calling NetworkServicesApi.update_lb_virtual_server"
      end
      # resource path
      local_var_path = '/infra/lb-virtual-servers/{lb-virtual-server-id}'.sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_virtual_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Metadata Proxy Config
    # API will create or update Metadata Proxy Config with ID profile-id
    # @param metadata_proxy_id Metadata Proxy ID
    # @param metadata_proxy_config 
    # @param [Hash] opts the optional parameters
    # @return [MetadataProxyConfig]
    def update_metadata_proxy_config(metadata_proxy_id, metadata_proxy_config, opts = {})
      data, _status_code, _headers = update_metadata_proxy_config_with_http_info(metadata_proxy_id, metadata_proxy_config, opts)
      data
    end

    # Create or update Metadata Proxy Config
    # API will create or update Metadata Proxy Config with ID profile-id
    # @param metadata_proxy_id Metadata Proxy ID
    # @param metadata_proxy_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetadataProxyConfig, Fixnum, Hash)>] MetadataProxyConfig data, response status code and response headers
    def update_metadata_proxy_config_with_http_info(metadata_proxy_id, metadata_proxy_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_metadata_proxy_config ...'
      end
      # verify the required parameter 'metadata_proxy_id' is set
      if @api_client.config.client_side_validation && metadata_proxy_id.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_id' when calling NetworkServicesApi.update_metadata_proxy_config"
      end
      # verify the required parameter 'metadata_proxy_config' is set
      if @api_client.config.client_side_validation && metadata_proxy_config.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_proxy_config' when calling NetworkServicesApi.update_metadata_proxy_config"
      end
      # resource path
      local_var_path = '/infra/metadata-proxies/{metadata-proxy-id}'.sub('{' + 'metadata-proxy-id' + '}', metadata_proxy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(metadata_proxy_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MetadataProxyConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_metadata_proxy_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def update_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts)
      data
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def update_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling NetworkServicesApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling NetworkServicesApi.update_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def update_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      data
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def update_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling NetworkServicesApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling NetworkServicesApi.update_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def update_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts)
      data
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def update_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling NetworkServicesApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling NetworkServicesApi.update_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def update_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts)
      data
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def update_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling NetworkServicesApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling NetworkServicesApi.update_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [LBPool]
    def update_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      data, _status_code, _headers = update_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts)
      data
    end

    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPool, Fixnum, Hash)>] LBPool data, response status code and response headers
    def update_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling NetworkServicesApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling NetworkServicesApi.update_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def update_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      data
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def update_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling NetworkServicesApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling NetworkServicesApi.update_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn't exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [LBService]
    def update_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      data, _status_code, _headers = update_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts)
      data
    end

    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn&#39;t exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [Array<(LBService, Fixnum, Hash)>] LBService data, response status code and response headers
    def update_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.update_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.update_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.update_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling NetworkServicesApi.update_vpc_lb_service"
      end
      # verify the required parameter 'lb_service' is set
      if @api_client.config.client_side_validation && lb_service.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service' when calling NetworkServicesApi.update_vpc_lb_service"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['allow_auto_relocation'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of allow_auto_relocation'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [LBVirtualServer]
    def update_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      data, _status_code, _headers = update_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts)
      data
    end

    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBVirtualServer, Fixnum, Hash)>] LBVirtualServer data, response status code and response headers
    def update_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkServicesApi.update_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkServicesApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkServicesApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling NetworkServicesApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling NetworkServicesApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'lb_virtual_server' is set
      if @api_client.config.client_side_validation && lb_virtual_server.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server' when calling NetworkServicesApi.update_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_virtual_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkServicesApi#update_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
