=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class TaskApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def cancel_export_task(opts = {})
      data, _status_code, _headers = cancel_export_task_with_http_info(opts)
      data
    end

    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def cancel_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.cancel_export_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#cancel_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def cancel_import_task(opts = {})
      data, _status_code, _headers = cancel_import_task_with_http_info(opts)
      data
    end

    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def cancel_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.cancel_import_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/import?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#cancel_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_exported_file(opts = {})
      download_exported_file_with_http_info(opts)
      nil
    end

    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_exported_file_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.download_exported_file ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export?action=download'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#download_exported_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def get_export_task(opts = {})
      data, _status_code, _headers = get_export_task_with_http_info(opts)
      data
    end

    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def get_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.get_export_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#get_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def get_import_task(opts = {})
      data, _status_code, _headers = get_import_task_with_http_info(opts)
      data
    end

    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def get_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.get_import_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/import'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#get_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def global_infra_cancel_export_task(opts = {})
      data, _status_code, _headers = global_infra_cancel_export_task_with_http_info(opts)
      data
    end

    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def global_infra_cancel_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.global_infra_cancel_export_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#global_infra_cancel_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def global_infra_cancel_import_task(opts = {})
      data, _status_code, _headers = global_infra_cancel_import_task_with_http_info(opts)
      data
    end

    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def global_infra_cancel_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.global_infra_cancel_import_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/import?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#global_infra_cancel_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_download_exported_file(opts = {})
      global_infra_download_exported_file_with_http_info(opts)
      nil
    end

    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_download_exported_file_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.global_infra_download_exported_file ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export?action=download'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#global_infra_download_exported_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def global_infra_get_export_task(opts = {})
      data, _status_code, _headers = global_infra_get_export_task_with_http_info(opts)
      data
    end

    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def global_infra_get_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.global_infra_get_export_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#global_infra_get_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def global_infra_get_import_task(opts = {})
      data, _status_code, _headers = global_infra_get_import_task_with_http_info(opts)
      data
    end

    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def global_infra_get_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.global_infra_get_import_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/import'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#global_infra_get_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def global_infra_invoke_export_task(export_request_parameter, opts = {})
      data, _status_code, _headers = global_infra_invoke_export_task_with_http_info(export_request_parameter, opts)
      data
    end

    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def global_infra_invoke_export_task_with_http_info(export_request_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.global_infra_invoke_export_task ...'
      end
      # verify the required parameter 'export_request_parameter' is set
      if @api_client.config.client_side_validation && export_request_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'export_request_parameter' when calling TaskApi.global_infra_invoke_export_task"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(export_request_parameter)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#global_infra_invoke_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def invoke_export_task(export_request_parameter, opts = {})
      data, _status_code, _headers = invoke_export_task_with_http_info(export_request_parameter, opts)
      data
    end

    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def invoke_export_task_with_http_info(export_request_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.invoke_export_task ...'
      end
      # verify the required parameter 'export_request_parameter' is set
      if @api_client.config.client_side_validation && export_request_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'export_request_parameter' when calling TaskApi.invoke_export_task"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(export_request_parameter)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#invoke_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def orgs_org_id_projects_project_id_infra_cancel_export_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_cancel_export_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_cancel_export_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.orgs_org_id_projects_project_id_infra_cancel_export_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_cancel_export_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_cancel_export_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export?action=cancel'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#orgs_org_id_projects_project_id_infra_cancel_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def orgs_org_id_projects_project_id_infra_cancel_import_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_cancel_import_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_cancel_import_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.orgs_org_id_projects_project_id_infra_cancel_import_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_cancel_import_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_cancel_import_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/import?action=cancel'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#orgs_org_id_projects_project_id_infra_cancel_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_download_exported_file(org_id, project_id, opts = {})
      orgs_org_id_projects_project_id_infra_download_exported_file_with_http_info(org_id, project_id, opts)
      nil
    end

    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_download_exported_file_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.orgs_org_id_projects_project_id_infra_download_exported_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_download_exported_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_download_exported_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export?action=download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#orgs_org_id_projects_project_id_infra_download_exported_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of export task
    # Get the information of the latest export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def orgs_org_id_projects_project_id_infra_get_export_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_export_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Get the information of export task
    # Get the information of the latest export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_export_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.orgs_org_id_projects_project_id_infra_get_export_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_get_export_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_get_export_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#orgs_org_id_projects_project_id_infra_get_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of import task
    # Get the information of the latest import task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def orgs_org_id_projects_project_id_infra_get_import_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_import_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Get the information of import task
    # Get the information of the latest import task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_import_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.orgs_org_id_projects_project_id_infra_get_import_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_get_import_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_get_import_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/import'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#orgs_org_id_projects_project_id_infra_get_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def orgs_org_id_projects_project_id_infra_invoke_export_task(org_id, project_id, export_request_parameter, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_invoke_export_task_with_http_info(org_id, project_id, export_request_parameter, opts)
      data
    end

    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_invoke_export_task_with_http_info(org_id, project_id, export_request_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskApi.orgs_org_id_projects_project_id_infra_invoke_export_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_invoke_export_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TaskApi.orgs_org_id_projects_project_id_infra_invoke_export_task"
      end
      # verify the required parameter 'export_request_parameter' is set
      if @api_client.config.client_side_validation && export_request_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'export_request_parameter' when calling TaskApi.orgs_org_id_projects_project_id_infra_invoke_export_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(export_request_parameter)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskApi#orgs_org_id_projects_project_id_infra_invoke_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
