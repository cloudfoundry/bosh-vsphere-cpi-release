=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class RolesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Clone an already present role
    # The role with id &lt;role&gt; is cloned and the new id, name and description are the ones provided in the request body. 
    # @param role Role id
    # @param new_role 
    # @param [Hash] opts the optional parameters
    # @return [NewRole]
    def clone_role(role, new_role, opts = {})
      data, _status_code, _headers = clone_role_with_http_info(role, new_role, opts)
      data
    end

    # Clone an already present role
    # The role with id &amp;lt;role&amp;gt; is cloned and the new id, name and description are the ones provided in the request body. 
    # @param role Role id
    # @param new_role 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NewRole, Fixnum, Hash)>] NewRole data, response status code and response headers
    def clone_role_with_http_info(role, new_role, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.clone_role ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling RolesApi.clone_role"
      end
      # verify the required parameter 'new_role' is set
      if @api_client.config.client_side_validation && new_role.nil?
        fail ArgumentError, "Missing the required parameter 'new_role' when calling RolesApi.clone_role"
      end
      # resource path
      local_var_path = '/aaa/roles/{role}?action=clone'.sub('{' + 'role' + '}', role.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(new_role)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NewRole')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#clone_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update custom role
    # Creates a new role with id as &lt;role&gt; if there does not exist any role with id &lt;role&gt;, else updates the existing role. Permissions for features marked is_internal as true will be ignored if provided in request payload. These features' permission are set internally. 
    # @param role Custom role id
    # @param role_with_features 
    # @param [Hash] opts the optional parameters
    # @return [RoleWithFeatures]
    def create_or_update_role(role, role_with_features, opts = {})
      data, _status_code, _headers = create_or_update_role_with_http_info(role, role_with_features, opts)
      data
    end

    # Update custom role
    # Creates a new role with id as &amp;lt;role&amp;gt; if there does not exist any role with id &amp;lt;role&amp;gt;, else updates the existing role. Permissions for features marked is_internal as true will be ignored if provided in request payload. These features&#39; permission are set internally. 
    # @param role Custom role id
    # @param role_with_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleWithFeatures, Fixnum, Hash)>] RoleWithFeatures data, response status code and response headers
    def create_or_update_role_with_http_info(role, role_with_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.create_or_update_role ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling RolesApi.create_or_update_role"
      end
      # verify the required parameter 'role_with_features' is set
      if @api_client.config.client_side_validation && role_with_features.nil?
        fail ArgumentError, "Missing the required parameter 'role_with_features' when calling RolesApi.create_or_update_role"
      end
      # resource path
      local_var_path = '/aaa/roles/{role}'.sub('{' + 'role' + '}', role.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_with_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleWithFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#create_or_update_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice on CSP. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param org_id 
    # @param project_id 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [RoleBinding]
    def create_or_update_role_binding_multitenancy_project(org_id, project_id, role_binding, opts = {})
      data, _status_code, _headers = create_or_update_role_binding_multitenancy_project_with_http_info(org_id, project_id, role_binding, opts)
      data
    end

    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice on CSP. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param org_id 
    # @param project_id 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def create_or_update_role_binding_multitenancy_project_with_http_info(org_id, project_id, role_binding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.create_or_update_role_binding_multitenancy_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RolesApi.create_or_update_role_binding_multitenancy_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RolesApi.create_or_update_role_binding_multitenancy_project"
      end
      # verify the required parameter 'role_binding' is set
      if @api_client.config.client_side_validation && role_binding.nil?
        fail ArgumentError, "Missing the required parameter 'role_binding' when calling RolesApi.create_or_update_role_binding_multitenancy_project"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/aaa/role-bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_binding)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#create_or_update_role_binding_multitenancy_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice on CSP. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [RoleBinding]
    def create_or_update_role_binding_multitenancy_vpc(org_id, project_id, vpc_id, role_binding, opts = {})
      data, _status_code, _headers = create_or_update_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, role_binding, opts)
      data
    end

    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice on CSP. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def create_or_update_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, role_binding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.create_or_update_role_binding_multitenancy_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RolesApi.create_or_update_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RolesApi.create_or_update_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling RolesApi.create_or_update_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'role_binding' is set
      if @api_client.config.client_side_validation && role_binding.nil?
        fail ArgumentError, "Missing the required parameter 'role_binding' when calling RolesApi.create_or_update_role_binding_multitenancy_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/aaa/role-bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_binding)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#create_or_update_role_binding_multitenancy_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [RoleBinding]
    def create_role_binding(role_binding, opts = {})
      data, _status_code, _headers = create_role_binding_with_http_info(role_binding, opts)
      data
    end

    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def create_role_binding_with_http_info(role_binding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.create_role_binding ...'
      end
      # verify the required parameter 'role_binding' is set
      if @api_client.config.client_side_validation && role_binding.nil?
        fail ArgumentError, "Missing the required parameter 'role_binding' when calling RolesApi.create_role_binding"
      end
      # resource path
      local_var_path = '/aaa/role-bindings'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_binding)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#create_role_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all stale role assignments
    # Delete all stale role assignments
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [nil]
    def delete_all_stale_role_bindings(opts = {})
      delete_all_stale_role_bindings_with_http_info(opts)
      nil
    end

    # Delete all stale role assignments
    # Delete all stale role assignments
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_all_stale_role_bindings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.delete_all_stale_role_bindings ...'
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.delete_all_stale_role_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.delete_all_stale_role_bindings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/aaa/role-bindings?action=delete_stale_bindings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#delete_all_stale_role_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete custom role
    # If a role is assigned to a role binding then the deletion of the role is not allowed. Precanned roles cannot be deleted. 
    # @param role Custom role id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_role(role, opts = {})
      delete_role_with_http_info(role, opts)
      nil
    end

    # Delete custom role
    # If a role is assigned to a role binding then the deletion of the role is not allowed. Precanned roles cannot be deleted. 
    # @param role Custom role id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_role_with_http_info(role, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.delete_role ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling RolesApi.delete_role"
      end
      # resource path
      local_var_path = '/aaa/roles/{role}'.sub('{' + 'role' + '}', role.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#delete_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete user/group's roles assignment
    # Delete the user/group's role assignment. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. For deleting multiple paths, please provide semi-colon ';' separated paths in the request parameter. 
    # @param binding_id User/Group&#39;s id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [nil]
    def delete_role_binding(binding_id, opts = {})
      delete_role_binding_with_http_info(binding_id, opts)
      nil
    end

    # Delete user/group&#39;s roles assignment
    # Delete the user/group&#39;s role assignment. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. For deleting multiple paths, please provide semi-colon &#39;;&#39; separated paths in the request parameter. 
    # @param binding_id User/Group&#39;s id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_role_binding_with_http_info(binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.delete_role_binding ...'
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling RolesApi.delete_role_binding"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.delete_role_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.delete_role_binding, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/aaa/role-bindings/{binding-id}'.sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#delete_role_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete user/group's roles assignment
    # Delete the user/group's role assignment on CSP. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. 
    # @param org_id 
    # @param project_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [nil]
    def delete_role_binding_multitenancy_project(org_id, project_id, binding_id, opts = {})
      delete_role_binding_multitenancy_project_with_http_info(org_id, project_id, binding_id, opts)
      nil
    end

    # Delete user/group&#39;s roles assignment
    # Delete the user/group&#39;s role assignment on CSP. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. 
    # @param org_id 
    # @param project_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_role_binding_multitenancy_project_with_http_info(org_id, project_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.delete_role_binding_multitenancy_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RolesApi.delete_role_binding_multitenancy_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RolesApi.delete_role_binding_multitenancy_project"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling RolesApi.delete_role_binding_multitenancy_project"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.delete_role_binding_multitenancy_project, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.delete_role_binding_multitenancy_project, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/aaa/role-bindings/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#delete_role_binding_multitenancy_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete user/group's roles assignment
    # Delete the user/group's role assignment on CSP. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [nil]
    def delete_role_binding_multitenancy_vpc(org_id, project_id, vpc_id, binding_id, opts = {})
      delete_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, binding_id, opts)
      nil
    end

    # Delete user/group&#39;s roles assignment
    # Delete the user/group&#39;s role assignment on CSP. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.delete_role_binding_multitenancy_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RolesApi.delete_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RolesApi.delete_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling RolesApi.delete_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling RolesApi.delete_role_binding_multitenancy_vpc"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.delete_role_binding_multitenancy_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.delete_role_binding_multitenancy_vpc, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/aaa/role-bindings/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#delete_role_binding_multitenancy_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all users and groups with their roles
    # Get all users and groups with their roles. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBindingListResult]
    def get_all_role_bindings(opts = {})
      data, _status_code, _headers = get_all_role_bindings_with_http_info(opts)
      data
    end

    # Get all users and groups with their roles
    # Get all users and groups with their roles. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBindingListResult, Fixnum, Hash)>] RoleBindingListResult data, response status code and response headers
    def get_all_role_bindings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_all_role_bindings ...'
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.get_all_role_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.get_all_role_bindings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/aaa/role-bindings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_all_role_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about all roles
    # Get information about all roles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RoleListResult]
    def get_all_roles_info(opts = {})
      data, _status_code, _headers = get_all_roles_info_with_http_info(opts)
      data
    end

    # Get information about all roles
    # Get information about all roles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RoleListResult, Fixnum, Hash)>] RoleListResult data, response status code and response headers
    def get_all_roles_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_all_roles_info ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.get_all_roles_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.get_all_roles_info, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'scope'] && !['ROOT', 'ORG', 'PROJECT', 'VPC'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of ROOT, ORG, PROJECT, VPC'
      end
      # resource path
      local_var_path = '/aaa/roles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_all_roles_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user/group's role information
    # Get user/group's role information
    # @param binding_id User/Group&#39;s id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBinding]
    def get_role_binding(binding_id, opts = {})
      data, _status_code, _headers = get_role_binding_with_http_info(binding_id, opts)
      data
    end

    # Get user/group&#39;s role information
    # Get user/group&#39;s role information
    # @param binding_id User/Group&#39;s id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def get_role_binding_with_http_info(binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_role_binding ...'
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling RolesApi.get_role_binding"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.get_role_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.get_role_binding, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/aaa/role-bindings/{binding-id}'.sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_role_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user/group's role information from CSP
    # Get user/group's role information from CSP
    # @param org_id 
    # @param project_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBinding]
    def get_role_binding_multitenancy_project(org_id, project_id, binding_id, opts = {})
      data, _status_code, _headers = get_role_binding_multitenancy_project_with_http_info(org_id, project_id, binding_id, opts)
      data
    end

    # Get user/group&#39;s role information from CSP
    # Get user/group&#39;s role information from CSP
    # @param org_id 
    # @param project_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def get_role_binding_multitenancy_project_with_http_info(org_id, project_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_role_binding_multitenancy_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RolesApi.get_role_binding_multitenancy_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RolesApi.get_role_binding_multitenancy_project"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling RolesApi.get_role_binding_multitenancy_project"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.get_role_binding_multitenancy_project, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.get_role_binding_multitenancy_project, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/aaa/role-bindings/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_role_binding_multitenancy_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user/group's role information from CSP
    # Get user/group's role information from CSP
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBinding]
    def get_role_binding_multitenancy_vpc(org_id, project_id, vpc_id, binding_id, opts = {})
      data, _status_code, _headers = get_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, binding_id, opts)
      data
    end

    # Get user/group&#39;s role information from CSP
    # Get user/group&#39;s role information from CSP
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def get_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_role_binding_multitenancy_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RolesApi.get_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RolesApi.get_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling RolesApi.get_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling RolesApi.get_role_binding_multitenancy_vpc"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.get_role_binding_multitenancy_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.get_role_binding_multitenancy_vpc, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/aaa/role-bindings/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_role_binding_multitenancy_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get role information
    # Get role information
    # @param role Role id
    # @param [Hash] opts the optional parameters
    # @return [RoleWithFeatures]
    def get_role_info(role, opts = {})
      data, _status_code, _headers = get_role_info_with_http_info(role, opts)
      data
    end

    # Get role information
    # Get role information
    # @param role Role id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleWithFeatures, Fixnum, Hash)>] RoleWithFeatures data, response status code and response headers
    def get_role_info_with_http_info(role, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_role_info ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling RolesApi.get_role_info"
      end
      # resource path
      local_var_path = '/aaa/roles/{role}'.sub('{' + 'role' + '}', role.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleWithFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_role_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List RBAC features
    # List all the RBAC features and their properties. 
    # @param [Hash] opts the optional parameters
    # @return [FeaturePermissionListResult]
    def list_features(opts = {})
      data, _status_code, _headers = list_features_with_http_info(opts)
      data
    end

    # List RBAC features
    # List all the RBAC features and their properties. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeaturePermissionListResult, Fixnum, Hash)>] FeaturePermissionListResult data, response status code and response headers
    def list_features_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.list_features ...'
      end
      # resource path
      local_var_path = '/aaa/features-with-properties'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FeaturePermissionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#list_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all users and groups with their roles
    # Get all users and groups with their roles from CSP. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBindingListResult]
    def list_role_bindings_multitenancy_project(org_id, project_id, opts = {})
      data, _status_code, _headers = list_role_bindings_multitenancy_project_with_http_info(org_id, project_id, opts)
      data
    end

    # Get all users and groups with their roles
    # Get all users and groups with their roles from CSP. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBindingListResult, Fixnum, Hash)>] RoleBindingListResult data, response status code and response headers
    def list_role_bindings_multitenancy_project_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.list_role_bindings_multitenancy_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RolesApi.list_role_bindings_multitenancy_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RolesApi.list_role_bindings_multitenancy_project"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.list_role_bindings_multitenancy_project, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.list_role_bindings_multitenancy_project, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/aaa/role-bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#list_role_bindings_multitenancy_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all users and groups with their roles
    # Get all users and groups with their roles from CSP. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBindingListResult]
    def list_role_bindings_multitenancy_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_role_bindings_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get all users and groups with their roles
    # Get all users and groups with their roles from CSP. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBindingListResult, Fixnum, Hash)>] RoleBindingListResult data, response status code and response headers
    def list_role_bindings_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.list_role_bindings_multitenancy_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RolesApi.list_role_bindings_multitenancy_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RolesApi.list_role_bindings_multitenancy_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling RolesApi.list_role_bindings_multitenancy_vpc"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.list_role_bindings_multitenancy_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.list_role_bindings_multitenancy_vpc, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/aaa/role-bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#list_role_bindings_multitenancy_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about all roles with features and their permissions
    # Get information about all roles with features and their permissions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RoleWithFeaturesListResult]
    def list_roles_info(opts = {})
      data, _status_code, _headers = list_roles_info_with_http_info(opts)
      data
    end

    # Get information about all roles with features and their permissions
    # Get information about all roles with features and their permissions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RoleWithFeaturesListResult, Fixnum, Hash)>] RoleWithFeaturesListResult data, response status code and response headers
    def list_roles_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.list_roles_info ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.list_roles_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.list_roles_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/aaa/roles-with-feature-permissions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleWithFeaturesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#list_roles_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about all roles
    # Get information about all roles
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RoleListResult]
    def list_roles_of_org_multitenancy_project(org_id, project_id, opts = {})
      data, _status_code, _headers = list_roles_of_org_multitenancy_project_with_http_info(org_id, project_id, opts)
      data
    end

    # Get information about all roles
    # Get information about all roles
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RoleListResult, Fixnum, Hash)>] RoleListResult data, response status code and response headers
    def list_roles_of_org_multitenancy_project_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.list_roles_of_org_multitenancy_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RolesApi.list_roles_of_org_multitenancy_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RolesApi.list_roles_of_org_multitenancy_project"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.list_roles_of_org_multitenancy_project, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.list_roles_of_org_multitenancy_project, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'scope'] && !['ROOT', 'ORG', 'PROJECT', 'VPC'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of ROOT, ORG, PROJECT, VPC'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/aaa/roles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#list_roles_of_org_multitenancy_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about all roles
    # Get information about all roles
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RoleListResult]
    def list_roles_of_org_multitenancy_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_roles_of_org_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get information about all roles
    # Get information about all roles
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RoleListResult, Fixnum, Hash)>] RoleListResult data, response status code and response headers
    def list_roles_of_org_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.list_roles_of_org_multitenancy_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RolesApi.list_roles_of_org_multitenancy_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RolesApi.list_roles_of_org_multitenancy_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling RolesApi.list_roles_of_org_multitenancy_vpc"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.list_roles_of_org_multitenancy_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RolesApi.list_roles_of_org_multitenancy_vpc, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'scope'] && !['ROOT', 'ORG', 'PROJECT', 'VPC'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of ROOT, ORG, PROJECT, VPC'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/aaa/roles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#list_roles_of_org_multitenancy_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set role assignment permission configuration
    # Provides a means to allow or disallow project administrators and VPC administrators to assign roles to other users on projects and VPCs. 
    # @param role role id (either \&quot;project_admin\&quot; or \&quot;vpc_admin\&quot;)
    # @param role_assignment_permission_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_role_assignment_config(role, role_assignment_permission_config, opts = {})
      update_role_assignment_config_with_http_info(role, role_assignment_permission_config, opts)
      nil
    end

    # Set role assignment permission configuration
    # Provides a means to allow or disallow project administrators and VPC administrators to assign roles to other users on projects and VPCs. 
    # @param role role id (either \&quot;project_admin\&quot; or \&quot;vpc_admin\&quot;)
    # @param role_assignment_permission_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_role_assignment_config_with_http_info(role, role_assignment_permission_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.update_role_assignment_config ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling RolesApi.update_role_assignment_config"
      end
      # verify the required parameter 'role_assignment_permission_config' is set
      if @api_client.config.client_side_validation && role_assignment_permission_config.nil?
        fail ArgumentError, "Missing the required parameter 'role_assignment_permission_config' when calling RolesApi.update_role_assignment_config"
      end
      # resource path
      local_var_path = '/aaa/roles/{role}/role-assignment-permission-config'.sub('{' + 'role' + '}', role.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_assignment_permission_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#update_role_assignment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update User or Group's roles
    # This API is used to update a user/group any role(s) of choice. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. This API will merge the existing roles_for_paths with the newly provided roles_for_paths excluding roles_for_paths those are marked for deletion. 
    # @param binding_id User/Group&#39;s id
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [RoleBinding]
    def update_role_binding(binding_id, role_binding, opts = {})
      data, _status_code, _headers = update_role_binding_with_http_info(binding_id, role_binding, opts)
      data
    end

    # Update User or Group&#39;s roles
    # This API is used to update a user/group any role(s) of choice. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. This API will merge the existing roles_for_paths with the newly provided roles_for_paths excluding roles_for_paths those are marked for deletion. 
    # @param binding_id User/Group&#39;s id
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def update_role_binding_with_http_info(binding_id, role_binding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.update_role_binding ...'
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling RolesApi.update_role_binding"
      end
      # verify the required parameter 'role_binding' is set
      if @api_client.config.client_side_validation && role_binding.nil?
        fail ArgumentError, "Missing the required parameter 'role_binding' when calling RolesApi.update_role_binding"
      end
      # resource path
      local_var_path = '/aaa/role-bindings/{binding-id}'.sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_binding)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#update_role_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a new feature permission set
    # Validate the permissions of an incoming role. Also, recommend the permissions which need to be corrected. 
    # @param feature_permission_array 
    # @param [Hash] opts the optional parameters
    # @return [RecommendedFeaturePermissionListResult]
    def validate_and_recommend_permissions(feature_permission_array, opts = {})
      data, _status_code, _headers = validate_and_recommend_permissions_with_http_info(feature_permission_array, opts)
      data
    end

    # Validate a new feature permission set
    # Validate the permissions of an incoming role. Also, recommend the permissions which need to be corrected. 
    # @param feature_permission_array 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecommendedFeaturePermissionListResult, Fixnum, Hash)>] RecommendedFeaturePermissionListResult data, response status code and response headers
    def validate_and_recommend_permissions_with_http_info(feature_permission_array, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.validate_and_recommend_permissions ...'
      end
      # verify the required parameter 'feature_permission_array' is set
      if @api_client.config.client_side_validation && feature_permission_array.nil?
        fail ArgumentError, "Missing the required parameter 'feature_permission_array' when calling RolesApi.validate_and_recommend_permissions"
      end
      # resource path
      local_var_path = '/aaa/roles?action=validate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(feature_permission_array)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecommendedFeaturePermissionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#validate_and_recommend_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
