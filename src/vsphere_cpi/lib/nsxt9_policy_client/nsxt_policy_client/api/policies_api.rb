=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class PoliciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update the Bridge Firewall Policy
    # Update the Bridge Firewall Policy. This is a full replace. Create new BridgeFirewallPolicy if a policy with the policy-id is not already present. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [BridgeFirewallPolicy]
    def create_or_replace_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      data, _status_code, _headers = create_or_replace_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts)
      data
    end

    # Update the Bridge Firewall Policy
    # Update the Bridge Firewall Policy. This is a full replace. Create new BridgeFirewallPolicy if a policy with the policy-id is not already present. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeFirewallPolicy, Fixnum, Hash)>] BridgeFirewallPolicy data, response status code and response headers
    def create_or_replace_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PoliciesApi.create_or_replace_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PoliciesApi.create_or_replace_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling PoliciesApi.create_or_replace_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy' when calling PoliciesApi.create_or_replace_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_firewall_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PoliciesApi#create_or_replace_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Bridge Firewall Policy
    # Delete Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, opts = {})
      delete_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      nil
    end

    # Delete Bridge Firewall Policy
    # Delete Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PoliciesApi.delete_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PoliciesApi.delete_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling PoliciesApi.delete_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PoliciesApi#delete_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Bridge Firewall Policy
    # Get Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [BridgeFirewallPolicy]
    def get_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      data
    end

    # Get Bridge Firewall Policy
    # Get Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeFirewallPolicy, Fixnum, Hash)>] BridgeFirewallPolicy data, response status code and response headers
    def get_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PoliciesApi.get_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PoliciesApi.get_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling PoliciesApi.get_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PoliciesApi#get_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of Bridge Firewall Policies
    # Paginated list of all bridge firewall policies. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [BridgeFirewallPolicyListResult]
    def list_bridge_firewall_policies(domain_id, opts = {})
      data, _status_code, _headers = list_bridge_firewall_policies_with_http_info(domain_id, opts)
      data
    end

    # List of Bridge Firewall Policies
    # Paginated list of all bridge firewall policies. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(BridgeFirewallPolicyListResult, Fixnum, Hash)>] BridgeFirewallPolicyListResult data, response status code and response headers
    def list_bridge_firewall_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PoliciesApi.list_bridge_firewall_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PoliciesApi.list_bridge_firewall_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PoliciesApi.list_bridge_firewall_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PoliciesApi.list_bridge_firewall_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PoliciesApi#list_bridge_firewall_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Bridge Firewall Policy
    # Patch the Bridge Firewall Policy. If a Bridge Firewall Policy with the policy-id is not already present, create a new Bridge Firewall Policy. If it already exists, update the Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      patch_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts)
      nil
    end

    # Create or update Bridge Firewall Policy
    # Patch the Bridge Firewall Policy. If a Bridge Firewall Policy with the policy-id is not already present, create a new Bridge Firewall Policy. If it already exists, update the Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PoliciesApi.patch_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PoliciesApi.patch_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling PoliciesApi.patch_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy' when calling PoliciesApi.patch_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_firewall_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PoliciesApi#patch_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of bridge firewall policy
    # This is used to set a precedence of a bridge firewall policy w.r.t others. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [BridgeFirewallPolicy]
    def revise_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      data, _status_code, _headers = revise_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts)
      data
    end

    # Revise the positioning of bridge firewall policy
    # This is used to set a precedence of a bridge firewall policy w.r.t others. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeFirewallPolicy, Fixnum, Hash)>] BridgeFirewallPolicy data, response status code and response headers
    def revise_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PoliciesApi.revise_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PoliciesApi.revise_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling PoliciesApi.revise_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy' when calling PoliciesApi.revise_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_firewall_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PoliciesApi#revise_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
