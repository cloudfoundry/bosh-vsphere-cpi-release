=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class HierarchicalAPIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check (default to false)
    # @return [nil]
    def global_infra_patch_infra(infra, opts = {})
      global_infra_patch_infra_with_http_info(infra, opts)
      nil
    end

    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_infra_with_http_info(infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HierarchicalAPIApi.global_infra_patch_infra ...'
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling HierarchicalAPIApi.global_infra_patch_infra"
      end
      # resource path
      local_var_path = '/global-infra'

      # query parameters
      query_params = {}
      query_params[:'enforce_revision_check'] = opts[:'enforce_revision_check'] if !opts[:'enforce_revision_check'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HierarchicalAPIApi#global_infra_patch_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Infra]
    def global_infra_read_infra(opts = {})
      data, _status_code, _headers = global_infra_read_infra_with_http_info(opts)
      data
    end

    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def global_infra_read_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HierarchicalAPIApi.global_infra_read_infra ...'
      end
      # resource path
      local_var_path = '/global-infra'

      # query parameters
      query_params = {}
      query_params[:'base_path'] = opts[:'base_path'] if !opts[:'base_path'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'type_filter'] = opts[:'type_filter'] if !opts[:'type_filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HierarchicalAPIApi#global_infra_read_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_infra(org_id, project_id, infra, opts = {})
      orgs_org_id_projects_project_id_infra_patch_infra_with_http_info(org_id, project_id, infra, opts)
      nil
    end

    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_infra_with_http_info(org_id, project_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HierarchicalAPIApi.orgs_org_id_projects_project_id_infra_patch_infra ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling HierarchicalAPIApi.orgs_org_id_projects_project_id_infra_patch_infra"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling HierarchicalAPIApi.orgs_org_id_projects_project_id_infra_patch_infra"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling HierarchicalAPIApi.orgs_org_id_projects_project_id_infra_patch_infra"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforce_revision_check'] = opts[:'enforce_revision_check'] if !opts[:'enforce_revision_check'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HierarchicalAPIApi#orgs_org_id_projects_project_id_infra_patch_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Infra]
    def orgs_org_id_projects_project_id_infra_read_infra(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_infra_with_http_info(org_id, project_id, opts)
      data
    end

    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_infra_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HierarchicalAPIApi.orgs_org_id_projects_project_id_infra_read_infra ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling HierarchicalAPIApi.orgs_org_id_projects_project_id_infra_read_infra"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling HierarchicalAPIApi.orgs_org_id_projects_project_id_infra_read_infra"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'base_path'] = opts[:'base_path'] if !opts[:'base_path'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'type_filter'] = opts[:'type_filter'] if !opts[:'type_filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HierarchicalAPIApi#orgs_org_id_projects_project_id_infra_read_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check (default to false)
    # @return [nil]
    def patch_infra(infra, opts = {})
      patch_infra_with_http_info(infra, opts)
      nil
    end

    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_with_http_info(infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HierarchicalAPIApi.patch_infra ...'
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling HierarchicalAPIApi.patch_infra"
      end
      # resource path
      local_var_path = '/infra'

      # query parameters
      query_params = {}
      query_params[:'enforce_revision_check'] = opts[:'enforce_revision_check'] if !opts[:'enforce_revision_check'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HierarchicalAPIApi#patch_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Infra]
    def read_infra(opts = {})
      data, _status_code, _headers = read_infra_with_http_info(opts)
      data
    end

    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def read_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HierarchicalAPIApi.read_infra ...'
      end
      # resource path
      local_var_path = '/infra'

      # query parameters
      query_params = {}
      query_params[:'base_path'] = opts[:'base_path'] if !opts[:'base_path'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'type_filter'] = opts[:'type_filter'] if !opts[:'type_filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HierarchicalAPIApi#read_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the infra object
    # Updates only the single infra object. This does not allow hierarchical updates of entities. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def update_infra(infra, opts = {})
      data, _status_code, _headers = update_infra_with_http_info(infra, opts)
      data
    end

    # Update the infra object
    # Updates only the single infra object. This does not allow hierarchical updates of entities. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def update_infra_with_http_info(infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HierarchicalAPIApi.update_infra ...'
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling HierarchicalAPIApi.update_infra"
      end
      # resource path
      local_var_path = '/infra'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HierarchicalAPIApi#update_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
