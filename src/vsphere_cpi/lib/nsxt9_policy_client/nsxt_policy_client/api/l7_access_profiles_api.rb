=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class L7AccessProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create L7 Access Profile entry
    # API will create L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def create_or_update_l7_access_entry(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      data, _status_code, _headers = create_or_update_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts)
      data
    end

    # Create L7 Access Profile entry
    # API will create L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def create_or_update_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.create_or_update_l7_access_entry ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.create_or_update_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling L7AccessProfilesApi.create_or_update_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry' is set
      if @api_client.config.client_side_validation && l7_access_entry.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry' when calling L7AccessProfilesApi.create_or_update_l7_access_entry"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#create_or_update_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update L7 Access Profile
    # API will update L7 Access Profile
    # @param l7_access_profile_id 
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [L7AccessProfile]
    def create_or_update_l7_access_profile(l7_access_profile_id, l7_access_profile, opts = {})
      data, _status_code, _headers = create_or_update_l7_access_profile_with_http_info(l7_access_profile_id, l7_access_profile, opts)
      data
    end

    # Update L7 Access Profile
    # API will update L7 Access Profile
    # @param l7_access_profile_id 
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def create_or_update_l7_access_profile_with_http_info(l7_access_profile_id, l7_access_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.create_or_update_l7_access_profile ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.create_or_update_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile' is set
      if @api_client.config.client_side_validation && l7_access_profile.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile' when calling L7AccessProfilesApi.create_or_update_l7_access_profile"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#create_or_update_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update static mime content id
    # API will create/update static mime content id
    # @param static_mime_content_id static mime content id
    # @param static_mime_content 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [StaticMimeContent]
    def create_or_update_policy_static_mime_content(static_mime_content_id, static_mime_content, opts = {})
      data, _status_code, _headers = create_or_update_policy_static_mime_content_with_http_info(static_mime_content_id, static_mime_content, opts)
      data
    end

    # Update static mime content id
    # API will create/update static mime content id
    # @param static_mime_content_id static mime content id
    # @param static_mime_content 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(StaticMimeContent, Fixnum, Hash)>] StaticMimeContent data, response status code and response headers
    def create_or_update_policy_static_mime_content_with_http_info(static_mime_content_id, static_mime_content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.create_or_update_policy_static_mime_content ...'
      end
      # verify the required parameter 'static_mime_content_id' is set
      if @api_client.config.client_side_validation && static_mime_content_id.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content_id' when calling L7AccessProfilesApi.create_or_update_policy_static_mime_content"
      end
      # verify the required parameter 'static_mime_content' is set
      if @api_client.config.client_side_validation && static_mime_content.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content' when calling L7AccessProfilesApi.create_or_update_policy_static_mime_content"
      end
      # resource path
      local_var_path = '/infra/static-mime-contents/{static-mime-content-id}'.sub('{' + 'static-mime-content-id' + '}', static_mime_content_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_mime_content)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticMimeContent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#create_or_update_policy_static_mime_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L7 Access Profile entry
    # API will delete L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_l7_access_entry(l7_access_profile_id, l7_access_entry_id, opts = {})
      delete_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, opts)
      nil
    end

    # Delete L7 Access Profile entry
    # API will delete L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.delete_l7_access_entry ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.delete_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling L7AccessProfilesApi.delete_l7_access_entry"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#delete_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L7 Access Profile
    # API will delete L7 Access Profile
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_l7_access_profile(l7_access_profile_id, opts = {})
      delete_l7_access_profile_with_http_info(l7_access_profile_id, opts)
      nil
    end

    # Delete L7 Access Profile
    # API will delete L7 Access Profile
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l7_access_profile_with_http_info(l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.delete_l7_access_profile ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.delete_l7_access_profile"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#delete_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete static Mime content
    # API will delete static mime content
    # @param static_mime_content_id Static mime content id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_policy_static_mime_content(static_mime_content_id, opts = {})
      delete_policy_static_mime_content_with_http_info(static_mime_content_id, opts)
      nil
    end

    # Delete static Mime content
    # API will delete static mime content
    # @param static_mime_content_id Static mime content id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_static_mime_content_with_http_info(static_mime_content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.delete_policy_static_mime_content ...'
      end
      # verify the required parameter 'static_mime_content_id' is set
      if @api_client.config.client_side_validation && static_mime_content_id.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content_id' when calling L7AccessProfilesApi.delete_policy_static_mime_content"
      end
      # resource path
      local_var_path = '/infra/static-mime-contents/{static-mime-content-id}'.sub('{' + 'static-mime-content-id' + '}', static_mime_content_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#delete_policy_static_mime_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L7 Access Profile
    # API will get L7 Access Profile
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessProfile]
    def get_l7_access_profile(l7_access_profile_id, opts = {})
      data, _status_code, _headers = get_l7_access_profile_with_http_info(l7_access_profile_id, opts)
      data
    end

    # Get L7 Access Profile
    # API will get L7 Access Profile
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def get_l7_access_profile_with_http_info(l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.get_l7_access_profile ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.get_l7_access_profile"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#get_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Static Mime content
    # API will get static mime content
    # @param static_mime_content_id Static mime content id
    # @param [Hash] opts the optional parameters
    # @return [StaticMimeContent]
    def get_policy_static_mime_content(static_mime_content_id, opts = {})
      data, _status_code, _headers = get_policy_static_mime_content_with_http_info(static_mime_content_id, opts)
      data
    end

    # Get Static Mime content
    # API will get static mime content
    # @param static_mime_content_id Static mime content id
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticMimeContent, Fixnum, Hash)>] StaticMimeContent data, response status code and response headers
    def get_policy_static_mime_content_with_http_info(static_mime_content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.get_policy_static_mime_content ...'
      end
      # verify the required parameter 'static_mime_content_id' is set
      if @api_client.config.client_side_validation && static_mime_content_id.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content_id' when calling L7AccessProfilesApi.get_policy_static_mime_content"
      end
      # resource path
      local_var_path = '/infra/static-mime-contents/{static-mime-content-id}'.sub('{' + 'static-mime-content-id' + '}', static_mime_content_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticMimeContent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#get_policy_static_mime_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List l7 access profile entries
    # API will list all l7 access profiles entries
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L7AccessEntryListResult]
    def list_l7_access_entries(l7_access_profile_id, opts = {})
      data, _status_code, _headers = list_l7_access_entries_with_http_info(l7_access_profile_id, opts)
      data
    end

    # List l7 access profile entries
    # API will list all l7 access profiles entries
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L7AccessEntryListResult, Fixnum, Hash)>] L7AccessEntryListResult data, response status code and response headers
    def list_l7_access_entries_with_http_info(l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.list_l7_access_entries ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.list_l7_access_entries"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.list_l7_access_entries, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.list_l7_access_entries, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}/entries'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#list_l7_access_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy L7 access profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom (default to SYSTEM)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def list_l7_access_profile_profile_supported_attributes(opts = {})
      data, _status_code, _headers = list_l7_access_profile_profile_supported_attributes_with_http_info(opts)
      data
    end

    # List Policy L7 access profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def list_l7_access_profile_profile_supported_attributes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.list_l7_access_profile_profile_supported_attributes ...'
      end
      if @api_client.config.client_side_validation && opts[:'attribute_source'] && !['ALL', 'CUSTOM', 'SYSTEM'].include?(opts[:'attribute_source'])
        fail ArgumentError, 'invalid value for "attribute_source", must be one of ALL, CUSTOM, SYSTEM'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.list_l7_access_profile_profile_supported_attributes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.list_l7_access_profile_profile_supported_attributes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/l7-access-profiles/attributes'

      # query parameters
      query_params = {}
      query_params[:'attribute_key'] = opts[:'attribute_key'] if !opts[:'attribute_key'].nil?
      query_params[:'attribute_source'] = opts[:'attribute_source'] if !opts[:'attribute_source'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#list_l7_access_profile_profile_supported_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List l7 access Profiles
    # API will list all l7 access Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_entry_count Include the count of entries in L7 Profile (default to false)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L7AccessProfileListResult]
    def list_l7_access_profiles(opts = {})
      data, _status_code, _headers = list_l7_access_profiles_with_http_info(opts)
      data
    end

    # List l7 access Profiles
    # API will list all l7 access Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_entry_count Include the count of entries in L7 Profile
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L7AccessProfileListResult, Fixnum, Hash)>] L7AccessProfileListResult data, response status code and response headers
    def list_l7_access_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.list_l7_access_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.list_l7_access_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.list_l7_access_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/l7-access-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_entry_count'] = opts[:'include_entry_count'] if !opts[:'include_entry_count'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#list_l7_access_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List static mime contents
    # API will list all static mime contents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [StaticMimeContentListResult]
    def list_policy_static_mime_contents(opts = {})
      data, _status_code, _headers = list_policy_static_mime_contents_with_http_info(opts)
      data
    end

    # List static mime contents
    # API will list all static mime contents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(StaticMimeContentListResult, Fixnum, Hash)>] StaticMimeContentListResult data, response status code and response headers
    def list_policy_static_mime_contents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.list_policy_static_mime_contents ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.list_policy_static_mime_contents, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.list_policy_static_mime_contents, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/static-mime-contents'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticMimeContentListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#list_policy_static_mime_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create L7 Access Profile entry
    # API will create L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts)
      data
    end

    # Create L7 Access Profile entry
    # API will create L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry' is set
      if @api_client.config.client_side_validation && l7_access_entry.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update L7 Access Profile
    # API will update L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [L7AccessProfile]
    def orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile(org_id, project_id, l7_access_profile_id, l7_access_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_profile, opts)
      data
    end

    # Update L7 Access Profile
    # API will update L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile' is set
      if @api_client.config.client_side_validation && l7_access_profile.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L7 Access Profile entry
    # API will delete L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_l7_access_entry(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts)
      nil
    end

    # Delete L7 Access Profile entry
    # API will delete L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_entry"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#orgs_org_id_projects_project_id_infra_delete_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L7 Access Profile
    # API will delete L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_l7_access_profile(org_id, project_id, l7_access_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, opts)
      nil
    end

    # Delete L7 Access Profile
    # API will delete L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#orgs_org_id_projects_project_id_infra_delete_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L7 Access Profile
    # API will get L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessProfile]
    def orgs_org_id_projects_project_id_infra_get_l7_access_profile(org_id, project_id, l7_access_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, opts)
      data
    end

    # Get L7 Access Profile
    # API will get L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_get_l7_access_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_get_l7_access_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_get_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_get_l7_access_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#orgs_org_id_projects_project_id_infra_get_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List l7 access profile entries
    # API will list all l7 access profiles entries
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L7AccessEntryListResult]
    def orgs_org_id_projects_project_id_infra_list_l7_access_entries(org_id, project_id, l7_access_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_l7_access_entries_with_http_info(org_id, project_id, l7_access_profile_id, opts)
      data
    end

    # List l7 access profile entries
    # API will list all l7 access profiles entries
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L7AccessEntryListResult, Fixnum, Hash)>] L7AccessEntryListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_l7_access_entries_with_http_info(org_id, project_id, l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}/entries'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#orgs_org_id_projects_project_id_infra_list_l7_access_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy L7 access profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom (default to SYSTEM)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes_with_http_info(org_id, project_id, opts)
      data
    end

    # List Policy L7 access profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes"
      end
      if @api_client.config.client_side_validation && opts[:'attribute_source'] && !['ALL', 'CUSTOM', 'SYSTEM'].include?(opts[:'attribute_source'])
        fail ArgumentError, 'invalid value for "attribute_source", must be one of ALL, CUSTOM, SYSTEM'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/attributes'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'attribute_key'] = opts[:'attribute_key'] if !opts[:'attribute_key'].nil?
      query_params[:'attribute_source'] = opts[:'attribute_source'] if !opts[:'attribute_source'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List l7 access Profiles
    # API will list all l7 access Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_entry_count Include the count of entries in L7 Profile (default to false)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L7AccessProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_l7_access_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_l7_access_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List l7 access Profiles
    # API will list all l7 access Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_entry_count Include the count of entries in L7 Profile
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L7AccessProfileListResult, Fixnum, Hash)>] L7AccessProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_l7_access_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_entry_count'] = opts[:'include_entry_count'] if !opts[:'include_entry_count'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#orgs_org_id_projects_project_id_infra_list_l7_access_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update L7 Access Profile entry
    # API will create/update L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def orgs_org_id_projects_project_id_infra_patch_l7_access_entry(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_patch_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts)
      data
    end

    # Create or update L7 Access Profile entry
    # API will create/update L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry' is set
      if @api_client.config.client_side_validation && l7_access_entry.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#orgs_org_id_projects_project_id_infra_patch_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update L7 Access Profile
    # API will create/update L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id L7 Access Profile ID
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [L7AccessProfile]
    def orgs_org_id_projects_project_id_infra_patch_l7_access_profile(org_id, project_id, l7_access_profile_id, l7_access_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_patch_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_profile, opts)
      data
    end

    # Create or update L7 Access Profile
    # API will create/update L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id L7 Access Profile ID
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile' is set
      if @api_client.config.client_side_validation && l7_access_profile.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#orgs_org_id_projects_project_id_infra_patch_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read L7 Access Profile entry
    # Read Friewall L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def orgs_org_id_projects_project_id_infra_read_l7_access_entry(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts)
      data
    end

    # Read L7 Access Profile entry
    # Read Friewall L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_read_l7_access_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_read_l7_access_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_read_l7_access_entry"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_read_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling L7AccessProfilesApi.orgs_org_id_projects_project_id_infra_read_l7_access_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#orgs_org_id_projects_project_id_infra_read_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update L7 Access Profile entry
    # API will create/update L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def patch_l7_access_entry(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      data, _status_code, _headers = patch_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts)
      data
    end

    # Create or update L7 Access Profile entry
    # API will create/update L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def patch_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.patch_l7_access_entry ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.patch_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling L7AccessProfilesApi.patch_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry' is set
      if @api_client.config.client_side_validation && l7_access_entry.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry' when calling L7AccessProfilesApi.patch_l7_access_entry"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#patch_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update L7 Access Profile
    # API will create/update L7 Access Profile
    # @param l7_access_profile_id L7 Access Profile ID
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [L7AccessProfile]
    def patch_l7_access_profile(l7_access_profile_id, l7_access_profile, opts = {})
      data, _status_code, _headers = patch_l7_access_profile_with_http_info(l7_access_profile_id, l7_access_profile, opts)
      data
    end

    # Create or update L7 Access Profile
    # API will create/update L7 Access Profile
    # @param l7_access_profile_id L7 Access Profile ID
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def patch_l7_access_profile_with_http_info(l7_access_profile_id, l7_access_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.patch_l7_access_profile ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.patch_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile' is set
      if @api_client.config.client_side_validation && l7_access_profile.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile' when calling L7AccessProfilesApi.patch_l7_access_profile"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#patch_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update static mime content id
    # API will create/update static mime content id
    # @param static_mime_content_id static mime content id
    # @param static_mime_content 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [StaticMimeContent]
    def patch_policy_static_mime_content(static_mime_content_id, static_mime_content, opts = {})
      data, _status_code, _headers = patch_policy_static_mime_content_with_http_info(static_mime_content_id, static_mime_content, opts)
      data
    end

    # Create or update static mime content id
    # API will create/update static mime content id
    # @param static_mime_content_id static mime content id
    # @param static_mime_content 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(StaticMimeContent, Fixnum, Hash)>] StaticMimeContent data, response status code and response headers
    def patch_policy_static_mime_content_with_http_info(static_mime_content_id, static_mime_content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.patch_policy_static_mime_content ...'
      end
      # verify the required parameter 'static_mime_content_id' is set
      if @api_client.config.client_side_validation && static_mime_content_id.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content_id' when calling L7AccessProfilesApi.patch_policy_static_mime_content"
      end
      # verify the required parameter 'static_mime_content' is set
      if @api_client.config.client_side_validation && static_mime_content.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content' when calling L7AccessProfilesApi.patch_policy_static_mime_content"
      end
      # resource path
      local_var_path = '/infra/static-mime-contents/{static-mime-content-id}'.sub('{' + 'static-mime-content-id' + '}', static_mime_content_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_mime_content)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticMimeContent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#patch_policy_static_mime_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read L7 Access Profile entry
    # Read Friewall L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def read_l7_access_entry(l7_access_profile_id, l7_access_entry_id, opts = {})
      data, _status_code, _headers = read_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, opts)
      data
    end

    # Read L7 Access Profile entry
    # Read Friewall L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def read_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: L7AccessProfilesApi.read_l7_access_entry ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling L7AccessProfilesApi.read_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling L7AccessProfilesApi.read_l7_access_entry"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: L7AccessProfilesApi#read_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
