=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SearchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # DSL (Domain Specific Language) search API
    # DSL (Domain Specific Language) search API
    # @param query Search query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SearchResponse]
    def dsl_search(query, opts = {})
      data, _status_code, _headers = dsl_search_with_http_info(query, opts)
      data
    end

    # DSL (Domain Specific Language) search API
    # DSL (Domain Specific Language) search API
    # @param query Search query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SearchResponse, Fixnum, Hash)>] SearchResponse data, response status code and response headers
    def dsl_search_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.dsl_search ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling SearchApi.dsl_search"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SearchApi.dsl_search, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SearchApi.dsl_search, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/search/dsl'

      # query parameters
      query_params = {}
      query_params[:'query'] = query
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#dsl_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API to get the search reconciliation status
    # This API will provide the search reconciliation status 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Reconciliation use case
    # @return [SearchReconcileStatus]
    def get_search_reconcile_status(opts = {})
      data, _status_code, _headers = get_search_reconcile_status_with_http_info(opts)
      data
    end

    # API to get the search reconciliation status
    # This API will provide the search reconciliation status 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Reconciliation use case
    # @return [Array<(SearchReconcileStatus, Fixnum, Hash)>] SearchReconcileStatus data, response status code and response headers
    def get_search_reconcile_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.get_search_reconcile_status ...'
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['COMPLETE_REINDEXING', 'OPENSEARCH_RESTORE', 'PRODUCT_RESTORE', 'PRODUCT_UPGRADE', 'REBALANCE'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of COMPLETE_REINDEXING, OPENSEARCH_RESTORE, PRODUCT_RESTORE, PRODUCT_UPGRADE, REBALANCE'
      end
      # resource path
      local_var_path = '/search/reconcile/status'

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchReconcileStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#get_search_reconcile_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Full text search API
    # Full text search API
    # @param query Search query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SearchResponse]
    def query_search(query, opts = {})
      data, _status_code, _headers = query_search_with_http_info(query, opts)
      data
    end

    # Full text search API
    # Full text search API
    # @param query Search query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SearchResponse, Fixnum, Hash)>] SearchResponse data, response status code and response headers
    def query_search_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.query_search ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling SearchApi.query_search"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SearchApi.query_search, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SearchApi.query_search, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/search/query'

      # query parameters
      query_params = {}
      query_params[:'query'] = query
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#query_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API to reconcile data in the search index
    # This API will sync the data in search index based on the use case like upgrade, restore, etc. 
    # @param action Reconciliation use case
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Override flag (default to true)
    # @option opts [String] :scope Re-indexing scope
    # @return [nil]
    def search_reconcile(action, opts = {})
      search_reconcile_with_http_info(action, opts)
      nil
    end

    # API to reconcile data in the search index
    # This API will sync the data in search index based on the use case like upgrade, restore, etc. 
    # @param action Reconciliation use case
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Override flag
    # @option opts [String] :scope Re-indexing scope
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def search_reconcile_with_http_info(action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.search_reconcile ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SearchApi.search_reconcile"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['COMPLETE_REINDEXING', 'OPENSEARCH_RESTORE', 'PRODUCT_RESTORE', 'PRODUCT_UPGRADE', 'REBALANCE'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of COMPLETE_REINDEXING, OPENSEARCH_RESTORE, PRODUCT_RESTORE, PRODUCT_UPGRADE, REBALANCE"
      end
      # resource path
      local_var_path = '/search/reconcile'

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#search_reconcile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
