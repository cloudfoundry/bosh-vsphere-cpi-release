=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class GeoIPApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Download Latest Geo IP Bundle
    # Using this API, with request parameter download_now - User can request on demand to download latest Geo IP bundle to be used on the edge nodes.  This will try to get latest bundle regardless auto_download is ON or OFF.  If new bundle available, it will download the latest bundle.  If no new bundle, it will indicate in message. check_latest - User can check the latest Geo IP bundle available. 
    # @param action Geo IP Bundle Action
    # @param [Hash] opts the optional parameters
    # @return [GeoIpBundleInfo]
    def geo_ip_bundle_action(action, opts = {})
      data, _status_code, _headers = geo_ip_bundle_action_with_http_info(action, opts)
      data
    end

    # Download Latest Geo IP Bundle
    # Using this API, with request parameter download_now - User can request on demand to download latest Geo IP bundle to be used on the edge nodes.  This will try to get latest bundle regardless auto_download is ON or OFF.  If new bundle available, it will download the latest bundle.  If no new bundle, it will indicate in message. check_latest - User can check the latest Geo IP bundle available. 
    # @param action Geo IP Bundle Action
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpBundleInfo, Fixnum, Hash)>] GeoIpBundleInfo data, response status code and response headers
    def geo_ip_bundle_action_with_http_info(action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoIPApi.geo_ip_bundle_action ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling GeoIPApi.geo_ip_bundle_action"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['download_now', 'check_latest'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of download_now, check_latest"
      end
      # resource path
      local_var_path = '/infra/geo-ip/bundle'

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBundleInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoIPApi#geo_ip_bundle_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects  (default to false)
    # @option opts [Integer] :page_size Maximum number of results to return in this page (default to 500)
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [GeoIpBlockedEventsList]
    def get_geo_ip_blocked_events(opts = {})
      data, _status_code, _headers = get_geo_ip_blocked_events_with_http_info(opts)
      data
    end

    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects 
    # @option opts [Integer] :page_size Maximum number of results to return in this page
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [Array<(GeoIpBlockedEventsList, Fixnum, Hash)>] GeoIpBlockedEventsList data, response status code and response headers
    def get_geo_ip_blocked_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoIPApi.get_geo_ip_blocked_events ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GeoIPApi.get_geo_ip_blocked_events, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GeoIPApi.get_geo_ip_blocked_events, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/geo-ip/blocked-events'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'destination_country_code'] = opts[:'destination_country_code'] if !opts[:'destination_country_code'].nil?
      query_params[:'destination_ip_address'] = opts[:'destination_ip_address'] if !opts[:'destination_ip_address'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'include_all_projects'] = opts[:'include_all_projects'] if !opts[:'include_all_projects'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'rule_id'] = opts[:'rule_id'] if !opts[:'rule_id'].nil?
      query_params[:'source_country_code'] = opts[:'source_country_code'] if !opts[:'source_country_code'].nil?
      query_params[:'source_ip_address'] = opts[:'source_ip_address'] if !opts[:'source_ip_address'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBlockedEventsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoIPApi#get_geo_ip_blocked_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Current Geo IP Bundle Information
    # Get current Geo IP Bundle information that is downloaded in the system. 
    # @param [Hash] opts the optional parameters
    # @return [GeoIpBundleInfo]
    def get_geo_ip_bundle_info(opts = {})
      data, _status_code, _headers = get_geo_ip_bundle_info_with_http_info(opts)
      data
    end

    # Get Current Geo IP Bundle Information
    # Get current Geo IP Bundle information that is downloaded in the system. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpBundleInfo, Fixnum, Hash)>] GeoIpBundleInfo data, response status code and response headers
    def get_geo_ip_bundle_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoIPApi.get_geo_ip_bundle_info ...'
      end
      # resource path
      local_var_path = '/infra/geo-ip/bundle'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBundleInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoIPApi#get_geo_ip_bundle_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [GeoIpLookUp]
    def get_geo_ip_look_up(ip_address, opts = {})
      data, _status_code, _headers = get_geo_ip_look_up_with_http_info(ip_address, opts)
      data
    end

    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpLookUp, Fixnum, Hash)>] GeoIpLookUp data, response status code and response headers
    def get_geo_ip_look_up_with_http_info(ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoIPApi.get_geo_ip_look_up ...'
      end
      # verify the required parameter 'ip_address' is set
      if @api_client.config.client_side_validation && ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address' when calling GeoIPApi.get_geo_ip_look_up"
      end
      # resource path
      local_var_path = '/infra/geo-ip/look-up'

      # query parameters
      query_params = {}
      query_params[:'ip_address'] = ip_address

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpLookUp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoIPApi#get_geo_ip_look_up\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Setting Configuration
    # API to retrieve the current Geo IP Setting Configuration. 
    # @param [Hash] opts the optional parameters
    # @return [GeoIpSetting]
    def get_geo_ip_setting(opts = {})
      data, _status_code, _headers = get_geo_ip_setting_with_http_info(opts)
      data
    end

    # Get Geo IP Setting Configuration
    # API to retrieve the current Geo IP Setting Configuration. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpSetting, Fixnum, Hash)>] GeoIpSetting data, response status code and response headers
    def get_geo_ip_setting_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoIPApi.get_geo_ip_setting ...'
      end
      # resource path
      local_var_path = '/infra/geo-ip/setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpSetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoIPApi#get_geo_ip_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects  (default to false)
    # @option opts [Integer] :page_size Maximum number of results to return in this page (default to 500)
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [GeoIpBlockedEventsList]
    def orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events_with_http_info(org_id, project_id, opts)
      data
    end

    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects 
    # @option opts [Integer] :page_size Maximum number of results to return in this page
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [Array<(GeoIpBlockedEventsList, Fixnum, Hash)>] GeoIpBlockedEventsList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoIPApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GeoIPApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GeoIPApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GeoIPApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GeoIPApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/geo-ip/blocked-events'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'destination_country_code'] = opts[:'destination_country_code'] if !opts[:'destination_country_code'].nil?
      query_params[:'destination_ip_address'] = opts[:'destination_ip_address'] if !opts[:'destination_ip_address'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'include_all_projects'] = opts[:'include_all_projects'] if !opts[:'include_all_projects'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'rule_id'] = opts[:'rule_id'] if !opts[:'rule_id'].nil?
      query_params[:'source_country_code'] = opts[:'source_country_code'] if !opts[:'source_country_code'].nil?
      query_params[:'source_ip_address'] = opts[:'source_ip_address'] if !opts[:'source_ip_address'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBlockedEventsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoIPApi#orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [GeoIpLookUp]
    def orgs_org_id_projects_project_id_infra_get_geo_ip_look_up(org_id, project_id, ip_address, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_geo_ip_look_up_with_http_info(org_id, project_id, ip_address, opts)
      data
    end

    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpLookUp, Fixnum, Hash)>] GeoIpLookUp data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_geo_ip_look_up_with_http_info(org_id, project_id, ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoIPApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GeoIPApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GeoIPApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up"
      end
      # verify the required parameter 'ip_address' is set
      if @api_client.config.client_side_validation && ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address' when calling GeoIPApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/geo-ip/look-up'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ip_address'] = ip_address

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpLookUp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoIPApi#orgs_org_id_projects_project_id_infra_get_geo_ip_look_up\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_geo_ip_setting(geo_ip_setting, opts = {})
      patch_geo_ip_setting_with_http_info(geo_ip_setting, opts)
      nil
    end

    # Patch Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_geo_ip_setting_with_http_info(geo_ip_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoIPApi.patch_geo_ip_setting ...'
      end
      # verify the required parameter 'geo_ip_setting' is set
      if @api_client.config.client_side_validation && geo_ip_setting.nil?
        fail ArgumentError, "Missing the required parameter 'geo_ip_setting' when calling GeoIPApi.patch_geo_ip_setting"
      end
      # resource path
      local_var_path = '/infra/geo-ip/setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(geo_ip_setting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoIPApi#patch_geo_ip_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [GeoIpSetting]
    def update_geo_ip_setting(geo_ip_setting, opts = {})
      data, _status_code, _headers = update_geo_ip_setting_with_http_info(geo_ip_setting, opts)
      data
    end

    # Update Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpSetting, Fixnum, Hash)>] GeoIpSetting data, response status code and response headers
    def update_geo_ip_setting_with_http_info(geo_ip_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoIPApi.update_geo_ip_setting ...'
      end
      # verify the required parameter 'geo_ip_setting' is set
      if @api_client.config.client_side_validation && geo_ip_setting.nil?
        fail ArgumentError, "Missing the required parameter 'geo_ip_setting' when calling GeoIPApi.update_geo_ip_setting"
      end
      # resource path
      local_var_path = '/infra/geo-ip/setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(geo_ip_setting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpSetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoIPApi#update_geo_ip_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
