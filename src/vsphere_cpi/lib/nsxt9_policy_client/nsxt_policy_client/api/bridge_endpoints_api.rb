=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class BridgeEndpointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Tier-1 segment bridge end point statistics using segment ID and profile path.
    # Get detailed information on Tier-1 segment bridge end point statistics using segment ID and profile path. 
    # @param tier_1_id 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [BridgeEndpointStatistics]
    def global_infra_tier1_segment_bridge_endpoint_statistics(tier_1_id, segment_id, bridge_profile_path, opts = {})
      data, _status_code, _headers = global_infra_tier1_segment_bridge_endpoint_statistics_with_http_info(tier_1_id, segment_id, bridge_profile_path, opts)
      data
    end

    # Get Tier-1 segment bridge end point statistics using segment ID and profile path.
    # Get detailed information on Tier-1 segment bridge end point statistics using segment ID and profile path. 
    # @param tier_1_id 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(BridgeEndpointStatistics, Fixnum, Hash)>] BridgeEndpointStatistics data, response status code and response headers
    def global_infra_tier1_segment_bridge_endpoint_statistics_with_http_info(tier_1_id, segment_id, bridge_profile_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeEndpointsApi.global_infra_tier1_segment_bridge_endpoint_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling BridgeEndpointsApi.global_infra_tier1_segment_bridge_endpoint_statistics"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling BridgeEndpointsApi.global_infra_tier1_segment_bridge_endpoint_statistics"
      end
      # verify the required parameter 'bridge_profile_path' is set
      if @api_client.config.client_side_validation && bridge_profile_path.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_profile_path' when calling BridgeEndpointsApi.global_infra_tier1_segment_bridge_endpoint_statistics"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/bep-statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bridge_profile_path'] = bridge_profile_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpointStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeEndpointsApi#global_infra_tier1_segment_bridge_endpoint_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 segment bridge end point status using segment ID and profile path.
    # Get detailed information on Tier-1 segment bridge end point status using segment ID and profile path. 
    # @param tier_1_id 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [BridgeEndpointStatus]
    def global_infra_tier1_segment_bridge_endpoint_status(tier_1_id, segment_id, bridge_profile_path, opts = {})
      data, _status_code, _headers = global_infra_tier1_segment_bridge_endpoint_status_with_http_info(tier_1_id, segment_id, bridge_profile_path, opts)
      data
    end

    # Get Tier-1 segment bridge end point status using segment ID and profile path.
    # Get detailed information on Tier-1 segment bridge end point status using segment ID and profile path. 
    # @param tier_1_id 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(BridgeEndpointStatus, Fixnum, Hash)>] BridgeEndpointStatus data, response status code and response headers
    def global_infra_tier1_segment_bridge_endpoint_status_with_http_info(tier_1_id, segment_id, bridge_profile_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeEndpointsApi.global_infra_tier1_segment_bridge_endpoint_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling BridgeEndpointsApi.global_infra_tier1_segment_bridge_endpoint_status"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling BridgeEndpointsApi.global_infra_tier1_segment_bridge_endpoint_status"
      end
      # verify the required parameter 'bridge_profile_path' is set
      if @api_client.config.client_side_validation && bridge_profile_path.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_profile_path' when calling BridgeEndpointsApi.global_infra_tier1_segment_bridge_endpoint_status"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/bep-status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bridge_profile_path'] = bridge_profile_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpointStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeEndpointsApi#global_infra_tier1_segment_bridge_endpoint_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment bridge end point statistics using segment ID and profile path.
    # Get detailed information on infra segment bridge end point statistics using segment ID and profile path. 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [BridgeEndpointStatistics]
    def infra_segment_bridge_endpoint_statistics(segment_id, bridge_profile_path, opts = {})
      data, _status_code, _headers = infra_segment_bridge_endpoint_statistics_with_http_info(segment_id, bridge_profile_path, opts)
      data
    end

    # Get infra segment bridge end point statistics using segment ID and profile path.
    # Get detailed information on infra segment bridge end point statistics using segment ID and profile path. 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(BridgeEndpointStatistics, Fixnum, Hash)>] BridgeEndpointStatistics data, response status code and response headers
    def infra_segment_bridge_endpoint_statistics_with_http_info(segment_id, bridge_profile_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeEndpointsApi.infra_segment_bridge_endpoint_statistics ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling BridgeEndpointsApi.infra_segment_bridge_endpoint_statistics"
      end
      # verify the required parameter 'bridge_profile_path' is set
      if @api_client.config.client_side_validation && bridge_profile_path.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_profile_path' when calling BridgeEndpointsApi.infra_segment_bridge_endpoint_statistics"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/bep-statistics'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bridge_profile_path'] = bridge_profile_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpointStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeEndpointsApi#infra_segment_bridge_endpoint_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 segment bridge end point status using segment ID and profile path.
    # Get detailed information on Tier-1 segment bridge end point status using segment ID and profile path. 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [BridgeEndpointStatus]
    def infra_segment_bridge_endpoint_status(segment_id, bridge_profile_path, opts = {})
      data, _status_code, _headers = infra_segment_bridge_endpoint_status_with_http_info(segment_id, bridge_profile_path, opts)
      data
    end

    # Get Tier-1 segment bridge end point status using segment ID and profile path.
    # Get detailed information on Tier-1 segment bridge end point status using segment ID and profile path. 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(BridgeEndpointStatus, Fixnum, Hash)>] BridgeEndpointStatus data, response status code and response headers
    def infra_segment_bridge_endpoint_status_with_http_info(segment_id, bridge_profile_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeEndpointsApi.infra_segment_bridge_endpoint_status ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling BridgeEndpointsApi.infra_segment_bridge_endpoint_status"
      end
      # verify the required parameter 'bridge_profile_path' is set
      if @api_client.config.client_side_validation && bridge_profile_path.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_profile_path' when calling BridgeEndpointsApi.infra_segment_bridge_endpoint_status"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/bep-status'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bridge_profile_path'] = bridge_profile_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpointStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeEndpointsApi#infra_segment_bridge_endpoint_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 segment bridge end point statistics using segment ID and profile path.
    # Get detailed information on Tier-1 segment bridge end point statistics using segment ID and profile path. 
    # @param tier_1_id 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [BridgeEndpointStatistics]
    def tier1_segment_bridge_endpoint_statistics(tier_1_id, segment_id, bridge_profile_path, opts = {})
      data, _status_code, _headers = tier1_segment_bridge_endpoint_statistics_with_http_info(tier_1_id, segment_id, bridge_profile_path, opts)
      data
    end

    # Get Tier-1 segment bridge end point statistics using segment ID and profile path.
    # Get detailed information on Tier-1 segment bridge end point statistics using segment ID and profile path. 
    # @param tier_1_id 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(BridgeEndpointStatistics, Fixnum, Hash)>] BridgeEndpointStatistics data, response status code and response headers
    def tier1_segment_bridge_endpoint_statistics_with_http_info(tier_1_id, segment_id, bridge_profile_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeEndpointsApi.tier1_segment_bridge_endpoint_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling BridgeEndpointsApi.tier1_segment_bridge_endpoint_statistics"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling BridgeEndpointsApi.tier1_segment_bridge_endpoint_statistics"
      end
      # verify the required parameter 'bridge_profile_path' is set
      if @api_client.config.client_side_validation && bridge_profile_path.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_profile_path' when calling BridgeEndpointsApi.tier1_segment_bridge_endpoint_statistics"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/bep-statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bridge_profile_path'] = bridge_profile_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpointStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeEndpointsApi#tier1_segment_bridge_endpoint_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 segment bridge end point status using segment ID and profile path.
    # Get detailed information on Tier-1 segment bridge end point status using segment ID and profile path. 
    # @param tier_1_id 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [BridgeEndpointStatus]
    def tier1_segment_bridge_endpoint_status(tier_1_id, segment_id, bridge_profile_path, opts = {})
      data, _status_code, _headers = tier1_segment_bridge_endpoint_status_with_http_info(tier_1_id, segment_id, bridge_profile_path, opts)
      data
    end

    # Get Tier-1 segment bridge end point status using segment ID and profile path.
    # Get detailed information on Tier-1 segment bridge end point status using segment ID and profile path. 
    # @param tier_1_id 
    # @param segment_id 
    # @param bridge_profile_path Bridge profile path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(BridgeEndpointStatus, Fixnum, Hash)>] BridgeEndpointStatus data, response status code and response headers
    def tier1_segment_bridge_endpoint_status_with_http_info(tier_1_id, segment_id, bridge_profile_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeEndpointsApi.tier1_segment_bridge_endpoint_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling BridgeEndpointsApi.tier1_segment_bridge_endpoint_status"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling BridgeEndpointsApi.tier1_segment_bridge_endpoint_status"
      end
      # verify the required parameter 'bridge_profile_path' is set
      if @api_client.config.client_side_validation && bridge_profile_path.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_profile_path' when calling BridgeEndpointsApi.tier1_segment_bridge_endpoint_status"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/bep-status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bridge_profile_path'] = bridge_profile_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpointStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeEndpointsApi#tier1_segment_bridge_endpoint_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
