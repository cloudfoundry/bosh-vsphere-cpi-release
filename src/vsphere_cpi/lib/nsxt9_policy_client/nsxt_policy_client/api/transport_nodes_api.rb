=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class TransportNodesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update a Host Transport Node
    # Transport nodes are hypervisor hosts that will participate in an NSX-T overlay. For a hypervisor host, this means that it hosts VMs that will communicate over NSX-T logical switches.  This API creates transport node for a host node (hypervisor) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the <b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b> command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'. If the key is not present then generate a new key by running the following command and follow the instructions.  <b>ssh-keygen -t rsa</b>  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default 'id_rsa.pub'.  <b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b>  Additional documentation on creating a transport node can be found in the NSX-T Installation Guide.  In order for the transport node to forward packets, the host_switch_spec property must be specified.  Host switches (called bridges in OVS on KVM hypervisors) are the individual switches within the host virtual switch. Virtual machines are connected to the host switches.  When creating a transport node, you need to specify if the host switches are already manually preconfigured on the node, or if NSX should create and manage the host switches. You specify this choice by the type of host switches you pass in the host_switch_spec property of the TransportNode request payload.  For a KVM host, you can preconfigure the host switch, or you can have NSX Manager perform the configuration. For an ESXi host NSX Manager always configures the host switch.  To preconfigure the host switches on a KVM host, pass an array of PreconfiguredHostSwitchSpec objects that describes those host switches. In the current NSX-T release, only one prefonfigured host switch can be specified.  See the PreconfiguredHostSwitchSpec schema definition for documentation on the properties that must be provided. Preconfigured host switches are only supported on KVM hosts, not on ESXi hosts.  To allow NSX to manage the host switch configuration on KVM hosts, ESXi hosts, pass an array of StandardHostSwitchSpec objects in the host_switch_spec property, and NSX will automatically create host switches with the properties you provide. In the current NSX-T release, up to 16 host switches can be automatically managed. See the StandardHostSwitchSpec schema definition for documentation on the properties that must be provided.  The request should provide node_deployement_info. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param host_transport_node 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :esx_mgmt_if_migration_dest The network ids to which the ESX vmk interfaces will be migrated
    # @option opts [String] :if_id The ESX vmk interfaces to migrate
    # @option opts [BOOLEAN] :override_nsx_ownership Override NSX Ownership (default to false)
    # @option opts [String] :ping_ip IP Addresses to ping right after ESX vmk interfaces were migrated.
    # @option opts [BOOLEAN] :skip_validation Whether to skip front-end validation for vmk/vnic/pnic migration (default to false)
    # @option opts [String] :vnic The ESX vmk interfaces and/or VM NIC to migrate
    # @option opts [String] :vnic_migration_dest The migration destinations of ESX vmk interfaces and/or VM NIC
    # @return [HostTransportNode]
    def create_or_update_host_transport_node(site_id, enforcementpoint_id, host_transport_node_id, host_transport_node, opts = {})
      data, _status_code, _headers = create_or_update_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, host_transport_node, opts)
      data
    end

    # Create or update a Host Transport Node
    # Transport nodes are hypervisor hosts that will participate in an NSX-T overlay. For a hypervisor host, this means that it hosts VMs that will communicate over NSX-T logical switches.  This API creates transport node for a host node (hypervisor) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the &lt;b&gt;openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout&lt;/b&gt; command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at &#39;/etc/ssh/ssh_host_rsa_key.pub&#39;. If the key is not present then generate a new key by running the following command and follow the instructions.  &lt;b&gt;ssh-keygen -t rsa&lt;/b&gt;  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default &#39;id_rsa.pub&#39;.  &lt;b&gt;awk &#39;{print $2}&#39; id_rsa.pub | base64 -d | sha256sum -b | sed &#39;s/ .*$//&#39; | xxd -r -p | base64&lt;/b&gt;  Additional documentation on creating a transport node can be found in the NSX-T Installation Guide.  In order for the transport node to forward packets, the host_switch_spec property must be specified.  Host switches (called bridges in OVS on KVM hypervisors) are the individual switches within the host virtual switch. Virtual machines are connected to the host switches.  When creating a transport node, you need to specify if the host switches are already manually preconfigured on the node, or if NSX should create and manage the host switches. You specify this choice by the type of host switches you pass in the host_switch_spec property of the TransportNode request payload.  For a KVM host, you can preconfigure the host switch, or you can have NSX Manager perform the configuration. For an ESXi host NSX Manager always configures the host switch.  To preconfigure the host switches on a KVM host, pass an array of PreconfiguredHostSwitchSpec objects that describes those host switches. In the current NSX-T release, only one prefonfigured host switch can be specified.  See the PreconfiguredHostSwitchSpec schema definition for documentation on the properties that must be provided. Preconfigured host switches are only supported on KVM hosts, not on ESXi hosts.  To allow NSX to manage the host switch configuration on KVM hosts, ESXi hosts, pass an array of StandardHostSwitchSpec objects in the host_switch_spec property, and NSX will automatically create host switches with the properties you provide. In the current NSX-T release, up to 16 host switches can be automatically managed. See the StandardHostSwitchSpec schema definition for documentation on the properties that must be provided.  The request should provide node_deployement_info. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param host_transport_node 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :esx_mgmt_if_migration_dest The network ids to which the ESX vmk interfaces will be migrated
    # @option opts [String] :if_id The ESX vmk interfaces to migrate
    # @option opts [BOOLEAN] :override_nsx_ownership Override NSX Ownership
    # @option opts [String] :ping_ip IP Addresses to ping right after ESX vmk interfaces were migrated.
    # @option opts [BOOLEAN] :skip_validation Whether to skip front-end validation for vmk/vnic/pnic migration
    # @option opts [String] :vnic The ESX vmk interfaces and/or VM NIC to migrate
    # @option opts [String] :vnic_migration_dest The migration destinations of ESX vmk interfaces and/or VM NIC
    # @return [Array<(HostTransportNode, Fixnum, Hash)>] HostTransportNode data, response status code and response headers
    def create_or_update_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, host_transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.create_or_update_host_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.create_or_update_host_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.create_or_update_host_transport_node"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.create_or_update_host_transport_node"
      end
      # verify the required parameter 'host_transport_node' is set
      if @api_client.config.client_side_validation && host_transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node' when calling TransportNodesApi.create_or_update_host_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'esx_mgmt_if_migration_dest'] = opts[:'esx_mgmt_if_migration_dest'] if !opts[:'esx_mgmt_if_migration_dest'].nil?
      query_params[:'if_id'] = opts[:'if_id'] if !opts[:'if_id'].nil?
      query_params[:'override_nsx_ownership'] = opts[:'override_nsx_ownership'] if !opts[:'override_nsx_ownership'].nil?
      query_params[:'ping_ip'] = opts[:'ping_ip'] if !opts[:'ping_ip'].nil?
      query_params[:'skip_validation'] = opts[:'skip_validation'] if !opts[:'skip_validation'].nil?
      query_params[:'vnic'] = opts[:'vnic'] if !opts[:'vnic'].nil?
      query_params[:'vnic_migration_dest'] = opts[:'vnic_migration_dest'] if !opts[:'vnic_migration_dest'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(host_transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HostTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#create_or_update_host_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Transport Node
    # Deletes the specified transport node. Query param force can be used to force delete the host nodes. Force delete is not supported if transport node is part of a cluster on which Transport node profile is applied.  It also removes the specified host node from system. If unprepare_host option is set to false, then host will be deleted without uninstalling the NSX components from the host. If transport node delete is called with query param force not being set or set to false and uninstall of NSX components in the host fails, TransportNodeState object will be retained. If transport node delete is called with query param force set to true and uninstall of NSX components in the host fails, TransportNodeState object will be deleted. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @option opts [BOOLEAN] :unprepare_host Uninstall NSX components from host while deleting (default to true)
    # @return [nil]
    def delete_host_transport_node(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      delete_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts)
      nil
    end

    # Delete a Transport Node
    # Deletes the specified transport node. Query param force can be used to force delete the host nodes. Force delete is not supported if transport node is part of a cluster on which Transport node profile is applied.  It also removes the specified host node from system. If unprepare_host option is set to false, then host will be deleted without uninstalling the NSX components from the host. If transport node delete is called with query param force not being set or set to false and uninstall of NSX components in the host fails, TransportNodeState object will be retained. If transport node delete is called with query param force set to true and uninstall of NSX components in the host fails, TransportNodeState object will be deleted. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @option opts [BOOLEAN] :unprepare_host Uninstall NSX components from host while deleting
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.delete_host_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.delete_host_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.delete_host_transport_node"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.delete_host_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'unprepare_host'] = opts[:'unprepare_host'] if !opts[:'unprepare_host'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#delete_host_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the module details of a host transport node 
    # Get the module details of a host transport node 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [SoftwareModuleResult]
    def get_fabric_node_modules_of_host_transport_node(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      data, _status_code, _headers = get_fabric_node_modules_of_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts)
      data
    end

    # Get the module details of a host transport node 
    # Get the module details of a host transport node 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SoftwareModuleResult, Fixnum, Hash)>] SoftwareModuleResult data, response status code and response headers
    def get_fabric_node_modules_of_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.get_fabric_node_modules_of_host_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.get_fabric_node_modules_of_host_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.get_fabric_node_modules_of_host_transport_node"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.get_fabric_node_modules_of_host_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}/modules'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SoftwareModuleResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#get_fabric_node_modules_of_host_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Host Transport Node
    # Returns information about a specified transport node.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [HostTransportNode]
    def get_host_transport_node(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      data, _status_code, _headers = get_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts)
      data
    end

    # Get a Host Transport Node
    # Returns information about a specified transport node.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(HostTransportNode, Fixnum, Hash)>] HostTransportNode data, response status code and response headers
    def get_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.get_host_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.get_host_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.get_host_transport_node"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.get_host_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HostTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#get_host_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Host Transport Node's State
    # Returns information about the current state of the transport node configuration and information about the associated hostswitch. Change introduced in 4.1.2 for ESX Transport node - The vib details will not be retrieved in every state API call. It will be retrieved by periodical polling on the host. Therefore the nsx vib version mismatch or nsx vib absence will be reported by this API only after subsequent polling takes place. Currently, the poll frequency is 10 minutes. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeState]
    def get_host_transport_node_state(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      data, _status_code, _headers = get_host_transport_node_state_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts)
      data
    end

    # Get a Host Transport Node&#39;s State
    # Returns information about the current state of the transport node configuration and information about the associated hostswitch. Change introduced in 4.1.2 for ESX Transport node - The vib details will not be retrieved in every state API call. It will be retrieved by periodical polling on the host. Therefore the nsx vib version mismatch or nsx vib absence will be reported by this API only after subsequent polling takes place. Currently, the poll frequency is 10 minutes. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeState, Fixnum, Hash)>] TransportNodeState data, response status code and response headers
    def get_host_transport_node_state_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.get_host_transport_node_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.get_host_transport_node_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.get_host_transport_node_state"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.get_host_transport_node_state"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#get_host_transport_node_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the counter values for realtime datapath statistics.
    # Get the counter values for realtime datapath statistics. Support multiple types in one query.  Query types should be declared inside query parameters. By default the query type is packet_stats. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type type
    # @return [ObservabilityCounterDebugQueryResult]
    def get_observability_debug_statics(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      data, _status_code, _headers = get_observability_debug_statics_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts)
      data
    end

    # Get the counter values for realtime datapath statistics.
    # Get the counter values for realtime datapath statistics. Support multiple types in one query.  Query types should be declared inside query parameters. By default the query type is packet_stats. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type type
    # @return [Array<(ObservabilityCounterDebugQueryResult, Fixnum, Hash)>] ObservabilityCounterDebugQueryResult data, response status code and response headers
    def get_observability_debug_statics_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.get_observability_debug_statics ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.get_observability_debug_statics"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.get_observability_debug_statics"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.get_observability_debug_statics"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}/statistics/debug'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ObservabilityCounterDebugQueryResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#get_observability_debug_statics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the counter values for cached datapath statistics.
    # Get the counter values for cached datapath statistics. Support multiple types in one query.  Query types should be declared inside query parameters. By default the query type is packet_stats. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type type
    # @return [ObservabilityCounterMonitorQueryResult]
    def get_observability_monitor_statics(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      data, _status_code, _headers = get_observability_monitor_statics_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts)
      data
    end

    # Get the counter values for cached datapath statistics.
    # Get the counter values for cached datapath statistics. Support multiple types in one query.  Query types should be declared inside query parameters. By default the query type is packet_stats. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type type
    # @return [Array<(ObservabilityCounterMonitorQueryResult, Fixnum, Hash)>] ObservabilityCounterMonitorQueryResult data, response status code and response headers
    def get_observability_monitor_statics_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.get_observability_monitor_statics ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.get_observability_monitor_statics"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.get_observability_monitor_statics"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.get_observability_monitor_statics"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}/statistics/monitor'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ObservabilityCounterMonitorQueryResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#get_observability_monitor_statics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Host Transport Nodes
    # Returns information about all host transport nodes along with underlying host details. A transport node is a host that contains hostswitches. A hostswitch can have virtual machines connected to them.  Because each transport node has hostswitches, transport nodes can also have virtual tunnel endpoints, which means that they can be part of the overlay. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :discovered_node_id discovered node id
    # @option opts [BOOLEAN] :in_maintenance_mode maintenance mode flag
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_ip Transport node IP address
    # @option opts [String] :node_types a list of node types separated by comma or a single type
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_zone_path Transport zone path
    # @return [HostTransportNodeListResult]
    def list_host_transport_nodes(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_host_transport_nodes_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List Host Transport Nodes
    # Returns information about all host transport nodes along with underlying host details. A transport node is a host that contains hostswitches. A hostswitch can have virtual machines connected to them.  Because each transport node has hostswitches, transport nodes can also have virtual tunnel endpoints, which means that they can be part of the overlay. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :discovered_node_id discovered node id
    # @option opts [BOOLEAN] :in_maintenance_mode maintenance mode flag
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_ip Transport node IP address
    # @option opts [String] :node_types a list of node types separated by comma or a single type
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_zone_path Transport zone path
    # @return [Array<(HostTransportNodeListResult, Fixnum, Hash)>] HostTransportNodeListResult data, response status code and response headers
    def list_host_transport_nodes_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.list_host_transport_nodes ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.list_host_transport_nodes"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.list_host_transport_nodes"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransportNodesApi.list_host_transport_nodes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransportNodesApi.list_host_transport_nodes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'discovered_node_id'] = opts[:'discovered_node_id'] if !opts[:'discovered_node_id'].nil?
      query_params[:'in_maintenance_mode'] = opts[:'in_maintenance_mode'] if !opts[:'in_maintenance_mode'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'node_ip'] = opts[:'node_ip'] if !opts[:'node_ip'].nil?
      query_params[:'node_types'] = opts[:'node_types'] if !opts[:'node_types'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'transport_zone_path'] = opts[:'transport_zone_path'] if !opts[:'transport_zone_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HostTransportNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#list_host_transport_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List transport nodes by realized state
    # Returns a list of transport node states that have realized state as provided as query parameter. If this API is called multiple times in parallel then it will fail with error indicating that another request is already in progress. In such case, try the API on another NSX manager instance (if exists) or try again after some time. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mm_state maintenance mode state
    # @option opts [String] :status Realized state of transport nodes
    # @option opts [String] :vtep_ip Virtual tunnel endpoint ip address of transport node
    # @return [TransportNodeStateListResult]
    def list_host_transport_nodes_by_state(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_host_transport_nodes_by_state_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List transport nodes by realized state
    # Returns a list of transport node states that have realized state as provided as query parameter. If this API is called multiple times in parallel then it will fail with error indicating that another request is already in progress. In such case, try the API on another NSX manager instance (if exists) or try again after some time. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mm_state maintenance mode state
    # @option opts [String] :status Realized state of transport nodes
    # @option opts [String] :vtep_ip Virtual tunnel endpoint ip address of transport node
    # @return [Array<(TransportNodeStateListResult, Fixnum, Hash)>] TransportNodeStateListResult data, response status code and response headers
    def list_host_transport_nodes_by_state_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.list_host_transport_nodes_by_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.list_host_transport_nodes_by_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.list_host_transport_nodes_by_state"
      end
      if @api_client.config.client_side_validation && opts[:'mm_state'] && !['ENTERING', 'ENABLED', 'EXITING', 'DISABLED'].include?(opts[:'mm_state'])
        fail ArgumentError, 'invalid value for "mm_state", must be one of ENTERING, ENABLED, EXITING, DISABLED'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['PENDING', 'IN_PROGRESS', 'SUCCESS', 'PARTIAL_SUCCESS', 'FAILED', 'ORPHANED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDING, IN_PROGRESS, SUCCESS, PARTIAL_SUCCESS, FAILED, ORPHANED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'mm_state'] = opts[:'mm_state'] if !opts[:'mm_state'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'vtep_ip'] = opts[:'vtep_ip'] if !opts[:'vtep_ip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#list_host_transport_nodes_by_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all TransportNode VTEP actions' status
    # List all VTEP actions' status for a particular TransportNode. If some action status is missing in the response, that indicates the action has completed successfully. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeVtepActionsStatusListResult]
    def list_transport_node_vtep_actions_status(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      data, _status_code, _headers = list_transport_node_vtep_actions_status_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts)
      data
    end

    # List all TransportNode VTEP actions&#39; status
    # List all VTEP actions&#39; status for a particular TransportNode. If some action status is missing in the response, that indicates the action has completed successfully. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeVtepActionsStatusListResult, Fixnum, Hash)>] TransportNodeVtepActionsStatusListResult data, response status code and response headers
    def list_transport_node_vtep_actions_status_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.list_transport_node_vtep_actions_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.list_transport_node_vtep_actions_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.list_transport_node_vtep_actions_status"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.list_transport_node_vtep_actions_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}/vteps/actions/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeVtepActionsStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#list_transport_node_vtep_actions_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch Discovered VIF State on given TransportNode
    # For the given TransportNode, fetch all the VIF info from VC and return the corresponding state. Only host switch configured for security will be considered. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :host_switch_id VDS identifier
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :segment_id Segment identifier
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DiscoveredVifStateListResult]
    def list_vds_vifs_on_transport_node(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      data, _status_code, _headers = list_vds_vifs_on_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts)
      data
    end

    # Fetch Discovered VIF State on given TransportNode
    # For the given TransportNode, fetch all the VIF info from VC and return the corresponding state. Only host switch configured for security will be considered. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :host_switch_id VDS identifier
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :segment_id Segment identifier
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DiscoveredVifStateListResult, Fixnum, Hash)>] DiscoveredVifStateListResult data, response status code and response headers
    def list_vds_vifs_on_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.list_vds_vifs_on_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.list_vds_vifs_on_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.list_vds_vifs_on_transport_node"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.list_vds_vifs_on_transport_node"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransportNodesApi.list_vds_vifs_on_transport_node, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransportNodesApi.list_vds_vifs_on_transport_node, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}/discovered-vifs'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'host_switch_id'] = opts[:'host_switch_id'] if !opts[:'host_switch_id'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'segment_id'] = opts[:'segment_id'] if !opts[:'segment_id'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscoveredVifStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#list_vds_vifs_on_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Host Transport Node
    # Transport nodes are hypervisor hosts that will participate in an NSX-T overlay. For a hypervisor host, this means that it hosts VMs that will communicate over NSX-T logical switches.  This API creates transport node for a host node (hypervisor) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the <b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b> command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'. If the key is not present then generate a new key by running the following command and follow the instructions.  <b>ssh-keygen -t rsa</b>  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default 'id_rsa.pub'.  <b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b>  Additional documentation on creating a transport node can be found in the NSX-T Installation Guide.  In order for the transport node to forward packets, the host_switch_spec property must be specified.  Host switches (called bridges in OVS on KVM hypervisors) are the individual switches within the host virtual switch. Virtual machines are connected to the host switches.  When creating a transport node, you need to specify if the host switches are already manually preconfigured on the node, or if NSX should create and manage the host switches. You specify this choice by the type of host switches you pass in the host_switch_spec property of the TransportNode request payload.  For a KVM host, you can preconfigure the host switch, or you can have NSX Manager perform the configuration. For an ESXi host NSX Manager always configures the host switch.  To preconfigure the host switches on a KVM host, pass an array of PreconfiguredHostSwitchSpec objects that describes those host switches. In the current NSX-T release, only one prefonfigured host switch can be specified.  See the PreconfiguredHostSwitchSpec schema definition for documentation on the properties that must be provided. Preconfigured host switches are only supported on KVM hosts, not on ESXi hosts.  To allow NSX to manage the host switch configuration on KVM hosts, ESXi hosts, pass an array of StandardHostSwitchSpec objects in the host_switch_spec property, and NSX will automatically create host switches with the properties you provide. In the current NSX-T release, up to 16 host switches can be automatically managed. See the StandardHostSwitchSpec schema definition for documentation on the properties that must be provided.  The request should provide node_deployement_info. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param host_transport_node 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :esx_mgmt_if_migration_dest The network ids to which the ESX vmk interfaces will be migrated
    # @option opts [String] :if_id The ESX vmk interfaces to migrate
    # @option opts [BOOLEAN] :override_nsx_ownership Override NSX Ownership (default to false)
    # @option opts [String] :ping_ip IP Addresses to ping right after ESX vmk interfaces were migrated.
    # @option opts [BOOLEAN] :skip_validation Whether to skip front-end validation for vmk/vnic/pnic migration (default to false)
    # @option opts [String] :vnic The ESX vmk interfaces and/or VM NIC to migrate
    # @option opts [String] :vnic_migration_dest The migration destinations of ESX vmk interfaces and/or VM NIC
    # @return [nil]
    def patch_host_transport_node(site_id, enforcementpoint_id, host_transport_node_id, host_transport_node, opts = {})
      patch_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, host_transport_node, opts)
      nil
    end

    # Patch a Host Transport Node
    # Transport nodes are hypervisor hosts that will participate in an NSX-T overlay. For a hypervisor host, this means that it hosts VMs that will communicate over NSX-T logical switches.  This API creates transport node for a host node (hypervisor) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the &lt;b&gt;openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout&lt;/b&gt; command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at &#39;/etc/ssh/ssh_host_rsa_key.pub&#39;. If the key is not present then generate a new key by running the following command and follow the instructions.  &lt;b&gt;ssh-keygen -t rsa&lt;/b&gt;  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default &#39;id_rsa.pub&#39;.  &lt;b&gt;awk &#39;{print $2}&#39; id_rsa.pub | base64 -d | sha256sum -b | sed &#39;s/ .*$//&#39; | xxd -r -p | base64&lt;/b&gt;  Additional documentation on creating a transport node can be found in the NSX-T Installation Guide.  In order for the transport node to forward packets, the host_switch_spec property must be specified.  Host switches (called bridges in OVS on KVM hypervisors) are the individual switches within the host virtual switch. Virtual machines are connected to the host switches.  When creating a transport node, you need to specify if the host switches are already manually preconfigured on the node, or if NSX should create and manage the host switches. You specify this choice by the type of host switches you pass in the host_switch_spec property of the TransportNode request payload.  For a KVM host, you can preconfigure the host switch, or you can have NSX Manager perform the configuration. For an ESXi host NSX Manager always configures the host switch.  To preconfigure the host switches on a KVM host, pass an array of PreconfiguredHostSwitchSpec objects that describes those host switches. In the current NSX-T release, only one prefonfigured host switch can be specified.  See the PreconfiguredHostSwitchSpec schema definition for documentation on the properties that must be provided. Preconfigured host switches are only supported on KVM hosts, not on ESXi hosts.  To allow NSX to manage the host switch configuration on KVM hosts, ESXi hosts, pass an array of StandardHostSwitchSpec objects in the host_switch_spec property, and NSX will automatically create host switches with the properties you provide. In the current NSX-T release, up to 16 host switches can be automatically managed. See the StandardHostSwitchSpec schema definition for documentation on the properties that must be provided.  The request should provide node_deployement_info. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param host_transport_node 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :esx_mgmt_if_migration_dest The network ids to which the ESX vmk interfaces will be migrated
    # @option opts [String] :if_id The ESX vmk interfaces to migrate
    # @option opts [BOOLEAN] :override_nsx_ownership Override NSX Ownership
    # @option opts [String] :ping_ip IP Addresses to ping right after ESX vmk interfaces were migrated.
    # @option opts [BOOLEAN] :skip_validation Whether to skip front-end validation for vmk/vnic/pnic migration
    # @option opts [String] :vnic The ESX vmk interfaces and/or VM NIC to migrate
    # @option opts [String] :vnic_migration_dest The migration destinations of ESX vmk interfaces and/or VM NIC
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, host_transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.patch_host_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.patch_host_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.patch_host_transport_node"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.patch_host_transport_node"
      end
      # verify the required parameter 'host_transport_node' is set
      if @api_client.config.client_side_validation && host_transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node' when calling TransportNodesApi.patch_host_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'esx_mgmt_if_migration_dest'] = opts[:'esx_mgmt_if_migration_dest'] if !opts[:'esx_mgmt_if_migration_dest'].nil?
      query_params[:'if_id'] = opts[:'if_id'] if !opts[:'if_id'].nil?
      query_params[:'override_nsx_ownership'] = opts[:'override_nsx_ownership'] if !opts[:'override_nsx_ownership'].nil?
      query_params[:'ping_ip'] = opts[:'ping_ip'] if !opts[:'ping_ip'].nil?
      query_params[:'skip_validation'] = opts[:'skip_validation'] if !opts[:'skip_validation'].nil?
      query_params[:'vnic'] = opts[:'vnic'] if !opts[:'vnic'].nil?
      query_params[:'vnic_migration_dest'] = opts[:'vnic_migration_dest'] if !opts[:'vnic_migration_dest'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(host_transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#patch_host_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Apply cluster level Transport Node Profile on overridden host
    # A host can be overridden to have different configuration than Transport Node Profile(TNP) on cluster. This action will restore such overridden host back to cluster level TNP.  This API can be used in other case. When TNP is applied to a cluster, if any validation fails (e.g. VMs running on host) then existing transport node (TN) is not updated. In that case after the issue is resolved manually (e.g. VMs powered off), you can call this API to update TN as per cluster level TNP. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def restore_parent_cluster_configuration_on_host_transport_node(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      restore_parent_cluster_configuration_on_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts)
      nil
    end

    # Apply cluster level Transport Node Profile on overridden host
    # A host can be overridden to have different configuration than Transport Node Profile(TNP) on cluster. This action will restore such overridden host back to cluster level TNP.  This API can be used in other case. When TNP is applied to a cluster, if any validation fails (e.g. VMs running on host) then existing transport node (TN) is not updated. In that case after the issue is resolved manually (e.g. VMs powered off), you can call this API to update TN as per cluster level TNP. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def restore_parent_cluster_configuration_on_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.restore_parent_cluster_configuration_on_host_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.restore_parent_cluster_configuration_on_host_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.restore_parent_cluster_configuration_on_host_transport_node"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.restore_parent_cluster_configuration_on_host_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}?action=restore_cluster_config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#restore_parent_cluster_configuration_on_host_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resync a Host Transport Node
    # Resync the TransportNode configuration on a host. It is similar to updating the TransportNode with existing configuration, but force synce these configurations to the host (no backend optimizations). 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resync_host_transport_node(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      resync_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts)
      nil
    end

    # Resync a Host Transport Node
    # Resync the TransportNode configuration on a host. It is similar to updating the TransportNode with existing configuration, but force synce these configurations to the host (no backend optimizations). 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def resync_host_transport_node_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.resync_host_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.resync_host_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.resync_host_transport_node"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.resync_host_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}?action=resync_host_config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#resync_host_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit a new TransportNode VTEP action
    # Submit a new VTEP action for a particular TransportNode. The status of submitted actions could be retrieved using the ListTransportNodeVtepActionsStatus API. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param transport_node_vtep_action 
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeVtepActionReference]
    def submit_transport_node_vtep_action(site_id, enforcementpoint_id, host_transport_node_id, transport_node_vtep_action, opts = {})
      data, _status_code, _headers = submit_transport_node_vtep_action_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, transport_node_vtep_action, opts)
      data
    end

    # Submit a new TransportNode VTEP action
    # Submit a new VTEP action for a particular TransportNode. The status of submitted actions could be retrieved using the ListTransportNodeVtepActionsStatus API. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param transport_node_vtep_action 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeVtepActionReference, Fixnum, Hash)>] TransportNodeVtepActionReference data, response status code and response headers
    def submit_transport_node_vtep_action_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, transport_node_vtep_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.submit_transport_node_vtep_action ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.submit_transport_node_vtep_action"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.submit_transport_node_vtep_action"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.submit_transport_node_vtep_action"
      end
      # verify the required parameter 'transport_node_vtep_action' is set
      if @api_client.config.client_side_validation && transport_node_vtep_action.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_vtep_action' when calling TransportNodesApi.submit_transport_node_vtep_action"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}/vteps/actions'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transport_node_vtep_action)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeVtepActionReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#submit_transport_node_vtep_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update transport node maintenance mode
    # Put transport node into maintenance mode or exit from maintenance mode. When HostTransportNode is in maintenance mode no configuration changes are allowed
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @return [nil]
    def update_policy_host_transport_node_maintenance_mode(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      update_policy_host_transport_node_maintenance_mode_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts)
      nil
    end

    # Update transport node maintenance mode
    # Put transport node into maintenance mode or exit from maintenance mode. When HostTransportNode is in maintenance mode no configuration changes are allowed
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_policy_host_transport_node_maintenance_mode_with_http_info(site_id, enforcementpoint_id, host_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodesApi.update_policy_host_transport_node_maintenance_mode ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodesApi.update_policy_host_transport_node_maintenance_mode"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodesApi.update_policy_host_transport_node_maintenance_mode"
      end
      # verify the required parameter 'host_transport_node_id' is set
      if @api_client.config.client_side_validation && host_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_id' when calling TransportNodesApi.update_policy_host_transport_node_maintenance_mode"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['enter_maintenance_mode', 'forced_enter_maintenance_mode', 'exit_maintenance_mode'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of enter_maintenance_mode, forced_enter_maintenance_mode, exit_maintenance_mode'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/host-transport-nodes/{host-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'host-transport-node-id' + '}', host_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodesApi#update_policy_host_transport_node_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
