=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class MultiTenancyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update a project ip allocation
    # If a Project IP Address Allocation is absent, create a new one.  If it already exists, replace the Project IP Address Allocation instance with the new object. 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param project_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [ProjectIpAddressAllocation]
    def create_or_replace_project_ip_address_allocation(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts = {})
      data, _status_code, _headers = create_or_replace_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts)
      data
    end

    # Create or update a project ip allocation
    # If a Project IP Address Allocation is absent, create a new one.  If it already exists, replace the Project IP Address Allocation instance with the new object. 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param project_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectIpAddressAllocation, Fixnum, Hash)>] ProjectIpAddressAllocation data, response status code and response headers
    def create_or_replace_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.create_or_replace_project_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.create_or_replace_project_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.create_or_replace_project_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling MultiTenancyApi.create_or_replace_project_ip_address_allocation"
      end
      # verify the required parameter 'project_ip_address_allocation' is set
      if @api_client.config.client_side_validation && project_ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'project_ip_address_allocation' when calling MultiTenancyApi.create_or_replace_project_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project_ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectIpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#create_or_replace_project_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete PROJECT
    # Delete PROJECT. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :is_recursive Recursively delete entire project tree. (default to false)
    # @return [nil]
    def delete_project(org_id, project_id, opts = {})
      delete_project_with_http_info(org_id, project_id, opts)
      nil
    end

    # Delete PROJECT
    # Delete PROJECT. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :is_recursive Recursively delete entire project tree.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_project_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.delete_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.delete_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.delete_project"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'is_recursive'] = opts[:'is_recursive'] if !opts[:'is_recursive'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#delete_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_project_ip_address_allocation(org_id, project_id, ip_address_allocation_id, opts = {})
      delete_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, opts)
      nil
    end

    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.delete_project_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.delete_project_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.delete_project_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling MultiTenancyApi.delete_project_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#delete_project_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Share
    # Delete a Share. 
    # @param share_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_share(share_id, opts = {})
      delete_share_with_http_info(share_id, opts)
      nil
    end

    # Delete Share
    # Delete a Share. 
    # @param share_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_share_with_http_info(share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.delete_share ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.delete_share"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}'.sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#delete_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Shared Resource
    # Delete Shared Resource. 
    # @param share_id 
    # @param shared_resource_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_shared_resource(share_id, shared_resource_id, opts = {})
      delete_shared_resource_with_http_info(share_id, shared_resource_id, opts)
      nil
    end

    # Delete Shared Resource
    # Delete Shared Resource. 
    # @param share_id 
    # @param shared_resource_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_shared_resource_with_http_info(share_id, shared_resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.delete_shared_resource ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.delete_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling MultiTenancyApi.delete_shared_resource"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#delete_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Org
    # Get Org 
    # @param org_id 
    # @param [Hash] opts the optional parameters
    # @return [Org]
    def get_org(org_id, opts = {})
      data, _status_code, _headers = get_org_with_http_info(org_id, opts)
      data
    end

    # Get Org
    # Get Org 
    # @param org_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Org, Fixnum, Hash)>] Org data, response status code and response headers
    def get_org_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.get_org ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.get_org"
      end
      # resource path
      local_var_path = '/orgs/{org-id}'.sub('{' + 'org-id' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Org')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#get_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PROJECT
    # Get PROJECT 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :short_format Project API response is brief or descriptive (default to false)
    # @return [Project]
    def get_project(org_id, project_id, opts = {})
      data, _status_code, _headers = get_project_with_http_info(org_id, project_id, opts)
      data
    end

    # Get PROJECT
    # Get PROJECT 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :short_format Project API response is brief or descriptive
    # @return [Array<(Project, Fixnum, Hash)>] Project data, response status code and response headers
    def get_project_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.get_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.get_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.get_project"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'short_format'] = opts[:'short_format'] if !opts[:'short_format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Project')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#get_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # VC Folder Status for Project
    # Returns the VC Folder Status on vCenter for the Project. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @return [VCFolderStatus]
    def get_project_vc_folder_status(org_id, project_id, opts = {})
      data, _status_code, _headers = get_project_vc_folder_status_with_http_info(org_id, project_id, opts)
      data
    end

    # VC Folder Status for Project
    # Returns the VC Folder Status on vCenter for the Project. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VCFolderStatus, Fixnum, Hash)>] VCFolderStatus data, response status code and response headers
    def get_project_vc_folder_status_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.get_project_vc_folder_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.get_project_vc_folder_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.get_project_vc_folder_status"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vc-folder-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VCFolderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#get_project_vc_folder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get quota details
    # Get quota details To create, update, list and delete the Quota, please refer to Constraint APIs with 'constraint_expressions' as 'EntityInstanceCountConstraintExpression'. 
    # @param org_id 
    # @param project_id 
    # @param path_prefix Path prefix for retriving the quota details.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :constraint_path Constraint path to retrive the quota details.
    # @return [QuotaStatsListResult]
    def get_quota_details(org_id, project_id, path_prefix, opts = {})
      data, _status_code, _headers = get_quota_details_with_http_info(org_id, project_id, path_prefix, opts)
      data
    end

    # Get quota details
    # Get quota details To create, update, list and delete the Quota, please refer to Constraint APIs with &#39;constraint_expressions&#39; as &#39;EntityInstanceCountConstraintExpression&#39;. 
    # @param org_id 
    # @param project_id 
    # @param path_prefix Path prefix for retriving the quota details.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :constraint_path Constraint path to retrive the quota details.
    # @return [Array<(QuotaStatsListResult, Fixnum, Hash)>] QuotaStatsListResult data, response status code and response headers
    def get_quota_details_with_http_info(org_id, project_id, path_prefix, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.get_quota_details ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.get_quota_details"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.get_quota_details"
      end
      # verify the required parameter 'path_prefix' is set
      if @api_client.config.client_side_validation && path_prefix.nil?
        fail ArgumentError, "Missing the required parameter 'path_prefix' when calling MultiTenancyApi.get_quota_details"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/quota-stats'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'path_prefix'] = path_prefix
      query_params[:'constraint_path'] = opts[:'constraint_path'] if !opts[:'constraint_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QuotaStatsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#get_quota_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get single instance of a share
    # Get single instance of a share
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @return [Share]
    def get_share(share_id, opts = {})
      data, _status_code, _headers = get_share_with_http_info(share_id, opts)
      data
    end

    # Get single instance of a share
    # Get single instance of a share
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Share, Fixnum, Hash)>] Share data, response status code and response headers
    def get_share_with_http_info(share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.get_share ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.get_share"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}'.sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Share')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#get_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Shared resource
    # Get the shared resource that represents shared objects. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param [Hash] opts the optional parameters
    # @return [SharedResource]
    def get_shared_resource(share_id, shared_resource_id, opts = {})
      data, _status_code, _headers = get_shared_resource_with_http_info(share_id, shared_resource_id, opts)
      data
    end

    # Get Shared resource
    # Get the shared resource that represents shared objects. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SharedResource, Fixnum, Hash)>] SharedResource data, response status code and response headers
    def get_shared_resource_with_http_info(share_id, shared_resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.get_shared_resource ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.get_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling MultiTenancyApi.get_shared_resource"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#get_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get quota details
    # Get quota details 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param path_prefix Path prefix for retriving the quota details.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :constraint_path Constraint path to retrive the quota details.
    # @return [QuotaStatsListResult]
    def get_vpc_quota_details(org_id, project_id, vpc_id, path_prefix, opts = {})
      data, _status_code, _headers = get_vpc_quota_details_with_http_info(org_id, project_id, vpc_id, path_prefix, opts)
      data
    end

    # Get quota details
    # Get quota details 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param path_prefix Path prefix for retriving the quota details.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :constraint_path Constraint path to retrive the quota details.
    # @return [Array<(QuotaStatsListResult, Fixnum, Hash)>] QuotaStatsListResult data, response status code and response headers
    def get_vpc_quota_details_with_http_info(org_id, project_id, vpc_id, path_prefix, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.get_vpc_quota_details ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.get_vpc_quota_details"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.get_vpc_quota_details"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling MultiTenancyApi.get_vpc_quota_details"
      end
      # verify the required parameter 'path_prefix' is set
      if @api_client.config.client_side_validation && path_prefix.nil?
        fail ArgumentError, "Missing the required parameter 'path_prefix' when calling MultiTenancyApi.get_vpc_quota_details"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/quota-stats'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'path_prefix'] = path_prefix
      query_params[:'constraint_path'] = opts[:'constraint_path'] if !opts[:'constraint_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QuotaStatsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#get_vpc_quota_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of Org
    # Paginated list of Org. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OrgListResult]
    def list_org(opts = {})
      data, _status_code, _headers = list_org_with_http_info(opts)
      data
    end

    # List of Org
    # Paginated list of Org. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OrgListResult, Fixnum, Hash)>] OrgListResult data, response status code and response headers
    def list_org_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.list_org ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MultiTenancyApi.list_org, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MultiTenancyApi.list_org, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrgListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#list_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of PROJECT
    # Paginated list of Project. 
    # @param org_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :instance_id Instance id of NSX+ where to route this request to.
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ProjectListResult]
    def list_project(org_id, opts = {})
      data, _status_code, _headers = list_project_with_http_info(org_id, opts)
      data
    end

    # List of PROJECT
    # Paginated list of Project. 
    # @param org_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :instance_id Instance id of NSX+ where to route this request to.
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ProjectListResult, Fixnum, Hash)>] ProjectListResult data, response status code and response headers
    def list_project_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.list_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.list_project"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MultiTenancyApi.list_project, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MultiTenancyApi.list_project, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects'.sub('{' + 'org-id' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'instance_id'] = opts[:'instance_id'] if !opts[:'instance_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#list_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Project ip allocations
    # List all the ip allocations for a Project. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ProjectIpAddressAllocationListResult]
    def list_project_ip_address_allocations(org_id, project_id, opts = {})
      data, _status_code, _headers = list_project_ip_address_allocations_with_http_info(org_id, project_id, opts)
      data
    end

    # List Project ip allocations
    # List all the ip allocations for a Project. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ProjectIpAddressAllocationListResult, Fixnum, Hash)>] ProjectIpAddressAllocationListResult data, response status code and response headers
    def list_project_ip_address_allocations_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.list_project_ip_address_allocations ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.list_project_ip_address_allocations"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.list_project_ip_address_allocations"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MultiTenancyApi.list_project_ip_address_allocations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MultiTenancyApi.list_project_ip_address_allocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/ip-address-allocations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectIpAddressAllocationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#list_project_ip_address_allocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get resources shared with a given org
    # Get the list of resource shared with a given org. 
    # @param org_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [SharedResourceListResult]
    def list_resources_shared_with_me_org(org_id, opts = {})
      data, _status_code, _headers = list_resources_shared_with_me_org_with_http_info(org_id, opts)
      data
    end

    # Get resources shared with a given org
    # Get the list of resource shared with a given org. 
    # @param org_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [Array<(SharedResourceListResult, Fixnum, Hash)>] SharedResourceListResult data, response status code and response headers
    def list_resources_shared_with_me_org_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.list_resources_shared_with_me_org ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.list_resources_shared_with_me_org"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/shared-with-me'.sub('{' + 'org-id' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#list_resources_shared_with_me_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get resources shared with a given project
    # Get the list of resource shared with a given project. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [SharedResourceListResult]
    def list_resources_shared_with_me_project(org_id, project_id, opts = {})
      data, _status_code, _headers = list_resources_shared_with_me_project_with_http_info(org_id, project_id, opts)
      data
    end

    # Get resources shared with a given project
    # Get the list of resource shared with a given project. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [Array<(SharedResourceListResult, Fixnum, Hash)>] SharedResourceListResult data, response status code and response headers
    def list_resources_shared_with_me_project_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.list_resources_shared_with_me_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.list_resources_shared_with_me_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.list_resources_shared_with_me_project"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/shared-with-me'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#list_resources_shared_with_me_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get resources shared with a given vpc
    # Get the list of resource shared with a given vpc. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [SharedResourceListResult]
    def list_resources_shared_with_me_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_resources_shared_with_me_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get resources shared with a given vpc
    # Get the list of resource shared with a given vpc. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [Array<(SharedResourceListResult, Fixnum, Hash)>] SharedResourceListResult data, response status code and response headers
    def list_resources_shared_with_me_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.list_resources_shared_with_me_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.list_resources_shared_with_me_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.list_resources_shared_with_me_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling MultiTenancyApi.list_resources_shared_with_me_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/shared-with-me'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#list_resources_shared_with_me_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Shared resource list for a given share
    # Get the list of shared resource in a given share. 
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [SharedResourceListResult]
    def list_shared_resources(share_id, opts = {})
      data, _status_code, _headers = list_shared_resources_with_http_info(share_id, opts)
      data
    end

    # Get Shared resource list for a given share
    # Get the list of shared resource in a given share. 
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [Array<(SharedResourceListResult, Fixnum, Hash)>] SharedResourceListResult data, response status code and response headers
    def list_shared_resources_with_http_info(share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.list_shared_resources ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.list_shared_resources"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}/resources'.sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#list_shared_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List shares
    # List shares
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShareListResult]
    def list_shares(opts = {})
      data, _status_code, _headers = list_shares_with_http_info(opts)
      data
    end

    # List shares
    # List shares
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShareListResult, Fixnum, Hash)>] ShareListResult data, response status code and response headers
    def list_shares_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.list_shares ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MultiTenancyApi.list_shares, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MultiTenancyApi.list_shares, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/shares'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShareListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#list_shares\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Share
    # Delete a Share. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_share(org_id, project_id, share_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_share_with_http_info(org_id, project_id, share_id, opts)
      nil
    end

    # Delete Share
    # Delete a Share. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_share_with_http_info(org_id, project_id, share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.orgs_org_id_projects_project_id_infra_delete_share ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_delete_share"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_delete_share"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_delete_share"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#orgs_org_id_projects_project_id_infra_delete_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Shared Resource
    # Delete Shared Resource. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id 
    # @param shared_resource_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_shared_resource(org_id, project_id, share_id, shared_resource_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, opts)
      nil
    end

    # Delete Shared Resource
    # Delete Shared Resource. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id 
    # @param shared_resource_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.orgs_org_id_projects_project_id_infra_delete_shared_resource ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_delete_shared_resource"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_delete_shared_resource"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_delete_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_delete_shared_resource"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#orgs_org_id_projects_project_id_infra_delete_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get single instance of a share
    # Get single instance of a share
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @return [Share]
    def orgs_org_id_projects_project_id_infra_get_share(org_id, project_id, share_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_share_with_http_info(org_id, project_id, share_id, opts)
      data
    end

    # Get single instance of a share
    # Get single instance of a share
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Share, Fixnum, Hash)>] Share data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_share_with_http_info(org_id, project_id, share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.orgs_org_id_projects_project_id_infra_get_share ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_get_share"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_get_share"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_get_share"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Share')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#orgs_org_id_projects_project_id_infra_get_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Shared resource
    # Get the shared resource that represents shared objects. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param [Hash] opts the optional parameters
    # @return [SharedResource]
    def orgs_org_id_projects_project_id_infra_get_shared_resource(org_id, project_id, share_id, shared_resource_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, opts)
      data
    end

    # Get Shared resource
    # Get the shared resource that represents shared objects. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SharedResource, Fixnum, Hash)>] SharedResource data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.orgs_org_id_projects_project_id_infra_get_shared_resource ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_get_shared_resource"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_get_shared_resource"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_get_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_get_shared_resource"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#orgs_org_id_projects_project_id_infra_get_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Shared resource list for a given share
    # Get the list of shared resource in a given share. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [SharedResourceListResult]
    def orgs_org_id_projects_project_id_infra_list_shared_resources(org_id, project_id, share_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_shared_resources_with_http_info(org_id, project_id, share_id, opts)
      data
    end

    # Get Shared resource list for a given share
    # Get the list of shared resource in a given share. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [Array<(SharedResourceListResult, Fixnum, Hash)>] SharedResourceListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_shared_resources_with_http_info(org_id, project_id, share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.orgs_org_id_projects_project_id_infra_list_shared_resources ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_list_shared_resources"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_list_shared_resources"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_list_shared_resources"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}/resources'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#orgs_org_id_projects_project_id_infra_list_shared_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List shares
    # List shares
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShareListResult]
    def orgs_org_id_projects_project_id_infra_list_shares(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_shares_with_http_info(org_id, project_id, opts)
      data
    end

    # List shares
    # List shares
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShareListResult, Fixnum, Hash)>] ShareListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_shares_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.orgs_org_id_projects_project_id_infra_list_shares ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_list_shares"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_list_shares"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_list_shares, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_list_shares, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShareListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#orgs_org_id_projects_project_id_infra_list_shares\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Share
    # If a Share with the given ID already exists, update the share entity. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_share(org_id, project_id, share_id, share, opts = {})
      orgs_org_id_projects_project_id_infra_patch_share_with_http_info(org_id, project_id, share_id, share, opts)
      nil
    end

    # Create or update a Share
    # If a Share with the given ID already exists, update the share entity. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_share_with_http_info(org_id, project_id, share_id, share, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.orgs_org_id_projects_project_id_infra_patch_share ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_patch_share"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_patch_share"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_patch_share"
      end
      # verify the required parameter 'share' is set
      if @api_client.config.client_side_validation && share.nil?
        fail ArgumentError, "Missing the required parameter 'share' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_patch_share"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(share)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#orgs_org_id_projects_project_id_infra_patch_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_shared_resource(org_id, project_id, share_id, shared_resource_id, shared_resource, opts = {})
      orgs_org_id_projects_project_id_infra_patch_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, shared_resource, opts)
      nil
    end

    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, shared_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.orgs_org_id_projects_project_id_infra_patch_shared_resource ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_patch_shared_resource"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_patch_shared_resource"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_patch_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_patch_shared_resource"
      end
      # verify the required parameter 'shared_resource' is set
      if @api_client.config.client_side_validation && shared_resource.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_patch_shared_resource"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(shared_resource)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#orgs_org_id_projects_project_id_infra_patch_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Share
    # If a Share with the given ID already exists, and the revision is 0, throw error 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Share]
    def orgs_org_id_projects_project_id_infra_update_share(org_id, project_id, share_id, share, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_share_with_http_info(org_id, project_id, share_id, share, opts)
      data
    end

    # Create or update a Share
    # If a Share with the given ID already exists, and the revision is 0, throw error 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Share, Fixnum, Hash)>] Share data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_share_with_http_info(org_id, project_id, share_id, share, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.orgs_org_id_projects_project_id_infra_update_share ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_update_share"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_update_share"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_update_share"
      end
      # verify the required parameter 'share' is set
      if @api_client.config.client_side_validation && share.nil?
        fail ArgumentError, "Missing the required parameter 'share' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_update_share"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(share)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Share')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#orgs_org_id_projects_project_id_infra_update_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [SharedResource]
    def orgs_org_id_projects_project_id_infra_update_shared_resource(org_id, project_id, share_id, shared_resource_id, shared_resource, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, shared_resource, opts)
      data
    end

    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SharedResource, Fixnum, Hash)>] SharedResource data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, shared_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.orgs_org_id_projects_project_id_infra_update_shared_resource ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_update_shared_resource"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_update_shared_resource"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_update_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_update_shared_resource"
      end
      # verify the required parameter 'shared_resource' is set
      if @api_client.config.client_side_validation && shared_resource.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource' when calling MultiTenancyApi.orgs_org_id_projects_project_id_infra_update_shared_resource"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(shared_resource)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#orgs_org_id_projects_project_id_infra_update_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update on org-root to update all the nested entities using HAPI.
    # Patch API at org-root to create/update/delete entire or part of intent hierarchy. Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependecies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. 
    # @param org_root 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check (default to false)
    # @return [nil]
    def patch_org_root(org_root, opts = {})
      patch_org_root_with_http_info(org_root, opts)
      nil
    end

    # Update on org-root to update all the nested entities using HAPI.
    # Patch API at org-root to create/update/delete entire or part of intent hierarchy. Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependecies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. 
    # @param org_root 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_org_root_with_http_info(org_root, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.patch_org_root ...'
      end
      # verify the required parameter 'org_root' is set
      if @api_client.config.client_side_validation && org_root.nil?
        fail ArgumentError, "Missing the required parameter 'org_root' when calling MultiTenancyApi.patch_org_root"
      end
      # resource path
      local_var_path = '/org-root'

      # query parameters
      query_params = {}
      query_params[:'enforce_revision_check'] = opts[:'enforce_revision_check'] if !opts[:'enforce_revision_check'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(org_root)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#patch_org_root\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update PROJECT
    # If a Project with the project-id is not already present, create a new Project. If it already exists, update the Project. 
    # @param org_id 
    # @param project_id 
    # @param project 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_project(org_id, project_id, project, opts = {})
      patch_project_with_http_info(org_id, project_id, project, opts)
      nil
    end

    # Create or update PROJECT
    # If a Project with the project-id is not already present, create a new Project. If it already exists, update the Project. 
    # @param org_id 
    # @param project_id 
    # @param project 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_project_with_http_info(org_id, project_id, project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.patch_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.patch_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.patch_project"
      end
      # verify the required parameter 'project' is set
      if @api_client.config.client_side_validation && project.nil?
        fail ArgumentError, "Missing the required parameter 'project' when calling MultiTenancyApi.patch_project"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#patch_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Project ip allocation
    # Create a Project ip allocation if it does not exist 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param project_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_project_ip_address_allocation(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts = {})
      patch_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts)
      nil
    end

    # Patch a Project ip allocation
    # Create a Project ip allocation if it does not exist 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param project_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.patch_project_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.patch_project_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.patch_project_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling MultiTenancyApi.patch_project_ip_address_allocation"
      end
      # verify the required parameter 'project_ip_address_allocation' is set
      if @api_client.config.client_side_validation && project_ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'project_ip_address_allocation' when calling MultiTenancyApi.patch_project_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project_ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#patch_project_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Share
    # If a Share with the given ID already exists, update the share entity. 
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_share(share_id, share, opts = {})
      patch_share_with_http_info(share_id, share, opts)
      nil
    end

    # Create or update a Share
    # If a Share with the given ID already exists, update the share entity. 
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_share_with_http_info(share_id, share, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.patch_share ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.patch_share"
      end
      # verify the required parameter 'share' is set
      if @api_client.config.client_side_validation && share.nil?
        fail ArgumentError, "Missing the required parameter 'share' when calling MultiTenancyApi.patch_share"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}'.sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(share)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#patch_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_shared_resource(share_id, shared_resource_id, shared_resource, opts = {})
      patch_shared_resource_with_http_info(share_id, shared_resource_id, shared_resource, opts)
      nil
    end

    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_shared_resource_with_http_info(share_id, shared_resource_id, shared_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.patch_shared_resource ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.patch_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling MultiTenancyApi.patch_shared_resource"
      end
      # verify the required parameter 'shared_resource' is set
      if @api_client.config.client_side_validation && shared_resource.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource' when calling MultiTenancyApi.patch_shared_resource"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(shared_resource)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#patch_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Org Root
    # Read Org Root. Returns only the org root related properties. Inner object are not populated. For Hierarchical Get, base_path request parameter can be used. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [OrgRoot]
    def read_org_root(opts = {})
      data, _status_code, _headers = read_org_root_with_http_info(opts)
      data
    end

    # Read Org Root
    # Read Org Root. Returns only the org root related properties. Inner object are not populated. For Hierarchical Get, base_path request parameter can be used. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Array<(OrgRoot, Fixnum, Hash)>] OrgRoot data, response status code and response headers
    def read_org_root_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.read_org_root ...'
      end
      # resource path
      local_var_path = '/org-root'

      # query parameters
      query_params = {}
      query_params[:'base_path'] = opts[:'base_path'] if !opts[:'base_path'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'type_filter'] = opts[:'type_filter'] if !opts[:'type_filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrgRoot')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#read_org_root\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Project ip allocation by ID
    # Get detail information on Project ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [ProjectIpAddressAllocation]
    def read_project_ip_address_allocation(org_id, project_id, ip_address_allocation_id, opts = {})
      data, _status_code, _headers = read_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, opts)
      data
    end

    # Get Project ip allocation by ID
    # Get detail information on Project ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectIpAddressAllocation, Fixnum, Hash)>] ProjectIpAddressAllocation data, response status code and response headers
    def read_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.read_project_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.read_project_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.read_project_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling MultiTenancyApi.read_project_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectIpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#read_project_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the PROJECT
    # Update the Project. For local Project, local transport zone and edge clusters needs to be added. 
    # @param org_id 
    # @param project_id 
    # @param project 
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def update_project(org_id, project_id, project, opts = {})
      data, _status_code, _headers = update_project_with_http_info(org_id, project_id, project, opts)
      data
    end

    # Update the PROJECT
    # Update the Project. For local Project, local transport zone and edge clusters needs to be added. 
    # @param org_id 
    # @param project_id 
    # @param project 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Fixnum, Hash)>] Project data, response status code and response headers
    def update_project_with_http_info(org_id, project_id, project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.update_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MultiTenancyApi.update_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MultiTenancyApi.update_project"
      end
      # verify the required parameter 'project' is set
      if @api_client.config.client_side_validation && project.nil?
        fail ArgumentError, "Missing the required parameter 'project' when calling MultiTenancyApi.update_project"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Project')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#update_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Share
    # If a Share with the given ID already exists, and the revision is 0, throw error 
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Share]
    def update_share(share_id, share, opts = {})
      data, _status_code, _headers = update_share_with_http_info(share_id, share, opts)
      data
    end

    # Create or update a Share
    # If a Share with the given ID already exists, and the revision is 0, throw error 
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Share, Fixnum, Hash)>] Share data, response status code and response headers
    def update_share_with_http_info(share_id, share, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.update_share ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.update_share"
      end
      # verify the required parameter 'share' is set
      if @api_client.config.client_side_validation && share.nil?
        fail ArgumentError, "Missing the required parameter 'share' when calling MultiTenancyApi.update_share"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}'.sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(share)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Share')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#update_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [SharedResource]
    def update_shared_resource(share_id, shared_resource_id, shared_resource, opts = {})
      data, _status_code, _headers = update_shared_resource_with_http_info(share_id, shared_resource_id, shared_resource, opts)
      data
    end

    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SharedResource, Fixnum, Hash)>] SharedResource data, response status code and response headers
    def update_shared_resource_with_http_info(share_id, shared_resource_id, shared_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MultiTenancyApi.update_shared_resource ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling MultiTenancyApi.update_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling MultiTenancyApi.update_shared_resource"
      end
      # verify the required parameter 'shared_resource' is set
      if @api_client.config.client_side_validation && shared_resource.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource' when calling MultiTenancyApi.update_shared_resource"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(shared_resource)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MultiTenancyApi#update_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
