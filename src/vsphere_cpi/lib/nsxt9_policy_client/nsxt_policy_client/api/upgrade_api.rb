=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class UpgradeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get NSX Application Platform upgrade-coordinator versions
    # Get NSX Application Platform upgrade-coordinator versions.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentVersions]
    def get_available_uc_versions(site_id, opts = {})
      data, _status_code, _headers = get_available_uc_versions_with_http_info(site_id, opts)
      data
    end

    # Get NSX Application Platform upgrade-coordinator versions
    # Get NSX Application Platform upgrade-coordinator versions.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentVersions, Fixnum, Hash)>] DeploymentVersions data, response status code and response headers
    def get_available_uc_versions_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeApi.get_available_uc_versions ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling UpgradeApi.get_available_uc_versions"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator/versions'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentVersions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_available_uc_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentChecksStatusResult]
    def get_uc_deployment_checks_status(site_id, opts = {})
      data, _status_code, _headers = get_uc_deployment_checks_status_with_http_info(site_id, opts)
      data
    end

    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentChecksStatusResult, Fixnum, Hash)>] DeploymentChecksStatusResult data, response status code and response headers
    def get_uc_deployment_checks_status_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeApi.get_uc_deployment_checks_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling UpgradeApi.get_uc_deployment_checks_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator/checks/status'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentChecksStatusResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_uc_deployment_checks_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get upgrade coordinator deployment configuration
    # Get input parameters required to deploy upgrade-coordinator.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeCoordinatorDeploymentConfig]
    def get_upgrade_coordinator_deployment_config(site_id, opts = {})
      data, _status_code, _headers = get_upgrade_coordinator_deployment_config_with_http_info(site_id, opts)
      data
    end

    # Get upgrade coordinator deployment configuration
    # Get input parameters required to deploy upgrade-coordinator.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeCoordinatorDeploymentConfig, Fixnum, Hash)>] UpgradeCoordinatorDeploymentConfig data, response status code and response headers
    def get_upgrade_coordinator_deployment_config_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeApi.get_upgrade_coordinator_deployment_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling UpgradeApi.get_upgrade_coordinator_deployment_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeCoordinatorDeploymentConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_coordinator_deployment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get deployment or undeployment progress status
    # Get deployment or undeployment progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentProgressStatus]
    def get_upgrade_coordinator_deployment_progress_status(site_id, opts = {})
      data, _status_code, _headers = get_upgrade_coordinator_deployment_progress_status_with_http_info(site_id, opts)
      data
    end

    # Get deployment or undeployment progress status
    # Get deployment or undeployment progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentProgressStatus, Fixnum, Hash)>] DeploymentProgressStatus data, response status code and response headers
    def get_upgrade_coordinator_deployment_progress_status_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeApi.get_upgrade_coordinator_deployment_progress_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling UpgradeApi.get_upgrade_coordinator_deployment_progress_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator/status'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentProgressStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_upgrade_coordinator_deployment_progress_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the version whitelist
    # Get whitelist of versions for different components
    # @param [Hash] opts the optional parameters
    # @return [AcceptableComponentVersionList]
    def get_version_whitelist(opts = {})
      data, _status_code, _headers = get_version_whitelist_with_http_info(opts)
      data
    end

    # Get the version whitelist
    # Get whitelist of versions for different components
    # @param [Hash] opts the optional parameters
    # @return [Array<(AcceptableComponentVersionList, Fixnum, Hash)>] AcceptableComponentVersionList data, response status code and response headers
    def get_version_whitelist_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeApi.get_version_whitelist ...'
      end
      # resource path
      local_var_path = '/upgrade/version-whitelist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AcceptableComponentVersionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_version_whitelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the version whitelist for the specified component
    # Get whitelist of versions for a component. Component can include HOST, EDGE, CCP, MP
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [AcceptableComponentVersion]
    def get_version_whitelist_by_component(component_type, opts = {})
      data, _status_code, _headers = get_version_whitelist_by_component_with_http_info(component_type, opts)
      data
    end

    # Get the version whitelist for the specified component
    # Get whitelist of versions for a component. Component can include HOST, EDGE, CCP, MP
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AcceptableComponentVersion, Fixnum, Hash)>] AcceptableComponentVersion data, response status code and response headers
    def get_version_whitelist_by_component_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeApi.get_version_whitelist_by_component ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling UpgradeApi.get_version_whitelist_by_component"
      end
      # resource path
      local_var_path = '/upgrade/version-whitelist/{component_type}'.sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AcceptableComponentVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#get_version_whitelist_by_component\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run pre/post checks for NSX Application Platform upgrade-coordinator
    # Run pre/post checks for NSX Application Platform upgrade-coordinator. 
    # @param site_id 
    # @param deployment_checks_action 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def run_uc_deployment_checks(site_id, deployment_checks_action, opts = {})
      run_uc_deployment_checks_with_http_info(site_id, deployment_checks_action, opts)
      nil
    end

    # Run pre/post checks for NSX Application Platform upgrade-coordinator
    # Run pre/post checks for NSX Application Platform upgrade-coordinator. 
    # @param site_id 
    # @param deployment_checks_action 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def run_uc_deployment_checks_with_http_info(site_id, deployment_checks_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeApi.run_uc_deployment_checks ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling UpgradeApi.run_uc_deployment_checks"
      end
      # verify the required parameter 'deployment_checks_action' is set
      if @api_client.config.client_side_validation && deployment_checks_action.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_checks_action' when calling UpgradeApi.run_uc_deployment_checks"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator/checks'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(deployment_checks_action)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#run_uc_deployment_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update upgrade-coordinator configuration
    # Update input parameter require to deploy upgrade-coordinator related pods. Advanced configuraion option on UI has option to deploy kubernetes tools. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param upgrade_coordinator_deployment_config 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeCoordinatorDeploymentConfig]
    def update_upgrade_coordinator_deployment_config(site_id, upgrade_coordinator_deployment_config, opts = {})
      data, _status_code, _headers = update_upgrade_coordinator_deployment_config_with_http_info(site_id, upgrade_coordinator_deployment_config, opts)
      data
    end

    # Update upgrade-coordinator configuration
    # Update input parameter require to deploy upgrade-coordinator related pods. Advanced configuraion option on UI has option to deploy kubernetes tools. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param upgrade_coordinator_deployment_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeCoordinatorDeploymentConfig, Fixnum, Hash)>] UpgradeCoordinatorDeploymentConfig data, response status code and response headers
    def update_upgrade_coordinator_deployment_config_with_http_info(site_id, upgrade_coordinator_deployment_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeApi.update_upgrade_coordinator_deployment_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling UpgradeApi.update_upgrade_coordinator_deployment_config"
      end
      # verify the required parameter 'upgrade_coordinator_deployment_config' is set
      if @api_client.config.client_side_validation && upgrade_coordinator_deployment_config.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_coordinator_deployment_config' when calling UpgradeApi.update_upgrade_coordinator_deployment_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_coordinator_deployment_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeCoordinatorDeploymentConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#update_upgrade_coordinator_deployment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the version whitelist for the specified component type
    # Update the version whitelist for the specified component type (HOST, EDGE, CCP, MP).
    # @param component_type 
    # @param version_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_version_whitelist(component_type, version_list, opts = {})
      update_version_whitelist_with_http_info(component_type, version_list, opts)
      nil
    end

    # Update the version whitelist for the specified component type
    # Update the version whitelist for the specified component type (HOST, EDGE, CCP, MP).
    # @param component_type 
    # @param version_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_version_whitelist_with_http_info(component_type, version_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeApi.update_version_whitelist ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling UpgradeApi.update_version_whitelist"
      end
      # verify the required parameter 'version_list' is set
      if @api_client.config.client_side_validation && version_list.nil?
        fail ArgumentError, "Missing the required parameter 'version_list' when calling UpgradeApi.update_version_whitelist"
      end
      # resource path
      local_var_path = '/upgrade/version-whitelist/{component_type}'.sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(version_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeApi#update_version_whitelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
