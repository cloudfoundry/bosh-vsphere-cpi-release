=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SessionTimerProfileBindingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      delete_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.delete_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SessionTimerProfileBindingApi.delete_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.delete_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.delete_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#delete_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-0 Logical Router
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, opts = {})
      delete_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-0 Logical Router
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.delete_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SessionTimerProfileBindingApi.delete_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.delete_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#delete_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      delete_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.delete_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.delete_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#delete_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, opts = {})
      delete_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.delete_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.delete_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#delete_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.get_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SessionTimerProfileBindingApi.get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.get_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#get_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.get_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SessionTimerProfileBindingApi.get_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.get_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#get_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.get_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.get_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#get_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.get_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.get_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#get_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.global_infra_get_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SessionTimerProfileBindingApi.global_infra_get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.global_infra_get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.global_infra_get_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#global_infra_get_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.global_infra_get_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SessionTimerProfileBindingApi.global_infra_get_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.global_infra_get_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#global_infra_get_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.global_infra_get_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.global_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.global_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.global_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#global_infra_get_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.global_infra_get_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.global_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.global_infra_get_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#global_infra_get_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_local_services_session_timer_profile_binding_map(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier0_local_services_session_timer_profile_binding_map_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_local_services_session_timer_profile_binding_map_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.patch_tier0_local_services_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SessionTimerProfileBindingApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#patch_tier0_local_services_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_session_timer_profile_binding_map(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier0_session_timer_profile_binding_map_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_session_timer_profile_binding_map_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.patch_tier0_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SessionTimerProfileBindingApi.patch_tier0_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.patch_tier0_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.patch_tier0_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#patch_tier0_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_locale_services_session_timer_profile_binding_map(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.patch_tier1_locale_services_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#patch_tier1_locale_services_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_session_timer_profile_binding_map(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier1_session_timer_profile_binding_map_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_session_timer_profile_binding_map_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.patch_tier1_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.patch_tier1_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#patch_tier1_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.update_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SessionTimerProfileBindingApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#update_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.update_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SessionTimerProfileBindingApi.update_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.update_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.update_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#update_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.update_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SessionTimerProfileBindingApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#update_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionTimerProfileBindingApi.update_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SessionTimerProfileBindingApi.update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SessionTimerProfileBindingApi.update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SessionTimerProfileBindingApi.update_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionTimerProfileBindingApi#update_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
