=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class RulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update Bridge Firewall Rule
    # Update the Bridge Firewall Rule. This is a full replace. All the rules are replaced. Create new BridgeFirewallRule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/bridge-policies/&lt;bridge-firewall-policy-id&gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def create_or_replace_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = create_or_replace_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts)
      data
    end

    # Update Bridge Firewall Rule
    # Update the Bridge Firewall Rule. This is a full replace. All the rules are replaced. Create new BridgeFirewallRule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/bridge-policies/&amp;lt;bridge-firewall-policy-id&amp;gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def create_or_replace_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.create_or_replace_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.create_or_replace_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling RulesApi.create_or_replace_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.create_or_replace_bridge_firewall_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.create_or_replace_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_or_replace_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def create_or_replace_gateway_policy_for_domain(domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = create_or_replace_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def create_or_replace_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.create_or_replace_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling RulesApi.create_or_replace_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_or_replace_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def create_or_replace_gateway_rule(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = create_or_replace_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def create_or_replace_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.create_or_replace_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.create_or_replace_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_or_replace_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [IdsGatewayPolicy]
    def create_or_replace_ids_gateway_policy(domain_id, policy_id, ids_gateway_policy, opts = {})
      data, _status_code, _headers = create_or_replace_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts)
      data
    end

    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def create_or_replace_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.create_or_replace_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.create_or_replace_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.create_or_replace_ids_gateway_policy"
      end
      # verify the required parameter 'ids_gateway_policy' is set
      if @api_client.config.client_side_validation && ids_gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_gateway_policy' when calling RulesApi.create_or_replace_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_or_replace_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update IDS gateway rule
    # Create or Update the IDS gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def create_or_replace_ids_gateway_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = create_or_replace_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Create or Update IDS gateway rule
    # Create or Update the IDS gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def create_or_replace_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.create_or_replace_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.create_or_replace_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.create_or_replace_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.create_or_replace_ids_gateway_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling RulesApi.create_or_replace_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_or_replace_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the GET/PUT response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def create_or_replace_policy_nat_rule(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      data, _status_code, _headers = create_or_replace_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      data
    end

    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the GET/PUT response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def create_or_replace_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.create_or_replace_policy_nat_rule ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling RulesApi.create_or_replace_policy_nat_rule"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_or_replace_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) NAT rule cannot be applied to a loopback interface or a label referencing loopback interfaces. For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the PUT/GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def create_or_replace_policy_nat_rule_on_tier0(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      data, _status_code, _headers = create_or_replace_policy_nat_rule_on_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      data
    end

    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) NAT rule cannot be applied to a loopback interface or a label referencing loopback interfaces. For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the PUT/GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def create_or_replace_policy_nat_rule_on_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.create_or_replace_policy_nat_rule_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling RulesApi.create_or_replace_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.create_or_replace_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.create_or_replace_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling RulesApi.create_or_replace_policy_nat_rule_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_or_replace_policy_nat_rule_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Endpoint policy
    # Create or update the Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_policy 
    # @param [Hash] opts the optional parameters
    # @return [EndpointPolicy]
    def create_or_update_endpoint_policy(domain_id, endpoint_policy_id, endpoint_policy, opts = {})
      data, _status_code, _headers = create_or_update_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, endpoint_policy, opts)
      data
    end

    # Create or update Endpoint policy
    # Create or update the Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EndpointPolicy, Fixnum, Hash)>] EndpointPolicy data, response status code and response headers
    def create_or_update_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, endpoint_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.create_or_update_endpoint_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.create_or_update_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling RulesApi.create_or_update_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy' is set
      if @api_client.config.client_side_validation && endpoint_policy.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy' when calling RulesApi.create_or_update_endpoint_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(endpoint_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_or_update_endpoint_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Endpoint rule
    # Create a Endpoint rule with the endpoint-rule-id is not already present, otherwise update the Endpoint Rule. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param endpoint_rule 
    # @param [Hash] opts the optional parameters
    # @return [EndpointRule]
    def create_or_update_endpoint_rule(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts = {})
      data, _status_code, _headers = create_or_update_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts)
      data
    end

    # Update Endpoint rule
    # Create a Endpoint rule with the endpoint-rule-id is not already present, otherwise update the Endpoint Rule. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param endpoint_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EndpointRule, Fixnum, Hash)>] EndpointRule data, response status code and response headers
    def create_or_update_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.create_or_update_endpoint_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.create_or_update_endpoint_rule"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling RulesApi.create_or_update_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule_id' is set
      if @api_client.config.client_side_validation && endpoint_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule_id' when calling RulesApi.create_or_update_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule' is set
      if @api_client.config.client_side_validation && endpoint_rule.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule' when calling RulesApi.create_or_update_endpoint_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s).sub('{' + 'endpoint-rule-id' + '}', endpoint_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(endpoint_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_or_update_endpoint_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def create_or_update_ids_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = create_or_update_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def create_or_update_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.create_or_update_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling RulesApi.create_or_update_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_or_update_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def create_or_update_ids_security_policy(domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = create_or_update_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def create_or_update_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.create_or_update_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.create_or_update_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.create_or_update_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling RulesApi.create_or_update_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_or_update_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Bridge Firewall Rule
    # Delete Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      delete_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts)
      nil
    end

    # Delete Bridge Firewall Rule
    # Delete Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.delete_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling RulesApi.delete_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.delete_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Endpoint policy
    # Delete Endpoint policy.
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_endpoint_policy(domain_id, endpoint_policy_id, opts = {})
      delete_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, opts)
      nil
    end

    # Delete Endpoint policy
    # Delete Endpoint policy.
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_endpoint_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.delete_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling RulesApi.delete_endpoint_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_endpoint_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete EndpointRule
    # Delete EndpointRule
    # @param domain_id Domain ID
    # @param endpoint_policy_id EndpointPolicy ID
    # @param endpoint_rule_id EndpointRule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_endpoint_rule(domain_id, endpoint_policy_id, endpoint_rule_id, opts = {})
      delete_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, opts)
      nil
    end

    # Delete EndpointRule
    # Delete EndpointRule
    # @param domain_id Domain ID
    # @param endpoint_policy_id EndpointPolicy ID
    # @param endpoint_rule_id EndpointRule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_endpoint_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.delete_endpoint_rule"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling RulesApi.delete_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule_id' is set
      if @api_client.config.client_side_validation && endpoint_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule_id' when calling RulesApi.delete_endpoint_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s).sub('{' + 'endpoint-rule-id' + '}', endpoint_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_endpoint_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_gateway_policy(domain_id, gateway_policy_id, opts = {})
      delete_gateway_policy_with_http_info(domain_id, gateway_policy_id, opts)
      nil
    end

    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_gateway_policy_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.delete_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.delete_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_gateway_rule(domain_id, gateway_policy_id, rule_id, opts = {})
      delete_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.delete_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.delete_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.delete_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS GatewayPolicy
    # Delete IDS GatewayPolicy
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_gateway_policy(domain_id, policy_id, opts = {})
      delete_ids_gateway_policy_with_http_info(domain_id, policy_id, opts)
      nil
    end

    # Delete IDS GatewayPolicy
    # Delete IDS GatewayPolicy
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_gateway_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.delete_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.delete_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS Gateway rule
    # Delete IDS Gateway rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_gateway_rule(domain_id, policy_id, rule_id, opts = {})
      delete_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      nil
    end

    # Delete IDS Gateway rule
    # Delete IDS Gateway rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.delete_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.delete_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.delete_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_rule(domain_id, policy_id, rule_id, opts = {})
      delete_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      nil
    end

    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.delete_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.delete_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.delete_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_security_policy(domain_id, policy_id, opts = {})
      delete_ids_security_policy_with_http_info(domain_id, policy_id, opts)
      nil
    end

    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_security_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.delete_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.delete_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NAT Rule
    # Delete NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_nat_rule(tier_1_id, nat_id, nat_rule_id, opts = {})
      delete_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts)
      nil
    end

    # Delete NAT Rule
    # Delete NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_policy_nat_rule ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.delete_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.delete_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.delete_policy_nat_rule"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NAT Rule
    # Delete NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_nat_rule_from_tier0(tier_0_id, nat_id, nat_rule_id, opts = {})
      delete_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts)
      nil
    end

    # Delete NAT Rule
    # Delete NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_policy_nat_rule_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling RulesApi.delete_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.delete_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.delete_policy_nat_rule_from_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_policy_nat_rule_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_security_policy_for_domain(domain_id, security_policy_id, opts = {})
      delete_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts)
      nil
    end

    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.delete_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.delete_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_security_rule(domain_id, security_policy_id, rule_id, opts = {})
      delete_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.delete_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.delete_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.delete_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.delete_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get bridge firewall policy statistics
    # Get statistics of a bridge firewall policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_bridge_firewall_policy_statistics(domain_id, bridge_firewall_policy_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_policy_statistics_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      data
    end

    # Get bridge firewall policy statistics
    # Get statistics of a bridge firewall policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_bridge_firewall_policy_statistics_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.get_bridge_firewall_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.get_bridge_firewall_policy_statistics"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling RulesApi.get_bridge_firewall_policy_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#get_bridge_firewall_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Bridge Firewall Rule
    # Read Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts)
      data
    end

    # Read Bridge Firewall Rule
    # Read Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def get_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.get_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.get_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling RulesApi.get_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.get_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#get_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get bridge firewall rule statistics
    # Get statistics of a bridge firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_bridge_firewall_rule_statistics(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_rule_statistics_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts)
      data
    end

    # Get bridge firewall rule statistics
    # Get statistics of a bridge firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_bridge_firewall_rule_statistics_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.get_bridge_firewall_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.get_bridge_firewall_rule_statistics"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling RulesApi.get_bridge_firewall_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.get_bridge_firewall_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#get_bridge_firewall_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def get_ids_gateway_rule_statistics(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.get_ids_gateway_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.get_ids_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#get_ids_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def get_ids_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.get_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.get_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.get_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.get_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#get_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def get_ids_rule_statistics(domain_id, ids_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts)
      data
    end

    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.get_ids_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.get_ids_rule_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling RulesApi.get_ids_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.get_ids_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#get_ids_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def get_ids_security_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = get_ids_security_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def get_ids_security_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.get_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.get_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.get_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#get_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def get_policy_nat_rule(tier_1_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def get_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.get_policy_nat_rule ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.get_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.get_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.get_policy_nat_rule"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#get_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT/PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def get_policy_nat_rule_from_tier0(tier_0_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT/PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def get_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.get_policy_nat_rule_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling RulesApi.get_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.get_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.get_policy_nat_rule_from_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#get_policy_nat_rule_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def global_infra_get_ids_gateway_rule_statistics(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def global_infra_get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_get_ids_gateway_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.global_infra_get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.global_infra_get_ids_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_get_ids_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def global_infra_get_ids_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def global_infra_get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_get_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_get_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.global_infra_get_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.global_infra_get_ids_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_get_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def global_infra_get_ids_rule_statistics(domain_id, ids_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts)
      data
    end

    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def global_infra_get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_get_ids_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling RulesApi.global_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.global_infra_get_ids_rule_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_get_ids_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def global_infra_get_ids_security_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_security_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def global_infra_get_ids_security_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_get_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_get_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.global_infra_get_ids_security_policy"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_get_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def global_infra_get_policy_nat_rule(tier_1_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def global_infra_get_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_get_policy_nat_rule ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.global_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.global_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.global_infra_get_policy_nat_rule"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_get_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT/PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def global_infra_get_policy_nat_rule_from_tier0(tier_0_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT/PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def global_infra_get_policy_nat_rule_from_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_get_policy_nat_rule_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling RulesApi.global_infra_get_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.global_infra_get_policy_nat_rule_from_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.global_infra_get_policy_nat_rule_from_tier0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_get_policy_nat_rule_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayPolicyListResult]
    def global_infra_list_gateway_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_gateway_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def global_infra_list_gateway_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_gateway_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_list_gateway_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_gateway_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_gateway_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_gateway_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def global_infra_list_gateway_rules(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def global_infra_list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_list_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.global_infra_list_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsGatewayPolicyListResult]
    def global_infra_list_ids_gateway_policies(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_gateway_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsGatewayPolicyListResult, Fixnum, Hash)>] IdsGatewayPolicyListResult data, response status code and response headers
    def global_infra_list_ids_gateway_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_ids_gateway_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_list_ids_gateway_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_ids_gateway_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_ids_gateway_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_ids_gateway_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def global_infra_list_ids_gateway_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def global_infra_list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_ids_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_list_ids_gateway_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.global_infra_list_ids_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_ids_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_ids_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_ids_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def global_infra_list_ids_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def global_infra_list_ids_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_ids_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_list_ids_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.global_infra_list_ids_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_ids_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_ids_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_ids_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSecurityPolicyListResult]
    def global_infra_list_ids_security_policies(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_security_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSecurityPolicyListResult, Fixnum, Hash)>] IdsSecurityPolicyListResult data, response status code and response headers
    def global_infra_list_ids_security_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_ids_security_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_list_ids_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_ids_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_ids_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_ids_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List all NAT sections under the given Tier-0 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def global_infra_list_policy_nat_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_nat_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # List Policy NAT types.
    # List all NAT sections under the given Tier-0 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def global_infra_list_policy_nat_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_policy_nat_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling RulesApi.global_infra_list_policy_nat_on_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_policy_nat_on_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_policy_nat_on_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/nat'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_policy_nat_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def global_infra_list_policy_nat_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_nat_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def global_infra_list_policy_nat_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_policy_nat_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.global_infra_list_policy_nat_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_policy_nat_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_policy_nat_on_tier1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/nat'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_policy_nat_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleListResult]
    def global_infra_list_policy_nat_rules(tier_1_id, nat_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_nat_rules_with_http_info(tier_1_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleListResult, Fixnum, Hash)>] PolicyNatRuleListResult data, response status code and response headers
    def global_infra_list_policy_nat_rules_with_http_info(tier_1_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_policy_nat_rules ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.global_infra_list_policy_nat_rules"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.global_infra_list_policy_nat_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_policy_nat_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_policy_nat_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_policy_nat_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleListResult]
    def global_infra_list_policy_nat_rules_from_tier0(tier_0_id, nat_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_nat_rules_from_tier0_with_http_info(tier_0_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleListResult, Fixnum, Hash)>] PolicyNatRuleListResult data, response status code and response headers
    def global_infra_list_policy_nat_rules_from_tier0_with_http_info(tier_0_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_policy_nat_rules_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling RulesApi.global_infra_list_policy_nat_rules_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.global_infra_list_policy_nat_rules_from_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_policy_nat_rules_from_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_policy_nat_rules_from_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_policy_nat_rules_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def global_infra_list_security_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_security_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def global_infra_list_security_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_security_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_list_security_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_security_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_security_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_security_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def global_infra_list_security_rules(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_security_rules_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def global_infra_list_security_rules_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_list_security_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_list_security_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.global_infra_list_security_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_security_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.global_infra_list_security_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_list_security_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def global_infra_read_gateway_policy_for_domain(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = global_infra_read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def global_infra_read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_read_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.global_infra_read_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_read_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def global_infra_read_gateway_rule(domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def global_infra_read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_read_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_read_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.global_infra_read_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.global_infra_read_gateway_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_read_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsGatewayPolicy]
    def global_infra_read_ids_gateway_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def global_infra_read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_read_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_read_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.global_infra_read_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_read_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def global_infra_read_ids_gateway_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def global_infra_read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_read_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_read_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.global_infra_read_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.global_infra_read_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_read_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def global_infra_read_security_policy_for_domain(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = global_infra_read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def global_infra_read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_read_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.global_infra_read_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_read_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def global_infra_read_security_rule(domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def global_infra_read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_read_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.global_infra_read_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.global_infra_read_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.global_infra_read_security_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_read_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category (default to IDPSDFW)
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_reset_ids_rule_stats(opts = {})
      global_infra_reset_ids_rule_stats_with_http_info(opts)
      nil
    end

    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_reset_ids_rule_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.global_infra_reset_ids_rule_stats ...'
      end
      if @api_client.config.client_side_validation && opts[:'category'] && !['IDPSDFW', 'IDPSEDGE'].include?(opts[:'category'])
        fail ArgumentError, 'invalid value for "category", must be one of IDPSDFW, IDPSEDGE'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#global_infra_reset_ids_rule_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs (default to ABORT)
    # @return [NetworkPolicyImportResponse]
    def import_k8s_n_pto_dfw(network_policy_import_request, opts = {})
      data, _status_code, _headers = import_k8s_n_pto_dfw_with_http_info(network_policy_import_request, opts)
      data
    end

    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs
    # @return [Array<(NetworkPolicyImportResponse, Fixnum, Hash)>] NetworkPolicyImportResponse data, response status code and response headers
    def import_k8s_n_pto_dfw_with_http_info(network_policy_import_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.import_k8s_n_pto_dfw ...'
      end
      # verify the required parameter 'network_policy_import_request' is set
      if @api_client.config.client_side_validation && network_policy_import_request.nil?
        fail ArgumentError, "Missing the required parameter 'network_policy_import_request' when calling RulesApi.import_k8s_n_pto_dfw"
      end
      if @api_client.config.client_side_validation && opts[:'on_error'] && !['ABORT', 'CONTINUE'].include?(opts[:'on_error'])
        fail ArgumentError, 'invalid value for "on_error", must be one of ABORT, CONTINUE'
      end
      # resource path
      local_var_path = '/infra/import-k8s-np-to-dfw'

      # query parameters
      query_params = {}
      query_params[:'on_error'] = opts[:'on_error'] if !opts[:'on_error'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(network_policy_import_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NetworkPolicyImportResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#import_k8s_n_pto_dfw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Bridge Firewall Rules
    # Paginated list of all Bridge Firewall Rules. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_bridge_firewall_rules(domain_id, bridge_firewall_policy_id, opts = {})
      data, _status_code, _headers = list_bridge_firewall_rules_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      data
    end

    # List Bridge Firewall Rules
    # Paginated list of all Bridge Firewall Rules. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_bridge_firewall_rules_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_bridge_firewall_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.list_bridge_firewall_rules"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling RulesApi.list_bridge_firewall_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_bridge_firewall_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_bridge_firewall_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_bridge_firewall_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Endpoint policies
    # List all Endpoint policies across all domains ordered by precedence. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EndpointPolicyListResult]
    def list_endpoint_policies_across_all_domains(opts = {})
      data, _status_code, _headers = list_endpoint_policies_across_all_domains_with_http_info(opts)
      data
    end

    # List Endpoint policies
    # List all Endpoint policies across all domains ordered by precedence. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EndpointPolicyListResult, Fixnum, Hash)>] EndpointPolicyListResult data, response status code and response headers
    def list_endpoint_policies_across_all_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_endpoint_policies_across_all_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_endpoint_policies_across_all_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_endpoint_policies_across_all_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/endpoint-policies'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_endpoint_policies_across_all_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Endpoint rules
    # List Endpoint rules
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EndpointRuleListResult]
    def list_endpoint_rule(domain_id, endpoint_policy_id, opts = {})
      data, _status_code, _headers = list_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, opts)
      data
    end

    # List Endpoint rules
    # List Endpoint rules
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EndpointRuleListResult, Fixnum, Hash)>] EndpointRuleListResult data, response status code and response headers
    def list_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_endpoint_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.list_endpoint_rule"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling RulesApi.list_endpoint_rule"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_endpoint_rule, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_endpoint_rule, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_endpoint_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayPolicyListResult]
    def list_gateway_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_gateway_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def list_gateway_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_gateway_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.list_gateway_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_gateway_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_gateway_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_gateway_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_gateway_rules(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.list_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.list_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsGatewayPolicyListResult]
    def list_ids_gateway_policies(domain_id, opts = {})
      data, _status_code, _headers = list_ids_gateway_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsGatewayPolicyListResult, Fixnum, Hash)>] IdsGatewayPolicyListResult data, response status code and response headers
    def list_ids_gateway_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_ids_gateway_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.list_ids_gateway_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_ids_gateway_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_ids_gateway_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_ids_gateway_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def list_ids_gateway_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_ids_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.list_ids_gateway_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.list_ids_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_ids_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_ids_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_ids_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def list_ids_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = list_ids_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def list_ids_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_ids_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.list_ids_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.list_ids_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_ids_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_ids_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_ids_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSecurityPolicyListResult]
    def list_ids_security_policies(domain_id, opts = {})
      data, _status_code, _headers = list_ids_security_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSecurityPolicyListResult, Fixnum, Hash)>] IdsSecurityPolicyListResult data, response status code and response headers
    def list_ids_security_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_ids_security_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.list_ids_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_ids_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_ids_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_ids_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List all NAT sections under the given Tier-0 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def list_policy_nat_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = list_policy_nat_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # List Policy NAT types.
    # List all NAT sections under the given Tier-0 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def list_policy_nat_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_policy_nat_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling RulesApi.list_policy_nat_on_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_policy_nat_on_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_policy_nat_on_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_policy_nat_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def list_policy_nat_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = list_policy_nat_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def list_policy_nat_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_policy_nat_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.list_policy_nat_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_policy_nat_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_policy_nat_on_tier1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_policy_nat_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleListResult]
    def list_policy_nat_rules(tier_1_id, nat_id, opts = {})
      data, _status_code, _headers = list_policy_nat_rules_with_http_info(tier_1_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleListResult, Fixnum, Hash)>] PolicyNatRuleListResult data, response status code and response headers
    def list_policy_nat_rules_with_http_info(tier_1_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_policy_nat_rules ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.list_policy_nat_rules"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.list_policy_nat_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_policy_nat_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_policy_nat_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_policy_nat_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleListResult]
    def list_policy_nat_rules_from_tier0(tier_0_id, nat_id, opts = {})
      data, _status_code, _headers = list_policy_nat_rules_from_tier0_with_http_info(tier_0_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleListResult, Fixnum, Hash)>] PolicyNatRuleListResult data, response status code and response headers
    def list_policy_nat_rules_from_tier0_with_http_info(tier_0_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_policy_nat_rules_from_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling RulesApi.list_policy_nat_rules_from_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.list_policy_nat_rules_from_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_policy_nat_rules_from_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_policy_nat_rules_from_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_policy_nat_rules_from_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def list_security_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_security_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def list_security_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_security_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.list_security_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_security_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_security_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_security_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_security_rules(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = list_security_rules_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_security_rules_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_security_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.list_security_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.list_security_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_security_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.list_security_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_security_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the GET/PUT response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      data
    end

    # Create or update NAT Rule
    # Create or update NAT Rule on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PUT API, the path returned in the GET/PUT response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_create_or_replace_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_create_or_update_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling RulesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_gateway_policy(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts)
      nil
    end

    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_delete_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_delete_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts)
      nil
    end

    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_delete_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_delete_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_security_policy(org_id, project_id, domain_id, policy_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts)
      nil
    end

    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_delete_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NAT Rule
    # Delete NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_nat_rule(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts)
      nil
    end

    # Delete NAT Rule
    # Delete NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_policy_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_delete_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts)
      nil
    end

    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_delete_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_delete_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS rule.
    # Read intrusion detection rule 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def orgs_org_id_projects_project_id_infra_get_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS rule.
    # Read intrusion detection rule 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_get_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_ids_rule_statistics(org_id, project_id, domain_id, ids_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_rule_statistics_with_http_info(org_id, project_id, domain_id, ids_policy_id, rule_id, opts)
      data
    end

    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_rule_statistics_with_http_info(org_id, project_id, domain_id, ids_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_get_ids_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def orgs_org_id_projects_project_id_infra_get_ids_security_policy(org_id, project_id, domain_id, policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts)
      data
    end

    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_get_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyNatRule]
    def orgs_org_id_projects_project_id_infra_get_policy_nat_rule(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNatRule, Fixnum, Hash)>] PolicyNatRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_get_policy_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_get_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs (default to ABORT)
    # @return [NetworkPolicyImportResponse]
    def orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw(org_id, project_id, network_policy_import_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw_with_http_info(org_id, project_id, network_policy_import_request, opts)
      data
    end

    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs
    # @return [Array<(NetworkPolicyImportResponse, Fixnum, Hash)>] NetworkPolicyImportResponse data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw_with_http_info(org_id, project_id, network_policy_import_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw"
      end
      # verify the required parameter 'network_policy_import_request' is set
      if @api_client.config.client_side_validation && network_policy_import_request.nil?
        fail ArgumentError, "Missing the required parameter 'network_policy_import_request' when calling RulesApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw"
      end
      if @api_client.config.client_side_validation && opts[:'on_error'] && !['ABORT', 'CONTINUE'].include?(opts[:'on_error'])
        fail ArgumentError, 'invalid value for "on_error", must be one of ABORT, CONTINUE'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/import-k8s-np-to-dfw'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'on_error'] = opts[:'on_error'] if !opts[:'on_error'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(network_policy_import_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NetworkPolicyImportResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayPolicyListResult]
    def orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain(org_id, project_id, domain_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts)
      data
    end

    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def orgs_org_id_projects_project_id_infra_list_gateway_rules(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_gateway_rules_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_gateway_rules_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_list_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS rules
    # List intrusion detection rules. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_rules(org_id, project_id, domain_id, policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_rules_with_http_info(org_id, project_id, domain_id, policy_id, opts)
      data
    end

    # List IDS rules
    # List intrusion detection rules. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_rules_with_http_info(org_id, project_id, domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_list_ids_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_ids_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_ids_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_list_ids_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSecurityPolicyListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_security_policies(org_id, project_id, domain_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_security_policies_with_http_info(org_id, project_id, domain_id, opts)
      data
    end

    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSecurityPolicyListResult, Fixnum, Hash)>] IdsSecurityPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_security_policies_with_http_info(org_id, project_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_list_ids_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # List Policy NAT types.
    # List all NAT sections under the given Tier-1 ID. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_list_policy_nat_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_nat_rules(org_id, project_id, tier_1_id, nat_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_nat_rules_with_http_info(org_id, project_id, tier_1_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH/PUT PoliycNatRule API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleListResult, Fixnum, Hash)>] PolicyNatRuleListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_nat_rules_with_http_info(org_id, project_id, tier_1_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_policy_nat_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_list_policy_nat_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List security policies
    # List all security policies for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def orgs_org_id_projects_project_id_infra_list_security_policies_for_domain(org_id, project_id, domain_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_security_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts)
      data
    end

    # List security policies
    # List all security policies for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_security_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_list_security_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def orgs_org_id_projects_project_id_infra_list_security_rules(org_id, project_id, domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_security_rules_with_http_info(org_id, project_id, domain_id, security_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_security_rules_with_http_info(org_id, project_id, domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_list_security_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_security_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RulesApi.orgs_org_id_projects_project_id_infra_list_security_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_list_security_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts)
      nil
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      orgs_org_id_projects_project_id_infra_patch_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts)
      nil
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_patch_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      orgs_org_id_projects_project_id_infra_patch_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts)
      nil
    end

    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_patch_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_ids_security_policy(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      orgs_org_id_projects_project_id_infra_patch_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts)
      nil
    end

    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_patch_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Nat Rule
    # If a NAT Rule is not already present on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_nat_rule(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      nil
    end

    # Create or update a Nat Rule
    # If a NAT Rule is not already present on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_nat_rule_with_http_info(org_id, project_id, tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_policy_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_patch_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts)
      nil
    end

    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      orgs_org_id_projects_project_id_infra_patch_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_patch_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_patch_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts)
      data
    end

    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_read_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_read_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_read_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy
    # Read security policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def orgs_org_id_projects_project_id_infra_read_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts)
      data
    end

    # Read security policy
    # Read security policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_read_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_read_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_read_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_read_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [GatewayPolicy]
    def orgs_org_id_projects_project_id_infra_revise_gateway_policy(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_revise_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_revise_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_revise_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsRule]
    def orgs_org_id_projects_project_id_infra_revise_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_revise_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsSecurityPolicy]
    def orgs_org_id_projects_project_id_infra_revise_ids_security_policy(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_revise_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [SecurityPolicy]
    def orgs_org_id_projects_project_id_infra_revise_security_policies(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_security_policies_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_security_policies_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_revise_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_revise_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_revise_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_revise_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_revise_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def orgs_org_id_projects_project_id_infra_update_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling RulesApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_update_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_update_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.orgs_org_id_projects_project_id_infra_update_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#orgs_org_id_projects_project_id_infra_update_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Bridge Firewall Rule
    # Patch the Bridge Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. Performance Note: If you want to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/bridge-policies/&lt;bridge-firewall-policy-id&gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      patch_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts)
      nil
    end

    # Create or update Bridge Firewall Rule
    # Patch the Bridge Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. Performance Note: If you want to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/bridge-policies/&amp;lt;bridge-firewall-policy-id&amp;gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.patch_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling RulesApi.patch_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.patch_bridge_firewall_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.patch_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Endpoint policy
    # Create or update the Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_endpoint_policy(domain_id, endpoint_policy_id, endpoint_policy, opts = {})
      patch_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, endpoint_policy, opts)
      nil
    end

    # Create or update Endpoint policy
    # Create or update the Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, endpoint_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_endpoint_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.patch_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling RulesApi.patch_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy' is set
      if @api_client.config.client_side_validation && endpoint_policy.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy' when calling RulesApi.patch_endpoint_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(endpoint_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_endpoint_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Endpoint rule
    # Create a Endpoint rule with the endpoint-rule-id is not already present, otherwise update the Endpoint Rule. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param endpoint_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_endpoint_rule(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts = {})
      patch_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts)
      nil
    end

    # Update Endpoint rule
    # Create a Endpoint rule with the endpoint-rule-id is not already present, otherwise update the Endpoint Rule. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param endpoint_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_endpoint_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.patch_endpoint_rule"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling RulesApi.patch_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule_id' is set
      if @api_client.config.client_side_validation && endpoint_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule_id' when calling RulesApi.patch_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule' is set
      if @api_client.config.client_side_validation && endpoint_rule.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule' when calling RulesApi.patch_endpoint_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s).sub('{' + 'endpoint-rule-id' + '}', endpoint_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(endpoint_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_endpoint_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_gateway_policy_for_domain(domain_id, gateway_policy_id, gateway_policy, opts = {})
      patch_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts)
      nil
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling RulesApi.patch_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_gateway_rule(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      patch_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts)
      nil
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.patch_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.patch_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.patch_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.patch_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_gateway_policy(domain_id, policy_id, ids_gateway_policy, opts = {})
      patch_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts)
      nil
    end

    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.patch_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.patch_ids_gateway_policy"
      end
      # verify the required parameter 'ids_gateway_policy' is set
      if @api_client.config.client_side_validation && ids_gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_gateway_policy' when calling RulesApi.patch_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS gateway rule
    # Update the gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_gateway_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      patch_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      nil
    end

    # Update IDS gateway rule
    # Update the gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.patch_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.patch_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.patch_ids_gateway_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling RulesApi.patch_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      patch_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      nil
    end

    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.patch_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.patch_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.patch_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling RulesApi.patch_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_security_policy(domain_id, policy_id, ids_security_policy, opts = {})
      patch_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      nil
    end

    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.patch_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.patch_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling RulesApi.patch_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Nat Rule
    # If a NAT Rule is not already present on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &lt;nat-id&gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_nat_rule(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      patch_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      nil
    end

    # Create or update a Nat Rule
    # If a NAT Rule is not already present on Tier-1 denoted by Tier-1 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-1 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) For more details related to NAT section please refer to PolicyNAT schema. Note:     IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the     scope property, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path     Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_1_id Tier-1 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_nat_rule_with_http_info(tier_1_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_policy_nat_rule ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling RulesApi.patch_policy_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.patch_policy_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.patch_policy_nat_rule"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling RulesApi.patch_policy_nat_rule"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_policy_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a NAT Rule on tier-0
    # If a NAT Rule is not already present on Tier-0 denoted by Tier-0 ID, under NAT section denoted by &lt;nat-id&gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) NAT rule cannot be applied to a loopback interface or a label referencing loopback interfaces. For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_nat_rule_on_tier0(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      patch_policy_nat_rule_on_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts)
      nil
    end

    # Create or update a NAT Rule on tier-0
    # If a NAT Rule is not already present on Tier-0 denoted by Tier-0 ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under tier-0 there will be 3 different NATs(sections). (INTERNAL, USER and DEFAULT) NAT rule cannot be applied to a loopback interface or a label referencing loopback interfaces. For more details related to NAT section please refer to PolicyNAT schema. Note:   IPSecVpnSession as Scope: Please note that old IPSecVpnSession policy path deprecated. If user specifiy old IPSecVpnSession path in the   scope property in the PATCH API, the path returned in the GET response payload will be a new path instead of the deprecated IPSecVpnSession path   Both old and new IPSecVpnSession path refer to same resource. there is no functional impact. 
    # @param tier_0_id Tier-0 ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_nat_rule_on_tier0_with_http_info(tier_0_id, nat_id, nat_rule_id, policy_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_policy_nat_rule_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling RulesApi.patch_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling RulesApi.patch_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling RulesApi.patch_policy_nat_rule_on_tier0"
      end
      # verify the required parameter 'policy_nat_rule' is set
      if @api_client.config.client_side_validation && policy_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_nat_rule' when calling RulesApi.patch_policy_nat_rule_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_policy_nat_rule_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_security_policy_for_domain(domain_id, security_policy_id, security_policy, opts = {})
      patch_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts)
      nil
    end

    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling RulesApi.patch_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_security_rule(domain_id, security_policy_id, rule_id, rule, opts = {})
      patch_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.patch_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.patch_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.patch_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.patch_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.patch_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#patch_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Endpoint policy
    # Read Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @return [EndpointPolicy]
    def read_endpoint_policy(domain_id, endpoint_policy_id, opts = {})
      data, _status_code, _headers = read_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, opts)
      data
    end

    # Read Endpoint policy
    # Read Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EndpointPolicy, Fixnum, Hash)>] EndpointPolicy data, response status code and response headers
    def read_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.read_endpoint_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.read_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling RulesApi.read_endpoint_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#read_endpoint_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Endpoint rule
    # Read Endpoint rule
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param [Hash] opts the optional parameters
    # @return [EndpointRule]
    def read_endpoint_rule(domain_id, endpoint_policy_id, endpoint_rule_id, opts = {})
      data, _status_code, _headers = read_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, opts)
      data
    end

    # Read Endpoint rule
    # Read Endpoint rule
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EndpointRule, Fixnum, Hash)>] EndpointRule data, response status code and response headers
    def read_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.read_endpoint_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.read_endpoint_rule"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling RulesApi.read_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule_id' is set
      if @api_client.config.client_side_validation && endpoint_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule_id' when calling RulesApi.read_endpoint_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s).sub('{' + 'endpoint-rule-id' + '}', endpoint_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#read_endpoint_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def read_gateway_policy_for_domain(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.read_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.read_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.read_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#read_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def read_gateway_rule(domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.read_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.read_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.read_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.read_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#read_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsGatewayPolicy]
    def read_ids_gateway_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.read_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.read_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.read_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#read_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def read_ids_gateway_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.read_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.read_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.read_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.read_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#read_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def read_security_policy_for_domain(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.read_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.read_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.read_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#read_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def read_security_rule(domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.read_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.read_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.read_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.read_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#read_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category (default to IDPSDFW)
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def reset_ids_rule_stats(opts = {})
      reset_ids_rule_stats_with_http_info(opts)
      nil
    end

    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_ids_rule_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.reset_ids_rule_stats ...'
      end
      if @api_client.config.client_side_validation && opts[:'category'] && !['IDPSDFW', 'IDPSEDGE'].include?(opts[:'category'])
        fail ArgumentError, 'invalid value for "category", must be one of IDPSDFW, IDPSEDGE'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#reset_ids_rule_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of bridge firewall rule
    # This is used to re-order a bridge firewall rule within a bridge firewall policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def revise_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of bridge firewall rule
    # This is used to re-order a bridge firewall rule within a bridge firewall policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.revise_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.revise_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling RulesApi.revise_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.revise_bridge_firewall_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.revise_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#revise_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [GatewayPolicy]
    def revise_gateway_policy(domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = revise_gateway_policy_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def revise_gateway_policy_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.revise_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling RulesApi.revise_gateway_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#revise_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_gateway_rule(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.revise_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.revise_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling RulesApi.revise_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.revise_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.revise_gateway_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#revise_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS gateway policy
    # This is used to set a precedence of a IDS gateway policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsGatewayPolicy]
    def revise_ids_gateway_policy(domain_id, policy_id, ids_gateway_policy, opts = {})
      data, _status_code, _headers = revise_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts)
      data
    end

    # Revise the positioning of IDS gateway policy
    # This is used to set a precedence of a IDS gateway policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def revise_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.revise_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.revise_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.revise_ids_gateway_policy"
      end
      # verify the required parameter 'ids_gateway_policy' is set
      if @api_client.config.client_side_validation && ids_gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_gateway_policy' when calling RulesApi.revise_ids_gateway_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#revise_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS gateway rule
    # This is used to re-order a IDS gateway rule within a IDS gateway policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsRule]
    def revise_ids_gateway_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = revise_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Revise the positioning of IDS gateway rule
    # This is used to re-order a IDS gateway rule within a IDS gateway policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def revise_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.revise_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.revise_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.revise_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.revise_ids_gateway_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling RulesApi.revise_ids_gateway_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#revise_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsRule]
    def revise_ids_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = revise_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def revise_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.revise_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.revise_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.revise_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.revise_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling RulesApi.revise_ids_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#revise_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsSecurityPolicy]
    def revise_ids_security_policy(domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = revise_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def revise_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.revise_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.revise_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling RulesApi.revise_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling RulesApi.revise_ids_security_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#revise_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [SecurityPolicy]
    def revise_security_policies(domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = revise_security_policies_with_http_info(domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def revise_security_policies_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.revise_security_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.revise_security_policies"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.revise_security_policies"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling RulesApi.revise_security_policies"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#revise_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_security_rule(domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.revise_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.revise_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.revise_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.revise_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.revise_security_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#revise_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def update_security_policy_for_domain(domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = update_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def update_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.update_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling RulesApi.update_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#update_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def update_security_rule(domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = update_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def update_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.update_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling RulesApi.update_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling RulesApi.update_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.update_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling RulesApi.update_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#update_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
