=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class DHCPApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, replace the DHCP relay config instance with this object. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def create_or_replace_dhcp_relay_config(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      data, _status_code, _headers = create_or_replace_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts)
      data
    end

    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, replace the DHCP relay config instance with this object. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def create_or_replace_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.create_or_replace_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling DHCPApi.create_or_replace_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config' is set
      if @api_client.config.client_side_validation && dhcp_relay_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config' when calling DHCPApi.create_or_replace_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#create_or_replace_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def create_or_replace_dhcp_server_config(dhcp_server_config_id, dhcp_server_config, opts = {})
      data, _status_code, _headers = create_or_replace_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts)
      data
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def create_or_replace_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.create_or_replace_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPApi.create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling DHCPApi.create_or_replace_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#create_or_replace_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def create_or_replace_infra_segment_dhcp_static_binding(segment_id, binding_id, dhcp_static_binding_config, opts = {})
      data, _status_code, _headers = create_or_replace_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, dhcp_static_binding_config, opts)
      data
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def create_or_replace_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.create_or_replace_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling DHCPApi.create_or_replace_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#create_or_replace_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def create_or_replace_segment_dhcp_static_binding(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      data, _status_code, _headers = create_or_replace_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      data
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def create_or_replace_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.create_or_replace_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling DHCPApi.create_or_replace_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#create_or_replace_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def create_or_replace_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      data, _status_code, _headers = create_or_replace_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts)
      data
    end

    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def create_or_replace_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.create_or_replace_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling DHCPApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling DHCPApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling DHCPApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#create_or_replace_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def delete_dhcp_lease(segment_id, dhcp_delete_leases, opts = {})
      delete_dhcp_lease_with_http_info(segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_lease_with_http_info(segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.delete_dhcp_lease ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.delete_dhcp_lease"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling DHCPApi.delete_dhcp_lease"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#delete_dhcp_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def delete_dhcp_lease_under_tier1(tier1_id, segment_id, dhcp_delete_leases, opts = {})
      delete_dhcp_lease_under_tier1_with_http_info(tier1_id, segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_lease_under_tier1_with_http_info(tier1_id, segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.delete_dhcp_lease_under_tier1 ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling DHCPApi.delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling DHCPApi.delete_dhcp_lease_under_tier1"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#delete_dhcp_lease_under_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP relay configuration
    # Delete DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_relay_config(dhcp_relay_config_id, opts = {})
      delete_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts)
      nil
    end

    # Delete DHCP relay configuration
    # Delete DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.delete_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling DHCPApi.delete_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#delete_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_server_config(dhcp_server_config_id, opts = {})
      delete_dhcp_server_config_with_http_info(dhcp_server_config_id, opts)
      nil
    end

    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_server_config_with_http_info(dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.delete_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPApi.delete_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#delete_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment_dhcp_static_binding(segment_id, binding_id, opts = {})
      delete_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts)
      nil
    end

    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.delete_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.delete_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.delete_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#delete_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_segment_dhcp_static_binding(tier_1_id, segment_id, binding_id, opts = {})
      delete_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts)
      nil
    end

    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.delete_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.delete_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#delete_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove Subnet DHCP server leases
    # Remove Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param list_addresses 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_subnet_dhcp_server_leases(org_id, project_id, vpc_id, subnet_id, list_addresses, opts = {})
      delete_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, list_addresses, opts)
      nil
    end

    # Remove Subnet DHCP server leases
    # Remove Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param list_addresses 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, list_addresses, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.delete_subnet_dhcp_server_leases ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling DHCPApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling DHCPApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'list_addresses' is set
      if @api_client.config.client_side_validation && list_addresses.nil?
        fail ArgumentError, "Missing the required parameter 'list_addresses' when calling DHCPApi.delete_subnet_dhcp_server_leases"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/actions/release-dhcp-server-leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_addresses)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#delete_subnet_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Subnet DHCP static binding
    # Delete VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      delete_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts)
      nil
    end

    # Delete VPC Subnet DHCP static binding
    # Delete VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.delete_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling DHCPApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling DHCPApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#delete_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read VPC Subnet DHCP server statistics
    # Read VPC Subnet DHCP server statistics along with ip pool usage information.
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def get_vpc_subnet_dhcp_server_stats(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_dhcp_server_stats_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Read VPC Subnet DHCP server statistics
    # Read VPC Subnet DHCP server statistics along with ip pool usage information.
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def get_vpc_subnet_dhcp_server_stats_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.get_vpc_subnet_dhcp_server_stats ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.get_vpc_subnet_dhcp_server_stats"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.get_vpc_subnet_dhcp_server_stats"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling DHCPApi.get_vpc_subnet_dhcp_server_stats"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling DHCPApi.get_vpc_subnet_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.get_vpc_subnet_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.get_vpc_subnet_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-server-config/stats'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#get_vpc_subnet_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Vpc Subnet DHCP server status
    # Read Vpc Subnet DHCP server status
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def get_vpc_subnet_dhcp_server_status(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_dhcp_server_status_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Read Vpc Subnet DHCP server status
    # Read Vpc Subnet DHCP server status
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def get_vpc_subnet_dhcp_server_status_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.get_vpc_subnet_dhcp_server_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.get_vpc_subnet_dhcp_server_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.get_vpc_subnet_dhcp_server_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling DHCPApi.get_vpc_subnet_dhcp_server_status"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling DHCPApi.get_vpc_subnet_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.get_vpc_subnet_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.get_vpc_subnet_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-server-config/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#get_vpc_subnet_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpRelayConfigListResult]
    def global_infra_list_dhcp_relay_config(opts = {})
      data, _status_code, _headers = global_infra_list_dhcp_relay_config_with_http_info(opts)
      data
    end

    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpRelayConfigListResult, Fixnum, Hash)>] DhcpRelayConfigListResult data, response status code and response headers
    def global_infra_list_dhcp_relay_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_list_dhcp_relay_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_list_dhcp_relay_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_list_dhcp_relay_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-relay-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_list_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerConfigListResult]
    def global_infra_list_dhcp_server_config(opts = {})
      data, _status_code, _headers = global_infra_list_dhcp_server_config_with_http_info(opts)
      data
    end

    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerConfigListResult, Fixnum, Hash)>] DhcpServerConfigListResult data, response status code and response headers
    def global_infra_list_dhcp_server_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_list_dhcp_server_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_list_dhcp_server_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_list_dhcp_server_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_list_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def global_infra_list_infra_segment_dhcp_static_binding(segment_id, opts = {})
      data, _status_code, _headers = global_infra_list_infra_segment_dhcp_static_binding_with_http_info(segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def global_infra_list_infra_segment_dhcp_static_binding_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_list_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.global_infra_list_infra_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_list_infra_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_list_infra_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_list_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def global_infra_list_segment_dhcp_static_binding(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = global_infra_list_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def global_infra_list_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_list_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.global_infra_list_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.global_infra_list_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_list_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_list_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_list_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def global_infra_read_dhcp_relay_config(dhcp_relay_config_id, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts)
      data
    end

    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def global_infra_read_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_read_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling DHCPApi.global_infra_read_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/global-infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_read_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def global_infra_read_dhcp_server_config(dhcp_server_config_id, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts)
      data
    end

    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def global_infra_read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_read_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPApi.global_infra_read_dhcp_server_config"
      end
      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_read_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [DhcpLeasesResult]
    def global_infra_read_dhcp_server_leases(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def global_infra_read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_read_dhcp_server_leases ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.global_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.global_infra_read_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_read_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_read_dhcp_server_leases, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/leases'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_read_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerState]
    def global_infra_read_dhcp_server_state(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerState, Fixnum, Hash)>] DhcpServerState data, response status code and response headers
    def global_infra_read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_read_dhcp_server_state ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.global_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.global_infra_read_dhcp_server_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_read_dhcp_server_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_read_dhcp_server_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/state'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_read_dhcp_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def global_infra_read_dhcp_server_stats(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def global_infra_read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_read_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.global_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.global_infra_read_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_read_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_read_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/stats'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_read_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def global_infra_read_dhcp_server_status(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def global_infra_read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_read_dhcp_server_status ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.global_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.global_infra_read_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_read_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_read_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/status'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_read_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def global_infra_read_infra_segment_dhcp_static_binding(segment_id, binding_id, opts = {})
      data, _status_code, _headers = global_infra_read_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def global_infra_read_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_read_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.global_infra_read_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.global_infra_read_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_read_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def global_infra_read_infra_segment_dhcp_static_binding_state(segment_id, binding_id, opts = {})
      data, _status_code, _headers = global_infra_read_infra_segment_dhcp_static_binding_state_with_http_info(segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def global_infra_read_infra_segment_dhcp_static_binding_state_with_http_info(segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_read_infra_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.global_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.global_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_read_infra_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def global_infra_read_segment_dhcp_static_binding(tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = global_infra_read_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def global_infra_read_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_read_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.global_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.global_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.global_infra_read_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_read_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def global_infra_read_segment_dhcp_static_binding_state(tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = global_infra_read_segment_dhcp_static_binding_state_with_http_info(tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def global_infra_read_segment_dhcp_static_binding_state_with_http_info(tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_read_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.global_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.global_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.global_infra_read_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_read_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def global_infra_reset_dhcp_server_stats(config_id, connectivity_path, opts = {})
      global_infra_reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      nil
    end

    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.global_infra_reset_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.global_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.global_infra_reset_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_reset_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.global_infra_reset_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/stats?action=reset'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#global_infra_reset_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpRelayConfigListResult]
    def list_dhcp_relay_config(opts = {})
      data, _status_code, _headers = list_dhcp_relay_config_with_http_info(opts)
      data
    end

    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpRelayConfigListResult, Fixnum, Hash)>] DhcpRelayConfigListResult data, response status code and response headers
    def list_dhcp_relay_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.list_dhcp_relay_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_dhcp_relay_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_dhcp_relay_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-relay-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#list_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerConfigListResult]
    def list_dhcp_server_config(opts = {})
      data, _status_code, _headers = list_dhcp_server_config_with_http_info(opts)
      data
    end

    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerConfigListResult, Fixnum, Hash)>] DhcpServerConfigListResult data, response status code and response headers
    def list_dhcp_server_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.list_dhcp_server_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_dhcp_server_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_dhcp_server_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#list_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def list_infra_segment_dhcp_static_binding(segment_id, opts = {})
      data, _status_code, _headers = list_infra_segment_dhcp_static_binding_with_http_info(segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def list_infra_segment_dhcp_static_binding_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.list_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.list_infra_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_infra_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_infra_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#list_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def list_segment_dhcp_static_binding(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = list_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def list_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.list_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.list_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.list_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#list_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Subnet DHCP server leases
    # List Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP, IP range or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpLeasesResult]
    def list_subnet_dhcp_server_leases(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List Subnet DHCP server leases
    # List Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP, IP range or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def list_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.list_subnet_dhcp_server_leases ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.list_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.list_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling DHCPApi.list_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling DHCPApi.list_subnet_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_subnet_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_subnet_dhcp_server_leases, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/state/dhcp-server-leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#list_subnet_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all VPC Subnet DHCP static bindings
    # Paginated list of all VPC Subnet DHCP static binding instances 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def list_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List all VPC Subnet DHCP static bindings
    # Paginated list of all VPC Subnet DHCP static binding instances 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def list_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.list_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.list_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.list_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling DHCPApi.list_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling DHCPApi.list_vpc_subnet_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_vpc_subnet_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.list_vpc_subnet_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#list_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, replace the DHCP relay config instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts)
      data
    end

    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, replace the DHCP relay config instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config' is set
      if @api_client.config.client_side_validation && dhcp_relay_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts)
      data
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      data
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      data
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling DHCPApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease(org_id, project_id, segment_id, dhcp_delete_leases, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dhcp_lease_with_http_info(org_id, project_id, segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease_with_http_info(org_id, project_id, segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_delete_dhcp_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1(org_id, project_id, tier1_id, segment_id, dhcp_delete_leases, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1_with_http_info(org_id, project_id, tier1_id, segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1_with_http_info(org_id, project_id, tier1_id, segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP relay configuration
    # Delete DHCP relay configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config(org_id, project_id, dhcp_relay_config_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, opts)
      nil
    end

    # Delete DHCP relay configuration
    # Delete DHCP relay configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dhcp_server_config(org_id, project_id, dhcp_server_config_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts)
      nil
    end

    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_delete_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding(org_id, project_id, segment_id, binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, opts)
      nil
    end

    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts)
      nil
    end

    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpRelayConfigListResult]
    def orgs_org_id_projects_project_id_infra_list_dhcp_relay_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_dhcp_relay_config_with_http_info(org_id, project_id, opts)
      data
    end

    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpRelayConfigListResult, Fixnum, Hash)>] DhcpRelayConfigListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_dhcp_relay_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_list_dhcp_relay_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_dhcp_relay_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_dhcp_relay_config"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_dhcp_relay_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_dhcp_relay_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-relay-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_list_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerConfigListResult]
    def orgs_org_id_projects_project_id_infra_list_dhcp_server_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_dhcp_server_config_with_http_info(org_id, project_id, opts)
      data
    end

    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerConfigListResult, Fixnum, Hash)>] DhcpServerConfigListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_dhcp_server_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_list_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding(org_id, project_id, segment_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding(org_id, project_id, tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, update the DHCP relay config instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts)
      nil
    end

    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, update the DHCP relay config instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config' is set
      if @api_client.config.client_side_validation && dhcp_relay_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dhcp_server_config(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts)
      nil
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_patch_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      nil
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      nil
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling DHCPApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def orgs_org_id_projects_project_id_infra_read_dhcp_relay_config(org_id, project_id, dhcp_relay_config_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, opts)
      data
    end

    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_relay_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_relay_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_read_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_config(org_id, project_id, dhcp_server_config_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts)
      data
    end

    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server leases
    # Read DHCP server leases
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [DhcpLeasesResult]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_leases(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_leases_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server leases
    # Read DHCP server leases
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_leases_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server state
    # Read DHCP server state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerState]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_state(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_state_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server state
    # Read DHCP server state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerState, Fixnum, Hash)>] DhcpServerState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_state_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_stats(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/stats'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server status
    # Read DHCP server status
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_status(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_status_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server status
    # Read DHCP server status
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_status_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding(org_id, project_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state(org_id, project_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state_with_http_info(org_id, project_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state_with_http_info(org_id, project_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats(org_id, project_id, config_id, connectivity_path, opts = {})
      orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      nil
    end

    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/stats?action=reset'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, update the DHCP relay config instance with specified attributes. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dhcp_relay_config(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      patch_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts)
      nil
    end

    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, update the DHCP relay config instance with specified attributes. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.patch_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling DHCPApi.patch_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config' is set
      if @api_client.config.client_side_validation && dhcp_relay_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config' when calling DHCPApi.patch_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#patch_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dhcp_server_config(dhcp_server_config_id, dhcp_server_config, opts = {})
      patch_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts)
      nil
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.patch_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPApi.patch_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling DHCPApi.patch_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#patch_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment_dhcp_static_binding(segment_id, binding_id, dhcp_static_binding_config, opts = {})
      patch_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, dhcp_static_binding_config, opts)
      nil
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.patch_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling DHCPApi.patch_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#patch_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_segment_dhcp_static_binding(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      patch_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      nil
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.patch_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling DHCPApi.patch_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#patch_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with specified attributes. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      patch_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts)
      nil
    end

    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with specified attributes. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.patch_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling DHCPApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling DHCPApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling DHCPApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#patch_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def read_dhcp_relay_config(dhcp_relay_config_id, opts = {})
      data, _status_code, _headers = read_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts)
      data
    end

    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def read_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.read_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling DHCPApi.read_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#read_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def read_dhcp_server_config(dhcp_server_config_id, opts = {})
      data, _status_code, _headers = read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts)
      data
    end

    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.read_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPApi.read_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#read_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [DhcpLeasesResult]
    def read_dhcp_server_leases(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.read_dhcp_server_leases ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.read_dhcp_server_leases"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.read_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.read_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.read_dhcp_server_leases, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/leases'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#read_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerState]
    def read_dhcp_server_state(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerState, Fixnum, Hash)>] DhcpServerState data, response status code and response headers
    def read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.read_dhcp_server_state ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.read_dhcp_server_state"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.read_dhcp_server_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.read_dhcp_server_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.read_dhcp_server_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/state'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#read_dhcp_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def read_dhcp_server_stats(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.read_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.read_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.read_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.read_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.read_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/stats'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#read_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def read_dhcp_server_status(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.read_dhcp_server_status ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.read_dhcp_server_status"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.read_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.read_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.read_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/status'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#read_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def read_infra_segment_dhcp_static_binding(segment_id, binding_id, opts = {})
      data, _status_code, _headers = read_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def read_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.read_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.read_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.read_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#read_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def read_infra_segment_dhcp_static_binding_state(segment_id, binding_id, opts = {})
      data, _status_code, _headers = read_infra_segment_dhcp_static_binding_state_with_http_info(segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def read_infra_segment_dhcp_static_binding_state_with_http_info(segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.read_infra_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.read_infra_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.read_infra_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#read_infra_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def read_segment_dhcp_static_binding(tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = read_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def read_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.read_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.read_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#read_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def read_segment_dhcp_static_binding_state(tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = read_segment_dhcp_static_binding_state_with_http_info(tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def read_segment_dhcp_static_binding_state_with_http_info(tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.read_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DHCPApi.read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPApi.read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.read_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#read_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read VPC Subnet DHCP static binding
    # Read VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def read_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      data, _status_code, _headers = read_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts)
      data
    end

    # Read VPC Subnet DHCP static binding
    # Read VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def read_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.read_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling DHCPApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling DHCPApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling DHCPApi.read_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#read_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def reset_dhcp_server_stats(config_id, connectivity_path, opts = {})
      reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      nil
    end

    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPApi.reset_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPApi.reset_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPApi.reset_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.reset_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPApi.reset_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/stats?action=reset'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPApi#reset_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
