=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class ClusterApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns information for Avi Load Balancer Controller cluster.
    # Returns information about Avi Load Balancer Controller cluster status 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [ALBControllerClusterInfo]
    def list_alb_controller_cluster_info(opts = {})
      data, _status_code, _headers = list_alb_controller_cluster_info_with_http_info(opts)
      data
    end

    # Returns information for Avi Load Balancer Controller cluster.
    # Returns information about Avi Load Balancer Controller cluster status 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [Array<(ALBControllerClusterInfo, Fixnum, Hash)>] ALBControllerClusterInfo data, response status code and response headers
    def list_alb_controller_cluster_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterApi.list_alb_controller_cluster_info ...'
      end
      # resource path
      local_var_path = '/alb/controller-nodes/cluster'

      # query parameters
      query_params = {}
      query_params[:'clustering_id'] = opts[:'clustering_id'] if !opts[:'clustering_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerClusterInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterApi#list_alb_controller_cluster_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Re-trigger clustering for Avi Load Balancer Controller Nodes.
    # Re-trigger clustering for Avi Load Balancer Controller Nodes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [ALBControllerClusterTrigger]
    def retrigger_clustering(opts = {})
      data, _status_code, _headers = retrigger_clustering_with_http_info(opts)
      data
    end

    # Re-trigger clustering for Avi Load Balancer Controller Nodes.
    # Re-trigger clustering for Avi Load Balancer Controller Nodes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [Array<(ALBControllerClusterTrigger, Fixnum, Hash)>] ALBControllerClusterTrigger data, response status code and response headers
    def retrigger_clustering_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterApi.retrigger_clustering ...'
      end
      # resource path
      local_var_path = '/alb/controller-nodes/cluster'

      # query parameters
      query_params = {}
      query_params[:'clustering_id'] = opts[:'clustering_id'] if !opts[:'clustering_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerClusterTrigger')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterApi#retrigger_clustering\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
