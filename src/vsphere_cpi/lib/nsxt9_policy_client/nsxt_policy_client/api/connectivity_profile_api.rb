=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class ConnectivityProfileApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Or Replace VPC Connectivity Profile
    # If the VPC Connectivity Profile is not already present, create a VPC Connectivity Profile instance. If it already exists, replace the VPC Connectivity Profile instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param vpc_connectivity_profile 
    # @param [Hash] opts the optional parameters
    # @return [VpcConnectivityProfile]
    def create_or_replace_vpc_connectivity_profile(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts = {})
      data, _status_code, _headers = create_or_replace_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts)
      data
    end

    # Create Or Replace VPC Connectivity Profile
    # If the VPC Connectivity Profile is not already present, create a VPC Connectivity Profile instance. If it already exists, replace the VPC Connectivity Profile instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param vpc_connectivity_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcConnectivityProfile, Fixnum, Hash)>] VpcConnectivityProfile data, response status code and response headers
    def create_or_replace_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectivityProfileApi.create_or_replace_vpc_connectivity_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ConnectivityProfileApi.create_or_replace_vpc_connectivity_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ConnectivityProfileApi.create_or_replace_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile_id' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile_id' when calling ConnectivityProfileApi.create_or_replace_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile' when calling ConnectivityProfileApi.create_or_replace_vpc_connectivity_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-connectivity-profiles/{vpc-connectivity-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-connectivity-profile-id' + '}', vpc_connectivity_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_connectivity_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcConnectivityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectivityProfileApi#create_or_replace_vpc_connectivity_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Connectivity Profile
    # Deletes the specified VPC Connectivity Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_connectivity_profile(org_id, project_id, vpc_connectivity_profile_id, opts = {})
      delete_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, opts)
      nil
    end

    # Delete VPC Connectivity Profile
    # Deletes the specified VPC Connectivity Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectivityProfileApi.delete_vpc_connectivity_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ConnectivityProfileApi.delete_vpc_connectivity_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ConnectivityProfileApi.delete_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile_id' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile_id' when calling ConnectivityProfileApi.delete_vpc_connectivity_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-connectivity-profiles/{vpc-connectivity-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-connectivity-profile-id' + '}', vpc_connectivity_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectivityProfileApi#delete_vpc_connectivity_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the VPC Connectivity Profile
    # Get the VPC Connectivity Profile
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcConnectivityProfile]
    def get_vpc_connectivity_profile(org_id, project_id, vpc_connectivity_profile_id, opts = {})
      data, _status_code, _headers = get_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, opts)
      data
    end

    # Get the VPC Connectivity Profile
    # Get the VPC Connectivity Profile
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcConnectivityProfile, Fixnum, Hash)>] VpcConnectivityProfile data, response status code and response headers
    def get_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectivityProfileApi.get_vpc_connectivity_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ConnectivityProfileApi.get_vpc_connectivity_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ConnectivityProfileApi.get_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile_id' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile_id' when calling ConnectivityProfileApi.get_vpc_connectivity_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-connectivity-profiles/{vpc-connectivity-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-connectivity-profile-id' + '}', vpc_connectivity_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcConnectivityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectivityProfileApi#get_vpc_connectivity_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC Connectivity Profiles
    # List VPC Connectivity Profiles. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcConnectivityProfileListResult]
    def list_vpc_connectivity_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = list_vpc_connectivity_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List VPC Connectivity Profiles
    # List VPC Connectivity Profiles. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcConnectivityProfileListResult, Fixnum, Hash)>] VpcConnectivityProfileListResult data, response status code and response headers
    def list_vpc_connectivity_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectivityProfileApi.list_vpc_connectivity_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ConnectivityProfileApi.list_vpc_connectivity_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ConnectivityProfileApi.list_vpc_connectivity_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ConnectivityProfileApi.list_vpc_connectivity_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ConnectivityProfileApi.list_vpc_connectivity_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-connectivity-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcConnectivityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectivityProfileApi#list_vpc_connectivity_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch VPC Connectivity Profile
    # Create VPC Connectivity Profile if not already present, otherwise update the VPC Connectivity Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param vpc_connectivity_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_connectivity_profile(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts = {})
      patch_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts)
      nil
    end

    # Patch VPC Connectivity Profile
    # Create VPC Connectivity Profile if not already present, otherwise update the VPC Connectivity Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param vpc_connectivity_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectivityProfileApi.patch_vpc_connectivity_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ConnectivityProfileApi.patch_vpc_connectivity_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ConnectivityProfileApi.patch_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile_id' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile_id' when calling ConnectivityProfileApi.patch_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile' when calling ConnectivityProfileApi.patch_vpc_connectivity_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-connectivity-profiles/{vpc-connectivity-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-connectivity-profile-id' + '}', vpc_connectivity_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_connectivity_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectivityProfileApi#patch_vpc_connectivity_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
