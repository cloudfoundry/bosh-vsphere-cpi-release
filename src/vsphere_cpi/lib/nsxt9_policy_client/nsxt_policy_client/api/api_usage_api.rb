=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class APIUsageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Authenticate and create a session
    # Authenticates using the given username and password. If successful, the HTTP response headers will contain a Set-Cookie header and an X-XSRF-TOKEN header. Both of these headers should be sent with subsequent API requests.
    # @param session_authentication_credentials 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_authenticated_session(session_authentication_credentials, opts = {})
      create_authenticated_session_with_http_info(session_authentication_credentials, opts)
      nil
    end

    # Authenticate and create a session
    # Authenticates using the given username and password. If successful, the HTTP response headers will contain a Set-Cookie header and an X-XSRF-TOKEN header. Both of these headers should be sent with subsequent API requests.
    # @param session_authentication_credentials 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_authenticated_session_with_http_info(session_authentication_credentials, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIUsageApi.create_authenticated_session ...'
      end
      # verify the required parameter 'session_authentication_credentials' is set
      if @api_client.config.client_side_validation && session_authentication_credentials.nil?
        fail ArgumentError, "Missing the required parameter 'session_authentication_credentials' when calling APIUsageApi.create_authenticated_session"
      end
      # resource path
      local_var_path = '/api/session/create'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_authentication_credentials)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIUsageApi#create_authenticated_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Destroy an authenticated session
    # Unauthenticates and makes the provided session cookie invalid. The set-cookie and x-xsrf-token headers obtained from an earlier call to /api/session/create should be provided in the HTTP headers of this request.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def destroy_authenticated_session(opts = {})
      destroy_authenticated_session_with_http_info(opts)
      nil
    end

    # Destroy an authenticated session
    # Unauthenticates and makes the provided session cookie invalid. The set-cookie and x-xsrf-token headers obtained from an earlier call to /api/session/create should be provided in the HTTP headers of this request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def destroy_authenticated_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIUsageApi.destroy_authenticated_session ...'
      end
      # resource path
      local_var_path = '/api/session/destroy'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIUsageApi#destroy_authenticated_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
