=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class TransitGatewayApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or Update VPC transit gateway
    # Create or Update VPC transit gateway 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param transit_gateway 
    # @param [Hash] opts the optional parameters
    # @return [TransitGateway]
    def create_or_replace_transit_gateway(org_id, project_id, transit_gateway_id, transit_gateway, opts = {})
      data, _status_code, _headers = create_or_replace_transit_gateway_with_http_info(org_id, project_id, transit_gateway_id, transit_gateway, opts)
      data
    end

    # Create or Update VPC transit gateway
    # Create or Update VPC transit gateway 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param transit_gateway 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransitGateway, Fixnum, Hash)>] TransitGateway data, response status code and response headers
    def create_or_replace_transit_gateway_with_http_info(org_id, project_id, transit_gateway_id, transit_gateway, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.create_or_replace_transit_gateway ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.create_or_replace_transit_gateway"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.create_or_replace_transit_gateway"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.create_or_replace_transit_gateway"
      end
      # verify the required parameter 'transit_gateway' is set
      if @api_client.config.client_side_validation && transit_gateway.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway' when calling TransitGatewayApi.create_or_replace_transit_gateway"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transit_gateway)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGateway')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#create_or_replace_transit_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update transit gateway attachment
    # Create or Update transit gateway attachment 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param attachment_id 
    # @param transit_gateway_attachment 
    # @param [Hash] opts the optional parameters
    # @return [TransitGatewayAttachment]
    def create_or_replace_transit_gateway_attachment(org_id, project_id, transit_gateway_id, attachment_id, transit_gateway_attachment, opts = {})
      data, _status_code, _headers = create_or_replace_transit_gateway_attachment_with_http_info(org_id, project_id, transit_gateway_id, attachment_id, transit_gateway_attachment, opts)
      data
    end

    # Create or Update transit gateway attachment
    # Create or Update transit gateway attachment 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param attachment_id 
    # @param transit_gateway_attachment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransitGatewayAttachment, Fixnum, Hash)>] TransitGatewayAttachment data, response status code and response headers
    def create_or_replace_transit_gateway_attachment_with_http_info(org_id, project_id, transit_gateway_id, attachment_id, transit_gateway_attachment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.create_or_replace_transit_gateway_attachment ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.create_or_replace_transit_gateway_attachment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.create_or_replace_transit_gateway_attachment"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.create_or_replace_transit_gateway_attachment"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling TransitGatewayApi.create_or_replace_transit_gateway_attachment"
      end
      # verify the required parameter 'transit_gateway_attachment' is set
      if @api_client.config.client_side_validation && transit_gateway_attachment.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_attachment' when calling TransitGatewayApi.create_or_replace_transit_gateway_attachment"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/attachments/{attachment-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s).sub('{' + 'attachment-id' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transit_gateway_attachment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayAttachment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#create_or_replace_transit_gateway_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update NAT Rule
    # Update NAT Rule on VPC denoted by Transit Gateway ID, under the given NAT section. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param tgw_id Transit Gateway ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param transit_gateway_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [TransitGatewayNatRule]
    def create_or_replace_transit_gateway_nat_rule(org_id, project_id, tgw_id, nat_id, nat_rule_id, transit_gateway_nat_rule, opts = {})
      data, _status_code, _headers = create_or_replace_transit_gateway_nat_rule_with_http_info(org_id, project_id, tgw_id, nat_id, nat_rule_id, transit_gateway_nat_rule, opts)
      data
    end

    # Update NAT Rule
    # Update NAT Rule on VPC denoted by Transit Gateway ID, under the given NAT section. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param tgw_id Transit Gateway ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param transit_gateway_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransitGatewayNatRule, Fixnum, Hash)>] TransitGatewayNatRule data, response status code and response headers
    def create_or_replace_transit_gateway_nat_rule_with_http_info(org_id, project_id, tgw_id, nat_id, nat_rule_id, transit_gateway_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.create_or_replace_transit_gateway_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.create_or_replace_transit_gateway_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.create_or_replace_transit_gateway_nat_rule"
      end
      # verify the required parameter 'tgw_id' is set
      if @api_client.config.client_side_validation && tgw_id.nil?
        fail ArgumentError, "Missing the required parameter 'tgw_id' when calling TransitGatewayApi.create_or_replace_transit_gateway_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling TransitGatewayApi.create_or_replace_transit_gateway_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling TransitGatewayApi.create_or_replace_transit_gateway_nat_rule"
      end
      # verify the required parameter 'transit_gateway_nat_rule' is set
      if @api_client.config.client_side_validation && transit_gateway_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_nat_rule' when calling TransitGatewayApi.create_or_replace_transit_gateway_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{tgw-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tgw-id' + '}', tgw_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transit_gateway_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#create_or_replace_transit_gateway_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC transit gateway
    # Delete VPC transit gateway 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transit_gateway(org_id, project_id, transit_gateway_id, opts = {})
      delete_transit_gateway_with_http_info(org_id, project_id, transit_gateway_id, opts)
      nil
    end

    # Delete VPC transit gateway
    # Delete VPC transit gateway 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_transit_gateway_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.delete_transit_gateway ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.delete_transit_gateway"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.delete_transit_gateway"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.delete_transit_gateway"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#delete_transit_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete transit gateway attachment
    # Delete transit gateway attachment 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transit_gateway_attachment(org_id, project_id, transit_gateway_id, attachment_id, opts = {})
      delete_transit_gateway_attachment_with_http_info(org_id, project_id, transit_gateway_id, attachment_id, opts)
      nil
    end

    # Delete transit gateway attachment
    # Delete transit gateway attachment 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_transit_gateway_attachment_with_http_info(org_id, project_id, transit_gateway_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.delete_transit_gateway_attachment ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.delete_transit_gateway_attachment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.delete_transit_gateway_attachment"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.delete_transit_gateway_attachment"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling TransitGatewayApi.delete_transit_gateway_attachment"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/attachments/{attachment-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s).sub('{' + 'attachment-id' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#delete_transit_gateway_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NAT Rule
    # Delete NAT Rule under the given Transit Gateway, under the given NAT section.
    # @param org_id Org ID
    # @param project_id Project ID
    # @param tgw_id Transit Gateway ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transit_gateway_nat_rule(org_id, project_id, tgw_id, nat_id, nat_rule_id, opts = {})
      delete_transit_gateway_nat_rule_with_http_info(org_id, project_id, tgw_id, nat_id, nat_rule_id, opts)
      nil
    end

    # Delete NAT Rule
    # Delete NAT Rule under the given Transit Gateway, under the given NAT section.
    # @param org_id Org ID
    # @param project_id Project ID
    # @param tgw_id Transit Gateway ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_transit_gateway_nat_rule_with_http_info(org_id, project_id, tgw_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.delete_transit_gateway_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.delete_transit_gateway_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.delete_transit_gateway_nat_rule"
      end
      # verify the required parameter 'tgw_id' is set
      if @api_client.config.client_side_validation && tgw_id.nil?
        fail ArgumentError, "Missing the required parameter 'tgw_id' when calling TransitGatewayApi.delete_transit_gateway_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling TransitGatewayApi.delete_transit_gateway_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling TransitGatewayApi.delete_transit_gateway_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{tgw-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tgw-id' + '}', tgw_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#delete_transit_gateway_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List networks advertised to the TGW external attachment
    # Returns information about all networks which are advertised to the TGW external attachment. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param external_attachment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyAdvertisedNetworksListResult]
    def get_transit_gateway_advertised_networks(org_id, project_id, transit_gateway_id, external_attachment_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_advertised_networks_with_http_info(org_id, project_id, transit_gateway_id, external_attachment_id, opts)
      data
    end

    # List networks advertised to the TGW external attachment
    # Returns information about all networks which are advertised to the TGW external attachment. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param external_attachment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyAdvertisedNetworksListResult, Fixnum, Hash)>] PolicyAdvertisedNetworksListResult data, response status code and response headers
    def get_transit_gateway_advertised_networks_with_http_info(org_id, project_id, transit_gateway_id, external_attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_advertised_networks ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_advertised_networks"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_advertised_networks"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_advertised_networks"
      end
      # verify the required parameter 'external_attachment_id' is set
      if @api_client.config.client_side_validation && external_attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_attachment_id' when calling TransitGatewayApi.get_transit_gateway_advertised_networks"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_advertised_networks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_advertised_networks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/attachments/{external-attachment-id}/advertised-networks'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s).sub('{' + 'external-attachment-id' + '}', external_attachment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyAdvertisedNetworksListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_advertised_networks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List networks advertised to the TGW external attachment in CSV format
    # Returns information about all networks which are advertised to the TGW external attachment in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param external_attachment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyAdvertisedNetworkInCsvFormat]
    def get_transit_gateway_advertised_networks_download(org_id, project_id, transit_gateway_id, external_attachment_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_advertised_networks_download_with_http_info(org_id, project_id, transit_gateway_id, external_attachment_id, opts)
      data
    end

    # List networks advertised to the TGW external attachment in CSV format
    # Returns information about all networks which are advertised to the TGW external attachment in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param external_attachment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyAdvertisedNetworkInCsvFormat, Fixnum, Hash)>] PolicyAdvertisedNetworkInCsvFormat data, response status code and response headers
    def get_transit_gateway_advertised_networks_download_with_http_info(org_id, project_id, transit_gateway_id, external_attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_advertised_networks_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_advertised_networks_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_advertised_networks_download"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_advertised_networks_download"
      end
      # verify the required parameter 'external_attachment_id' is set
      if @api_client.config.client_side_validation && external_attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_attachment_id' when calling TransitGatewayApi.get_transit_gateway_advertised_networks_download"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_advertised_networks_download, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_advertised_networks_download, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/attachments/{external-attachment-id}/advertised-networks/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s).sub('{' + 'external-attachment-id' + '}', external_attachment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyAdvertisedNetworkInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_advertised_networks_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get transit gateway realization failures
    # Retrieves only the resources with the reason not \"SUCCESS\".  In case of failure or warning of the resource a reason object explaining the type of failure (ERROR, WARNING) and the detailed message of what the user could do to remediate is captured. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyTransitGatewayAlarm]
    def get_transit_gateway_alarms(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_alarms_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # Get transit gateway realization failures
    # Retrieves only the resources with the reason not \&quot;SUCCESS\&quot;.  In case of failure or warning of the resource a reason object explaining the type of failure (ERROR, WARNING) and the detailed message of what the user could do to remediate is captured. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyTransitGatewayAlarm, Fixnum, Hash)>] PolicyTransitGatewayAlarm data, response status code and response headers
    def get_transit_gateway_alarms_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_alarms ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_alarms"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_alarms"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_alarms"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/realization-failures'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyTransitGatewayAlarm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_alarms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Transit Gateway Address Resolution Protocol Proxies
    # Returns ARP proxy table for a TGW. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [PolicyArpProxyTableListResult]
    def get_transit_gateway_arp_proxies(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_arp_proxies_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # Get Transit Gateway Address Resolution Protocol Proxies
    # Returns ARP proxy table for a TGW. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(PolicyArpProxyTableListResult, Fixnum, Hash)>] PolicyArpProxyTableListResult data, response status code and response headers
    def get_transit_gateway_arp_proxies_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_arp_proxies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_arp_proxies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_arp_proxies"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_arp_proxies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_arp_proxies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_arp_proxies, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/arp-proxies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyArpProxyTableListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_arp_proxies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Transit Gateway Address Resolution Protocol Proxies in CSV format
    # Returns ARP proxy table for a TGW in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [PolicyArpProxyTableCsvListResult]
    def get_transit_gateway_arp_proxies_download(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_arp_proxies_download_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # Get Transit Gateway Address Resolution Protocol Proxies in CSV format
    # Returns ARP proxy table for a TGW in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(PolicyArpProxyTableCsvListResult, Fixnum, Hash)>] PolicyArpProxyTableCsvListResult data, response status code and response headers
    def get_transit_gateway_arp_proxies_download_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_arp_proxies_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_arp_proxies_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_arp_proxies_download"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_arp_proxies_download"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/arp-proxies/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyArpProxyTableCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_arp_proxies_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get transit gateway attachment statistics.
    # Retrieve the total tx, rx dropped, total bytes, total packets of all traffic that flows to the TGW attachment. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [TransitGatewayAttachmentStatistics]
    def get_transit_gateway_attachment_statistics(org_id, project_id, transit_gateway_id, attachment_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_attachment_statistics_with_http_info(org_id, project_id, transit_gateway_id, attachment_id, opts)
      data
    end

    # Get transit gateway attachment statistics.
    # Retrieve the total tx, rx dropped, total bytes, total packets of all traffic that flows to the TGW attachment. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransitGatewayAttachmentStatistics, Fixnum, Hash)>] TransitGatewayAttachmentStatistics data, response status code and response headers
    def get_transit_gateway_attachment_statistics_with_http_info(org_id, project_id, transit_gateway_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_attachment_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_attachment_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_attachment_statistics"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_attachment_statistics"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling TransitGatewayApi.get_transit_gateway_attachment_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/attachments/{attachment-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s).sub('{' + 'attachment-id' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayAttachmentStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_attachment_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get forwarding table from TGW
    # Get forwarding table from TGW. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RoutingTableListResult]
    def get_transit_gateway_forwarding_table(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_forwarding_table_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # Get forwarding table from TGW
    # Get forwarding table from TGW. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RoutingTableListResult, Fixnum, Hash)>] RoutingTableListResult data, response status code and response headers
    def get_transit_gateway_forwarding_table_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_forwarding_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_forwarding_table"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_forwarding_table"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_forwarding_table"
      end
      if @api_client.config.client_side_validation && opts[:'component_type'] && !['DR_ROUTES'].include?(opts[:'component_type'])
        fail ArgumentError, 'invalid value for "component_type", must be one of DR_ROUTES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_forwarding_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_forwarding_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'route_source'] && !['BGP', 'STATIC', 'CONNECTED', 'OSPF'].include?(opts[:'route_source'])
        fail ArgumentError, 'invalid value for "route_source", must be one of BGP, STATIC, CONNECTED, OSPF'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/forwarding-table'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_id'] = opts[:'edge_id'] if !opts[:'edge_id'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'host_id'] = opts[:'host_id'] if !opts[:'host_id'].nil?
      query_params[:'host_path'] = opts[:'host_path'] if !opts[:'host_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'route_source'] = opts[:'route_source'] if !opts[:'route_source'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingTableListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_forwarding_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get forwarding table from TGW in CSV format
    # Get forwarding table from TGW in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayRouteTableInCsvFormat]
    def get_transit_gateway_forwarding_table_download(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_forwarding_table_download_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # Get forwarding table from TGW in CSV format
    # Get forwarding table from TGW in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayRouteTableInCsvFormat, Fixnum, Hash)>] GatewayRouteTableInCsvFormat data, response status code and response headers
    def get_transit_gateway_forwarding_table_download_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_forwarding_table_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_forwarding_table_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_forwarding_table_download"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_forwarding_table_download"
      end
      if @api_client.config.client_side_validation && opts[:'component_type'] && !['DR_ROUTES'].include?(opts[:'component_type'])
        fail ArgumentError, 'invalid value for "component_type", must be one of DR_ROUTES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_forwarding_table_download, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_forwarding_table_download, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'route_source'] && !['BGP', 'STATIC', 'CONNECTED', 'OSPF'].include?(opts[:'route_source'])
        fail ArgumentError, 'invalid value for "route_source", must be one of BGP, STATIC, CONNECTED, OSPF'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/forwarding-table/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_id'] = opts[:'edge_id'] if !opts[:'edge_id'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'host_id'] = opts[:'host_id'] if !opts[:'host_id'].nil?
      query_params[:'host_path'] = opts[:'host_path'] if !opts[:'host_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'route_source'] = opts[:'route_source'] if !opts[:'route_source'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayRouteTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_forwarding_table_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GET TransitGateway NAT types /section
    # Get either of the two supported sections (USER and NAT64) under the given Transit Gateway. The USER section allows IPV4 based NAT rules, while the NAT64 rules allow translating IPV6 packets to IPV4 packets. 
    # @param org_id 
    # @param project_id 
    # @param tgw_id 
    # @param nat_id 
    # @param [Hash] opts the optional parameters
    # @return [TransitGatewayNat]
    def get_transit_gateway_nat(org_id, project_id, tgw_id, nat_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_nat_with_http_info(org_id, project_id, tgw_id, nat_id, opts)
      data
    end

    # GET TransitGateway NAT types /section
    # Get either of the two supported sections (USER and NAT64) under the given Transit Gateway. The USER section allows IPV4 based NAT rules, while the NAT64 rules allow translating IPV6 packets to IPV4 packets. 
    # @param org_id 
    # @param project_id 
    # @param tgw_id 
    # @param nat_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransitGatewayNat, Fixnum, Hash)>] TransitGatewayNat data, response status code and response headers
    def get_transit_gateway_nat_with_http_info(org_id, project_id, tgw_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_nat ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_nat"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_nat"
      end
      # verify the required parameter 'tgw_id' is set
      if @api_client.config.client_side_validation && tgw_id.nil?
        fail ArgumentError, "Missing the required parameter 'tgw_id' when calling TransitGatewayApi.get_transit_gateway_nat"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling TransitGatewayApi.get_transit_gateway_nat"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{tgw-id}/nat/{nat-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tgw-id' + '}', tgw_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayNat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_nat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from the given Transit Gateway, under the given NAT section. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param tgw_id transit gateway ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [TransitGatewayNatRule]
    def get_transit_gateway_nat_rule(org_id, project_id, tgw_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_nat_rule_with_http_info(org_id, project_id, tgw_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from the given Transit Gateway, under the given NAT section. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param tgw_id transit gateway ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransitGatewayNatRule, Fixnum, Hash)>] TransitGatewayNatRule data, response status code and response headers
    def get_transit_gateway_nat_rule_with_http_info(org_id, project_id, tgw_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_nat_rule"
      end
      # verify the required parameter 'tgw_id' is set
      if @api_client.config.client_side_validation && tgw_id.nil?
        fail ArgumentError, "Missing the required parameter 'tgw_id' when calling TransitGatewayApi.get_transit_gateway_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling TransitGatewayApi.get_transit_gateway_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling TransitGatewayApi.get_transit_gateway_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{tgw-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tgw-id' + '}', tgw_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get transit gateway NAT Rule Statistics
    # Get transit gateway NAT Rule Statistics from transit gateway denoted by transit-gateway-id,  under NAT section denoted by &lt;nat-id&gt;. Under transit gateway there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyNatRuleStatisticsListResult]
    def get_transit_gateway_nat_rule_statistics(org_id, project_id, transit_gateway_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_nat_rule_statistics_with_http_info(org_id, project_id, transit_gateway_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get transit gateway NAT Rule Statistics
    # Get transit gateway NAT Rule Statistics from transit gateway denoted by transit-gateway-id,  under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under transit gateway there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyNatRuleStatisticsListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsListResult data, response status code and response headers
    def get_transit_gateway_nat_rule_statistics_with_http_info(org_id, project_id, transit_gateway_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_nat_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_nat_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_nat_rule_statistics"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_nat_rule_statistics"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling TransitGatewayApi.get_transit_gateway_nat_rule_statistics"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling TransitGatewayApi.get_transit_gateway_nat_rule_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['aggregate'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of aggregate'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/nat/{nat-id}/nat-rules/{nat-rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_nat_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get routing table from TGW
    # Get routing table from TGW. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RoutingTableListResult]
    def get_transit_gateway_routing_table(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_routing_table_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # Get routing table from TGW
    # Get routing table from TGW. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RoutingTableListResult, Fixnum, Hash)>] RoutingTableListResult data, response status code and response headers
    def get_transit_gateway_routing_table_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_routing_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_routing_table"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_routing_table"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_routing_table"
      end
      if @api_client.config.client_side_validation && opts[:'component_type'] && !['DR_ROUTES'].include?(opts[:'component_type'])
        fail ArgumentError, 'invalid value for "component_type", must be one of DR_ROUTES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_routing_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_routing_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'route_source'] && !['BGP', 'STATIC', 'CONNECTED', 'OSPF'].include?(opts[:'route_source'])
        fail ArgumentError, 'invalid value for "route_source", must be one of BGP, STATIC, CONNECTED, OSPF'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/routing-table'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_id'] = opts[:'edge_id'] if !opts[:'edge_id'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'host_id'] = opts[:'host_id'] if !opts[:'host_id'].nil?
      query_params[:'host_path'] = opts[:'host_path'] if !opts[:'host_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'route_source'] = opts[:'route_source'] if !opts[:'route_source'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingTableListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_routing_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get routing table from TGW in CSV format
    # Get routing table from TGW in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayRouteTableInCsvFormat]
    def get_transit_gateway_routing_table_download(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_routing_table_download_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # Get routing table from TGW in CSV format
    # Get routing table from TGW in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayRouteTableInCsvFormat, Fixnum, Hash)>] GatewayRouteTableInCsvFormat data, response status code and response headers
    def get_transit_gateway_routing_table_download_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_routing_table_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_routing_table_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_routing_table_download"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_routing_table_download"
      end
      if @api_client.config.client_side_validation && opts[:'component_type'] && !['DR_ROUTES'].include?(opts[:'component_type'])
        fail ArgumentError, 'invalid value for "component_type", must be one of DR_ROUTES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_routing_table_download, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_routing_table_download, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'route_source'] && !['BGP', 'STATIC', 'CONNECTED', 'OSPF'].include?(opts[:'route_source'])
        fail ArgumentError, 'invalid value for "route_source", must be one of BGP, STATIC, CONNECTED, OSPF'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/routing-table/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_id'] = opts[:'edge_id'] if !opts[:'edge_id'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'host_id'] = opts[:'host_id'] if !opts[:'host_id'].nil?
      query_params[:'host_path'] = opts[:'host_path'] if !opts[:'host_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'route_source'] = opts[:'route_source'] if !opts[:'route_source'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayRouteTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_routing_table_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Transit Gateway state
    # Get the transit gateway's runtime state that includes the transport node and the HA details, if applicable. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [TransitGatewayState]
    def get_transit_gateway_state(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_state_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # Get Transit Gateway state
    # Get the transit gateway&#39;s runtime state that includes the transport node and the HA details, if applicable. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(TransitGatewayState, Fixnum, Hash)>] TransitGatewayState data, response status code and response headers
    def get_transit_gateway_state_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_state"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_state"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Transit Gateway statistics
    # Retrieve the total tx, rx dropped, total bytes, total packets of all traffic exchanged between the TGW and its attachments (VPC's). 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TransitGatewayStatistics]
    def get_transit_gateway_statistics(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_statistics_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # Get Transit Gateway statistics
    # Retrieve the total tx, rx dropped, total bytes, total packets of all traffic exchanged between the TGW and its attachments (VPC&#39;s). 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TransitGatewayStatistics, Fixnum, Hash)>] TransitGatewayStatistics data, response status code and response headers
    def get_transit_gateway_statistics_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_statistics"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'component_type'] && !['DR_ROUTES'].include?(opts[:'component_type'])
        fail ArgumentError, 'invalid value for "component_type", must be one of DR_ROUTES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.get_transit_gateway_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'route_source'] && !['BGP', 'STATIC', 'CONNECTED', 'OSPF'].include?(opts[:'route_source'])
        fail ArgumentError, 'invalid value for "route_source", must be one of BGP, STATIC, CONNECTED, OSPF'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_id'] = opts[:'edge_id'] if !opts[:'edge_id'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'host_id'] = opts[:'host_id'] if !opts[:'host_id'].nil?
      query_params[:'host_path'] = opts[:'host_path'] if !opts[:'host_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'route_source'] = opts[:'route_source'] if !opts[:'route_source'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of TGW
    # Get current status of VPC TGW. 
    # @param org_id Org id
    # @param project_id Project id
    # @param transit_gateway_id transit gateway id
    # @param [Hash] opts the optional parameters
    # @return [VpcTransitGatewayStatusResult]
    def get_transit_gateway_status(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = get_transit_gateway_status_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # Get current status of TGW
    # Get current status of VPC TGW. 
    # @param org_id Org id
    # @param project_id Project id
    # @param transit_gateway_id transit gateway id
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcTransitGatewayStatusResult, Fixnum, Hash)>] VpcTransitGatewayStatusResult data, response status code and response headers
    def get_transit_gateway_status_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.get_transit_gateway_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.get_transit_gateway_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.get_transit_gateway_status"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.get_transit_gateway_status"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcTransitGatewayStatusResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#get_transit_gateway_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules Statistics
    # Get NAT Rule Statistics from Transit Gateway denoted by Transit Gateway ID. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleStatisticsPerLogicalRouterListResult]
    def list_policy_transit_gate_way_nat_rules_statistics(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = list_policy_transit_gate_way_nat_rules_statistics_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # List NAT Rules Statistics
    # Get NAT Rule Statistics from Transit Gateway denoted by Transit Gateway ID. 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleStatisticsPerLogicalRouterListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsPerLogicalRouterListResult data, response status code and response headers
    def list_policy_transit_gate_way_nat_rules_statistics_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.list_policy_transit_gate_way_nat_rules_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.list_policy_transit_gate_way_nat_rules_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.list_policy_transit_gate_way_nat_rules_statistics"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.list_policy_transit_gate_way_nat_rules_statistics"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.list_policy_transit_gate_way_nat_rules_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.list_policy_transit_gate_way_nat_rules_statistics, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/nat/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsPerLogicalRouterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#list_policy_transit_gate_way_nat_rules_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC transit gateways
    # Read VPC transit gateways 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TransitGatewayListResult]
    def list_transit_gateway(org_id, project_id, opts = {})
      data, _status_code, _headers = list_transit_gateway_with_http_info(org_id, project_id, opts)
      data
    end

    # List VPC transit gateways
    # Read VPC transit gateways 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TransitGatewayListResult, Fixnum, Hash)>] TransitGatewayListResult data, response status code and response headers
    def list_transit_gateway_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.list_transit_gateway ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.list_transit_gateway"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.list_transit_gateway"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.list_transit_gateway, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.list_transit_gateway, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#list_transit_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List transit gateway attachments
    # List transit gateway attachments 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TransitGatewayAttachmentListResult]
    def list_transit_gateway_attachment(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = list_transit_gateway_attachment_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # List transit gateway attachments
    # List transit gateway attachments 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TransitGatewayAttachmentListResult, Fixnum, Hash)>] TransitGatewayAttachmentListResult data, response status code and response headers
    def list_transit_gateway_attachment_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.list_transit_gateway_attachment ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.list_transit_gateway_attachment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.list_transit_gateway_attachment"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.list_transit_gateway_attachment"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.list_transit_gateway_attachment, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.list_transit_gateway_attachment, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/attachments'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayAttachmentListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#list_transit_gateway_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TransitGateway NAT types.
    # List all NAT sections under the given TransitGateway 
    # @param org_id 
    # @param project_id 
    # @param tgw_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TransitGatewayNatListResult]
    def list_transit_gateway_nat(org_id, project_id, tgw_id, opts = {})
      data, _status_code, _headers = list_transit_gateway_nat_with_http_info(org_id, project_id, tgw_id, opts)
      data
    end

    # List TransitGateway NAT types.
    # List all NAT sections under the given TransitGateway 
    # @param org_id 
    # @param project_id 
    # @param tgw_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TransitGatewayNatListResult, Fixnum, Hash)>] TransitGatewayNatListResult data, response status code and response headers
    def list_transit_gateway_nat_with_http_info(org_id, project_id, tgw_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.list_transit_gateway_nat ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.list_transit_gateway_nat"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.list_transit_gateway_nat"
      end
      # verify the required parameter 'tgw_id' is set
      if @api_client.config.client_side_validation && tgw_id.nil?
        fail ArgumentError, "Missing the required parameter 'tgw_id' when calling TransitGatewayApi.list_transit_gateway_nat"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.list_transit_gateway_nat, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.list_transit_gateway_nat, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{tgw-id}/nat'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tgw-id' + '}', tgw_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#list_transit_gateway_nat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules under the given Transit Gateway, under the given NAT section. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param tgw_id Transit Gateway ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TransitGatewayNatRuleListResult]
    def list_transit_gateway_nat_rules(org_id, project_id, tgw_id, nat_id, opts = {})
      data, _status_code, _headers = list_transit_gateway_nat_rules_with_http_info(org_id, project_id, tgw_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules under the given Transit Gateway, under the given NAT section. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param tgw_id Transit Gateway ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TransitGatewayNatRuleListResult, Fixnum, Hash)>] TransitGatewayNatRuleListResult data, response status code and response headers
    def list_transit_gateway_nat_rules_with_http_info(org_id, project_id, tgw_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.list_transit_gateway_nat_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.list_transit_gateway_nat_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.list_transit_gateway_nat_rules"
      end
      # verify the required parameter 'tgw_id' is set
      if @api_client.config.client_side_validation && tgw_id.nil?
        fail ArgumentError, "Missing the required parameter 'tgw_id' when calling TransitGatewayApi.list_transit_gateway_nat_rules"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling TransitGatewayApi.list_transit_gateway_nat_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.list_transit_gateway_nat_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayApi.list_transit_gateway_nat_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{tgw-id}/nat/{nat-id}/nat-rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tgw-id' + '}', tgw_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#list_transit_gateway_nat_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update VPC transit gateway
    # Create or Update VPC transit gateway 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param transit_gateway 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_transit_gateway(org_id, project_id, transit_gateway_id, transit_gateway, opts = {})
      patch_transit_gateway_with_http_info(org_id, project_id, transit_gateway_id, transit_gateway, opts)
      nil
    end

    # Create or Update VPC transit gateway
    # Create or Update VPC transit gateway 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param transit_gateway 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_transit_gateway_with_http_info(org_id, project_id, transit_gateway_id, transit_gateway, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.patch_transit_gateway ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.patch_transit_gateway"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.patch_transit_gateway"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.patch_transit_gateway"
      end
      # verify the required parameter 'transit_gateway' is set
      if @api_client.config.client_side_validation && transit_gateway.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway' when calling TransitGatewayApi.patch_transit_gateway"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transit_gateway)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#patch_transit_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update transit gateway attachment
    # Create or Update transit gateway attachment 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param attachment_id 
    # @param transit_gateway_attachment 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_transit_gateway_attachment(org_id, project_id, transit_gateway_id, attachment_id, transit_gateway_attachment, opts = {})
      patch_transit_gateway_attachment_with_http_info(org_id, project_id, transit_gateway_id, attachment_id, transit_gateway_attachment, opts)
      nil
    end

    # Create or Update transit gateway attachment
    # Create or Update transit gateway attachment 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param attachment_id 
    # @param transit_gateway_attachment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_transit_gateway_attachment_with_http_info(org_id, project_id, transit_gateway_id, attachment_id, transit_gateway_attachment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.patch_transit_gateway_attachment ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.patch_transit_gateway_attachment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.patch_transit_gateway_attachment"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.patch_transit_gateway_attachment"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling TransitGatewayApi.patch_transit_gateway_attachment"
      end
      # verify the required parameter 'transit_gateway_attachment' is set
      if @api_client.config.client_side_validation && transit_gateway_attachment.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_attachment' when calling TransitGatewayApi.patch_transit_gateway_attachment"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/attachments/{attachment-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s).sub('{' + 'attachment-id' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transit_gateway_attachment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#patch_transit_gateway_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Nat Rule
    # If a NAT Rule is not already present in the transit gateway denoted by the TGW ID, under the NAT section, create a new NAT Rule. If it already exists, update the NAT Rule. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param tgw_id transit gateway ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param transit_gateway_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_transit_gateway_nat_rule(org_id, project_id, tgw_id, nat_id, nat_rule_id, transit_gateway_nat_rule, opts = {})
      patch_transit_gateway_nat_rule_with_http_info(org_id, project_id, tgw_id, nat_id, nat_rule_id, transit_gateway_nat_rule, opts)
      nil
    end

    # Create or update a Nat Rule
    # If a NAT Rule is not already present in the transit gateway denoted by the TGW ID, under the NAT section, create a new NAT Rule. If it already exists, update the NAT Rule. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param tgw_id transit gateway ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param transit_gateway_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_transit_gateway_nat_rule_with_http_info(org_id, project_id, tgw_id, nat_id, nat_rule_id, transit_gateway_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.patch_transit_gateway_nat_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.patch_transit_gateway_nat_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.patch_transit_gateway_nat_rule"
      end
      # verify the required parameter 'tgw_id' is set
      if @api_client.config.client_side_validation && tgw_id.nil?
        fail ArgumentError, "Missing the required parameter 'tgw_id' when calling TransitGatewayApi.patch_transit_gateway_nat_rule"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling TransitGatewayApi.patch_transit_gateway_nat_rule"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling TransitGatewayApi.patch_transit_gateway_nat_rule"
      end
      # verify the required parameter 'transit_gateway_nat_rule' is set
      if @api_client.config.client_side_validation && transit_gateway_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_nat_rule' when calling TransitGatewayApi.patch_transit_gateway_nat_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{tgw-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tgw-id' + '}', tgw_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transit_gateway_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#patch_transit_gateway_nat_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read VPC transit gateway
    # Read VPC transit gateway 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @return [TransitGateway]
    def read_transit_gateway(org_id, project_id, transit_gateway_id, opts = {})
      data, _status_code, _headers = read_transit_gateway_with_http_info(org_id, project_id, transit_gateway_id, opts)
      data
    end

    # Read VPC transit gateway
    # Read VPC transit gateway 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransitGateway, Fixnum, Hash)>] TransitGateway data, response status code and response headers
    def read_transit_gateway_with_http_info(org_id, project_id, transit_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.read_transit_gateway ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.read_transit_gateway"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.read_transit_gateway"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.read_transit_gateway"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGateway')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#read_transit_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read transit gateway attachment
    # Read transit gateway attachment 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [TransitGatewayAttachment]
    def read_transit_gateway_attachment(org_id, project_id, transit_gateway_id, attachment_id, opts = {})
      data, _status_code, _headers = read_transit_gateway_attachment_with_http_info(org_id, project_id, transit_gateway_id, attachment_id, opts)
      data
    end

    # Read transit gateway attachment
    # Read transit gateway attachment 
    # @param org_id 
    # @param project_id 
    # @param transit_gateway_id 
    # @param attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransitGatewayAttachment, Fixnum, Hash)>] TransitGatewayAttachment data, response status code and response headers
    def read_transit_gateway_attachment_with_http_info(org_id, project_id, transit_gateway_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayApi.read_transit_gateway_attachment ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TransitGatewayApi.read_transit_gateway_attachment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TransitGatewayApi.read_transit_gateway_attachment"
      end
      # verify the required parameter 'transit_gateway_id' is set
      if @api_client.config.client_side_validation && transit_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'transit_gateway_id' when calling TransitGatewayApi.read_transit_gateway_attachment"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling TransitGatewayApi.read_transit_gateway_attachment"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/transit-gateways/{transit-gateway-id}/attachments/{attachment-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'transit-gateway-id' + '}', transit_gateway_id.to_s).sub('{' + 'attachment-id' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransitGatewayAttachment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayApi#read_transit_gateway_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
