=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class ProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key. The values in the  request will be added or removed from the existing list. 
    # @param policy_custom_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_remove_custom_attribute(policy_custom_attributes, action, opts = {})
      add_remove_custom_attribute_with_http_info(policy_custom_attributes, action, opts)
      nil
    end

    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key. The values in the  request will be added or removed from the existing list. 
    # @param policy_custom_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_remove_custom_attribute_with_http_info(policy_custom_attributes, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.add_remove_custom_attribute ...'
      end
      # verify the required parameter 'policy_custom_attributes' is set
      if @api_client.config.client_side_validation && policy_custom_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_custom_attributes' when calling ProfilesApi.add_remove_custom_attribute"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ProfilesApi.add_remove_custom_attribute"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/infra/context-profiles/custom-attributes/default'

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_custom_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#add_remove_custom_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key.  <br> This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default to Adds/Removes custom attribute values from list 
    # @param policy_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_remove_custom_attribute_values(policy_attributes, action, opts = {})
      add_remove_custom_attribute_values_with_http_info(policy_attributes, action, opts)
      nil
    end

    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key.  &lt;br&gt; This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default to Adds/Removes custom attribute values from list 
    # @param policy_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_remove_custom_attribute_values_with_http_info(policy_attributes, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.add_remove_custom_attribute_values ...'
      end
      # verify the required parameter 'policy_attributes' is set
      if @api_client.config.client_side_validation && policy_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_attributes' when calling ProfilesApi.add_remove_custom_attribute_values"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ProfilesApi.add_remove_custom_attribute_values"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/infra/context-profiles/custom-attributes'

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#add_remove_custom_attribute_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def create_or_update_ids_profile(profile_id, ids_profile, opts = {})
      data, _status_code, _headers = create_or_update_ids_profile_with_http_info(profile_id, ids_profile, opts)
      data
    end

    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def create_or_update_ids_profile_with_http_info(profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.create_or_update_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.create_or_update_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling ProfilesApi.create_or_update_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#create_or_update_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create L7 Access Profile entry
    # API will create L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def create_or_update_l7_access_entry(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      data, _status_code, _headers = create_or_update_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts)
      data
    end

    # Create L7 Access Profile entry
    # API will create L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def create_or_update_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.create_or_update_l7_access_entry ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.create_or_update_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling ProfilesApi.create_or_update_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry' is set
      if @api_client.config.client_side_validation && l7_access_entry.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry' when calling ProfilesApi.create_or_update_l7_access_entry"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#create_or_update_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update L7 Access Profile
    # API will update L7 Access Profile
    # @param l7_access_profile_id 
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [L7AccessProfile]
    def create_or_update_l7_access_profile(l7_access_profile_id, l7_access_profile, opts = {})
      data, _status_code, _headers = create_or_update_l7_access_profile_with_http_info(l7_access_profile_id, l7_access_profile, opts)
      data
    end

    # Update L7 Access Profile
    # API will update L7 Access Profile
    # @param l7_access_profile_id 
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def create_or_update_l7_access_profile_with_http_info(l7_access_profile_id, l7_access_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.create_or_update_l7_access_profile ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.create_or_update_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile' is set
      if @api_client.config.client_side_validation && l7_access_profile.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile' when calling ProfilesApi.create_or_update_l7_access_profile"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#create_or_update_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update Malware Prevention profile
    # Update Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [MalwarePreventionProfile]
    def create_or_update_malware_prevention_profile(profile_id, malware_prevention_profile, opts = {})
      data, _status_code, _headers = create_or_update_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts)
      data
    end

    # Create or Update Malware Prevention profile
    # Update Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MalwarePreventionProfile, Fixnum, Hash)>] MalwarePreventionProfile data, response status code and response headers
    def create_or_update_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.create_or_update_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.create_or_update_malware_prevention_profile"
      end
      # verify the required parameter 'malware_prevention_profile' is set
      if @api_client.config.client_side_validation && malware_prevention_profile.nil?
        fail ArgumentError, "Missing the required parameter 'malware_prevention_profile' when calling ProfilesApi.create_or_update_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(malware_prevention_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#create_or_update_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update a Policy Edge Cluster High Availability Profile
    # Create or Update a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeHighAvailabilityProfile]
    def create_or_update_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      data, _status_code, _headers = create_or_update_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts)
      data
    end

    # Create or Update a Policy Edge Cluster High Availability Profile
    # Create or Update a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeHighAvailabilityProfile, Fixnum, Hash)>] PolicyEdgeHighAvailabilityProfile data, response status code and response headers
    def create_or_update_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.create_or_update_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ProfilesApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling ProfilesApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling ProfilesApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'policy_edge_high_availability_profile' is set
      if @api_client.config.client_side_validation && policy_edge_high_availability_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_high_availability_profile' when calling ProfilesApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_high_availability_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeHighAvailabilityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#create_or_update_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Hostswitch Profile
    # Create or update a hostswitch profile. The resource_type is required and needs to be one of the following, UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile & ExtraConfigHostSwitchProfile. Uplink profile - For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). uplink_mtu_threshold is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. Teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param host_switch_profile_id 
    # @param policy_base_host_switch_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyBaseHostSwitchProfile]
    def create_or_update_policy_host_switch_profile(host_switch_profile_id, policy_base_host_switch_profile, opts = {})
      data, _status_code, _headers = create_or_update_policy_host_switch_profile_with_http_info(host_switch_profile_id, policy_base_host_switch_profile, opts)
      data
    end

    # Create or update a Hostswitch Profile
    # Create or update a hostswitch profile. The resource_type is required and needs to be one of the following, UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile &amp; ExtraConfigHostSwitchProfile. Uplink profile - For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). uplink_mtu_threshold is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. Teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param host_switch_profile_id 
    # @param policy_base_host_switch_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyBaseHostSwitchProfile, Fixnum, Hash)>] PolicyBaseHostSwitchProfile data, response status code and response headers
    def create_or_update_policy_host_switch_profile_with_http_info(host_switch_profile_id, policy_base_host_switch_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.create_or_update_policy_host_switch_profile ...'
      end
      # verify the required parameter 'host_switch_profile_id' is set
      if @api_client.config.client_side_validation && host_switch_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_switch_profile_id' when calling ProfilesApi.create_or_update_policy_host_switch_profile"
      end
      # verify the required parameter 'policy_base_host_switch_profile' is set
      if @api_client.config.client_side_validation && policy_base_host_switch_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_base_host_switch_profile' when calling ProfilesApi.create_or_update_policy_host_switch_profile"
      end
      # resource path
      local_var_path = '/infra/host-switch-profiles/{host-switch-profile-id}'.sub('{' + 'host-switch-profile-id' + '}', host_switch_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_base_host_switch_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyBaseHostSwitchProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#create_or_update_policy_host_switch_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Host Transport Node Profile
    # Host transport node profile captures the configuration needed to create a host transport node. A host transport node profile can be attached to compute collections for automatic host transport node creation of member hosts.  When configurations of a host transport node profile(TNP) are updated, all the host transport nodes in all the compute collections to which this TNP is attached are updated to reflect the updated configuration. 
    # @param transport_node_profile_id 
    # @param policy_host_transport_node_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override_nsx_ownership Override NSX Ownership (default to false)
    # @return [PolicyHostTransportNodeProfile]
    def create_or_update_policy_host_transport_node_profile(transport_node_profile_id, policy_host_transport_node_profile, opts = {})
      data, _status_code, _headers = create_or_update_policy_host_transport_node_profile_with_http_info(transport_node_profile_id, policy_host_transport_node_profile, opts)
      data
    end

    # Update a Host Transport Node Profile
    # Host transport node profile captures the configuration needed to create a host transport node. A host transport node profile can be attached to compute collections for automatic host transport node creation of member hosts.  When configurations of a host transport node profile(TNP) are updated, all the host transport nodes in all the compute collections to which this TNP is attached are updated to reflect the updated configuration. 
    # @param transport_node_profile_id 
    # @param policy_host_transport_node_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override_nsx_ownership Override NSX Ownership
    # @return [Array<(PolicyHostTransportNodeProfile, Fixnum, Hash)>] PolicyHostTransportNodeProfile data, response status code and response headers
    def create_or_update_policy_host_transport_node_profile_with_http_info(transport_node_profile_id, policy_host_transport_node_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.create_or_update_policy_host_transport_node_profile ...'
      end
      # verify the required parameter 'transport_node_profile_id' is set
      if @api_client.config.client_side_validation && transport_node_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_profile_id' when calling ProfilesApi.create_or_update_policy_host_transport_node_profile"
      end
      # verify the required parameter 'policy_host_transport_node_profile' is set
      if @api_client.config.client_side_validation && policy_host_transport_node_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_host_transport_node_profile' when calling ProfilesApi.create_or_update_policy_host_transport_node_profile"
      end
      # resource path
      local_var_path = '/infra/host-transport-node-profiles/{transport-node-profile-id}'.sub('{' + 'transport-node-profile-id' + '}', transport_node_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override_nsx_ownership'] = opts[:'override_nsx_ownership'] if !opts[:'override_nsx_ownership'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_host_transport_node_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyHostTransportNodeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#create_or_update_policy_host_transport_node_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update static mime content id
    # API will create/update static mime content id
    # @param static_mime_content_id static mime content id
    # @param static_mime_content 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [StaticMimeContent]
    def create_or_update_policy_static_mime_content(static_mime_content_id, static_mime_content, opts = {})
      data, _status_code, _headers = create_or_update_policy_static_mime_content_with_http_info(static_mime_content_id, static_mime_content, opts)
      data
    end

    # Update static mime content id
    # API will create/update static mime content id
    # @param static_mime_content_id static mime content id
    # @param static_mime_content 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(StaticMimeContent, Fixnum, Hash)>] StaticMimeContent data, response status code and response headers
    def create_or_update_policy_static_mime_content_with_http_info(static_mime_content_id, static_mime_content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.create_or_update_policy_static_mime_content ...'
      end
      # verify the required parameter 'static_mime_content_id' is set
      if @api_client.config.client_side_validation && static_mime_content_id.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content_id' when calling ProfilesApi.create_or_update_policy_static_mime_content"
      end
      # verify the required parameter 'static_mime_content' is set
      if @api_client.config.client_side_validation && static_mime_content.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content' when calling ProfilesApi.create_or_update_policy_static_mime_content"
      end
      # resource path
      local_var_path = '/infra/static-mime-contents/{static-mime-content-id}'.sub('{' + 'static-mime-content-id' + '}', static_mime_content_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_mime_content)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticMimeContent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#create_or_update_policy_static_mime_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_ids_pcap_file(id, opts = {})
      delete_ids_pcap_file_with_http_info(id, opts)
      nil
    end

    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_pcap_file_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.delete_ids_pcap_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProfilesApi.delete_ids_pcap_file"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#delete_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_profile(profile_id, opts = {})
      delete_ids_profile_with_http_info(profile_id, opts)
      nil
    end

    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.delete_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.delete_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#delete_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L7 Access Profile entry
    # API will delete L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_l7_access_entry(l7_access_profile_id, l7_access_entry_id, opts = {})
      delete_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, opts)
      nil
    end

    # Delete L7 Access Profile entry
    # API will delete L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.delete_l7_access_entry ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.delete_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling ProfilesApi.delete_l7_access_entry"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#delete_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L7 Access Profile
    # API will delete L7 Access Profile
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_l7_access_profile(l7_access_profile_id, opts = {})
      delete_l7_access_profile_with_http_info(l7_access_profile_id, opts)
      nil
    end

    # Delete L7 Access Profile
    # API will delete L7 Access Profile
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l7_access_profile_with_http_info(l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.delete_l7_access_profile ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.delete_l7_access_profile"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#delete_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Malware Prevention profile
    # Delete Malware Prevention profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_malware_prevention_profile(profile_id, opts = {})
      delete_malware_prevention_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete Malware Prevention profile
    # Delete Malware Prevention profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_malware_prevention_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.delete_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.delete_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#delete_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Context Profile
    # Deletes the specified Policy Context Profile. If the Policy Context Profile is consumed in a firewall rule, it won't get deleted. 
    # @param context_profile_id Policy Context Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @option opts [BOOLEAN] :override Delete the locally overridden global object (default to false)
    # @return [nil]
    def delete_policy_context_profile(context_profile_id, opts = {})
      delete_policy_context_profile_with_http_info(context_profile_id, opts)
      nil
    end

    # Delete Policy Context Profile
    # Deletes the specified Policy Context Profile. If the Policy Context Profile is consumed in a firewall rule, it won&#39;t get deleted. 
    # @param context_profile_id Policy Context Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @option opts [BOOLEAN] :override Delete the locally overridden global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_context_profile_with_http_info(context_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.delete_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.delete_policy_context_profile"
      end
      # resource path
      local_var_path = '/infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#delete_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Policy Edge Cluster High Availability Profile
    # Delete a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      delete_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts)
      nil
    end

    # Delete a Policy Edge Cluster High Availability Profile
    # Delete a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.delete_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ProfilesApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling ProfilesApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling ProfilesApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#delete_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Hostswitch Profile
    # Deletes a specified hostswitch profile.
    # @param host_switch_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_host_switch_profile(host_switch_profile_id, opts = {})
      delete_policy_host_switch_profile_with_http_info(host_switch_profile_id, opts)
      nil
    end

    # Delete a Hostswitch Profile
    # Deletes a specified hostswitch profile.
    # @param host_switch_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_host_switch_profile_with_http_info(host_switch_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.delete_policy_host_switch_profile ...'
      end
      # verify the required parameter 'host_switch_profile_id' is set
      if @api_client.config.client_side_validation && host_switch_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_switch_profile_id' when calling ProfilesApi.delete_policy_host_switch_profile"
      end
      # resource path
      local_var_path = '/infra/host-switch-profiles/{host-switch-profile-id}'.sub('{' + 'host-switch-profile-id' + '}', host_switch_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#delete_policy_host_switch_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Host Transport Node Profile
    # Deletes the specified host transport node profile. A host transport node profile can be deleted only when it is not attached to any compute collection. 
    # @param transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_host_transport_node_profile(transport_node_profile_id, opts = {})
      delete_policy_host_transport_node_profile_with_http_info(transport_node_profile_id, opts)
      nil
    end

    # Delete a Host Transport Node Profile
    # Deletes the specified host transport node profile. A host transport node profile can be deleted only when it is not attached to any compute collection. 
    # @param transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_host_transport_node_profile_with_http_info(transport_node_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.delete_policy_host_transport_node_profile ...'
      end
      # verify the required parameter 'transport_node_profile_id' is set
      if @api_client.config.client_side_validation && transport_node_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_profile_id' when calling ProfilesApi.delete_policy_host_transport_node_profile"
      end
      # resource path
      local_var_path = '/infra/host-transport-node-profiles/{transport-node-profile-id}'.sub('{' + 'transport-node-profile-id' + '}', transport_node_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#delete_policy_host_transport_node_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete static Mime content
    # API will delete static mime content
    # @param static_mime_content_id Static mime content id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_policy_static_mime_content(static_mime_content_id, opts = {})
      delete_policy_static_mime_content_with_http_info(static_mime_content_id, opts)
      nil
    end

    # Delete static Mime content
    # API will delete static mime content
    # @param static_mime_content_id Static mime content id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_static_mime_content_with_http_info(static_mime_content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.delete_policy_static_mime_content ...'
      end
      # verify the required parameter 'static_mime_content_id' is set
      if @api_client.config.client_side_validation && static_mime_content_id.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content_id' when calling ProfilesApi.delete_policy_static_mime_content"
      end
      # resource path
      local_var_path = '/infra/static-mime-contents/{static-mime-content-id}'.sub('{' + 'static-mime-content-id' + '}', static_mime_content_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#delete_policy_static_mime_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def download_exported_pcap_file(file_name, opts = {})
      download_exported_pcap_file_with_http_info(file_name, opts)
      nil
    end

    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_exported_pcap_file_with_http_info(file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.download_exported_pcap_file ...'
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling ProfilesApi.download_exported_pcap_file"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps/{file-name}/download'.sub('{' + 'file-name' + '}', file_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#download_exported_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def export_ids_pcap_file(ids_pcap_export, opts = {})
      export_ids_pcap_file_with_http_info(ids_pcap_export, opts)
      nil
    end

    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_ids_pcap_file_with_http_info(ids_pcap_export, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.export_ids_pcap_file ...'
      end
      # verify the required parameter 'ids_pcap_export' is set
      if @api_client.config.client_side_validation && ids_pcap_export.nil?
        fail ArgumentError, "Missing the required parameter 'ids_pcap_export' when calling ProfilesApi.export_ids_pcap_file"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps/export'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_pcap_export)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#export_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves custom attribute values for given attribute key
    # This API lists all the custom attribute values defined in the system for the attribute_key mentioned as part of the url. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom (default to SYSTEM)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def get_custom_attribute(opts = {})
      data, _status_code, _headers = get_custom_attribute_with_http_info(opts)
      data
    end

    # Retrieves custom attribute values for given attribute key
    # This API lists all the custom attribute values defined in the system for the attribute_key mentioned as part of the url. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def get_custom_attribute_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.get_custom_attribute ...'
      end
      if @api_client.config.client_side_validation && opts[:'attribute_source'] && !['ALL', 'CUSTOM', 'SYSTEM'].include?(opts[:'attribute_source'])
        fail ArgumentError, 'invalid value for "attribute_source", must be one of ALL, CUSTOM, SYSTEM'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.get_custom_attribute, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.get_custom_attribute, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/context-profiles/custom-attributes/default'

      # query parameters
      query_params = {}
      query_params[:'attribute_key'] = opts[:'attribute_key'] if !opts[:'attribute_key'].nil?
      query_params[:'attribute_source'] = opts[:'attribute_source'] if !opts[:'attribute_source'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_custom_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def get_ids_profile(profile_id, opts = {})
      data, _status_code, _headers = get_ids_profile_with_http_info(profile_id, opts)
      data
    end

    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def get_ids_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.get_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.get_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsProfileSignatures]
    def get_ids_profile_signatures(profile_id, opts = {})
      data, _status_code, _headers = get_ids_profile_signatures_with_http_info(profile_id, opts)
      data
    end

    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsProfileSignatures, Fixnum, Hash)>] IdsProfileSignatures data, response status code and response headers
    def get_ids_profile_signatures_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.get_ids_profile_signatures ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.get_ids_profile_signatures"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}/effective-signatures'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileSignatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_ids_profile_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L7 Access Profile
    # API will get L7 Access Profile
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessProfile]
    def get_l7_access_profile(l7_access_profile_id, opts = {})
      data, _status_code, _headers = get_l7_access_profile_with_http_info(l7_access_profile_id, opts)
      data
    end

    # Get L7 Access Profile
    # API will get L7 Access Profile
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def get_l7_access_profile_with_http_info(l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.get_l7_access_profile ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.get_l7_access_profile"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Malware Prevention profile.
    # Read Malware Prevention profile 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [MalwarePreventionProfile]
    def get_malware_prevention_profile(profile_id, opts = {})
      data, _status_code, _headers = get_malware_prevention_profile_with_http_info(profile_id, opts)
      data
    end

    # Get Malware Prevention profile.
    # Read Malware Prevention profile 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(MalwarePreventionProfile, Fixnum, Hash)>] MalwarePreventionProfile data, response status code and response headers
    def get_malware_prevention_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.get_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.get_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyContextProfile
    # Get a single PolicyContextProfile by id 
    # @param context_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyContextProfile]
    def get_policy_context_profile(context_profile_id, opts = {})
      data, _status_code, _headers = get_policy_context_profile_with_http_info(context_profile_id, opts)
      data
    end

    # Get PolicyContextProfile
    # Get a single PolicyContextProfile by id 
    # @param context_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyContextProfile, Fixnum, Hash)>] PolicyContextProfile data, response status code and response headers
    def get_policy_context_profile_with_http_info(context_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.get_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.get_policy_context_profile"
      end
      # resource path
      local_var_path = '/infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Hostswitch Profile by ID
    # Returns information about a specified hostswitch profile.
    # @param host_switch_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyBaseHostSwitchProfile]
    def get_policy_host_switch_profile(host_switch_profile_id, opts = {})
      data, _status_code, _headers = get_policy_host_switch_profile_with_http_info(host_switch_profile_id, opts)
      data
    end

    # Get a Hostswitch Profile by ID
    # Returns information about a specified hostswitch profile.
    # @param host_switch_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyBaseHostSwitchProfile, Fixnum, Hash)>] PolicyBaseHostSwitchProfile data, response status code and response headers
    def get_policy_host_switch_profile_with_http_info(host_switch_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.get_policy_host_switch_profile ...'
      end
      # verify the required parameter 'host_switch_profile_id' is set
      if @api_client.config.client_side_validation && host_switch_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_switch_profile_id' when calling ProfilesApi.get_policy_host_switch_profile"
      end
      # resource path
      local_var_path = '/infra/host-switch-profiles/{host-switch-profile-id}'.sub('{' + 'host-switch-profile-id' + '}', host_switch_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyBaseHostSwitchProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_policy_host_switch_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Transport Node
    # Returns information about a specified host transport node profile.
    # @param host_transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyHostTransportNodeProfile]
    def get_policy_host_transport_node_profile(host_transport_node_profile_id, opts = {})
      data, _status_code, _headers = get_policy_host_transport_node_profile_with_http_info(host_transport_node_profile_id, opts)
      data
    end

    # Get a Transport Node
    # Returns information about a specified host transport node profile.
    # @param host_transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyHostTransportNodeProfile, Fixnum, Hash)>] PolicyHostTransportNodeProfile data, response status code and response headers
    def get_policy_host_transport_node_profile_with_http_info(host_transport_node_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.get_policy_host_transport_node_profile ...'
      end
      # verify the required parameter 'host_transport_node_profile_id' is set
      if @api_client.config.client_side_validation && host_transport_node_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_profile_id' when calling ProfilesApi.get_policy_host_transport_node_profile"
      end
      # resource path
      local_var_path = '/infra/host-transport-node-profiles/{host-transport-node-profile-id}'.sub('{' + 'host-transport-node-profile-id' + '}', host_transport_node_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyHostTransportNodeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_policy_host_transport_node_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Static Mime content
    # API will get static mime content
    # @param static_mime_content_id Static mime content id
    # @param [Hash] opts the optional parameters
    # @return [StaticMimeContent]
    def get_policy_static_mime_content(static_mime_content_id, opts = {})
      data, _status_code, _headers = get_policy_static_mime_content_with_http_info(static_mime_content_id, opts)
      data
    end

    # Get Static Mime content
    # API will get static mime content
    # @param static_mime_content_id Static mime content id
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticMimeContent, Fixnum, Hash)>] StaticMimeContent data, response status code and response headers
    def get_policy_static_mime_content_with_http_info(static_mime_content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.get_policy_static_mime_content ...'
      end
      # verify the required parameter 'static_mime_content_id' is set
      if @api_client.config.client_side_validation && static_mime_content_id.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content_id' when calling ProfilesApi.get_policy_static_mime_content"
      end
      # resource path
      local_var_path = '/infra/static-mime-contents/{static-mime-content-id}'.sub('{' + 'static-mime-content-id' + '}', static_mime_content_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticMimeContent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_policy_static_mime_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key. The values in the  request will be added or removed from the existing list. 
    # @param policy_custom_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_add_remove_custom_attribute(policy_custom_attributes, action, opts = {})
      global_infra_add_remove_custom_attribute_with_http_info(policy_custom_attributes, action, opts)
      nil
    end

    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key. The values in the  request will be added or removed from the existing list. 
    # @param policy_custom_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_add_remove_custom_attribute_with_http_info(policy_custom_attributes, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_add_remove_custom_attribute ...'
      end
      # verify the required parameter 'policy_custom_attributes' is set
      if @api_client.config.client_side_validation && policy_custom_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_custom_attributes' when calling ProfilesApi.global_infra_add_remove_custom_attribute"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ProfilesApi.global_infra_add_remove_custom_attribute"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/global-infra/context-profiles/custom-attributes/default'

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_custom_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_add_remove_custom_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key.  <br> This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default to Adds/Removes custom attribute values from list 
    # @param policy_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_add_remove_custom_attribute_values(policy_attributes, action, opts = {})
      global_infra_add_remove_custom_attribute_values_with_http_info(policy_attributes, action, opts)
      nil
    end

    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key.  &lt;br&gt; This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default to Adds/Removes custom attribute values from list 
    # @param policy_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_add_remove_custom_attribute_values_with_http_info(policy_attributes, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_add_remove_custom_attribute_values ...'
      end
      # verify the required parameter 'policy_attributes' is set
      if @api_client.config.client_side_validation && policy_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_attributes' when calling ProfilesApi.global_infra_add_remove_custom_attribute_values"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ProfilesApi.global_infra_add_remove_custom_attribute_values"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/global-infra/context-profiles/custom-attributes'

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_add_remove_custom_attribute_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_delete_ids_pcap_file(id, opts = {})
      global_infra_delete_ids_pcap_file_with_http_info(id, opts)
      nil
    end

    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_ids_pcap_file_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_delete_ids_pcap_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProfilesApi.global_infra_delete_ids_pcap_file"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_delete_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Context Profile
    # Deletes the specified Policy Context Profile. If the Policy Context Profile is consumed in a firewall rule, it won't get deleted. 
    # @param context_profile_id Policy Context Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @option opts [BOOLEAN] :override Delete the locally overridden global object (default to false)
    # @return [nil]
    def global_infra_delete_policy_context_profile(context_profile_id, opts = {})
      global_infra_delete_policy_context_profile_with_http_info(context_profile_id, opts)
      nil
    end

    # Delete Policy Context Profile
    # Deletes the specified Policy Context Profile. If the Policy Context Profile is consumed in a firewall rule, it won&#39;t get deleted. 
    # @param context_profile_id Policy Context Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @option opts [BOOLEAN] :override Delete the locally overridden global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_policy_context_profile_with_http_info(context_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_delete_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.global_infra_delete_policy_context_profile"
      end
      # resource path
      local_var_path = '/global-infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_delete_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_download_exported_pcap_file(file_name, opts = {})
      global_infra_download_exported_pcap_file_with_http_info(file_name, opts)
      nil
    end

    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_download_exported_pcap_file_with_http_info(file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_download_exported_pcap_file ...'
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling ProfilesApi.global_infra_download_exported_pcap_file"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps/{file-name}/download'.sub('{' + 'file-name' + '}', file_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_download_exported_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_export_ids_pcap_file(ids_pcap_export, opts = {})
      global_infra_export_ids_pcap_file_with_http_info(ids_pcap_export, opts)
      nil
    end

    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_export_ids_pcap_file_with_http_info(ids_pcap_export, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_export_ids_pcap_file ...'
      end
      # verify the required parameter 'ids_pcap_export' is set
      if @api_client.config.client_side_validation && ids_pcap_export.nil?
        fail ArgumentError, "Missing the required parameter 'ids_pcap_export' when calling ProfilesApi.global_infra_export_ids_pcap_file"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps/export'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_pcap_export)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_export_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves custom attribute values for given attribute key
    # This API lists all the custom attribute values defined in the system for the attribute_key mentioned as part of the url. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom (default to SYSTEM)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def global_infra_get_custom_attribute(opts = {})
      data, _status_code, _headers = global_infra_get_custom_attribute_with_http_info(opts)
      data
    end

    # Retrieves custom attribute values for given attribute key
    # This API lists all the custom attribute values defined in the system for the attribute_key mentioned as part of the url. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def global_infra_get_custom_attribute_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_get_custom_attribute ...'
      end
      if @api_client.config.client_side_validation && opts[:'attribute_source'] && !['ALL', 'CUSTOM', 'SYSTEM'].include?(opts[:'attribute_source'])
        fail ArgumentError, 'invalid value for "attribute_source", must be one of ALL, CUSTOM, SYSTEM'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.global_infra_get_custom_attribute, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.global_infra_get_custom_attribute, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/context-profiles/custom-attributes/default'

      # query parameters
      query_params = {}
      query_params[:'attribute_key'] = opts[:'attribute_key'] if !opts[:'attribute_key'].nil?
      query_params[:'attribute_source'] = opts[:'attribute_source'] if !opts[:'attribute_source'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_get_custom_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def global_infra_get_ids_profile(profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_profile_with_http_info(profile_id, opts)
      data
    end

    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def global_infra_get_ids_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_get_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.global_infra_get_ids_profile"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_get_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsProfileSignatures]
    def global_infra_get_ids_profile_signatures(profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_profile_signatures_with_http_info(profile_id, opts)
      data
    end

    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsProfileSignatures, Fixnum, Hash)>] IdsProfileSignatures data, response status code and response headers
    def global_infra_get_ids_profile_signatures_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_get_ids_profile_signatures ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.global_infra_get_ids_profile_signatures"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/profiles/{profile-id}/effective-signatures'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileSignatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_get_ids_profile_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyContextProfile
    # Get a single PolicyContextProfile by id 
    # @param context_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyContextProfile]
    def global_infra_get_policy_context_profile(context_profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_context_profile_with_http_info(context_profile_id, opts)
      data
    end

    # Get PolicyContextProfile
    # Get a single PolicyContextProfile by id 
    # @param context_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyContextProfile, Fixnum, Hash)>] PolicyContextProfile data, response status code and response headers
    def global_infra_get_policy_context_profile_with_http_info(context_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_get_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.global_infra_get_policy_context_profile"
      end
      # resource path
      local_var_path = '/global-infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_get_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsPcapFileMetadataListResult]
    def global_infra_list_ids_pcap_files(opts = {})
      data, _status_code, _headers = global_infra_list_ids_pcap_files_with_http_info(opts)
      data
    end

    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsPcapFileMetadataListResult, Fixnum, Hash)>] IdsPcapFileMetadataListResult data, response status code and response headers
    def global_infra_list_ids_pcap_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_list_ids_pcap_files ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.global_infra_list_ids_pcap_files, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.global_infra_list_ids_pcap_files, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsPcapFileMetadataListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_list_ids_pcap_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsProfileListResult]
    def global_infra_list_ids_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_ids_profiles_with_http_info(opts)
      data
    end

    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsProfileListResult, Fixnum, Hash)>] IdsProfileListResult data, response status code and response headers
    def global_infra_list_ids_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_list_ids_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.global_infra_list_ids_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.global_infra_list_ids_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_list_ids_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyContextProfiles
    # Get all PolicyContextProfiles 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def global_infra_list_policy_context_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_policy_context_profiles_with_http_info(opts)
      data
    end

    # Get PolicyContextProfiles
    # Get all PolicyContextProfiles 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def global_infra_list_policy_context_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_list_policy_context_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.global_infra_list_policy_context_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.global_infra_list_policy_context_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/context-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_list_policy_context_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy Context Profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. Alternatively, to get a list of supported attributes and sub-attributes fire the following REST API GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom (default to SYSTEM)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def global_infra_list_profile_supported_attributes(opts = {})
      data, _status_code, _headers = global_infra_list_profile_supported_attributes_with_http_info(opts)
      data
    end

    # List Policy Context Profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. Alternatively, to get a list of supported attributes and sub-attributes fire the following REST API GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def global_infra_list_profile_supported_attributes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_list_profile_supported_attributes ...'
      end
      if @api_client.config.client_side_validation && opts[:'attribute_source'] && !['ALL', 'CUSTOM', 'SYSTEM'].include?(opts[:'attribute_source'])
        fail ArgumentError, 'invalid value for "attribute_source", must be one of ALL, CUSTOM, SYSTEM'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.global_infra_list_profile_supported_attributes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.global_infra_list_profile_supported_attributes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/context-profiles/attributes'

      # query parameters
      query_params = {}
      query_params[:'attribute_key'] = opts[:'attribute_key'] if !opts[:'attribute_key'].nil?
      query_params[:'attribute_source'] = opts[:'attribute_source'] if !opts[:'attribute_source'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_list_profile_supported_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can't have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \"custom_attributes\" id 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_create_or_update_policy_context_profile(context_profile_id, policy_context_profile, opts = {})
      global_infra_patch_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts)
      nil
    end

    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can&#39;t have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \&quot;custom_attributes\&quot; id 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_patch_create_or_update_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.global_infra_patch_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'policy_context_profile' is set
      if @api_client.config.client_side_validation && policy_context_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_context_profile' when calling ProfilesApi.global_infra_patch_create_or_update_policy_context_profile"
      end
      # resource path
      local_var_path = '/global-infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_context_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_patch_create_or_update_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update custom attribute value list for given attribute key.
    # This API updates custom attribute value list for given key in the request. This replaces the  existing list with the list provided in the request 
    # @param policy_custom_attributes 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_patch_custom_attribute(policy_custom_attributes, opts = {})
      global_infra_patch_custom_attribute_with_http_info(policy_custom_attributes, opts)
      nil
    end

    # Update custom attribute value list for given attribute key.
    # This API updates custom attribute value list for given key in the request. This replaces the  existing list with the list provided in the request 
    # @param policy_custom_attributes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_custom_attribute_with_http_info(policy_custom_attributes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_patch_custom_attribute ...'
      end
      # verify the required parameter 'policy_custom_attributes' is set
      if @api_client.config.client_side_validation && policy_custom_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_custom_attributes' when calling ProfilesApi.global_infra_patch_custom_attribute"
      end
      # resource path
      local_var_path = '/global-infra/context-profiles/custom-attributes/default'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_custom_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_patch_custom_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update custom object attribute value list for given attribute key
    # This API updates custom attribute value list for given key.  <br> This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default for create/update custom object attribute value list for given attribute key 
    # @param policy_attributes 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_patch_custom_attribute_list(policy_attributes, opts = {})
      global_infra_patch_custom_attribute_list_with_http_info(policy_attributes, opts)
      nil
    end

    # Update custom object attribute value list for given attribute key
    # This API updates custom attribute value list for given key.  &lt;br&gt; This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default for create/update custom object attribute value list for given attribute key 
    # @param policy_attributes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_custom_attribute_list_with_http_info(policy_attributes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_patch_custom_attribute_list ...'
      end
      # verify the required parameter 'policy_attributes' is set
      if @api_client.config.client_side_validation && policy_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_attributes' when calling ProfilesApi.global_infra_patch_custom_attribute_list"
      end
      # resource path
      local_var_path = '/global-infra/context-profiles/custom-attributes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_patch_custom_attribute_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can't have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \"custom_attributes\" id 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyContextProfile]
    def global_infra_put_create_or_update_policy_context_profile(context_profile_id, policy_context_profile, opts = {})
      data, _status_code, _headers = global_infra_put_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts)
      data
    end

    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can&#39;t have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \&quot;custom_attributes\&quot; id 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyContextProfile, Fixnum, Hash)>] PolicyContextProfile data, response status code and response headers
    def global_infra_put_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.global_infra_put_create_or_update_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.global_infra_put_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'policy_context_profile' is set
      if @api_client.config.client_side_validation && policy_context_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_context_profile' when calling ProfilesApi.global_infra_put_create_or_update_policy_context_profile"
      end
      # resource path
      local_var_path = '/global-infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_context_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#global_infra_put_create_or_update_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Context Profile supported attribute types
    # Returns supported attribute type strings for Context Profile. 
    # @param [Hash] opts the optional parameters
    # @return [ProfileSupportedAttributeTypesResult]
    def list_context_profile_supported_attributes_types(opts = {})
      data, _status_code, _headers = list_context_profile_supported_attributes_types_with_http_info(opts)
      data
    end

    # List Context Profile supported attribute types
    # Returns supported attribute type strings for Context Profile. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProfileSupportedAttributeTypesResult, Fixnum, Hash)>] ProfileSupportedAttributeTypesResult data, response status code and response headers
    def list_context_profile_supported_attributes_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_context_profile_supported_attributes_types ...'
      end
      # resource path
      local_var_path = '/infra/context-profiles/attribute-types'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProfileSupportedAttributeTypesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_context_profile_supported_attributes_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsPcapFileMetadataListResult]
    def list_ids_pcap_files(opts = {})
      data, _status_code, _headers = list_ids_pcap_files_with_http_info(opts)
      data
    end

    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsPcapFileMetadataListResult, Fixnum, Hash)>] IdsPcapFileMetadataListResult data, response status code and response headers
    def list_ids_pcap_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_ids_pcap_files ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_ids_pcap_files, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_ids_pcap_files, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsPcapFileMetadataListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_ids_pcap_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsProfileListResult]
    def list_ids_profiles(opts = {})
      data, _status_code, _headers = list_ids_profiles_with_http_info(opts)
      data
    end

    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsProfileListResult, Fixnum, Hash)>] IdsProfileListResult data, response status code and response headers
    def list_ids_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_ids_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_ids_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_ids_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_ids_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List l7 access profile entries
    # API will list all l7 access profiles entries
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L7AccessEntryListResult]
    def list_l7_access_entries(l7_access_profile_id, opts = {})
      data, _status_code, _headers = list_l7_access_entries_with_http_info(l7_access_profile_id, opts)
      data
    end

    # List l7 access profile entries
    # API will list all l7 access profiles entries
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L7AccessEntryListResult, Fixnum, Hash)>] L7AccessEntryListResult data, response status code and response headers
    def list_l7_access_entries_with_http_info(l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_l7_access_entries ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.list_l7_access_entries"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_l7_access_entries, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_l7_access_entries, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}/entries'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_l7_access_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy L7 access profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom (default to SYSTEM)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def list_l7_access_profile_profile_supported_attributes(opts = {})
      data, _status_code, _headers = list_l7_access_profile_profile_supported_attributes_with_http_info(opts)
      data
    end

    # List Policy L7 access profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def list_l7_access_profile_profile_supported_attributes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_l7_access_profile_profile_supported_attributes ...'
      end
      if @api_client.config.client_side_validation && opts[:'attribute_source'] && !['ALL', 'CUSTOM', 'SYSTEM'].include?(opts[:'attribute_source'])
        fail ArgumentError, 'invalid value for "attribute_source", must be one of ALL, CUSTOM, SYSTEM'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_l7_access_profile_profile_supported_attributes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_l7_access_profile_profile_supported_attributes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/l7-access-profiles/attributes'

      # query parameters
      query_params = {}
      query_params[:'attribute_key'] = opts[:'attribute_key'] if !opts[:'attribute_key'].nil?
      query_params[:'attribute_source'] = opts[:'attribute_source'] if !opts[:'attribute_source'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_l7_access_profile_profile_supported_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List l7 access Profiles
    # API will list all l7 access Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_entry_count Include the count of entries in L7 Profile (default to false)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L7AccessProfileListResult]
    def list_l7_access_profiles(opts = {})
      data, _status_code, _headers = list_l7_access_profiles_with_http_info(opts)
      data
    end

    # List l7 access Profiles
    # API will list all l7 access Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_entry_count Include the count of entries in L7 Profile
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L7AccessProfileListResult, Fixnum, Hash)>] L7AccessProfileListResult data, response status code and response headers
    def list_l7_access_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_l7_access_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_l7_access_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_l7_access_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/l7-access-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_entry_count'] = opts[:'include_entry_count'] if !opts[:'include_entry_count'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_l7_access_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Malware Prevention profiles
    # List Malware Prevention profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MalwarePreventionProfileListResult]
    def list_malware_prevention_profiles(opts = {})
      data, _status_code, _headers = list_malware_prevention_profiles_with_http_info(opts)
      data
    end

    # List Malware Prevention profiles
    # List Malware Prevention profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MalwarePreventionProfileListResult, Fixnum, Hash)>] MalwarePreventionProfileListResult data, response status code and response headers
    def list_malware_prevention_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_malware_prevention_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_malware_prevention_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_malware_prevention_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_malware_prevention_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Malware Prevention signatures
    # List Malware Prevention signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MalwarePreventionSignatureListResult]
    def list_malware_prevention_signatures(opts = {})
      data, _status_code, _headers = list_malware_prevention_signatures_with_http_info(opts)
      data
    end

    # List Malware Prevention signatures
    # List Malware Prevention signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MalwarePreventionSignatureListResult, Fixnum, Hash)>] MalwarePreventionSignatureListResult data, response status code and response headers
    def list_malware_prevention_signatures_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_malware_prevention_signatures ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_malware_prevention_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_malware_prevention_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_malware_prevention_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyContextProfiles
    # Get all PolicyContextProfiles 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def list_policy_context_profiles(opts = {})
      data, _status_code, _headers = list_policy_context_profiles_with_http_info(opts)
      data
    end

    # Get PolicyContextProfiles
    # Get all PolicyContextProfiles 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def list_policy_context_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_policy_context_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_policy_context_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_policy_context_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/context-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_policy_context_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List  Policy Edge Cluster High Availability Profiles
    # List edge cluster high availability profiles. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources (default to true)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EdgeClusterHighAvailabilityProfileListResult]
    def list_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List  Policy Edge Cluster High Availability Profiles
    # List edge cluster high availability profiles. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EdgeClusterHighAvailabilityProfileListResult, Fixnum, Hash)>] EdgeClusterHighAvailabilityProfileListResult data, response status code and response headers
    def list_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ProfilesApi.list_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling ProfilesApi.list_policy_edge_cluster_high_availability_profile"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_policy_edge_cluster_high_availability_profile, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_policy_edge_cluster_high_availability_profile, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_system_owned'] = opts[:'include_system_owned'] if !opts[:'include_system_owned'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdgeClusterHighAvailabilityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Hostswitch Profiles
    # Returns information about the configured hostswitch profiles. Hostswitch profiles define networking policies for hostswitches (sometimes referred to as bridges in OVS). Currently, following profiles are supported. UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile & ExtraConfigHostSwitchProfile. Uplink profile - teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :deployment_type Supported edge deployment type.
    # @option opts [String] :hostswitch_profile_type Supported HostSwitch profiles.
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :max_active_uplink_count Filter uplink profiles by number of active links in teaming policy.
    # @option opts [String] :node_type Fabric node type for which uplink profiles are to be listed
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :uplink_teaming_policy_name The host switch profile&#39;s uplink teaming policy name
    # @return [PolicyHostSwitchProfilesListResult]
    def list_policy_host_switch_profiles(opts = {})
      data, _status_code, _headers = list_policy_host_switch_profiles_with_http_info(opts)
      data
    end

    # List Hostswitch Profiles
    # Returns information about the configured hostswitch profiles. Hostswitch profiles define networking policies for hostswitches (sometimes referred to as bridges in OVS). Currently, following profiles are supported. UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile &amp; ExtraConfigHostSwitchProfile. Uplink profile - teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :deployment_type Supported edge deployment type.
    # @option opts [String] :hostswitch_profile_type Supported HostSwitch profiles.
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :max_active_uplink_count Filter uplink profiles by number of active links in teaming policy.
    # @option opts [String] :node_type Fabric node type for which uplink profiles are to be listed
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :uplink_teaming_policy_name The host switch profile&#39;s uplink teaming policy name
    # @return [Array<(PolicyHostSwitchProfilesListResult, Fixnum, Hash)>] PolicyHostSwitchProfilesListResult data, response status code and response headers
    def list_policy_host_switch_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_policy_host_switch_profiles ...'
      end
      if @api_client.config.client_side_validation && opts[:'deployment_type'] && !['VIRTUAL_MACHINE', 'PHYSICAL_MACHINE', 'UNKNOWN'].include?(opts[:'deployment_type'])
        fail ArgumentError, 'invalid value for "deployment_type", must be one of VIRTUAL_MACHINE, PHYSICAL_MACHINE, UNKNOWN'
      end
      if @api_client.config.client_side_validation && opts[:'hostswitch_profile_type'] && !['PolicyUplinkHostSwitchProfile', 'PolicyLldpHostSwitchProfile', 'PolicyNiocProfile', 'PolicyExtraConfigHostSwitchProfile', 'PolicyVtepHAHostSwitchProfile', 'PolicyHighPerformanceHostSwitchProfile'].include?(opts[:'hostswitch_profile_type'])
        fail ArgumentError, 'invalid value for "hostswitch_profile_type", must be one of PolicyUplinkHostSwitchProfile, PolicyLldpHostSwitchProfile, PolicyNiocProfile, PolicyExtraConfigHostSwitchProfile, PolicyVtepHAHostSwitchProfile, PolicyHighPerformanceHostSwitchProfile'
      end
      if @api_client.config.client_side_validation && opts[:'node_type'] && !['EdgeNode', 'PublicCloudGatewayNode'].include?(opts[:'node_type'])
        fail ArgumentError, 'invalid value for "node_type", must be one of EdgeNode, PublicCloudGatewayNode'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_policy_host_switch_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_policy_host_switch_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/host-switch-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'deployment_type'] = opts[:'deployment_type'] if !opts[:'deployment_type'].nil?
      query_params[:'hostswitch_profile_type'] = opts[:'hostswitch_profile_type'] if !opts[:'hostswitch_profile_type'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_system_owned'] = opts[:'include_system_owned'] if !opts[:'include_system_owned'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'max_active_uplink_count'] = opts[:'max_active_uplink_count'] if !opts[:'max_active_uplink_count'].nil?
      query_params[:'node_type'] = opts[:'node_type'] if !opts[:'node_type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'uplink_teaming_policy_name'] = opts[:'uplink_teaming_policy_name'] if !opts[:'uplink_teaming_policy_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyHostSwitchProfilesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_policy_host_switch_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Host Transport Nodes
    # Returns information about all host transport node profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyHostTransportNodeProfileListResult]
    def list_policy_host_transport_node_profiles(opts = {})
      data, _status_code, _headers = list_policy_host_transport_node_profiles_with_http_info(opts)
      data
    end

    # List Host Transport Nodes
    # Returns information about all host transport node profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyHostTransportNodeProfileListResult, Fixnum, Hash)>] PolicyHostTransportNodeProfileListResult data, response status code and response headers
    def list_policy_host_transport_node_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_policy_host_transport_node_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_policy_host_transport_node_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_policy_host_transport_node_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/host-transport-node-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyHostTransportNodeProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_policy_host_transport_node_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List static mime contents
    # API will list all static mime contents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [StaticMimeContentListResult]
    def list_policy_static_mime_contents(opts = {})
      data, _status_code, _headers = list_policy_static_mime_contents_with_http_info(opts)
      data
    end

    # List static mime contents
    # API will list all static mime contents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(StaticMimeContentListResult, Fixnum, Hash)>] StaticMimeContentListResult data, response status code and response headers
    def list_policy_static_mime_contents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_policy_static_mime_contents ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_policy_static_mime_contents, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_policy_static_mime_contents, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/static-mime-contents'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticMimeContentListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_policy_static_mime_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy Context Profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. Alternatively, to get a list of supported attributes and sub-attributes fire the following REST API GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom (default to SYSTEM)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def list_profile_supported_attributes(opts = {})
      data, _status_code, _headers = list_profile_supported_attributes_with_http_info(opts)
      data
    end

    # List Policy Context Profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. Alternatively, to get a list of supported attributes and sub-attributes fire the following REST API GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def list_profile_supported_attributes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.list_profile_supported_attributes ...'
      end
      if @api_client.config.client_side_validation && opts[:'attribute_source'] && !['ALL', 'CUSTOM', 'SYSTEM'].include?(opts[:'attribute_source'])
        fail ArgumentError, 'invalid value for "attribute_source", must be one of ALL, CUSTOM, SYSTEM'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_profile_supported_attributes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.list_profile_supported_attributes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/context-profiles/attributes'

      # query parameters
      query_params = {}
      query_params[:'attribute_key'] = opts[:'attribute_key'] if !opts[:'attribute_key'].nil?
      query_params[:'attribute_source'] = opts[:'attribute_source'] if !opts[:'attribute_source'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#list_profile_supported_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key. The values in the  request will be added or removed from the existing list. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_custom_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_add_remove_custom_attribute(org_id, project_id, policy_custom_attributes, action, opts = {})
      orgs_org_id_projects_project_id_infra_add_remove_custom_attribute_with_http_info(org_id, project_id, policy_custom_attributes, action, opts)
      nil
    end

    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key. The values in the  request will be added or removed from the existing list. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_custom_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_add_remove_custom_attribute_with_http_info(org_id, project_id, policy_custom_attributes, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_add_remove_custom_attribute ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_add_remove_custom_attribute"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_add_remove_custom_attribute"
      end
      # verify the required parameter 'policy_custom_attributes' is set
      if @api_client.config.client_side_validation && policy_custom_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_custom_attributes' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_add_remove_custom_attribute"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_add_remove_custom_attribute"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/context-profiles/custom-attributes/default'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_custom_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_add_remove_custom_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key.  <br> This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default to Adds/Removes custom attribute values from list 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_add_remove_custom_attribute_values(org_id, project_id, policy_attributes, action, opts = {})
      orgs_org_id_projects_project_id_infra_add_remove_custom_attribute_values_with_http_info(org_id, project_id, policy_attributes, action, opts)
      nil
    end

    # Adds/Removes custom attribute values from list
    # This API adds/removes custom attribute values from list for a given attribute key.  &lt;br&gt; This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default to Adds/Removes custom attribute values from list 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_attributes 
    # @param action Add or Remove Custom Context Profile Attribute values.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_add_remove_custom_attribute_values_with_http_info(org_id, project_id, policy_attributes, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_add_remove_custom_attribute_values ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_add_remove_custom_attribute_values"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_add_remove_custom_attribute_values"
      end
      # verify the required parameter 'policy_attributes' is set
      if @api_client.config.client_side_validation && policy_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_attributes' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_add_remove_custom_attribute_values"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_add_remove_custom_attribute_values"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add', 'remove'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add, remove"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/context-profiles/custom-attributes'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_add_remove_custom_attribute_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_profile(org_id, project_id, profile_id, ids_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts)
      data
    end

    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_create_or_update_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create L7 Access Profile entry
    # API will create L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts)
      data
    end

    # Create L7 Access Profile entry
    # API will create L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry' is set
      if @api_client.config.client_side_validation && l7_access_entry.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_create_or_update_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update L7 Access Profile
    # API will update L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [L7AccessProfile]
    def orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile(org_id, project_id, l7_access_profile_id, l7_access_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_profile, opts)
      data
    end

    # Update L7 Access Profile
    # API will update L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile' is set
      if @api_client.config.client_side_validation && l7_access_profile.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_create_or_update_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_pcap_file(org_id, project_id, id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_pcap_file_with_http_info(org_id, project_id, id, opts)
      nil
    end

    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_pcap_file_with_http_info(org_id, project_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps/{id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_delete_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_profile(org_id, project_id, profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_profile_with_http_info(org_id, project_id, profile_id, opts)
      nil
    end

    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_profile_with_http_info(org_id, project_id, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_delete_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_delete_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L7 Access Profile entry
    # API will delete L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_l7_access_entry(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts)
      nil
    end

    # Delete L7 Access Profile entry
    # API will delete L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_entry"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_delete_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L7 Access Profile
    # API will delete L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_l7_access_profile(org_id, project_id, l7_access_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, opts)
      nil
    end

    # Delete L7 Access Profile
    # API will delete L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_l7_access_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_delete_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Context Profile
    # Deletes the specified Policy Context Profile. If the Policy Context Profile is consumed in a firewall rule, it won't get deleted. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param context_profile_id Policy Context Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @option opts [BOOLEAN] :override Delete the locally overridden global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_context_profile(org_id, project_id, context_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_context_profile_with_http_info(org_id, project_id, context_profile_id, opts)
      nil
    end

    # Delete Policy Context Profile
    # Deletes the specified Policy Context Profile. If the Policy Context Profile is consumed in a firewall rule, it won&#39;t get deleted. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param context_profile_id Policy Context Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @option opts [BOOLEAN] :override Delete the locally overridden global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_context_profile_with_http_info(org_id, project_id, context_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_context_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_context_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_context_profile"
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_context_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/context-profiles/{context-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_delete_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_download_exported_pcap_file(org_id, project_id, file_name, opts = {})
      orgs_org_id_projects_project_id_infra_download_exported_pcap_file_with_http_info(org_id, project_id, file_name, opts)
      nil
    end

    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_download_exported_pcap_file_with_http_info(org_id, project_id, file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file"
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps/{file-name}/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'file-name' + '}', file_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_download_exported_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_export_ids_pcap_file(org_id, project_id, ids_pcap_export, opts = {})
      orgs_org_id_projects_project_id_infra_export_ids_pcap_file_with_http_info(org_id, project_id, ids_pcap_export, opts)
      nil
    end

    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_export_ids_pcap_file_with_http_info(org_id, project_id, ids_pcap_export, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file"
      end
      # verify the required parameter 'ids_pcap_export' is set
      if @api_client.config.client_side_validation && ids_pcap_export.nil?
        fail ArgumentError, "Missing the required parameter 'ids_pcap_export' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_pcap_export)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_export_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves custom attribute values for given attribute key
    # This API lists all the custom attribute values defined in the system for the attribute_key mentioned as part of the url. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom (default to SYSTEM)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def orgs_org_id_projects_project_id_infra_get_custom_attribute(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_custom_attribute_with_http_info(org_id, project_id, opts)
      data
    end

    # Retrieves custom attribute values for given attribute key
    # This API lists all the custom attribute values defined in the system for the attribute_key mentioned as part of the url. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_custom_attribute_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_get_custom_attribute ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_custom_attribute"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_custom_attribute"
      end
      if @api_client.config.client_side_validation && opts[:'attribute_source'] && !['ALL', 'CUSTOM', 'SYSTEM'].include?(opts[:'attribute_source'])
        fail ArgumentError, 'invalid value for "attribute_source", must be one of ALL, CUSTOM, SYSTEM'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_custom_attribute, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_custom_attribute, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/context-profiles/custom-attributes/default'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'attribute_key'] = opts[:'attribute_key'] if !opts[:'attribute_key'].nil?
      query_params[:'attribute_source'] = opts[:'attribute_source'] if !opts[:'attribute_source'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_get_custom_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def orgs_org_id_projects_project_id_infra_get_ids_profile(org_id, project_id, profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_profile_with_http_info(org_id, project_id, profile_id, opts)
      data
    end

    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_profile_with_http_info(org_id, project_id, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_get_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_get_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L7 Access Profile
    # API will get L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessProfile]
    def orgs_org_id_projects_project_id_infra_get_l7_access_profile(org_id, project_id, l7_access_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, opts)
      data
    end

    # Get L7 Access Profile
    # API will get L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_get_l7_access_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_l7_access_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_l7_access_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_get_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyContextProfile
    # Get a single PolicyContextProfile by id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param context_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyContextProfile]
    def orgs_org_id_projects_project_id_infra_get_policy_context_profile(org_id, project_id, context_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_context_profile_with_http_info(org_id, project_id, context_profile_id, opts)
      data
    end

    # Get PolicyContextProfile
    # Get a single PolicyContextProfile by id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param context_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyContextProfile, Fixnum, Hash)>] PolicyContextProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_context_profile_with_http_info(org_id, project_id, context_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_context_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_context_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_context_profile"
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_context_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/context-profiles/{context-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_get_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsPcapFileMetadataListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_pcap_files(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_pcap_files_with_http_info(org_id, project_id, opts)
      data
    end

    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsPcapFileMetadataListResult, Fixnum, Hash)>] IdsPcapFileMetadataListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_pcap_files_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsPcapFileMetadataListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_list_ids_pcap_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsProfileListResult, Fixnum, Hash)>] IdsProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_list_ids_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_ids_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_ids_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_ids_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_ids_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_list_ids_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List l7 access profile entries
    # API will list all l7 access profiles entries
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L7AccessEntryListResult]
    def orgs_org_id_projects_project_id_infra_list_l7_access_entries(org_id, project_id, l7_access_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_l7_access_entries_with_http_info(org_id, project_id, l7_access_profile_id, opts)
      data
    end

    # List l7 access profile entries
    # API will list all l7 access profiles entries
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L7AccessEntryListResult, Fixnum, Hash)>] L7AccessEntryListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_l7_access_entries_with_http_info(org_id, project_id, l7_access_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_entries, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}/entries'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_list_l7_access_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy L7 access profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom (default to SYSTEM)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes_with_http_info(org_id, project_id, opts)
      data
    end

    # List Policy L7 access profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes"
      end
      if @api_client.config.client_side_validation && opts[:'attribute_source'] && !['ALL', 'CUSTOM', 'SYSTEM'].include?(opts[:'attribute_source'])
        fail ArgumentError, 'invalid value for "attribute_source", must be one of ALL, CUSTOM, SYSTEM'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/attributes'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'attribute_key'] = opts[:'attribute_key'] if !opts[:'attribute_key'].nil?
      query_params[:'attribute_source'] = opts[:'attribute_source'] if !opts[:'attribute_source'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_list_l7_access_profile_profile_supported_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List l7 access Profiles
    # API will list all l7 access Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_entry_count Include the count of entries in L7 Profile (default to false)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L7AccessProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_l7_access_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_l7_access_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List l7 access Profiles
    # API will list all l7 access Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_entry_count Include the count of entries in L7 Profile
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L7AccessProfileListResult, Fixnum, Hash)>] L7AccessProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_l7_access_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_l7_access_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_entry_count'] = opts[:'include_entry_count'] if !opts[:'include_entry_count'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_list_l7_access_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyContextProfiles
    # Get all PolicyContextProfiles 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_context_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_context_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # Get PolicyContextProfiles
    # Get all PolicyContextProfiles 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_context_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_context_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_context_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_context_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_context_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_context_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/context-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_list_policy_context_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy Context Profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. Alternatively, to get a list of supported attributes and sub-attributes fire the following REST API GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom (default to SYSTEM)
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_profile_supported_attributes(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_profile_supported_attributes_with_http_info(org_id, project_id, opts)
      data
    end

    # List Policy Context Profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. Alternatively, to get a list of supported attributes and sub-attributes fire the following REST API GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :attribute_source Source of the attribute, System Defined or custom
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_profile_supported_attributes_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_list_profile_supported_attributes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_profile_supported_attributes"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_profile_supported_attributes"
      end
      if @api_client.config.client_side_validation && opts[:'attribute_source'] && !['ALL', 'CUSTOM', 'SYSTEM'].include?(opts[:'attribute_source'])
        fail ArgumentError, 'invalid value for "attribute_source", must be one of ALL, CUSTOM, SYSTEM'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_profile_supported_attributes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfilesApi.orgs_org_id_projects_project_id_infra_list_profile_supported_attributes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/context-profiles/attributes'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'attribute_key'] = opts[:'attribute_key'] if !opts[:'attribute_key'].nil?
      query_params[:'attribute_source'] = opts[:'attribute_source'] if !opts[:'attribute_source'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_list_profile_supported_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can't have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \"custom_attributes\" id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_create_or_update_policy_context_profile(org_id, project_id, context_profile_id, policy_context_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_create_or_update_policy_context_profile_with_http_info(org_id, project_id, context_profile_id, policy_context_profile, opts)
      nil
    end

    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can&#39;t have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \&quot;custom_attributes\&quot; id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_create_or_update_policy_context_profile_with_http_info(org_id, project_id, context_profile_id, policy_context_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_patch_create_or_update_policy_context_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'policy_context_profile' is set
      if @api_client.config.client_side_validation && policy_context_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_context_profile' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_create_or_update_policy_context_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/context-profiles/{context-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_context_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_patch_create_or_update_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update custom attribute value list for given attribute key.
    # This API updates custom attribute value list for given key in the request. This replaces the  existing list with the list provided in the request 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_custom_attributes 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_custom_attribute(org_id, project_id, policy_custom_attributes, opts = {})
      orgs_org_id_projects_project_id_infra_patch_custom_attribute_with_http_info(org_id, project_id, policy_custom_attributes, opts)
      nil
    end

    # Update custom attribute value list for given attribute key.
    # This API updates custom attribute value list for given key in the request. This replaces the  existing list with the list provided in the request 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_custom_attributes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_custom_attribute_with_http_info(org_id, project_id, policy_custom_attributes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_patch_custom_attribute ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_custom_attribute"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_custom_attribute"
      end
      # verify the required parameter 'policy_custom_attributes' is set
      if @api_client.config.client_side_validation && policy_custom_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_custom_attributes' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_custom_attribute"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/context-profiles/custom-attributes/default'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_custom_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_patch_custom_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update custom object attribute value list for given attribute key
    # This API updates custom attribute value list for given key.  <br> This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default for create/update custom object attribute value list for given attribute key 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_attributes 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_custom_attribute_list(org_id, project_id, policy_attributes, opts = {})
      orgs_org_id_projects_project_id_infra_patch_custom_attribute_list_with_http_info(org_id, project_id, policy_attributes, opts)
      nil
    end

    # Update custom object attribute value list for given attribute key
    # This API updates custom attribute value list for given key.  &lt;br&gt; This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default for create/update custom object attribute value list for given attribute key 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_attributes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_custom_attribute_list_with_http_info(org_id, project_id, policy_attributes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_patch_custom_attribute_list ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_custom_attribute_list"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_custom_attribute_list"
      end
      # verify the required parameter 'policy_attributes' is set
      if @api_client.config.client_side_validation && policy_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_attributes' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_custom_attribute_list"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/context-profiles/custom-attributes'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_patch_custom_attribute_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_ids_profile(org_id, project_id, profile_id, ids_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts)
      nil
    end

    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_patch_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_patch_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update L7 Access Profile entry
    # API will create/update L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def orgs_org_id_projects_project_id_infra_patch_l7_access_entry(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_patch_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts)
      data
    end

    # Create or update L7 Access Profile entry
    # API will create/update L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry' is set
      if @api_client.config.client_side_validation && l7_access_entry.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_patch_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update L7 Access Profile
    # API will create/update L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id L7 Access Profile ID
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [L7AccessProfile]
    def orgs_org_id_projects_project_id_infra_patch_l7_access_profile(org_id, project_id, l7_access_profile_id, l7_access_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_patch_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_profile, opts)
      data
    end

    # Create or update L7 Access Profile
    # API will create/update L7 Access Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id L7 Access Profile ID
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_l7_access_profile_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile' is set
      if @api_client.config.client_side_validation && l7_access_profile.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_patch_l7_access_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_patch_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can't have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \"custom_attributes\" id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyContextProfile]
    def orgs_org_id_projects_project_id_infra_put_create_or_update_policy_context_profile(org_id, project_id, context_profile_id, policy_context_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_put_create_or_update_policy_context_profile_with_http_info(org_id, project_id, context_profile_id, policy_context_profile, opts)
      data
    end

    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can&#39;t have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \&quot;custom_attributes\&quot; id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyContextProfile, Fixnum, Hash)>] PolicyContextProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_put_create_or_update_policy_context_profile_with_http_info(org_id, project_id, context_profile_id, policy_context_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_put_create_or_update_policy_context_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_put_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_put_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_put_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'policy_context_profile' is set
      if @api_client.config.client_side_validation && policy_context_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_context_profile' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_put_create_or_update_policy_context_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/context-profiles/{context-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_context_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_put_create_or_update_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read L7 Access Profile entry
    # Read Friewall L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def orgs_org_id_projects_project_id_infra_read_l7_access_entry(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts)
      data
    end

    # Read L7 Access Profile entry
    # Read Friewall L7 Access Profile entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_l7_access_entry_with_http_info(org_id, project_id, l7_access_profile_id, l7_access_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.orgs_org_id_projects_project_id_infra_read_l7_access_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_read_l7_access_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_read_l7_access_entry"
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_read_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling ProfilesApi.orgs_org_id_projects_project_id_infra_read_l7_access_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#orgs_org_id_projects_project_id_infra_read_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can't have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \"custom_attributes\" id 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_create_or_update_policy_context_profile(context_profile_id, policy_context_profile, opts = {})
      patch_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts)
      nil
    end

    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can&#39;t have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \&quot;custom_attributes\&quot; id 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.patch_create_or_update_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.patch_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'policy_context_profile' is set
      if @api_client.config.client_side_validation && policy_context_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_context_profile' when calling ProfilesApi.patch_create_or_update_policy_context_profile"
      end
      # resource path
      local_var_path = '/infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_context_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#patch_create_or_update_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update custom attribute value list for given attribute key.
    # This API updates custom attribute value list for given key in the request. This replaces the  existing list with the list provided in the request 
    # @param policy_custom_attributes 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_custom_attribute(policy_custom_attributes, opts = {})
      patch_custom_attribute_with_http_info(policy_custom_attributes, opts)
      nil
    end

    # Update custom attribute value list for given attribute key.
    # This API updates custom attribute value list for given key in the request. This replaces the  existing list with the list provided in the request 
    # @param policy_custom_attributes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_custom_attribute_with_http_info(policy_custom_attributes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.patch_custom_attribute ...'
      end
      # verify the required parameter 'policy_custom_attributes' is set
      if @api_client.config.client_side_validation && policy_custom_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_custom_attributes' when calling ProfilesApi.patch_custom_attribute"
      end
      # resource path
      local_var_path = '/infra/context-profiles/custom-attributes/default'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_custom_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#patch_custom_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update custom object attribute value list for given attribute key
    # This API updates custom attribute value list for given key.  <br> This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default for create/update custom object attribute value list for given attribute key 
    # @param policy_attributes 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_custom_attribute_list(policy_attributes, opts = {})
      patch_custom_attribute_list_with_http_info(policy_attributes, opts)
      nil
    end

    # Update custom object attribute value list for given attribute key
    # This API updates custom attribute value list for given key.  &lt;br&gt; This rest routine is deprecated. Use /infra/context-profiles/custom-attributes/default for create/update custom object attribute value list for given attribute key 
    # @param policy_attributes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_custom_attribute_list_with_http_info(policy_attributes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.patch_custom_attribute_list ...'
      end
      # verify the required parameter 'policy_attributes' is set
      if @api_client.config.client_side_validation && policy_attributes.nil?
        fail ArgumentError, "Missing the required parameter 'policy_attributes' when calling ProfilesApi.patch_custom_attribute_list"
      end
      # resource path
      local_var_path = '/infra/context-profiles/custom-attributes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_attributes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#patch_custom_attribute_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_profile(profile_id, ids_profile, opts = {})
      patch_ids_profile_with_http_info(profile_id, ids_profile, opts)
      nil
    end

    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_profile_with_http_info(profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.patch_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.patch_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling ProfilesApi.patch_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#patch_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update L7 Access Profile entry
    # API will create/update L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def patch_l7_access_entry(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      data, _status_code, _headers = patch_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts)
      data
    end

    # Create or update L7 Access Profile entry
    # API will create/update L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param l7_access_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def patch_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, l7_access_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.patch_l7_access_entry ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.patch_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling ProfilesApi.patch_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry' is set
      if @api_client.config.client_side_validation && l7_access_entry.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry' when calling ProfilesApi.patch_l7_access_entry"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#patch_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update L7 Access Profile
    # API will create/update L7 Access Profile
    # @param l7_access_profile_id L7 Access Profile ID
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [L7AccessProfile]
    def patch_l7_access_profile(l7_access_profile_id, l7_access_profile, opts = {})
      data, _status_code, _headers = patch_l7_access_profile_with_http_info(l7_access_profile_id, l7_access_profile, opts)
      data
    end

    # Create or update L7 Access Profile
    # API will create/update L7 Access Profile
    # @param l7_access_profile_id L7 Access Profile ID
    # @param l7_access_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(L7AccessProfile, Fixnum, Hash)>] L7AccessProfile data, response status code and response headers
    def patch_l7_access_profile_with_http_info(l7_access_profile_id, l7_access_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.patch_l7_access_profile ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.patch_l7_access_profile"
      end
      # verify the required parameter 'l7_access_profile' is set
      if @api_client.config.client_side_validation && l7_access_profile.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile' when calling ProfilesApi.patch_l7_access_profile"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l7_access_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#patch_l7_access_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Malware Prevention profile
    # Patch Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_malware_prevention_profile(profile_id, malware_prevention_profile, opts = {})
      patch_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts)
      nil
    end

    # Patch Malware Prevention profile
    # Patch Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.patch_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.patch_malware_prevention_profile"
      end
      # verify the required parameter 'malware_prevention_profile' is set
      if @api_client.config.client_side_validation && malware_prevention_profile.nil?
        fail ArgumentError, "Missing the required parameter 'malware_prevention_profile' when calling ProfilesApi.patch_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(malware_prevention_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#patch_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Policy EdgeCluster High Availability Profile
    # Patch a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      patch_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts)
      nil
    end

    # Patch a Policy EdgeCluster High Availability Profile
    # Patch a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.patch_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ProfilesApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling ProfilesApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling ProfilesApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'policy_edge_high_availability_profile' is set
      if @api_client.config.client_side_validation && policy_edge_high_availability_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_high_availability_profile' when calling ProfilesApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_high_availability_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#patch_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Hostswitch Profile
    # Patch a hostswitch profile. The resource_type is required and needs to be one of the following, UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile & ExtraConfigHostSwitchProfile. Uplink profile - For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). uplink_mtu_threshold is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. Teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param host_switch_profile_id 
    # @param policy_base_host_switch_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyBaseHostSwitchProfile]
    def patch_policy_host_switch_profile(host_switch_profile_id, policy_base_host_switch_profile, opts = {})
      data, _status_code, _headers = patch_policy_host_switch_profile_with_http_info(host_switch_profile_id, policy_base_host_switch_profile, opts)
      data
    end

    # Create or update a Hostswitch Profile
    # Patch a hostswitch profile. The resource_type is required and needs to be one of the following, UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile &amp; ExtraConfigHostSwitchProfile. Uplink profile - For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). uplink_mtu_threshold is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. Teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param host_switch_profile_id 
    # @param policy_base_host_switch_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyBaseHostSwitchProfile, Fixnum, Hash)>] PolicyBaseHostSwitchProfile data, response status code and response headers
    def patch_policy_host_switch_profile_with_http_info(host_switch_profile_id, policy_base_host_switch_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.patch_policy_host_switch_profile ...'
      end
      # verify the required parameter 'host_switch_profile_id' is set
      if @api_client.config.client_side_validation && host_switch_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_switch_profile_id' when calling ProfilesApi.patch_policy_host_switch_profile"
      end
      # verify the required parameter 'policy_base_host_switch_profile' is set
      if @api_client.config.client_side_validation && policy_base_host_switch_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_base_host_switch_profile' when calling ProfilesApi.patch_policy_host_switch_profile"
      end
      # resource path
      local_var_path = '/infra/host-switch-profiles/{host-switch-profile-id}'.sub('{' + 'host-switch-profile-id' + '}', host_switch_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_base_host_switch_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyBaseHostSwitchProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#patch_policy_host_switch_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update static mime content id
    # API will create/update static mime content id
    # @param static_mime_content_id static mime content id
    # @param static_mime_content 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [StaticMimeContent]
    def patch_policy_static_mime_content(static_mime_content_id, static_mime_content, opts = {})
      data, _status_code, _headers = patch_policy_static_mime_content_with_http_info(static_mime_content_id, static_mime_content, opts)
      data
    end

    # Create or update static mime content id
    # API will create/update static mime content id
    # @param static_mime_content_id static mime content id
    # @param static_mime_content 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(StaticMimeContent, Fixnum, Hash)>] StaticMimeContent data, response status code and response headers
    def patch_policy_static_mime_content_with_http_info(static_mime_content_id, static_mime_content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.patch_policy_static_mime_content ...'
      end
      # verify the required parameter 'static_mime_content_id' is set
      if @api_client.config.client_side_validation && static_mime_content_id.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content_id' when calling ProfilesApi.patch_policy_static_mime_content"
      end
      # verify the required parameter 'static_mime_content' is set
      if @api_client.config.client_side_validation && static_mime_content.nil?
        fail ArgumentError, "Missing the required parameter 'static_mime_content' when calling ProfilesApi.patch_policy_static_mime_content"
      end
      # resource path
      local_var_path = '/infra/static-mime-contents/{static-mime-content-id}'.sub('{' + 'static-mime-content-id' + '}', static_mime_content_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_mime_content)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticMimeContent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#patch_policy_static_mime_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can't have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \"custom_attributes\" id 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyContextProfile]
    def put_create_or_update_policy_context_profile(context_profile_id, policy_context_profile, opts = {})
      data, _status_code, _headers = put_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts)
      data
    end

    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can&#39;t have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 5. Do not create context profile with \&quot;custom_attributes\&quot; id 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyContextProfile, Fixnum, Hash)>] PolicyContextProfile data, response status code and response headers
    def put_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.put_create_or_update_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling ProfilesApi.put_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'policy_context_profile' is set
      if @api_client.config.client_side_validation && policy_context_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_context_profile' when calling ProfilesApi.put_create_or_update_policy_context_profile"
      end
      # resource path
      local_var_path = '/infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_context_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#put_create_or_update_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read L7 Access Profile entry
    # Read Friewall L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [L7AccessEntry]
    def read_l7_access_entry(l7_access_profile_id, l7_access_entry_id, opts = {})
      data, _status_code, _headers = read_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, opts)
      data
    end

    # Read L7 Access Profile entry
    # Read Friewall L7 Access Profile entry
    # @param l7_access_profile_id 
    # @param l7_access_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L7AccessEntry, Fixnum, Hash)>] L7AccessEntry data, response status code and response headers
    def read_l7_access_entry_with_http_info(l7_access_profile_id, l7_access_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.read_l7_access_entry ...'
      end
      # verify the required parameter 'l7_access_profile_id' is set
      if @api_client.config.client_side_validation && l7_access_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_profile_id' when calling ProfilesApi.read_l7_access_entry"
      end
      # verify the required parameter 'l7_access_entry_id' is set
      if @api_client.config.client_side_validation && l7_access_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'l7_access_entry_id' when calling ProfilesApi.read_l7_access_entry"
      end
      # resource path
      local_var_path = '/infra/l7-access-profiles/{l7-access-profile-id}/entries/{l7-access-entry-id}'.sub('{' + 'l7-access-profile-id' + '}', l7_access_profile_id.to_s).sub('{' + 'l7-access-entry-id' + '}', l7_access_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L7AccessEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#read_l7_access_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster High Availability Profile
    # Get a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeHighAvailabilityProfile]
    def read_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      data, _status_code, _headers = read_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts)
      data
    end

    # Get a Policy Edge Cluster High Availability Profile
    # Get a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeHighAvailabilityProfile, Fixnum, Hash)>] PolicyEdgeHighAvailabilityProfile data, response status code and response headers
    def read_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.read_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ProfilesApi.read_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling ProfilesApi.read_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling ProfilesApi.read_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeHighAvailabilityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#read_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
