=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class BridgeFirewallApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update the Bridge Firewall Policy
    # Update the Bridge Firewall Policy. This is a full replace. Create new BridgeFirewallPolicy if a policy with the policy-id is not already present. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [BridgeFirewallPolicy]
    def create_or_replace_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      data, _status_code, _headers = create_or_replace_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts)
      data
    end

    # Update the Bridge Firewall Policy
    # Update the Bridge Firewall Policy. This is a full replace. Create new BridgeFirewallPolicy if a policy with the policy-id is not already present. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeFirewallPolicy, Fixnum, Hash)>] BridgeFirewallPolicy data, response status code and response headers
    def create_or_replace_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.create_or_replace_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.create_or_replace_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.create_or_replace_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy' when calling BridgeFirewallApi.create_or_replace_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_firewall_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#create_or_replace_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Bridge Firewall Rule
    # Update the Bridge Firewall Rule. This is a full replace. All the rules are replaced. Create new BridgeFirewallRule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/bridge-policies/&lt;bridge-firewall-policy-id&gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def create_or_replace_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = create_or_replace_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts)
      data
    end

    # Update Bridge Firewall Rule
    # Update the Bridge Firewall Rule. This is a full replace. All the rules are replaced. Create new BridgeFirewallRule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/bridge-policies/&amp;lt;bridge-firewall-policy-id&amp;gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def create_or_replace_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.create_or_replace_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.create_or_replace_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.create_or_replace_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling BridgeFirewallApi.create_or_replace_bridge_firewall_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling BridgeFirewallApi.create_or_replace_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#create_or_replace_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Bridge Firewall Policy
    # Delete Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, opts = {})
      delete_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      nil
    end

    # Delete Bridge Firewall Policy
    # Delete Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.delete_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.delete_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.delete_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#delete_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Bridge Firewall Rule
    # Delete Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      delete_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts)
      nil
    end

    # Delete Bridge Firewall Rule
    # Delete Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.delete_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.delete_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.delete_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling BridgeFirewallApi.delete_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#delete_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Bridge Firewall Policy
    # Get Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [BridgeFirewallPolicy]
    def get_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      data
    end

    # Get Bridge Firewall Policy
    # Get Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeFirewallPolicy, Fixnum, Hash)>] BridgeFirewallPolicy data, response status code and response headers
    def get_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.get_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.get_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.get_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#get_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get bridge firewall policy statistics
    # Get statistics of a bridge firewall policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_bridge_firewall_policy_statistics(domain_id, bridge_firewall_policy_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_policy_statistics_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      data
    end

    # Get bridge firewall policy statistics
    # Get statistics of a bridge firewall policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_bridge_firewall_policy_statistics_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.get_bridge_firewall_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.get_bridge_firewall_policy_statistics"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.get_bridge_firewall_policy_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#get_bridge_firewall_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Bridge Firewall Rule
    # Read Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts)
      data
    end

    # Read Bridge Firewall Rule
    # Read Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def get_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.get_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.get_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.get_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling BridgeFirewallApi.get_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#get_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get bridge firewall rule statistics
    # Get statistics of a bridge firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_bridge_firewall_rule_statistics(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_rule_statistics_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts)
      data
    end

    # Get bridge firewall rule statistics
    # Get statistics of a bridge firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_bridge_firewall_rule_statistics_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.get_bridge_firewall_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.get_bridge_firewall_rule_statistics"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.get_bridge_firewall_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling BridgeFirewallApi.get_bridge_firewall_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#get_bridge_firewall_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of Bridge Firewall Policies
    # Paginated list of all bridge firewall policies. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [BridgeFirewallPolicyListResult]
    def list_bridge_firewall_policies(domain_id, opts = {})
      data, _status_code, _headers = list_bridge_firewall_policies_with_http_info(domain_id, opts)
      data
    end

    # List of Bridge Firewall Policies
    # Paginated list of all bridge firewall policies. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(BridgeFirewallPolicyListResult, Fixnum, Hash)>] BridgeFirewallPolicyListResult data, response status code and response headers
    def list_bridge_firewall_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.list_bridge_firewall_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.list_bridge_firewall_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling BridgeFirewallApi.list_bridge_firewall_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling BridgeFirewallApi.list_bridge_firewall_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#list_bridge_firewall_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Bridge Firewall Rules
    # Paginated list of all Bridge Firewall Rules. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_bridge_firewall_rules(domain_id, bridge_firewall_policy_id, opts = {})
      data, _status_code, _headers = list_bridge_firewall_rules_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      data
    end

    # List Bridge Firewall Rules
    # Paginated list of all Bridge Firewall Rules. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_bridge_firewall_rules_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.list_bridge_firewall_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.list_bridge_firewall_rules"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.list_bridge_firewall_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling BridgeFirewallApi.list_bridge_firewall_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling BridgeFirewallApi.list_bridge_firewall_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#list_bridge_firewall_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Bridge Firewall Policy
    # Patch the Bridge Firewall Policy. If a Bridge Firewall Policy with the policy-id is not already present, create a new Bridge Firewall Policy. If it already exists, update the Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      patch_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts)
      nil
    end

    # Create or update Bridge Firewall Policy
    # Patch the Bridge Firewall Policy. If a Bridge Firewall Policy with the policy-id is not already present, create a new Bridge Firewall Policy. If it already exists, update the Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.patch_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.patch_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.patch_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy' when calling BridgeFirewallApi.patch_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_firewall_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#patch_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Bridge Firewall Rule
    # Patch the Bridge Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. Performance Note: If you want to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/bridge-policies/&lt;bridge-firewall-policy-id&gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      patch_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts)
      nil
    end

    # Create or update Bridge Firewall Rule
    # Patch the Bridge Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. Performance Note: If you want to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/bridge-policies/&amp;lt;bridge-firewall-policy-id&amp;gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.patch_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.patch_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.patch_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling BridgeFirewallApi.patch_bridge_firewall_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling BridgeFirewallApi.patch_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#patch_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of bridge firewall policy
    # This is used to set a precedence of a bridge firewall policy w.r.t others. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [BridgeFirewallPolicy]
    def revise_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      data, _status_code, _headers = revise_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts)
      data
    end

    # Revise the positioning of bridge firewall policy
    # This is used to set a precedence of a bridge firewall policy w.r.t others. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeFirewallPolicy, Fixnum, Hash)>] BridgeFirewallPolicy data, response status code and response headers
    def revise_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.revise_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.revise_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.revise_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy' when calling BridgeFirewallApi.revise_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_firewall_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#revise_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of bridge firewall rule
    # This is used to re-order a bridge firewall rule within a bridge firewall policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def revise_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of bridge firewall rule
    # This is used to re-order a bridge firewall rule within a bridge firewall policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeFirewallApi.revise_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling BridgeFirewallApi.revise_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling BridgeFirewallApi.revise_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling BridgeFirewallApi.revise_bridge_firewall_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling BridgeFirewallApi.revise_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeFirewallApi#revise_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
