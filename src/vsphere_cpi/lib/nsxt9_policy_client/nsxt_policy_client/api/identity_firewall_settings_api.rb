=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class IdentityFirewallSettingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete compute cluster idfw configuration
    # Delete compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_compute_cluster_idfw_configuration(cluster_id, opts = {})
      delete_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts)
      nil
    end

    # Delete compute cluster idfw configuration
    # Delete compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityFirewallSettingsApi.delete_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling IdentityFirewallSettingsApi.delete_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityFirewallSettingsApi#delete_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read compute cluster idfw configuration
    # Read compute cluster identity firewall configuration 
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [ComputeClusterIdfwConfiguration]
    def get_compute_cluster_idfw_configuration(cluster_id, opts = {})
      data, _status_code, _headers = get_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts)
      data
    end

    # Read compute cluster idfw configuration
    # Read compute cluster identity firewall configuration 
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeClusterIdfwConfiguration, Fixnum, Hash)>] ComputeClusterIdfwConfiguration data, response status code and response headers
    def get_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityFirewallSettingsApi.get_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling IdentityFirewallSettingsApi.get_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityFirewallSettingsApi#get_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read idfw configuration for standalone host
    # Read identity firewall configuration for standalone host 
    # @param [Hash] opts the optional parameters
    # @return [StandaloneHostIdfwConfiguration]
    def get_standalone_host_idfw_configuration(opts = {})
      data, _status_code, _headers = get_standalone_host_idfw_configuration_with_http_info(opts)
      data
    end

    # Read idfw configuration for standalone host
    # Read identity firewall configuration for standalone host 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandaloneHostIdfwConfiguration, Fixnum, Hash)>] StandaloneHostIdfwConfiguration data, response status code and response headers
    def get_standalone_host_idfw_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityFirewallSettingsApi.get_standalone_host_idfw_configuration ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandaloneHostIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityFirewallSettingsApi#get_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List compute cluster idfw Configuration
    # API will list all compute cluster wise identity firewall configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ComputeClusterIdfwConfigurationListResult]
    def list_compute_cluster_idfw_configuration(opts = {})
      data, _status_code, _headers = list_compute_cluster_idfw_configuration_with_http_info(opts)
      data
    end

    # List compute cluster idfw Configuration
    # API will list all compute cluster wise identity firewall configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ComputeClusterIdfwConfigurationListResult, Fixnum, Hash)>] ComputeClusterIdfwConfigurationListResult data, response status code and response headers
    def list_compute_cluster_idfw_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityFirewallSettingsApi.list_compute_cluster_idfw_configuration ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdentityFirewallSettingsApi.list_compute_cluster_idfw_configuration, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdentityFirewallSettingsApi.list_compute_cluster_idfw_configuration, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityFirewallSettingsApi#list_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch compute cluster idfw configuration
    # Patch compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_compute_cluster_idfw_configuration(cluster_id, compute_cluster_idfw_configuration, opts = {})
      patch_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts)
      nil
    end

    # Patch compute cluster idfw configuration
    # Patch compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityFirewallSettingsApi.patch_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling IdentityFirewallSettingsApi.patch_compute_cluster_idfw_configuration"
      end
      # verify the required parameter 'compute_cluster_idfw_configuration' is set
      if @api_client.config.client_side_validation && compute_cluster_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'compute_cluster_idfw_configuration' when calling IdentityFirewallSettingsApi.patch_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_cluster_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityFirewallSettingsApi#patch_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch idfw configuration for standalone host
    # Patch identity firewall configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_standalone_host_idfw_configuration(standalone_host_idfw_configuration, opts = {})
      patch_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts)
      nil
    end

    # Patch idfw configuration for standalone host
    # Patch identity firewall configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityFirewallSettingsApi.patch_standalone_host_idfw_configuration ...'
      end
      # verify the required parameter 'standalone_host_idfw_configuration' is set
      if @api_client.config.client_side_validation && standalone_host_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'standalone_host_idfw_configuration' when calling IdentityFirewallSettingsApi.patch_standalone_host_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(standalone_host_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityFirewallSettingsApi#patch_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Post User Login/Logout events for IDFW
    # API to receive User Login and Logout events for IDFW 
    # @param login_logout_event_collection 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_login_logout_events(login_logout_event_collection, opts = {})
      post_login_logout_events_with_http_info(login_logout_event_collection, opts)
      nil
    end

    # Post User Login/Logout events for IDFW
    # API to receive User Login and Logout events for IDFW 
    # @param login_logout_event_collection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_login_logout_events_with_http_info(login_logout_event_collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityFirewallSettingsApi.post_login_logout_events ...'
      end
      # verify the required parameter 'login_logout_event_collection' is set
      if @api_client.config.client_side_validation && login_logout_event_collection.nil?
        fail ArgumentError, "Missing the required parameter 'login_logout_event_collection' when calling IdentityFirewallSettingsApi.post_login_logout_events"
      end
      # resource path
      local_var_path = '/system/input/login-logout-events'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(login_logout_event_collection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityFirewallSettingsApi#post_login_logout_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update compute cluster idfw configuration
    # Update the compute cluster idfw configuration
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [ComputeClusterIdfwConfiguration]
    def put_compute_cluster_idfw_configuration(cluster_id, compute_cluster_idfw_configuration, opts = {})
      data, _status_code, _headers = put_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts)
      data
    end

    # Create or update compute cluster idfw configuration
    # Update the compute cluster idfw configuration
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeClusterIdfwConfiguration, Fixnum, Hash)>] ComputeClusterIdfwConfiguration data, response status code and response headers
    def put_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityFirewallSettingsApi.put_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling IdentityFirewallSettingsApi.put_compute_cluster_idfw_configuration"
      end
      # verify the required parameter 'compute_cluster_idfw_configuration' is set
      if @api_client.config.client_side_validation && compute_cluster_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'compute_cluster_idfw_configuration' when calling IdentityFirewallSettingsApi.put_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_cluster_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityFirewallSettingsApi#put_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update idfw configuration for standalone host
    # Update the idfw configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [StandaloneHostIdfwConfiguration]
    def put_standalone_host_idfw_configuration(standalone_host_idfw_configuration, opts = {})
      data, _status_code, _headers = put_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts)
      data
    end

    # Create or update idfw configuration for standalone host
    # Update the idfw configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandaloneHostIdfwConfiguration, Fixnum, Hash)>] StandaloneHostIdfwConfiguration data, response status code and response headers
    def put_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityFirewallSettingsApi.put_standalone_host_idfw_configuration ...'
      end
      # verify the required parameter 'standalone_host_idfw_configuration' is set
      if @api_client.config.client_side_validation && standalone_host_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'standalone_host_idfw_configuration' when calling IdentityFirewallSettingsApi.put_standalone_host_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(standalone_host_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandaloneHostIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityFirewallSettingsApi#put_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
