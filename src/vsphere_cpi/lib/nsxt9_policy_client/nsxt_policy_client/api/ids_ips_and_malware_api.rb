=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class IdsIpsAndMalwareApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add IDS custom signatures
    # Add IDS custom signatures 
    # @param version_id 
    # @param ids_raw_signatures 
    # @param action Action to add custom signatures
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_custom_signatures(version_id, ids_raw_signatures, action, opts = {})
      add_custom_signatures_with_http_info(version_id, ids_raw_signatures, action, opts)
      nil
    end

    # Add IDS custom signatures
    # Add IDS custom signatures 
    # @param version_id 
    # @param ids_raw_signatures 
    # @param action Action to add custom signatures
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_custom_signatures_with_http_info(version_id, ids_raw_signatures, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.add_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.add_custom_signatures"
      end
      # verify the required parameter 'ids_raw_signatures' is set
      if @api_client.config.client_side_validation && ids_raw_signatures.nil?
        fail ArgumentError, "Missing the required parameter 'ids_raw_signatures' when calling IdsIpsAndMalwareApi.add_custom_signatures"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling IdsIpsAndMalwareApi.add_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ADD_CUSTOM_SIGNATURES'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of ADD_CUSTOM_SIGNATURES"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_raw_signatures)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#add_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish/Cancel/Validate the custom signatures
    # Publish/Cancel/Validate the customer signatures. CANCEL: Revert to earlier published state i.e. cancel/remove all the unpublished custom signatures. VALIDATE: Trigger the validation of the custom signatures. PUBLISH: Publish the custom signatures. This action will push all the valid custom signatures to datapath. 
    # @param version_id 
    # @param custom_signature_validation_payload 
    # @param action Different Actions on Custom signatures
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apply_custom_signatures_action(version_id, custom_signature_validation_payload, action, opts = {})
      apply_custom_signatures_action_with_http_info(version_id, custom_signature_validation_payload, action, opts)
      nil
    end

    # Publish/Cancel/Validate the custom signatures
    # Publish/Cancel/Validate the customer signatures. CANCEL: Revert to earlier published state i.e. cancel/remove all the unpublished custom signatures. VALIDATE: Trigger the validation of the custom signatures. PUBLISH: Publish the custom signatures. This action will push all the valid custom signatures to datapath. 
    # @param version_id 
    # @param custom_signature_validation_payload 
    # @param action Different Actions on Custom signatures
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def apply_custom_signatures_action_with_http_info(version_id, custom_signature_validation_payload, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.apply_custom_signatures_action ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.apply_custom_signatures_action"
      end
      # verify the required parameter 'custom_signature_validation_payload' is set
      if @api_client.config.client_side_validation && custom_signature_validation_payload.nil?
        fail ArgumentError, "Missing the required parameter 'custom_signature_validation_payload' when calling IdsIpsAndMalwareApi.apply_custom_signatures_action"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling IdsIpsAndMalwareApi.apply_custom_signatures_action"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CANCEL', 'PUBLISH', 'VALIDATE'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CANCEL, PUBLISH, VALIDATE"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(custom_signature_validation_payload)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#apply_custom_signatures_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [IdsGatewayPolicy]
    def create_or_replace_ids_gateway_policy(domain_id, policy_id, ids_gateway_policy, opts = {})
      data, _status_code, _headers = create_or_replace_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts)
      data
    end

    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def create_or_replace_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.create_or_replace_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.create_or_replace_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.create_or_replace_ids_gateway_policy"
      end
      # verify the required parameter 'ids_gateway_policy' is set
      if @api_client.config.client_side_validation && ids_gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_gateway_policy' when calling IdsIpsAndMalwareApi.create_or_replace_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#create_or_replace_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update IDS gateway rule
    # Create or Update the IDS gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def create_or_replace_ids_gateway_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = create_or_replace_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Create or Update IDS gateway rule
    # Create or Update the IDS gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def create_or_replace_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.create_or_replace_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.create_or_replace_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.create_or_replace_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.create_or_replace_ids_gateway_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling IdsIpsAndMalwareApi.create_or_replace_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#create_or_replace_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update Global IDS Signature
    # Update global intrusion detection signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def create_or_update_global_ids_signature(signature_id, global_ids_signature, opts = {})
      data, _status_code, _headers = create_or_update_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts)
      data
    end

    # create or update Global IDS Signature
    # Update global intrusion detection signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def create_or_update_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.create_or_update_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling IdsIpsAndMalwareApi.create_or_update_global_ids_signature"
      end
      # verify the required parameter 'global_ids_signature' is set
      if @api_client.config.client_side_validation && global_ids_signature.nil?
        fail ArgumentError, "Missing the required parameter 'global_ids_signature' when calling IdsIpsAndMalwareApi.create_or_update_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_ids_signature)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#create_or_update_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS config on cluster level
    # Update intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsClusterConfig]
    def create_or_update_ids_cluster_config(cluster_config_id, ids_cluster_config, opts = {})
      data, _status_code, _headers = create_or_update_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts)
      data
    end

    # create or update IDS config on cluster level
    # Update intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsClusterConfig, Fixnum, Hash)>] IdsClusterConfig data, response status code and response headers
    def create_or_update_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.create_or_update_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_config_id' is set
      if @api_client.config.client_side_validation && cluster_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_config_id' when calling IdsIpsAndMalwareApi.create_or_update_ids_cluster_config"
      end
      # verify the required parameter 'ids_cluster_config' is set
      if @api_client.config.client_side_validation && ids_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_cluster_config' when calling IdsIpsAndMalwareApi.create_or_update_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-config-id}'.sub('{' + 'cluster-config-id' + '}', cluster_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#create_or_update_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def create_or_update_ids_profile(profile_id, ids_profile, opts = {})
      data, _status_code, _headers = create_or_update_ids_profile_with_http_info(profile_id, ids_profile, opts)
      data
    end

    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def create_or_update_ids_profile_with_http_info(profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.create_or_update_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.create_or_update_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling IdsIpsAndMalwareApi.create_or_update_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#create_or_update_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def create_or_update_ids_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = create_or_update_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def create_or_update_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.create_or_update_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling IdsIpsAndMalwareApi.create_or_update_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#create_or_update_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def create_or_update_ids_security_policy(domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = create_or_update_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def create_or_update_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.create_or_update_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.create_or_update_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.create_or_update_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling IdsIpsAndMalwareApi.create_or_update_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#create_or_update_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IDS configuration
    # Update intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsStandaloneHostConfig]
    def create_or_update_ids_standalone_host_config(ids_standalone_host_config, opts = {})
      data, _status_code, _headers = create_or_update_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts)
      data
    end

    # Create or update IDS configuration
    # Update intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsStandaloneHostConfig, Fixnum, Hash)>] IdsStandaloneHostConfig data, response status code and response headers
    def create_or_update_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.create_or_update_ids_standalone_host_config ...'
      end
      # verify the required parameter 'ids_standalone_host_config' is set
      if @api_client.config.client_side_validation && ids_standalone_host_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_standalone_host_config' when calling IdsIpsAndMalwareApi.create_or_update_ids_standalone_host_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_standalone_host_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsStandaloneHostConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#create_or_update_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update Malware Prevention profile
    # Update Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [MalwarePreventionProfile]
    def create_or_update_malware_prevention_profile(profile_id, malware_prevention_profile, opts = {})
      data, _status_code, _headers = create_or_update_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts)
      data
    end

    # Create or Update Malware Prevention profile
    # Update Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MalwarePreventionProfile, Fixnum, Hash)>] MalwarePreventionProfile data, response status code and response headers
    def create_or_update_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.create_or_update_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.create_or_update_malware_prevention_profile"
      end
      # verify the required parameter 'malware_prevention_profile' is set
      if @api_client.config.client_side_validation && malware_prevention_profile.nil?
        fail ArgumentError, "Missing the required parameter 'malware_prevention_profile' when calling IdsIpsAndMalwareApi.create_or_update_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(malware_prevention_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#create_or_update_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Global IDS signature
    # Delete global intrusion detection signature. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_global_ids_signature(signature_id, opts = {})
      delete_global_ids_signature_with_http_info(signature_id, opts)
      nil
    end

    # Delete Global IDS signature
    # Delete global intrusion detection signature. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_global_ids_signature_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.delete_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling IdsIpsAndMalwareApi.delete_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#delete_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS GatewayPolicy
    # Delete IDS GatewayPolicy
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_gateway_policy(domain_id, policy_id, opts = {})
      delete_ids_gateway_policy_with_http_info(domain_id, policy_id, opts)
      nil
    end

    # Delete IDS GatewayPolicy
    # Delete IDS GatewayPolicy
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_gateway_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.delete_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.delete_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.delete_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#delete_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS Gateway rule
    # Delete IDS Gateway rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_gateway_rule(domain_id, policy_id, rule_id, opts = {})
      delete_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      nil
    end

    # Delete IDS Gateway rule
    # Delete IDS Gateway rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.delete_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.delete_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.delete_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.delete_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#delete_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_ids_pcap_file(id, opts = {})
      delete_ids_pcap_file_with_http_info(id, opts)
      nil
    end

    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_pcap_file_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.delete_ids_pcap_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdsIpsAndMalwareApi.delete_ids_pcap_file"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#delete_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_profile(profile_id, opts = {})
      delete_ids_profile_with_http_info(profile_id, opts)
      nil
    end

    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.delete_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.delete_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#delete_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_rule(domain_id, policy_id, rule_id, opts = {})
      delete_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      nil
    end

    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.delete_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.delete_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.delete_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.delete_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#delete_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_security_policy(domain_id, policy_id, opts = {})
      delete_ids_security_policy_with_http_info(domain_id, policy_id, opts)
      nil
    end

    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_security_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.delete_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.delete_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.delete_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#delete_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete threshold configuration for IDS system signature
    # Resets threshold configuration for IDS system signature to default values. This API is applicable only for 'System' signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_signature_threshold_config(signature_id, opts = {})
      delete_ids_signature_threshold_config_with_http_info(signature_id, opts)
      nil
    end

    # Delete threshold configuration for IDS system signature
    # Resets threshold configuration for IDS system signature to default values. This API is applicable only for &#39;System&#39; signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_signature_threshold_config_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.delete_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling IdsIpsAndMalwareApi.delete_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#delete_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Malware Prevention profile
    # Delete Malware Prevention profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_malware_prevention_profile(profile_id, opts = {})
      delete_malware_prevention_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete Malware Prevention profile
    # Delete Malware Prevention profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_malware_prevention_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.delete_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.delete_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#delete_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def download_exported_pcap_file(file_name, opts = {})
      download_exported_pcap_file_with_http_info(file_name, opts)
      nil
    end

    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_exported_pcap_file_with_http_info(file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.download_exported_pcap_file ...'
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling IdsIpsAndMalwareApi.download_exported_pcap_file"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps/{file-name}/download'.sub('{' + 'file-name' + '}', file_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#download_exported_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def export_ids_custom_signatures(version_id, include, opts = {})
      export_ids_custom_signatures_with_http_info(version_id, include, opts)
      nil
    end

    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_ids_custom_signatures_with_http_info(version_id, include, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.export_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.export_ids_custom_signatures"
      end
      # verify the required parameter 'include' is set
      if @api_client.config.client_side_validation && include.nil?
        fail ArgumentError, "Missing the required parameter 'include' when calling IdsIpsAndMalwareApi.export_ids_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['VALID', 'INVALID', 'ALL'].include?(include)
        fail ArgumentError, "invalid value for 'include', must be one of VALID, INVALID, ALL"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/export'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = include

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#export_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def export_ids_pcap_file(ids_pcap_export, opts = {})
      export_ids_pcap_file_with_http_info(ids_pcap_export, opts)
      nil
    end

    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_ids_pcap_file_with_http_info(ids_pcap_export, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.export_ids_pcap_file ...'
      end
      # verify the required parameter 'ids_pcap_export' is set
      if @api_client.config.client_side_validation && ids_pcap_export.nil?
        fail ArgumentError, "Missing the required parameter 'ids_pcap_export' when calling IdsIpsAndMalwareApi.export_ids_pcap_file"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps/export'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_pcap_export)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#export_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def get_global_ids_signature(signature_id, opts = {})
      data, _status_code, _headers = get_global_ids_signature_with_http_info(signature_id, opts)
      data
    end

    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def get_global_ids_signature_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling IdsIpsAndMalwareApi.get_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS cluster config.
    # Read intrusion detection system cluster config 
    # @param cluster_config_id User entered ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsClusterConfig]
    def get_ids_cluster_config(cluster_config_id, opts = {})
      data, _status_code, _headers = get_ids_cluster_config_with_http_info(cluster_config_id, opts)
      data
    end

    # Read IDS cluster config.
    # Read intrusion detection system cluster config 
    # @param cluster_config_id User entered ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsClusterConfig, Fixnum, Hash)>] IdsClusterConfig data, response status code and response headers
    def get_ids_cluster_config_with_http_info(cluster_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_config_id' is set
      if @api_client.config.client_side_validation && cluster_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_config_id' when calling IdsIpsAndMalwareApi.get_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-config-id}'.sub('{' + 'cluster-config-id' + '}', cluster_config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignature]
    def get_ids_custom_signature(version_id, sig_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signature_with_http_info(version_id, sig_id, opts)
      data
    end

    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignature, Fixnum, Hash)>] IdsCustomSignature data, response status code and response headers
    def get_ids_custom_signature_with_http_info(version_id, sig_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_custom_signature ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.get_ids_custom_signature"
      end
      # verify the required parameter 'sig_id' is set
      if @api_client.config.client_side_validation && sig_id.nil?
        fail ArgumentError, "Missing the required parameter 'sig_id' when calling IdsIpsAndMalwareApi.get_ids_custom_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/{sig-id}'.sub('{' + 'version-id' + '}', version_id.to_s).sub('{' + 'sig-id' + '}', sig_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_custom_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS custom signature settings
    # IDS custom signatures settings. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureSettings]
    def get_ids_custom_signature_settings(version_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signature_settings_with_http_info(version_id, opts)
      data
    end

    # Get IDS custom signature settings
    # IDS custom signatures settings. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureSettings, Fixnum, Hash)>] IdsCustomSignatureSettings data, response status code and response headers
    def get_ids_custom_signature_settings_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_custom_signature_settings ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.get_ids_custom_signature_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/settings'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_custom_signature_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureVersion]
    def get_ids_custom_signature_version(version_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signature_version_with_http_info(version_id, opts)
      data
    end

    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureVersion, Fixnum, Hash)>] IdsCustomSignatureVersion data, response status code and response headers
    def get_ids_custom_signature_version_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_custom_signature_version ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.get_ids_custom_signature_version"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_custom_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignaturesDiff]
    def get_ids_custom_signatures_diff(version_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signatures_diff_with_http_info(version_id, opts)
      data
    end

    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignaturesDiff, Fixnum, Hash)>] IdsCustomSignaturesDiff data, response status code and response headers
    def get_ids_custom_signatures_diff_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_custom_signatures_diff ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.get_ids_custom_signatures_diff"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures-diff'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignaturesDiff')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_custom_signatures_diff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS gateway policy statistics
    # Get statistics of a IDS gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSecurityPolicyStatisticsListResult]
    def get_ids_gateway_policy_statistics(domain_id, policy_id, opts = {})
      data, _status_code, _headers = get_ids_gateway_policy_statistics_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS gateway policy statistics
    # Get statistics of a IDS gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSecurityPolicyStatisticsListResult, Fixnum, Hash)>] IdsSecurityPolicyStatisticsListResult data, response status code and response headers
    def get_ids_gateway_policy_statistics_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_gateway_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.get_ids_gateway_policy_statistics"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.get_ids_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def get_ids_gateway_rule_statistics(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_gateway_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.get_ids_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def get_ids_profile(profile_id, opts = {})
      data, _status_code, _headers = get_ids_profile_with_http_info(profile_id, opts)
      data
    end

    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def get_ids_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.get_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsProfileSignatures]
    def get_ids_profile_signatures(profile_id, opts = {})
      data, _status_code, _headers = get_ids_profile_signatures_with_http_info(profile_id, opts)
      data
    end

    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsProfileSignatures, Fixnum, Hash)>] IdsProfileSignatures data, response status code and response headers
    def get_ids_profile_signatures_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_profile_signatures ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.get_ids_profile_signatures"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}/effective-signatures'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileSignatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_profile_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def get_ids_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.get_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.get_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.get_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def get_ids_rule_statistics(domain_id, ids_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts)
      data
    end

    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.get_ids_rule_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling IdsIpsAndMalwareApi.get_ids_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.get_ids_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def get_ids_security_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = get_ids_security_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def get_ids_security_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.get_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.get_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSecurityPolicyStatisticsListResult]
    def get_ids_security_policy_statistics(domain_id, ids_policy_id, opts = {})
      data, _status_code, _headers = get_ids_security_policy_statistics_with_http_info(domain_id, ids_policy_id, opts)
      data
    end

    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSecurityPolicyStatisticsListResult, Fixnum, Hash)>] IdsSecurityPolicyStatisticsListResult data, response status code and response headers
    def get_ids_security_policy_statistics_with_http_info(domain_id, ids_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_security_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.get_ids_security_policy_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling IdsIpsAndMalwareApi.get_ids_security_policy_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS system settings
    # Intrusion detection system settings. 
    # @param [Hash] opts the optional parameters
    # @return [IdsSettings]
    def get_ids_settings(opts = {})
      data, _status_code, _headers = get_ids_settings_with_http_info(opts)
      data
    end

    # Get IDS system settings
    # Intrusion detection system settings. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSettings, Fixnum, Hash)>] IdsSettings data, response status code and response headers
    def get_ids_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_settings ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature status
    # Intrusion detection system signatures status. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSignatureStatus]
    def get_ids_signature_status(opts = {})
      data, _status_code, _headers = get_ids_signature_status_with_http_info(opts)
      data
    end

    # Get IDS signature status
    # Intrusion detection system signatures status. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSignatureStatus, Fixnum, Hash)>] IdsSignatureStatus data, response status code and response headers
    def get_ids_signature_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_signature_status ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signatures/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_signature_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get threshold configuration for IDS system signature
    # Retrieve threshold and rate filter configuration for IDS signature. This API is applicable only for 'System' signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [IdsThresholdConfig]
    def get_ids_signature_threshold_config(signature_id, opts = {})
      data, _status_code, _headers = get_ids_signature_threshold_config_with_http_info(signature_id, opts)
      data
    end

    # Get threshold configuration for IDS system signature
    # Retrieve threshold and rate filter configuration for IDS signature. This API is applicable only for &#39;System&#39; signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsThresholdConfig, Fixnum, Hash)>] IdsThresholdConfig data, response status code and response headers
    def get_ids_signature_threshold_config_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling IdsIpsAndMalwareApi.get_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature versions
    # Intrusion detection system signature versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureVersionListResult]
    def get_ids_signature_versions(opts = {})
      data, _status_code, _headers = get_ids_signature_versions_with_http_info(opts)
      data
    end

    # Get IDS signature versions
    # Intrusion detection system signature versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureVersionListResult, Fixnum, Hash)>] IdsSignatureVersionListResult data, response status code and response headers
    def get_ids_signature_versions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_signature_versions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.get_ids_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.get_ids_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS config
    # Read intrusion detection system config of standalone hosts. 
    # @param [Hash] opts the optional parameters
    # @return [IdsStandaloneHostConfig]
    def get_ids_standalone_host_config(opts = {})
      data, _status_code, _headers = get_ids_standalone_host_config_with_http_info(opts)
      data
    end

    # Read IDS config
    # Read intrusion detection system config of standalone hosts. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsStandaloneHostConfig, Fixnum, Hash)>] IdsStandaloneHostConfig data, response status code and response headers
    def get_ids_standalone_host_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_ids_standalone_host_config ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsStandaloneHostConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Malware Prevention profile.
    # Read Malware Prevention profile 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [MalwarePreventionProfile]
    def get_malware_prevention_profile(profile_id, opts = {})
      data, _status_code, _headers = get_malware_prevention_profile_with_http_info(profile_id, opts)
      data
    end

    # Get Malware Prevention profile.
    # Read Malware Prevention profile 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(MalwarePreventionProfile, Fixnum, Hash)>] MalwarePreventionProfile data, response status code and response headers
    def get_malware_prevention_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.get_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsIpList]
    def get_policy_affected_ips(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_affected_ips_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsIpList, Fixnum, Hash)>] PolicyIdsIpList data, response status code and response headers
    def get_policy_affected_ips_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_policy_affected_ips ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling IdsIpsAndMalwareApi.get_policy_affected_ips"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.get_policy_affected_ips, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.get_policy_affected_ips, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/affected-ips'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsIpList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_policy_affected_ips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsUserList]
    def get_policy_affected_users(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_affected_users_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsUserList, Fixnum, Hash)>] PolicyIdsUserList data, response status code and response headers
    def get_policy_affected_users_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_policy_affected_users ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling IdsIpsAndMalwareApi.get_policy_affected_users"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.get_policy_affected_users, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.get_policy_affected_users, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/affected-users'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsUserList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_policy_affected_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsVmList]
    def get_policy_affected_vms(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_affected_vms_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsVmList, Fixnum, Hash)>] PolicyIdsVmList data, response status code and response headers
    def get_policy_affected_vms_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_policy_affected_vms ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling IdsIpsAndMalwareApi.get_policy_affected_vms"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.get_policy_affected_vms, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.get_policy_affected_vms, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/affected-vms'

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsVmList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_policy_affected_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdsEventsBySignatureResult]
    def get_policy_all_ids_events(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_all_ids_events_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdsEventsBySignatureResult, Fixnum, Hash)>] PolicyIdsEventsBySignatureResult data, response status code and response headers
    def get_policy_all_ids_events_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_policy_all_ids_events ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling IdsIpsAndMalwareApi.get_policy_all_ids_events"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-events'

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsEventsBySignatureResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_policy_all_ids_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsSummaryListResult]
    def get_policy_ids_dashboard_summary(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_ids_dashboard_summary_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsSummaryListResult, Fixnum, Hash)>] PolicyIdsSummaryListResult data, response status code and response headers
    def get_policy_ids_dashboard_summary_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.get_policy_ids_dashboard_summary ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling IdsIpsAndMalwareApi.get_policy_ids_dashboard_summary"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.get_policy_ids_dashboard_summary, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.get_policy_ids_dashboard_summary, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-summary'

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsSummaryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#get_policy_ids_dashboard_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_delete_ids_pcap_file(id, opts = {})
      global_infra_delete_ids_pcap_file_with_http_info(id, opts)
      nil
    end

    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_ids_pcap_file_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_delete_ids_pcap_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdsIpsAndMalwareApi.global_infra_delete_ids_pcap_file"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_delete_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_download_exported_pcap_file(file_name, opts = {})
      global_infra_download_exported_pcap_file_with_http_info(file_name, opts)
      nil
    end

    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_download_exported_pcap_file_with_http_info(file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_download_exported_pcap_file ...'
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling IdsIpsAndMalwareApi.global_infra_download_exported_pcap_file"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps/{file-name}/download'.sub('{' + 'file-name' + '}', file_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_download_exported_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_export_ids_pcap_file(ids_pcap_export, opts = {})
      global_infra_export_ids_pcap_file_with_http_info(ids_pcap_export, opts)
      nil
    end

    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_export_ids_pcap_file_with_http_info(ids_pcap_export, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_export_ids_pcap_file ...'
      end
      # verify the required parameter 'ids_pcap_export' is set
      if @api_client.config.client_side_validation && ids_pcap_export.nil?
        fail ArgumentError, "Missing the required parameter 'ids_pcap_export' when calling IdsIpsAndMalwareApi.global_infra_export_ids_pcap_file"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps/export'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_pcap_export)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_export_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def global_infra_get_global_ids_signature_gm(signature_id, opts = {})
      data, _status_code, _headers = global_infra_get_global_ids_signature_gm_with_http_info(signature_id, opts)
      data
    end

    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def global_infra_get_global_ids_signature_gm_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_get_global_ids_signature_gm ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling IdsIpsAndMalwareApi.global_infra_get_global_ids_signature_gm"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/gsm/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_get_global_ids_signature_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS gateway policy statistics
    # Get statistics of a IDS gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSecurityPolicyStatisticsListResult]
    def global_infra_get_ids_gateway_policy_statistics(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_gateway_policy_statistics_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS gateway policy statistics
    # Get statistics of a IDS gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSecurityPolicyStatisticsListResult, Fixnum, Hash)>] IdsSecurityPolicyStatisticsListResult data, response status code and response headers
    def global_infra_get_ids_gateway_policy_statistics_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_get_ids_gateway_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_gateway_policy_statistics"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_get_ids_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def global_infra_get_ids_gateway_rule_statistics(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def global_infra_get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_get_ids_gateway_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_get_ids_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def global_infra_get_ids_profile(profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_profile_with_http_info(profile_id, opts)
      data
    end

    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def global_infra_get_ids_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_get_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_profile"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_get_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsProfileSignatures]
    def global_infra_get_ids_profile_signatures(profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_profile_signatures_with_http_info(profile_id, opts)
      data
    end

    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsProfileSignatures, Fixnum, Hash)>] IdsProfileSignatures data, response status code and response headers
    def global_infra_get_ids_profile_signatures_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_get_ids_profile_signatures ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_profile_signatures"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/profiles/{profile-id}/effective-signatures'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileSignatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_get_ids_profile_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def global_infra_get_ids_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def global_infra_get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_get_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_get_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def global_infra_get_ids_rule_statistics(domain_id, ids_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts)
      data
    end

    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def global_infra_get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_get_ids_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_rule_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_get_ids_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def global_infra_get_ids_security_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_security_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def global_infra_get_ids_security_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_get_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_security_policy"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_get_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSecurityPolicyStatisticsListResult]
    def global_infra_get_ids_security_policy_statistics(domain_id, ids_policy_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_security_policy_statistics_with_http_info(domain_id, ids_policy_id, opts)
      data
    end

    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSecurityPolicyStatisticsListResult, Fixnum, Hash)>] IdsSecurityPolicyStatisticsListResult data, response status code and response headers
    def global_infra_get_ids_security_policy_statistics_with_http_info(domain_id, ids_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_get_ids_security_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_security_policy_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_security_policy_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_get_ids_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS signature version site mapping on GM
    # Read IDS signature version site mapping on GM 
    # @param mapping_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsSiteVersionMapping]
    def global_infra_get_ids_site_version_mapping(mapping_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_site_version_mapping_with_http_info(mapping_id, opts)
      data
    end

    # Read IDS signature version site mapping on GM
    # Read IDS signature version site mapping on GM 
    # @param mapping_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSiteVersionMapping, Fixnum, Hash)>] IdsSiteVersionMapping data, response status code and response headers
    def global_infra_get_ids_site_version_mapping_with_http_info(mapping_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_get_ids_site_version_mapping ...'
      end
      # verify the required parameter 'mapping_id' is set
      if @api_client.config.client_side_validation && mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'mapping_id' when calling IdsIpsAndMalwareApi.global_infra_get_ids_site_version_mapping"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/site-version-mappings/{mapping-id}'.sub('{' + 'mapping-id' + '}', mapping_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSiteVersionMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_get_ids_site_version_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def global_infra_list_global_ids_signatures_gm(opts = {})
      data, _status_code, _headers = global_infra_list_global_ids_signatures_gm_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def global_infra_list_global_ids_signatures_gm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_list_global_ids_signatures_gm ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_global_ids_signatures_gm, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_global_ids_signatures_gm, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/gsm/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_list_global_ids_signatures_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsGatewayPolicyListResult]
    def global_infra_list_ids_gateway_policies(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_gateway_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsGatewayPolicyListResult, Fixnum, Hash)>] IdsGatewayPolicyListResult data, response status code and response headers
    def global_infra_list_ids_gateway_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_list_ids_gateway_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_list_ids_gateway_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_gateway_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_gateway_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_list_ids_gateway_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def global_infra_list_ids_gateway_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def global_infra_list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_list_ids_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_list_ids_gateway_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.global_infra_list_ids_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_list_ids_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsPcapFileMetadataListResult]
    def global_infra_list_ids_pcap_files(opts = {})
      data, _status_code, _headers = global_infra_list_ids_pcap_files_with_http_info(opts)
      data
    end

    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsPcapFileMetadataListResult, Fixnum, Hash)>] IdsPcapFileMetadataListResult data, response status code and response headers
    def global_infra_list_ids_pcap_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_list_ids_pcap_files ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_pcap_files, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_pcap_files, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsPcapFileMetadataListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_list_ids_pcap_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsProfileListResult]
    def global_infra_list_ids_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_ids_profiles_with_http_info(opts)
      data
    end

    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsProfileListResult, Fixnum, Hash)>] IdsProfileListResult data, response status code and response headers
    def global_infra_list_ids_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_list_ids_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_list_ids_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def global_infra_list_ids_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def global_infra_list_ids_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_list_ids_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_list_ids_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.global_infra_list_ids_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_list_ids_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSecurityPolicyListResult]
    def global_infra_list_ids_security_policies(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_security_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSecurityPolicyListResult, Fixnum, Hash)>] IdsSecurityPolicyListResult data, response status code and response headers
    def global_infra_list_ids_security_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_list_ids_security_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_list_ids_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_list_ids_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureListResult]
    def global_infra_list_ids_signatures(version_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureListResult, Fixnum, Hash)>] IdsSignatureListResult data, response status code and response headers
    def global_infra_list_ids_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_list_ids_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.global_infra_list_ids_signatures"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}/signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_list_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS signature version site mappings on GM
    # List signature version site mappings on GM. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSiteVersionMappingListResult]
    def global_infra_list_ids_site_version_mapping(opts = {})
      data, _status_code, _headers = global_infra_list_ids_site_version_mapping_with_http_info(opts)
      data
    end

    # List IDS signature version site mappings on GM
    # List signature version site mappings on GM. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSiteVersionMappingListResult, Fixnum, Hash)>] IdsSiteVersionMappingListResult data, response status code and response headers
    def global_infra_list_ids_site_version_mapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_list_ids_site_version_mapping ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_site_version_mapping, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.global_infra_list_ids_site_version_mapping, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/site-version-mappings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSiteVersionMappingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_list_ids_site_version_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsGatewayPolicy]
    def global_infra_read_ids_gateway_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def global_infra_read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_read_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_read_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.global_infra_read_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_read_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def global_infra_read_ids_gateway_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def global_infra_read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_read_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.global_infra_read_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.global_infra_read_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.global_infra_read_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_read_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category (default to IDPSDFW)
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_reset_ids_rule_stats(opts = {})
      global_infra_reset_ids_rule_stats_with_http_info(opts)
      nil
    end

    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_reset_ids_rule_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.global_infra_reset_ids_rule_stats ...'
      end
      if @api_client.config.client_side_validation && opts[:'category'] && !['IDPSDFW', 'IDPSEDGE'].include?(opts[:'category'])
        fail ArgumentError, 'invalid value for "category", must be one of IDPSDFW, IDPSEDGE'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#global_infra_reset_ids_rule_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def list_global_ids_signatures(opts = {})
      data, _status_code, _headers = list_global_ids_signatures_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def list_global_ids_signatures_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_global_ids_signatures ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_global_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_global_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_global_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def list_global_ids_signatures_gm(opts = {})
      data, _status_code, _headers = list_global_ids_signatures_gm_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def list_global_ids_signatures_gm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_global_ids_signatures_gm ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_global_ids_signatures_gm, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_global_ids_signatures_gm, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/gsm/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_global_ids_signatures_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS cluster configs
    # List intrusion detection system cluster configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsClusterConfigListResult]
    def list_ids_cluster_configs(opts = {})
      data, _status_code, _headers = list_ids_cluster_configs_with_http_info(opts)
      data
    end

    # List IDS cluster configs
    # List intrusion detection system cluster configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsClusterConfigListResult, Fixnum, Hash)>] IdsClusterConfigListResult data, response status code and response headers
    def list_ids_cluster_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_ids_cluster_configs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_cluster_configs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_cluster_configs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_ids_cluster_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureVersionListResult]
    def list_ids_custom_signature_versions(opts = {})
      data, _status_code, _headers = list_ids_custom_signature_versions_with_http_info(opts)
      data
    end

    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureVersionListResult, Fixnum, Hash)>] IdsCustomSignatureVersionListResult data, response status code and response headers
    def list_ids_custom_signature_versions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_ids_custom_signature_versions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_custom_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_custom_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_ids_custom_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureListResult]
    def list_ids_custom_signatures(version_id, opts = {})
      data, _status_code, _headers = list_ids_custom_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureListResult, Fixnum, Hash)>] IdsCustomSignatureListResult data, response status code and response headers
    def list_ids_custom_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.list_ids_custom_signatures"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !['PREVIEW_CUSTOM_SIGNATURES', 'CUSTOM_SIGNATURES'].include?(opts[:'include'])
        fail ArgumentError, 'invalid value for "include", must be one of PREVIEW_CUSTOM_SIGNATURES, CUSTOM_SIGNATURES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_custom_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_custom_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsGatewayPolicyListResult]
    def list_ids_gateway_policies(domain_id, opts = {})
      data, _status_code, _headers = list_ids_gateway_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsGatewayPolicyListResult, Fixnum, Hash)>] IdsGatewayPolicyListResult data, response status code and response headers
    def list_ids_gateway_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_ids_gateway_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.list_ids_gateway_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_gateway_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_gateway_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_ids_gateway_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def list_ids_gateway_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_ids_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.list_ids_gateway_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.list_ids_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_ids_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsPcapFileMetadataListResult]
    def list_ids_pcap_files(opts = {})
      data, _status_code, _headers = list_ids_pcap_files_with_http_info(opts)
      data
    end

    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsPcapFileMetadataListResult, Fixnum, Hash)>] IdsPcapFileMetadataListResult data, response status code and response headers
    def list_ids_pcap_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_ids_pcap_files ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_pcap_files, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_pcap_files, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsPcapFileMetadataListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_ids_pcap_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsProfileListResult]
    def list_ids_profiles(opts = {})
      data, _status_code, _headers = list_ids_profiles_with_http_info(opts)
      data
    end

    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsProfileListResult, Fixnum, Hash)>] IdsProfileListResult data, response status code and response headers
    def list_ids_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_ids_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_ids_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def list_ids_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = list_ids_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def list_ids_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_ids_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.list_ids_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.list_ids_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_ids_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSecurityPolicyListResult]
    def list_ids_security_policies(domain_id, opts = {})
      data, _status_code, _headers = list_ids_security_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSecurityPolicyListResult, Fixnum, Hash)>] IdsSecurityPolicyListResult data, response status code and response headers
    def list_ids_security_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_ids_security_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.list_ids_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_ids_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all threshold configurations for IDS system signature
    # List all threshold configurations for IDS signatures. This API is applicable only for 'System' signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsThresholdConfigListResult]
    def list_ids_signature_threshold_configs(opts = {})
      data, _status_code, _headers = list_ids_signature_threshold_configs_with_http_info(opts)
      data
    end

    # List all threshold configurations for IDS system signature
    # List all threshold configurations for IDS signatures. This API is applicable only for &#39;System&#39; signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsThresholdConfigListResult, Fixnum, Hash)>] IdsThresholdConfigListResult data, response status code and response headers
    def list_ids_signature_threshold_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_ids_signature_threshold_configs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_signature_threshold_configs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_signature_threshold_configs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_ids_signature_threshold_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureListResult]
    def list_ids_signatures(version_id, opts = {})
      data, _status_code, _headers = list_ids_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureListResult, Fixnum, Hash)>] IdsSignatureListResult data, response status code and response headers
    def list_ids_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_ids_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.list_ids_signatures"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}/signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Malware Prevention profiles
    # List Malware Prevention profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MalwarePreventionProfileListResult]
    def list_malware_prevention_profiles(opts = {})
      data, _status_code, _headers = list_malware_prevention_profiles_with_http_info(opts)
      data
    end

    # List Malware Prevention profiles
    # List Malware Prevention profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MalwarePreventionProfileListResult, Fixnum, Hash)>] MalwarePreventionProfileListResult data, response status code and response headers
    def list_malware_prevention_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_malware_prevention_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_malware_prevention_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_malware_prevention_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_malware_prevention_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Malware Prevention signatures
    # List Malware Prevention signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MalwarePreventionSignatureListResult]
    def list_malware_prevention_signatures(opts = {})
      data, _status_code, _headers = list_malware_prevention_signatures_with_http_info(opts)
      data
    end

    # List Malware Prevention signatures
    # List Malware Prevention signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MalwarePreventionSignatureListResult, Fixnum, Hash)>] MalwarePreventionSignatureListResult data, response status code and response headers
    def list_malware_prevention_signatures_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.list_malware_prevention_signatures ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_malware_prevention_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.list_malware_prevention_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#list_malware_prevention_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change the state of IDS Signature Version
    # Make this IDS Signature version as ACTIVE version and other versions as NOTACTIVE. 
    # @param ids_signature_version 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def make_version_as_active(ids_signature_version, opts = {})
      make_version_as_active_with_http_info(ids_signature_version, opts)
      nil
    end

    # Change the state of IDS Signature Version
    # Make this IDS Signature version as ACTIVE version and other versions as NOTACTIVE. 
    # @param ids_signature_version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def make_version_as_active_with_http_info(ids_signature_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.make_version_as_active ...'
      end
      # verify the required parameter 'ids_signature_version' is set
      if @api_client.config.client_side_validation && ids_signature_version.nil?
        fail ArgumentError, "Missing the required parameter 'ids_signature_version' when calling IdsIpsAndMalwareApi.make_version_as_active"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions?action=make_active_version'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_signature_version)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#make_version_as_active\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_profile(org_id, project_id, profile_id, ids_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts)
      data
    end

    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_create_or_update_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_create_or_update_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_pcap_file(org_id, project_id, id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_pcap_file_with_http_info(org_id, project_id, id, opts)
      nil
    end

    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_pcap_file_with_http_info(org_id, project_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps/{id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_delete_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_profile(org_id, project_id, profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_profile_with_http_info(org_id, project_id, profile_id, opts)
      nil
    end

    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_profile_with_http_info(org_id, project_id, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_delete_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts)
      nil
    end

    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_delete_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_security_policy(org_id, project_id, domain_id, policy_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts)
      nil
    end

    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_delete_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_download_exported_pcap_file(org_id, project_id, file_name, opts = {})
      orgs_org_id_projects_project_id_infra_download_exported_pcap_file_with_http_info(org_id, project_id, file_name, opts)
      nil
    end

    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_download_exported_pcap_file_with_http_info(org_id, project_id, file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file"
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps/{file-name}/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'file-name' + '}', file_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_download_exported_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_export_ids_custom_signatures(org_id, project_id, version_id, include, opts = {})
      orgs_org_id_projects_project_id_infra_export_ids_custom_signatures_with_http_info(org_id, project_id, version_id, include, opts)
      nil
    end

    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_export_ids_custom_signatures_with_http_info(org_id, project_id, version_id, include, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'include' is set
      if @api_client.config.client_side_validation && include.nil?
        fail ArgumentError, "Missing the required parameter 'include' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['VALID', 'INVALID', 'ALL'].include?(include)
        fail ArgumentError, "invalid value for 'include', must be one of VALID, INVALID, ALL"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = include

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_export_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_export_ids_pcap_file(org_id, project_id, ids_pcap_export, opts = {})
      orgs_org_id_projects_project_id_infra_export_ids_pcap_file_with_http_info(org_id, project_id, ids_pcap_export, opts)
      nil
    end

    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_export_ids_pcap_file_with_http_info(org_id, project_id, ids_pcap_export, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file"
      end
      # verify the required parameter 'ids_pcap_export' is set
      if @api_client.config.client_side_validation && ids_pcap_export.nil?
        fail ArgumentError, "Missing the required parameter 'ids_pcap_export' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_pcap_export)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_export_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignature]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature(org_id, project_id, version_id, sig_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signature_with_http_info(org_id, project_id, version_id, sig_id, opts)
      data
    end

    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignature, Fixnum, Hash)>] IdsCustomSignature data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_with_http_info(org_id, project_id, version_id, sig_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'sig_id' is set
      if @api_client.config.client_side_validation && sig_id.nil?
        fail ArgumentError, "Missing the required parameter 'sig_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/{sig-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s).sub('{' + 'sig-id' + '}', sig_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureVersion]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureVersion, Fixnum, Hash)>] IdsCustomSignatureVersion data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignaturesDiff]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignaturesDiff, Fixnum, Hash)>] IdsCustomSignaturesDiff data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures-diff'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignaturesDiff')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def orgs_org_id_projects_project_id_infra_get_ids_profile(org_id, project_id, profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_profile_with_http_info(org_id, project_id, profile_id, opts)
      data
    end

    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_profile_with_http_info(org_id, project_id, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS rule.
    # Read intrusion detection rule 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def orgs_org_id_projects_project_id_infra_get_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS rule.
    # Read intrusion detection rule 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_ids_rule_statistics(org_id, project_id, domain_id, ids_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_rule_statistics_with_http_info(org_id, project_id, domain_id, ids_policy_id, rule_id, opts)
      data
    end

    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_rule_statistics_with_http_info(org_id, project_id, domain_id, ids_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_ids_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def orgs_org_id_projects_project_id_infra_get_ids_security_policy(org_id, project_id, domain_id, policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts)
      data
    end

    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSecurityPolicyStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics(org_id, project_id, domain_id, ids_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics_with_http_info(org_id, project_id, domain_id, ids_policy_id, opts)
      data
    end

    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSecurityPolicyStatisticsListResult, Fixnum, Hash)>] IdsSecurityPolicyStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics_with_http_info(org_id, project_id, domain_id, ids_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsIpList]
    def orgs_org_id_projects_project_id_infra_get_policy_affected_ips(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_affected_ips_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsIpList, Fixnum, Hash)>] PolicyIdsIpList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_affected_ips_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/affected-ips'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsIpList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_policy_affected_ips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsUserList]
    def orgs_org_id_projects_project_id_infra_get_policy_affected_users(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_affected_users_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsUserList, Fixnum, Hash)>] PolicyIdsUserList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_affected_users_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/affected-users'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsUserList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_policy_affected_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsVmList]
    def orgs_org_id_projects_project_id_infra_get_policy_affected_vms(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_affected_vms_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsVmList, Fixnum, Hash)>] PolicyIdsVmList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_affected_vms_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/affected-vms'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsVmList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_policy_affected_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdsEventsBySignatureResult]
    def orgs_org_id_projects_project_id_infra_get_policy_all_ids_events(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_all_ids_events_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdsEventsBySignatureResult, Fixnum, Hash)>] PolicyIdsEventsBySignatureResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_all_ids_events_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/ids-events'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsEventsBySignatureResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_policy_all_ids_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsSummaryListResult]
    def orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsSummaryListResult, Fixnum, Hash)>] PolicyIdsSummaryListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/ids-summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsSummaryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureVersionListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions_with_http_info(org_id, project_id, opts)
      data
    end

    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureVersionListResult, Fixnum, Hash)>] IdsCustomSignatureVersionListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signatures(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_custom_signatures_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureListResult, Fixnum, Hash)>] IdsCustomSignatureListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signatures_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !['PREVIEW_CUSTOM_SIGNATURES', 'CUSTOM_SIGNATURES'].include?(opts[:'include'])
        fail ArgumentError, 'invalid value for "include", must be one of PREVIEW_CUSTOM_SIGNATURES, CUSTOM_SIGNATURES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_list_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsPcapFileMetadataListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_pcap_files(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_pcap_files_with_http_info(org_id, project_id, opts)
      data
    end

    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsPcapFileMetadataListResult, Fixnum, Hash)>] IdsPcapFileMetadataListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_pcap_files_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsPcapFileMetadataListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_list_ids_pcap_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsProfileListResult, Fixnum, Hash)>] IdsProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_list_ids_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS rules
    # List intrusion detection rules. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_rules(org_id, project_id, domain_id, policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_rules_with_http_info(org_id, project_id, domain_id, policy_id, opts)
      data
    end

    # List IDS rules
    # List intrusion detection rules. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_rules_with_http_info(org_id, project_id, domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_list_ids_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSecurityPolicyListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_security_policies(org_id, project_id, domain_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_security_policies_with_http_info(org_id, project_id, domain_id, opts)
      data
    end

    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSecurityPolicyListResult, Fixnum, Hash)>] IdsSecurityPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_security_policies_with_http_info(org_id, project_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_list_ids_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_ids_profile(org_id, project_id, profile_id, ids_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts)
      nil
    end

    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_patch_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      orgs_org_id_projects_project_id_infra_patch_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts)
      nil
    end

    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_patch_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_ids_security_policy(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      orgs_org_id_projects_project_id_infra_patch_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts)
      nil
    end

    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_patch_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsRule]
    def orgs_org_id_projects_project_id_infra_revise_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_revise_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsSecurityPolicy]
    def orgs_org_id_projects_project_id_infra_revise_ids_security_policy(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling IdsIpsAndMalwareApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#orgs_org_id_projects_project_id_infra_revise_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Global IDS Signature
    # Patch global intrusion detection system signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_global_ids_signature(signature_id, global_ids_signature, opts = {})
      patch_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts)
      nil
    end

    # Patch Global IDS Signature
    # Patch global intrusion detection system signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling IdsIpsAndMalwareApi.patch_global_ids_signature"
      end
      # verify the required parameter 'global_ids_signature' is set
      if @api_client.config.client_side_validation && global_ids_signature.nil?
        fail ArgumentError, "Missing the required parameter 'global_ids_signature' when calling IdsIpsAndMalwareApi.patch_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_ids_signature)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS config on cluster level
    # Patch intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_cluster_config(cluster_config_id, ids_cluster_config, opts = {})
      patch_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts)
      nil
    end

    # Patch IDS config on cluster level
    # Patch intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_config_id' is set
      if @api_client.config.client_side_validation && cluster_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_config_id' when calling IdsIpsAndMalwareApi.patch_ids_cluster_config"
      end
      # verify the required parameter 'ids_cluster_config' is set
      if @api_client.config.client_side_validation && ids_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_cluster_config' when calling IdsIpsAndMalwareApi.patch_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-config-id}'.sub('{' + 'cluster-config-id' + '}', cluster_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS custom signature settings
    # Patch IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_custom_signature_settings(version_id, ids_custom_signature_settings, opts = {})
      patch_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts)
      nil
    end

    # Patch IDS custom signature settings
    # Patch IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_ids_custom_signature_settings ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.patch_ids_custom_signature_settings"
      end
      # verify the required parameter 'ids_custom_signature_settings' is set
      if @api_client.config.client_side_validation && ids_custom_signature_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_custom_signature_settings' when calling IdsIpsAndMalwareApi.patch_ids_custom_signature_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/settings'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_custom_signature_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_ids_custom_signature_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_gateway_policy(domain_id, policy_id, ids_gateway_policy, opts = {})
      patch_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts)
      nil
    end

    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.patch_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.patch_ids_gateway_policy"
      end
      # verify the required parameter 'ids_gateway_policy' is set
      if @api_client.config.client_side_validation && ids_gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_gateway_policy' when calling IdsIpsAndMalwareApi.patch_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS gateway rule
    # Update the gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_gateway_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      patch_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      nil
    end

    # Update IDS gateway rule
    # Update the gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.patch_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.patch_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.patch_ids_gateway_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling IdsIpsAndMalwareApi.patch_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_profile(profile_id, ids_profile, opts = {})
      patch_ids_profile_with_http_info(profile_id, ids_profile, opts)
      nil
    end

    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_profile_with_http_info(profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.patch_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling IdsIpsAndMalwareApi.patch_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      patch_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      nil
    end

    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.patch_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.patch_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.patch_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling IdsIpsAndMalwareApi.patch_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_security_policy(domain_id, policy_id, ids_security_policy, opts = {})
      patch_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      nil
    end

    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.patch_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.patch_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling IdsIpsAndMalwareApi.patch_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_settings(ids_settings, opts = {})
      patch_ids_settings_with_http_info(ids_settings, opts)
      nil
    end

    # Patch Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_settings_with_http_info(ids_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_ids_settings ...'
      end
      # verify the required parameter 'ids_settings' is set
      if @api_client.config.client_side_validation && ids_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_settings' when calling IdsIpsAndMalwareApi.patch_ids_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_ids_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch threshold configuration for IDS system signature
    # Patch threshold and rate filter configuration for IDS signature globally. This API is applicable only for 'System' signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_signature_threshold_config(signature_id, ids_threshold_config, opts = {})
      patch_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts)
      nil
    end

    # Patch threshold configuration for IDS system signature
    # Patch threshold and rate filter configuration for IDS signature globally. This API is applicable only for &#39;System&#39; signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling IdsIpsAndMalwareApi.patch_ids_signature_threshold_config"
      end
      # verify the required parameter 'ids_threshold_config' is set
      if @api_client.config.client_side_validation && ids_threshold_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_threshold_config' when calling IdsIpsAndMalwareApi.patch_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_threshold_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS configuration
    # Patch intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_standalone_host_config(ids_standalone_host_config, opts = {})
      patch_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts)
      nil
    end

    # Patch IDS configuration
    # Patch intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_ids_standalone_host_config ...'
      end
      # verify the required parameter 'ids_standalone_host_config' is set
      if @api_client.config.client_side_validation && ids_standalone_host_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_standalone_host_config' when calling IdsIpsAndMalwareApi.patch_ids_standalone_host_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_standalone_host_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Malware Prevention profile
    # Patch Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_malware_prevention_profile(profile_id, malware_prevention_profile, opts = {})
      patch_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts)
      nil
    end

    # Patch Malware Prevention profile
    # Patch Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.patch_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling IdsIpsAndMalwareApi.patch_malware_prevention_profile"
      end
      # verify the required parameter 'malware_prevention_profile' is set
      if @api_client.config.client_side_validation && malware_prevention_profile.nil?
        fail ArgumentError, "Missing the required parameter 'malware_prevention_profile' when calling IdsIpsAndMalwareApi.patch_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(malware_prevention_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#patch_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsGatewayPolicy]
    def read_ids_gateway_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.read_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.read_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.read_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#read_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def read_ids_gateway_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.read_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.read_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.read_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.read_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#read_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category (default to IDPSDFW)
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def reset_ids_rule_stats(opts = {})
      reset_ids_rule_stats_with_http_info(opts)
      nil
    end

    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_ids_rule_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.reset_ids_rule_stats ...'
      end
      if @api_client.config.client_side_validation && opts[:'category'] && !['IDPSDFW', 'IDPSEDGE'].include?(opts[:'category'])
        fail ArgumentError, 'invalid value for "category", must be one of IDPSDFW, IDPSEDGE'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#reset_ids_rule_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS gateway policy
    # This is used to set a precedence of a IDS gateway policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsGatewayPolicy]
    def revise_ids_gateway_policy(domain_id, policy_id, ids_gateway_policy, opts = {})
      data, _status_code, _headers = revise_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts)
      data
    end

    # Revise the positioning of IDS gateway policy
    # This is used to set a precedence of a IDS gateway policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def revise_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.revise_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.revise_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.revise_ids_gateway_policy"
      end
      # verify the required parameter 'ids_gateway_policy' is set
      if @api_client.config.client_side_validation && ids_gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_gateway_policy' when calling IdsIpsAndMalwareApi.revise_ids_gateway_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#revise_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS gateway rule
    # This is used to re-order a IDS gateway rule within a IDS gateway policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsRule]
    def revise_ids_gateway_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = revise_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Revise the positioning of IDS gateway rule
    # This is used to re-order a IDS gateway rule within a IDS gateway policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def revise_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.revise_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.revise_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.revise_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.revise_ids_gateway_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling IdsIpsAndMalwareApi.revise_ids_gateway_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#revise_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsRule]
    def revise_ids_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = revise_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def revise_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.revise_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.revise_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.revise_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling IdsIpsAndMalwareApi.revise_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling IdsIpsAndMalwareApi.revise_ids_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#revise_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsSecurityPolicy]
    def revise_ids_security_policy(domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = revise_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def revise_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.revise_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling IdsIpsAndMalwareApi.revise_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling IdsIpsAndMalwareApi.revise_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling IdsIpsAndMalwareApi.revise_ids_security_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#revise_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS custom signature settings
    # Update IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureSettings]
    def update_ids_custom_signature_settings(version_id, ids_custom_signature_settings, opts = {})
      data, _status_code, _headers = update_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts)
      data
    end

    # Update IDS custom signature settings
    # Update IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureSettings, Fixnum, Hash)>] IdsCustomSignatureSettings data, response status code and response headers
    def update_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.update_ids_custom_signature_settings ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.update_ids_custom_signature_settings"
      end
      # verify the required parameter 'ids_custom_signature_settings' is set
      if @api_client.config.client_side_validation && ids_custom_signature_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_custom_signature_settings' when calling IdsIpsAndMalwareApi.update_ids_custom_signature_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/settings'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_custom_signature_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#update_ids_custom_signature_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [IdsSettings]
    def update_ids_settings(ids_settings, opts = {})
      data, _status_code, _headers = update_ids_settings_with_http_info(ids_settings, opts)
      data
    end

    # Update Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSettings, Fixnum, Hash)>] IdsSettings data, response status code and response headers
    def update_ids_settings_with_http_info(ids_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.update_ids_settings ...'
      end
      # verify the required parameter 'ids_settings' is set
      if @api_client.config.client_side_validation && ids_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_settings' when calling IdsIpsAndMalwareApi.update_ids_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#update_ids_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update threshold configuration for IDS system signature
    # Update threshold and rate filter configuration for IDS signature globally. This API is applicable only for 'System' signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsThresholdConfig]
    def update_ids_signature_threshold_config(signature_id, ids_threshold_config, opts = {})
      data, _status_code, _headers = update_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts)
      data
    end

    # Update threshold configuration for IDS system signature
    # Update threshold and rate filter configuration for IDS signature globally. This API is applicable only for &#39;System&#39; signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsThresholdConfig, Fixnum, Hash)>] IdsThresholdConfig data, response status code and response headers
    def update_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.update_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling IdsIpsAndMalwareApi.update_ids_signature_threshold_config"
      end
      # verify the required parameter 'ids_threshold_config' is set
      if @api_client.config.client_side_validation && ids_threshold_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_threshold_config' when calling IdsIpsAndMalwareApi.update_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_threshold_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#update_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download and update IDS signatures
    # Trigger the process to Download and update the IDS signatures manually. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_ids_signatures(opts = {})
      update_ids_signatures_with_http_info(opts)
      nil
    end

    # Download and update IDS signatures
    # Trigger the process to Download and update the IDS signatures manually. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_ids_signatures_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.update_ids_signatures ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signatures?action=update_signatures'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#update_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload IDS custom signature bundle
    # Upload IDS custom signature bundle. 
    # @param version_id 
    # @param file IDS custom signatures file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_name IDS custom signature version name
    # @return [nil]
    def upload_ids_custom_signatures(version_id, file, opts = {})
      upload_ids_custom_signatures_with_http_info(version_id, file, opts)
      nil
    end

    # Upload IDS custom signature bundle
    # Upload IDS custom signature bundle. 
    # @param version_id 
    # @param file IDS custom signatures file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_name IDS custom signature version name
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_ids_custom_signatures_with_http_info(version_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdsIpsAndMalwareApi.upload_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IdsIpsAndMalwareApi.upload_ids_custom_signatures"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling IdsIpsAndMalwareApi.upload_ids_custom_signatures"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/upload-custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'version_name'] = opts[:'version_name'] if !opts[:'version_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdsIpsAndMalwareApi#upload_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
