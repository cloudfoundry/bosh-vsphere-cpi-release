=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class EWFirewallApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete E-W Firewall Rule
    # Delete E-W Firewall Rule DELETE /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      delete_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts)
      nil
    end

    # Delete E-W Firewall Rule
    # Delete E-W Firewall Rule DELETE /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.delete_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EWFirewallApi.delete_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#delete_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete SecurityPolicy
    # Delete SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, opts = {})
      delete_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      nil
    end

    # Delete SecurityPolicy
    # Delete SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.delete_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.delete_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.delete_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.delete_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.delete_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#delete_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read E-W Firewall Rule
    # Read Rule GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts)
      data
    end

    # Read E-W Firewall Rule
    # Read Rule GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def get_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.get_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EWFirewallApi.get_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#get_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get SecurityPolicy
    # Get SecurityPolicy 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def get_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, opts = {})
      data, _status_code, _headers = get_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      data
    end

    # Get SecurityPolicy
    # Get SecurityPolicy 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def get_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.get_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.get_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.get_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.get_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.get_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#get_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_vpc_security_policy_statistics(org_id, project_id, vpc_id, security_policy_id, opts = {})
      data, _status_code, _headers = get_vpc_security_policy_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      data
    end

    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_vpc_security_policy_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.get_vpc_security_policy_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.get_vpc_security_policy_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.get_vpc_security_policy_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.get_vpc_security_policy_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.get_vpc_security_policy_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#get_vpc_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rule statistics
    # Get statistics of E-W Firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_vpc_security_rule_statistics(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_vpc_security_rule_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts)
      data
    end

    # Get rule statistics
    # Get statistics of E-W Firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_vpc_security_rule_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.get_vpc_security_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EWFirewallApi.get_vpc_security_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#get_vpc_security_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List E-W Firewall Rules
    # List Rules GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_vpc_policy_rules(org_id, project_id, vpc_id, security_policy_id, opts = {})
      data, _status_code, _headers = list_vpc_policy_rules_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      data
    end

    # List E-W Firewall Rules
    # List Rules GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_vpc_policy_rules_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.list_vpc_policy_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.list_vpc_policy_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.list_vpc_policy_rules"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.list_vpc_policy_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.list_vpc_policy_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EWFirewallApi.list_vpc_policy_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EWFirewallApi.list_vpc_policy_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#list_vpc_policy_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of VPC security policies
    # Paginated list of VPC security policies. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def list_vpc_security_policies(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List of VPC security policies
    # Paginated list of VPC security policies. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def list_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.list_vpc_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.list_vpc_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.list_vpc_security_policies"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.list_vpc_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EWFirewallApi.list_vpc_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EWFirewallApi.list_vpc_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#list_vpc_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch E-W Firewall Rule
    # Patch the E-W Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace PATCH /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      patch_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch E-W Firewall Rule
    # Patch the E-W Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace PATCH /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.patch_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EWFirewallApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling EWFirewallApi.patch_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#patch_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update SecurityPolicy
    # If a SecurityPolicy with the policy-id is not already present, create a new SecurityPolicy. If it already exists, update the SecurityPolicy. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      patch_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts)
      nil
    end

    # Create or update SecurityPolicy
    # If a SecurityPolicy with the policy-id is not already present, create a new SecurityPolicy. If it already exists, update the SecurityPolicy. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.patch_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling EWFirewallApi.patch_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#patch_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of VPC security policies
    # This is used to set a precedence of a VPC security policy w.r.t others. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [SecurityPolicy]
    def revise_vpc_security_policies(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = revise_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts)
      data
    end

    # Revise the positioning of VPC security policies
    # This is used to set a precedence of a VPC security policy w.r.t others. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def revise_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.revise_vpc_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling EWFirewallApi.revise_vpc_security_policies"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#revise_vpc_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of VPC E-W Firewall rule
    # This is used to re-order a rule within a VPC security policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_vpc_security_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_vpc_security_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of VPC E-W Firewall rule
    # This is used to re-order a rule within a VPC security policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_vpc_security_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.revise_vpc_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EWFirewallApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling EWFirewallApi.revise_vpc_security_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#revise_vpc_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update E-W Firewall Rule
    # Update the E-W Firewall Rule. If a Rule with the rule-id is not already present, this API fails with a 404. Creation of Rules is not allowed using this API. PUT /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def update_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = update_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update E-W Firewall Rule
    # Update the E-W Firewall Rule. If a Rule with the rule-id is not already present, this API fails with a 404. Creation of Rules is not allowed using this API. PUT /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def update_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.update_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EWFirewallApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling EWFirewallApi.update_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#update_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the SecurityPolicy
    # Update the SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def update_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = update_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts)
      data
    end

    # Update the SecurityPolicy
    # Update the SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def update_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EWFirewallApi.update_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EWFirewallApi.update_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EWFirewallApi.update_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling EWFirewallApi.update_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EWFirewallApi.update_vpc_security_policy"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling EWFirewallApi.update_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EWFirewallApi#update_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
