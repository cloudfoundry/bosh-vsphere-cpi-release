=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class RealTimeEthProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or Replace Real Time Eth profile.
    # Create or Replace Real Time Eth profile. 
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param real_time_eth_profile 
    # @param [Hash] opts the optional parameters
    # @return [RealTimeEthProfile]
    def create_or_replace_real_time_eth_profile(real_time_eth_profile_id, real_time_eth_profile, opts = {})
      data, _status_code, _headers = create_or_replace_real_time_eth_profile_with_http_info(real_time_eth_profile_id, real_time_eth_profile, opts)
      data
    end

    # Create or Replace Real Time Eth profile.
    # Create or Replace Real Time Eth profile. 
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param real_time_eth_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealTimeEthProfile, Fixnum, Hash)>] RealTimeEthProfile data, response status code and response headers
    def create_or_replace_real_time_eth_profile_with_http_info(real_time_eth_profile_id, real_time_eth_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeEthProfilesApi.create_or_replace_real_time_eth_profile ...'
      end
      # verify the required parameter 'real_time_eth_profile_id' is set
      if @api_client.config.client_side_validation && real_time_eth_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile_id' when calling RealTimeEthProfilesApi.create_or_replace_real_time_eth_profile"
      end
      # verify the required parameter 'real_time_eth_profile' is set
      if @api_client.config.client_side_validation && real_time_eth_profile.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile' when calling RealTimeEthProfilesApi.create_or_replace_real_time_eth_profile"
      end
      # resource path
      local_var_path = '/infra/real-time-eth-profiles/{real-time-eth-profile-id}'.sub('{' + 'real-time-eth-profile-id' + '}', real_time_eth_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(real_time_eth_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealTimeEthProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeEthProfilesApi#create_or_replace_real_time_eth_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Real Time Eth profile
    # API will delete Real Time Eth profile. 
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_real_time_eth_profile(real_time_eth_profile_id, opts = {})
      delete_real_time_eth_profile_with_http_info(real_time_eth_profile_id, opts)
      nil
    end

    # Delete Real Time Eth profile
    # API will delete Real Time Eth profile. 
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_real_time_eth_profile_with_http_info(real_time_eth_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeEthProfilesApi.delete_real_time_eth_profile ...'
      end
      # verify the required parameter 'real_time_eth_profile_id' is set
      if @api_client.config.client_side_validation && real_time_eth_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile_id' when calling RealTimeEthProfilesApi.delete_real_time_eth_profile"
      end
      # resource path
      local_var_path = '/infra/real-time-eth-profiles/{real-time-eth-profile-id}'.sub('{' + 'real-time-eth-profile-id' + '}', real_time_eth_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeEthProfilesApi#delete_real_time_eth_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Real Time Eth Profiles
    # API will list all Real Time Eth profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealTimeEthProfileListResult]
    def list_real_time_eth_profiles(opts = {})
      data, _status_code, _headers = list_real_time_eth_profiles_with_http_info(opts)
      data
    end

    # List Real Time Eth Profiles
    # API will list all Real Time Eth profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealTimeEthProfileListResult, Fixnum, Hash)>] RealTimeEthProfileListResult data, response status code and response headers
    def list_real_time_eth_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeEthProfilesApi.list_real_time_eth_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealTimeEthProfilesApi.list_real_time_eth_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealTimeEthProfilesApi.list_real_time_eth_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/real-time-eth-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealTimeEthProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeEthProfilesApi#list_real_time_eth_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace Real Time Eth profile.
    # Create or Replace Real Time Eth profile. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param real_time_eth_profile 
    # @param [Hash] opts the optional parameters
    # @return [RealTimeEthProfile]
    def orgs_org_id_projects_project_id_infra_create_or_replace_real_time_eth_profile(org_id, project_id, real_time_eth_profile_id, real_time_eth_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_real_time_eth_profile_with_http_info(org_id, project_id, real_time_eth_profile_id, real_time_eth_profile, opts)
      data
    end

    # Create or Replace Real Time Eth profile.
    # Create or Replace Real Time Eth profile. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param real_time_eth_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealTimeEthProfile, Fixnum, Hash)>] RealTimeEthProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_real_time_eth_profile_with_http_info(org_id, project_id, real_time_eth_profile_id, real_time_eth_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_real_time_eth_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_real_time_eth_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_real_time_eth_profile"
      end
      # verify the required parameter 'real_time_eth_profile_id' is set
      if @api_client.config.client_side_validation && real_time_eth_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_real_time_eth_profile"
      end
      # verify the required parameter 'real_time_eth_profile' is set
      if @api_client.config.client_side_validation && real_time_eth_profile.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_real_time_eth_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/real-time-eth-profiles/{real-time-eth-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'real-time-eth-profile-id' + '}', real_time_eth_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(real_time_eth_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealTimeEthProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeEthProfilesApi#orgs_org_id_projects_project_id_infra_create_or_replace_real_time_eth_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Real Time Eth profile
    # API will delete Real Time Eth profile. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_real_time_eth_profile(org_id, project_id, real_time_eth_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_real_time_eth_profile_with_http_info(org_id, project_id, real_time_eth_profile_id, opts)
      nil
    end

    # Delete Real Time Eth profile
    # API will delete Real Time Eth profile. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_real_time_eth_profile_with_http_info(org_id, project_id, real_time_eth_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_delete_real_time_eth_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_delete_real_time_eth_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_delete_real_time_eth_profile"
      end
      # verify the required parameter 'real_time_eth_profile_id' is set
      if @api_client.config.client_side_validation && real_time_eth_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_delete_real_time_eth_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/real-time-eth-profiles/{real-time-eth-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'real-time-eth-profile-id' + '}', real_time_eth_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeEthProfilesApi#orgs_org_id_projects_project_id_infra_delete_real_time_eth_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Real Time Eth Profiles
    # API will list all Real Time Eth profiles. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealTimeEthProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_real_time_eth_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_real_time_eth_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List Real Time Eth Profiles
    # API will list all Real Time Eth profiles. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealTimeEthProfileListResult, Fixnum, Hash)>] RealTimeEthProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_real_time_eth_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_list_real_time_eth_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_list_real_time_eth_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_list_real_time_eth_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_list_real_time_eth_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_list_real_time_eth_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/real-time-eth-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealTimeEthProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeEthProfilesApi#orgs_org_id_projects_project_id_infra_list_real_time_eth_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Real Time Eth profile.
    # Create a new Real Time Eth profile if the Real Time Eth profile with given id does not already exist. If the Real Time Eth profile with the given id already exists, patch with the existing Real Time Eth profile. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param real_time_eth_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_real_time_eth_profile(org_id, project_id, real_time_eth_profile_id, real_time_eth_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_real_time_eth_profile_with_http_info(org_id, project_id, real_time_eth_profile_id, real_time_eth_profile, opts)
      nil
    end

    # Patch Real Time Eth profile.
    # Create a new Real Time Eth profile if the Real Time Eth profile with given id does not already exist. If the Real Time Eth profile with the given id already exists, patch with the existing Real Time Eth profile. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param real_time_eth_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_real_time_eth_profile_with_http_info(org_id, project_id, real_time_eth_profile_id, real_time_eth_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_patch_real_time_eth_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_patch_real_time_eth_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_patch_real_time_eth_profile"
      end
      # verify the required parameter 'real_time_eth_profile_id' is set
      if @api_client.config.client_side_validation && real_time_eth_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_patch_real_time_eth_profile"
      end
      # verify the required parameter 'real_time_eth_profile' is set
      if @api_client.config.client_side_validation && real_time_eth_profile.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_patch_real_time_eth_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/real-time-eth-profiles/{real-time-eth-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'real-time-eth-profile-id' + '}', real_time_eth_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(real_time_eth_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeEthProfilesApi#orgs_org_id_projects_project_id_infra_patch_real_time_eth_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Details of Real Time Eth profile 
    # API will return details of Real Time Eth profile. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param [Hash] opts the optional parameters
    # @return [RealTimeEthProfile]
    def orgs_org_id_projects_project_id_infra_read_real_time_eth_profile(org_id, project_id, real_time_eth_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_real_time_eth_profile_with_http_info(org_id, project_id, real_time_eth_profile_id, opts)
      data
    end

    # Details of Real Time Eth profile 
    # API will return details of Real Time Eth profile. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealTimeEthProfile, Fixnum, Hash)>] RealTimeEthProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_real_time_eth_profile_with_http_info(org_id, project_id, real_time_eth_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_read_real_time_eth_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_read_real_time_eth_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_read_real_time_eth_profile"
      end
      # verify the required parameter 'real_time_eth_profile_id' is set
      if @api_client.config.client_side_validation && real_time_eth_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile_id' when calling RealTimeEthProfilesApi.orgs_org_id_projects_project_id_infra_read_real_time_eth_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/real-time-eth-profiles/{real-time-eth-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'real-time-eth-profile-id' + '}', real_time_eth_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealTimeEthProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeEthProfilesApi#orgs_org_id_projects_project_id_infra_read_real_time_eth_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Real Time Eth profile.
    # Create a new Real Time Eth profile if the Real Time Eth profile with given id does not already exist. If the Real Time Eth profile with the given id already exists, patch with the existing Real Time Eth profile. 
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param real_time_eth_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_real_time_eth_profile(real_time_eth_profile_id, real_time_eth_profile, opts = {})
      patch_real_time_eth_profile_with_http_info(real_time_eth_profile_id, real_time_eth_profile, opts)
      nil
    end

    # Patch Real Time Eth profile.
    # Create a new Real Time Eth profile if the Real Time Eth profile with given id does not already exist. If the Real Time Eth profile with the given id already exists, patch with the existing Real Time Eth profile. 
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param real_time_eth_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_real_time_eth_profile_with_http_info(real_time_eth_profile_id, real_time_eth_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeEthProfilesApi.patch_real_time_eth_profile ...'
      end
      # verify the required parameter 'real_time_eth_profile_id' is set
      if @api_client.config.client_side_validation && real_time_eth_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile_id' when calling RealTimeEthProfilesApi.patch_real_time_eth_profile"
      end
      # verify the required parameter 'real_time_eth_profile' is set
      if @api_client.config.client_side_validation && real_time_eth_profile.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile' when calling RealTimeEthProfilesApi.patch_real_time_eth_profile"
      end
      # resource path
      local_var_path = '/infra/real-time-eth-profiles/{real-time-eth-profile-id}'.sub('{' + 'real-time-eth-profile-id' + '}', real_time_eth_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(real_time_eth_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeEthProfilesApi#patch_real_time_eth_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Details of Real Time Eth profile 
    # API will return details of Real Time Eth profile. 
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param [Hash] opts the optional parameters
    # @return [RealTimeEthProfile]
    def read_real_time_eth_profile(real_time_eth_profile_id, opts = {})
      data, _status_code, _headers = read_real_time_eth_profile_with_http_info(real_time_eth_profile_id, opts)
      data
    end

    # Details of Real Time Eth profile 
    # API will return details of Real Time Eth profile. 
    # @param real_time_eth_profile_id Real Time Eth profile Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealTimeEthProfile, Fixnum, Hash)>] RealTimeEthProfile data, response status code and response headers
    def read_real_time_eth_profile_with_http_info(real_time_eth_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeEthProfilesApi.read_real_time_eth_profile ...'
      end
      # verify the required parameter 'real_time_eth_profile_id' is set
      if @api_client.config.client_side_validation && real_time_eth_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'real_time_eth_profile_id' when calling RealTimeEthProfilesApi.read_real_time_eth_profile"
      end
      # resource path
      local_var_path = '/infra/real-time-eth-profiles/{real-time-eth-profile-id}'.sub('{' + 'real-time-eth-profile-id' + '}', real_time_eth_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealTimeEthProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeEthProfilesApi#read_real_time_eth_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
