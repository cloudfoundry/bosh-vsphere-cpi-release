=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class IPManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new IPBlock
    # Creates a new IpAddressBlock with specified ID if not already present. If IpAddressBlock of given ID is already present, then the instance is updated with specified attributes. 
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_ip_address_block(ip_block_id, ip_address_block, opts = {})
      create_or_patch_ip_address_block_with_http_info(ip_block_id, ip_address_block, opts)
      nil
    end

    # Create a new IPBlock
    # Creates a new IpAddressBlock with specified ID if not already present. If IpAddressBlock of given ID is already present, then the instance is updated with specified attributes. 
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_ip_address_block_with_http_info(ip_block_id, ip_address_block, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_patch_ip_address_block ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPManagementApi.create_or_patch_ip_address_block"
      end
      # verify the required parameter 'ip_address_block' is set
      if @api_client.config.client_side_validation && ip_address_block.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_block' when calling IPManagementApi.create_or_patch_ip_address_block"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/{ip-block-id}'.sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_block)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_patch_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new IP address pool
    # Creates a new IpAddressPool with specified ID if not already present. If IpAddressPool of given ID is already present, then the instance is updated. This is a full replace. 
    # @param ip_pool_id 
    # @param ip_address_pool 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_ip_address_pool(ip_pool_id, ip_address_pool, opts = {})
      create_or_patch_ip_address_pool_with_http_info(ip_pool_id, ip_address_pool, opts)
      nil
    end

    # Create a new IP address pool
    # Creates a new IpAddressPool with specified ID if not already present. If IpAddressPool of given ID is already present, then the instance is updated. This is a full replace. 
    # @param ip_pool_id 
    # @param ip_address_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_ip_address_pool_with_http_info(ip_pool_id, ip_address_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_patch_ip_address_pool ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.create_or_patch_ip_address_pool"
      end
      # verify the required parameter 'ip_address_pool' is set
      if @api_client.config.client_side_validation && ip_address_pool.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_pool' when calling IPManagementApi.create_or_patch_ip_address_pool"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_patch_ip_address_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to allocate an IP Address from an IP Pool
    # If allocation of the same ID is found, this is a no-op. If no allocation of the specified ID is found, then a new allocation is created. An allocation cannot be updated once created. When an allocation is requested from an IpAddressPool, the IP could be allocated from any subnet in the pool that has the available capacity. Request to allocate an IP will fail if no subnet was previously created. If specific IP was requested, the status of allocation is reflected in the realized state. If any IP is requested, the IP finally allocated is obtained by polling on the realized state until the allocated IP is returned in the extended attributes. 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_ip_address_pool_allocation(ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      create_or_patch_ip_address_pool_allocation_with_http_info(ip_pool_id, ip_allocation_id, ip_address_allocation, opts)
      nil
    end

    # Records intent to allocate an IP Address from an IP Pool
    # If allocation of the same ID is found, this is a no-op. If no allocation of the specified ID is found, then a new allocation is created. An allocation cannot be updated once created. When an allocation is requested from an IpAddressPool, the IP could be allocated from any subnet in the pool that has the available capacity. Request to allocate an IP will fail if no subnet was previously created. If specific IP was requested, the status of allocation is reflected in the realized state. If any IP is requested, the IP finally allocated is obtained by polling on the realized state until the allocated IP is returned in the extended attributes. 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_ip_address_pool_allocation_with_http_info(ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_patch_ip_address_pool_allocation ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.create_or_patch_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.create_or_patch_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_address_allocation' is set
      if @api_client.config.client_side_validation && ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation' when calling IPManagementApi.create_or_patch_ip_address_pool_allocation"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_patch_ip_address_pool_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new IP Subnet
    # Creates a new IpAddressPoolSubnet with the specified ID if it does not already exist. If a IpAddressPoolSubnet of the given ID already exists, IpAddressPoolSubnet will be updated. This is a full replace. 
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param ip_address_pool_subnet 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_ip_address_pool_subnet(ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts = {})
      create_or_patch_ip_address_pool_subnet_with_http_info(ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts)
      nil
    end

    # Create a new IP Subnet
    # Creates a new IpAddressPoolSubnet with the specified ID if it does not already exist. If a IpAddressPoolSubnet of the given ID already exists, IpAddressPoolSubnet will be updated. This is a full replace. 
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param ip_address_pool_subnet 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_ip_address_pool_subnet_with_http_info(ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_patch_ip_address_pool_subnet ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.create_or_patch_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_subnet_id' is set
      if @api_client.config.client_side_validation && ip_subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_subnet_id' when calling IPManagementApi.create_or_patch_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_address_pool_subnet' is set
      if @api_client.config.client_side_validation && ip_address_pool_subnet.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_pool_subnet' when calling IPManagementApi.create_or_patch_ip_address_pool_subnet"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}/ip-subnets/{ip-subnet-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-subnet-id' + '}', ip_subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_pool_subnet)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_patch_ip_address_pool_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, replace the DHCP relay config instance with this object. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def create_or_replace_dhcp_relay_config(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      data, _status_code, _headers = create_or_replace_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts)
      data
    end

    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, replace the DHCP relay config instance with this object. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def create_or_replace_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_replace_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling IPManagementApi.create_or_replace_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config' is set
      if @api_client.config.client_side_validation && dhcp_relay_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config' when calling IPManagementApi.create_or_replace_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_replace_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def create_or_replace_dhcp_server_config(dhcp_server_config_id, dhcp_server_config, opts = {})
      data, _status_code, _headers = create_or_replace_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts)
      data
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def create_or_replace_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_replace_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling IPManagementApi.create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling IPManagementApi.create_or_replace_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_replace_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def create_or_replace_infra_segment_dhcp_static_binding(segment_id, binding_id, dhcp_static_binding_config, opts = {})
      data, _status_code, _headers = create_or_replace_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, dhcp_static_binding_config, opts)
      data
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def create_or_replace_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_replace_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling IPManagementApi.create_or_replace_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_replace_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IpAddressBlock
    # Create a new IpAddressBlock with given ID if it does not exist. If IpAddressBlock with given ID already exists, it will update existing instance. This is a full replace. 
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlock]
    def create_or_replace_ip_address_block(ip_block_id, ip_address_block, opts = {})
      data, _status_code, _headers = create_or_replace_ip_address_block_with_http_info(ip_block_id, ip_address_block, opts)
      data
    end

    # Create or Replace IpAddressBlock
    # Create a new IpAddressBlock with given ID if it does not exist. If IpAddressBlock with given ID already exists, it will update existing instance. This is a full replace. 
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlock, Fixnum, Hash)>] IpAddressBlock data, response status code and response headers
    def create_or_replace_ip_address_block_with_http_info(ip_block_id, ip_address_block, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_replace_ip_address_block ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPManagementApi.create_or_replace_ip_address_block"
      end
      # verify the required parameter 'ip_address_block' is set
      if @api_client.config.client_side_validation && ip_address_block.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_block' when calling IPManagementApi.create_or_replace_ip_address_block"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/{ip-block-id}'.sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_block)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_replace_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IpAddressPool
    # Create a new IpAddressPool with given ID if it does not exist. If IpAddressPool with given ID already exists, it will update existing instance. This is a full replace. 
    # @param ip_pool_id 
    # @param ip_address_pool 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPool]
    def create_or_replace_ip_address_pool(ip_pool_id, ip_address_pool, opts = {})
      data, _status_code, _headers = create_or_replace_ip_address_pool_with_http_info(ip_pool_id, ip_address_pool, opts)
      data
    end

    # Create or Replace IpAddressPool
    # Create a new IpAddressPool with given ID if it does not exist. If IpAddressPool with given ID already exists, it will update existing instance. This is a full replace. 
    # @param ip_pool_id 
    # @param ip_address_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPool, Fixnum, Hash)>] IpAddressPool data, response status code and response headers
    def create_or_replace_ip_address_pool_with_http_info(ip_pool_id, ip_address_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_replace_ip_address_pool ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.create_or_replace_ip_address_pool"
      end
      # verify the required parameter 'ip_address_pool' is set
      if @api_client.config.client_side_validation && ip_address_pool.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_pool' when calling IPManagementApi.create_or_replace_ip_address_pool"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_replace_ip_address_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to allocate an IP Address from an IP Pool
    # If allocation of the same ID is found, this is a no-op. If no allocation of the specified ID is found, then a new allocation is created. An allocation cannot be updated once created. When an IP allocation is requested from an IpAddressPool, the IP could be allocated from any subnet in the pool that has the available capacity. Request to allocate an IP will fail if no subnet was previously created. If specific IP was requested, the status of allocation is reflected in the realized state. If any IP is requested, the IP finally allocated is obtained by polling on the realized state until the allocated IP is returned in the extended attributes. An allocation cannot be updated once created. 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressAllocation]
    def create_or_replace_ip_address_pool_allocation(ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      data, _status_code, _headers = create_or_replace_ip_address_pool_allocation_with_http_info(ip_pool_id, ip_allocation_id, ip_address_allocation, opts)
      data
    end

    # Records intent to allocate an IP Address from an IP Pool
    # If allocation of the same ID is found, this is a no-op. If no allocation of the specified ID is found, then a new allocation is created. An allocation cannot be updated once created. When an IP allocation is requested from an IpAddressPool, the IP could be allocated from any subnet in the pool that has the available capacity. Request to allocate an IP will fail if no subnet was previously created. If specific IP was requested, the status of allocation is reflected in the realized state. If any IP is requested, the IP finally allocated is obtained by polling on the realized state until the allocated IP is returned in the extended attributes. An allocation cannot be updated once created. 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressAllocation, Fixnum, Hash)>] IpAddressAllocation data, response status code and response headers
    def create_or_replace_ip_address_pool_allocation_with_http_info(ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_replace_ip_address_pool_allocation ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.create_or_replace_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.create_or_replace_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_address_allocation' is set
      if @api_client.config.client_side_validation && ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation' when calling IPManagementApi.create_or_replace_ip_address_pool_allocation"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_replace_ip_address_pool_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new IP Subnet
    # Creates a new IpAddressPoolSubnet with the specified ID if it does not already exist. If a IpAddressPoolSubnet of the given ID already exists, IpAddressPoolSubnet will be updated. This is a full replace. 
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param ip_address_pool_subnet 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPoolSubnet]
    def create_or_replace_ip_address_pool_subnet(ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts = {})
      data, _status_code, _headers = create_or_replace_ip_address_pool_subnet_with_http_info(ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts)
      data
    end

    # Create a new IP Subnet
    # Creates a new IpAddressPoolSubnet with the specified ID if it does not already exist. If a IpAddressPoolSubnet of the given ID already exists, IpAddressPoolSubnet will be updated. This is a full replace. 
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param ip_address_pool_subnet 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPoolSubnet, Fixnum, Hash)>] IpAddressPoolSubnet data, response status code and response headers
    def create_or_replace_ip_address_pool_subnet_with_http_info(ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_replace_ip_address_pool_subnet ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.create_or_replace_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_subnet_id' is set
      if @api_client.config.client_side_validation && ip_subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_subnet_id' when calling IPManagementApi.create_or_replace_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_address_pool_subnet' is set
      if @api_client.config.client_side_validation && ip_address_pool_subnet.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_pool_subnet' when calling IPManagementApi.create_or_replace_ip_address_pool_subnet"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}/ip-subnets/{ip-subnet-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-subnet-id' + '}', ip_subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_pool_subnet)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolSubnet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_replace_ip_address_pool_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def create_or_replace_segment_dhcp_static_binding(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      data, _status_code, _headers = create_or_replace_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      data
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def create_or_replace_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.create_or_replace_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling IPManagementApi.create_or_replace_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#create_or_replace_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def delete_dhcp_lease(segment_id, dhcp_delete_leases, opts = {})
      delete_dhcp_lease_with_http_info(segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_lease_with_http_info(segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_dhcp_lease ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.delete_dhcp_lease"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling IPManagementApi.delete_dhcp_lease"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_dhcp_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def delete_dhcp_lease_under_tier1(tier1_id, segment_id, dhcp_delete_leases, opts = {})
      delete_dhcp_lease_under_tier1_with_http_info(tier1_id, segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_lease_under_tier1_with_http_info(tier1_id, segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_dhcp_lease_under_tier1 ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling IPManagementApi.delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling IPManagementApi.delete_dhcp_lease_under_tier1"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_dhcp_lease_under_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP relay configuration
    # Delete DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_relay_config(dhcp_relay_config_id, opts = {})
      delete_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts)
      nil
    end

    # Delete DHCP relay configuration
    # Delete DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling IPManagementApi.delete_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_server_config(dhcp_server_config_id, opts = {})
      delete_dhcp_server_config_with_http_info(dhcp_server_config_id, opts)
      nil
    end

    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_server_config_with_http_info(dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling IPManagementApi.delete_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment_dhcp_static_binding(segment_id, binding_id, opts = {})
      delete_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts)
      nil
    end

    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.delete_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.delete_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an IpAddressBlock
    # Delete the IpAddressBlock with the given id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ip_address_block(ip_block_id, opts = {})
      delete_ip_address_block_with_http_info(ip_block_id, opts)
      nil
    end

    # Delete an IpAddressBlock
    # Delete the IpAddressBlock with the given id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_address_block_with_http_info(ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_ip_address_block ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPManagementApi.delete_ip_address_block"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/{ip-block-id}'.sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an IpAddressPool
    # Delete the IpAddressPool with the given id. 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ip_address_pool(ip_pool_id, opts = {})
      delete_ip_address_pool_with_http_info(ip_pool_id, opts)
      nil
    end

    # Delete an IpAddressPool
    # Delete the IpAddressPool with the given id. 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_address_pool_with_http_info(ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_ip_address_pool ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.delete_ip_address_pool"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_ip_address_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ip_address_pool_allocation(ip_pool_id, ip_allocation_id, opts = {})
      delete_ip_address_pool_allocation_with_http_info(ip_pool_id, ip_allocation_id, opts)
      nil
    end

    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_address_pool_allocation_with_http_info(ip_pool_id, ip_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_ip_address_pool_allocation ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.delete_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.delete_ip_address_pool_allocation"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_ip_address_pool_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an IpAddressPoolSubnet
    # Delete the IpAddressPoolSubnet with the given id. 
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ip_allocations Flag to specify whether to ignore ip allocations.  (default to false)
    # @return [nil]
    def delete_ip_address_pool_subnet(ip_pool_id, ip_subnet_id, opts = {})
      delete_ip_address_pool_subnet_with_http_info(ip_pool_id, ip_subnet_id, opts)
      nil
    end

    # Delete an IpAddressPoolSubnet
    # Delete the IpAddressPoolSubnet with the given id. 
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ip_allocations Flag to specify whether to ignore ip allocations. 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_address_pool_subnet_with_http_info(ip_pool_id, ip_subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_ip_address_pool_subnet ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.delete_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_subnet_id' is set
      if @api_client.config.client_side_validation && ip_subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_subnet_id' when calling IPManagementApi.delete_ip_address_pool_subnet"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}/ip-subnets/{ip-subnet-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-subnet-id' + '}', ip_subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ignore_ip_allocations'] = opts[:'ignore_ip_allocations'] if !opts[:'ignore_ip_allocations'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_ip_address_pool_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS configuration for tier-0 instance
    # Delete DNS configuration for tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_dns_forwarder_on_tier0(tier_0_id, opts = {})
      delete_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts)
      nil
    end

    # Delete DNS configuration for tier-0 instance
    # Delete DNS configuration for tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_policy_dns_forwarder_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.delete_policy_dns_forwarder_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_policy_dns_forwarder_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS configuration for tier-1 instance
    # Delete DNS configuration for tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_dns_forwarder_on_tier1(tier_1_id, opts = {})
      delete_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts)
      nil
    end

    # Delete DNS configuration for tier-1 instance
    # Delete DNS configuration for tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.delete_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the DNS Forwarder Zone
    # Delete the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_dns_forwarder_zone(dns_forwarder_zone_id, opts = {})
      delete_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts)
      nil
    end

    # Delete the DNS Forwarder Zone
    # Delete the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling IPManagementApi.delete_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_segment_dhcp_static_binding(tier_1_id, segment_id, binding_id, opts = {})
      delete_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts)
      nil
    end

    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.delete_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      delete_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts)
      nil
    end

    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.delete_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling IPManagementApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling IPManagementApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.delete_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#delete_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get state of the given IpAddressBlock
    # Get state of a given IPAddressBlock. It lists all the allocated IPs and subnets created using that block per Project and VPCs. 
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlockState]
    def get_ip_address_block_state(intent_path, opts = {})
      data, _status_code, _headers = get_ip_address_block_state_with_http_info(intent_path, opts)
      data
    end

    # Get state of the given IpAddressBlock
    # Get state of a given IPAddressBlock. It lists all the allocated IPs and subnets created using that block per Project and VPCs. 
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlockState, Fixnum, Hash)>] IpAddressBlockState data, response status code and response headers
    def get_ip_address_block_state_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.get_ip_address_block_state ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling IPManagementApi.get_ip_address_block_state"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/state'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#get_ip_address_block_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an IpAddressBlock usage
    # Get IpAddressBlock usage with given Id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlockUsage]
    def get_ip_address_block_usage(ip_block_id, opts = {})
      data, _status_code, _headers = get_ip_address_block_usage_with_http_info(ip_block_id, opts)
      data
    end

    # Get an IpAddressBlock usage
    # Get IpAddressBlock usage with given Id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlockUsage, Fixnum, Hash)>] IpAddressBlockUsage data, response status code and response headers
    def get_ip_address_block_usage_with_http_info(ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.get_ip_address_block_usage ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPManagementApi.get_ip_address_block_usage"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/{ip-block-id}/usage'.sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#get_ip_address_block_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-0 DNS forwarder statistics
    # Get statistics of tier-0 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatistics]
    def get_tier0_dns_forwarder_statistics(tier_0_id, opts = {})
      data, _status_code, _headers = get_tier0_dns_forwarder_statistics_with_http_info(tier_0_id, opts)
      data
    end

    # Get tier-0 DNS forwarder statistics
    # Get statistics of tier-0 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatistics, Fixnum, Hash)>] AggregateDNSForwarderStatistics data, response status code and response headers
    def get_tier0_dns_forwarder_statistics_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.get_tier0_dns_forwarder_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.get_tier0_dns_forwarder_statistics"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#get_tier0_dns_forwarder_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of tier-0 DNS forwarder
    # Get current status of tier-0 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatus]
    def get_tier0_dns_forwarder_status(tier_0_id, opts = {})
      data, _status_code, _headers = get_tier0_dns_forwarder_status_with_http_info(tier_0_id, opts)
      data
    end

    # Get current status of tier-0 DNS forwarder
    # Get current status of tier-0 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatus, Fixnum, Hash)>] AggregateDNSForwarderStatus data, response status code and response headers
    def get_tier0_dns_forwarder_status_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.get_tier0_dns_forwarder_status ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.get_tier0_dns_forwarder_status"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder/status'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#get_tier0_dns_forwarder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatistics]
    def get_tier1_dns_forwarder_statistics(tier_1_id, opts = {})
      data, _status_code, _headers = get_tier1_dns_forwarder_statistics_with_http_info(tier_1_id, opts)
      data
    end

    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatistics, Fixnum, Hash)>] AggregateDNSForwarderStatistics data, response status code and response headers
    def get_tier1_dns_forwarder_statistics_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.get_tier1_dns_forwarder_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.get_tier1_dns_forwarder_statistics"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#get_tier1_dns_forwarder_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatus]
    def get_tier1_dns_forwarder_status(tier_1_id, opts = {})
      data, _status_code, _headers = get_tier1_dns_forwarder_status_with_http_info(tier_1_id, opts)
      data
    end

    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatus, Fixnum, Hash)>] AggregateDNSForwarderStatus data, response status code and response headers
    def get_tier1_dns_forwarder_status_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.get_tier1_dns_forwarder_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.get_tier1_dns_forwarder_status"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder/status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#get_tier1_dns_forwarder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet ip allocation by ID
    # Get detail information on VPC Subnet ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressAllocation]
    def get_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts)
      data
    end

    # Get VPC Subnet ip allocation by ID
    # Get detail information on VPC Subnet ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressAllocation, Fixnum, Hash)>] IpAddressAllocation data, response status code and response headers
    def get_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.get_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling IPManagementApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling IPManagementApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.get_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#get_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-0 DNS forwarder statistics
    # Get statistics of tier-0 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatistics]
    def global_infra_get_tier0_dns_forwarder_statistics(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_dns_forwarder_statistics_with_http_info(tier_0_id, opts)
      data
    end

    # Get tier-0 DNS forwarder statistics
    # Get statistics of tier-0 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatistics, Fixnum, Hash)>] AggregateDNSForwarderStatistics data, response status code and response headers
    def global_infra_get_tier0_dns_forwarder_statistics_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_get_tier0_dns_forwarder_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.global_infra_get_tier0_dns_forwarder_statistics"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_get_tier0_dns_forwarder_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of tier-0 DNS forwarder
    # Get current status of tier-0 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatus]
    def global_infra_get_tier0_dns_forwarder_status(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_dns_forwarder_status_with_http_info(tier_0_id, opts)
      data
    end

    # Get current status of tier-0 DNS forwarder
    # Get current status of tier-0 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatus, Fixnum, Hash)>] AggregateDNSForwarderStatus data, response status code and response headers
    def global_infra_get_tier0_dns_forwarder_status_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_get_tier0_dns_forwarder_status ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.global_infra_get_tier0_dns_forwarder_status"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder/status'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_get_tier0_dns_forwarder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatistics]
    def global_infra_get_tier1_dns_forwarder_statistics(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_dns_forwarder_statistics_with_http_info(tier_1_id, opts)
      data
    end

    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatistics, Fixnum, Hash)>] AggregateDNSForwarderStatistics data, response status code and response headers
    def global_infra_get_tier1_dns_forwarder_statistics_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_get_tier1_dns_forwarder_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.global_infra_get_tier1_dns_forwarder_statistics"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_get_tier1_dns_forwarder_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatus]
    def global_infra_get_tier1_dns_forwarder_status(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_dns_forwarder_status_with_http_info(tier_1_id, opts)
      data
    end

    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatus, Fixnum, Hash)>] AggregateDNSForwarderStatus data, response status code and response headers
    def global_infra_get_tier1_dns_forwarder_status_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_get_tier1_dns_forwarder_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.global_infra_get_tier1_dns_forwarder_status"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder/status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_get_tier1_dns_forwarder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpRelayConfigListResult]
    def global_infra_list_dhcp_relay_config(opts = {})
      data, _status_code, _headers = global_infra_list_dhcp_relay_config_with_http_info(opts)
      data
    end

    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpRelayConfigListResult, Fixnum, Hash)>] DhcpRelayConfigListResult data, response status code and response headers
    def global_infra_list_dhcp_relay_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_list_dhcp_relay_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_list_dhcp_relay_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_list_dhcp_relay_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-relay-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_list_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerConfigListResult]
    def global_infra_list_dhcp_server_config(opts = {})
      data, _status_code, _headers = global_infra_list_dhcp_server_config_with_http_info(opts)
      data
    end

    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerConfigListResult, Fixnum, Hash)>] DhcpServerConfigListResult data, response status code and response headers
    def global_infra_list_dhcp_server_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_list_dhcp_server_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_list_dhcp_server_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_list_dhcp_server_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_list_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def global_infra_list_infra_segment_dhcp_static_binding(segment_id, opts = {})
      data, _status_code, _headers = global_infra_list_infra_segment_dhcp_static_binding_with_http_info(segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def global_infra_list_infra_segment_dhcp_static_binding_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_list_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.global_infra_list_infra_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_list_infra_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_list_infra_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_list_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDnsForwarderZoneListResult]
    def global_infra_list_policy_dns_forwarder_zone(opts = {})
      data, _status_code, _headers = global_infra_list_policy_dns_forwarder_zone_with_http_info(opts)
      data
    end

    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDnsForwarderZoneListResult, Fixnum, Hash)>] PolicyDnsForwarderZoneListResult data, response status code and response headers
    def global_infra_list_policy_dns_forwarder_zone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_list_policy_dns_forwarder_zone ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_list_policy_dns_forwarder_zone, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_list_policy_dns_forwarder_zone, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dns-forwarder-zones'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZoneListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_list_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def global_infra_list_segment_dhcp_static_binding(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = global_infra_list_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def global_infra_list_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_list_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.global_infra_list_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.global_infra_list_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_list_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_list_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_list_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve a given address via the dns forwarder at Tier0
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregatePolicyDnsAnswer]
    def global_infra_lookup_address_via_tier0_dns_forwarder(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_lookup_address_via_tier0_dns_forwarder_with_http_info(tier_0_id, opts)
      data
    end

    # Resolve a given address via the dns forwarder at Tier0
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregatePolicyDnsAnswer, Fixnum, Hash)>] AggregatePolicyDnsAnswer data, response status code and response headers
    def global_infra_lookup_address_via_tier0_dns_forwarder_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_lookup_address_via_tier0_dns_forwarder ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.global_infra_lookup_address_via_tier0_dns_forwarder"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder/nslookup'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatePolicyDnsAnswer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_lookup_address_via_tier0_dns_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregatePolicyDnsAnswer]
    def global_infra_lookup_address_via_tier1_dns_forwarder(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_lookup_address_via_tier1_dns_forwarder_with_http_info(tier_1_id, opts)
      data
    end

    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregatePolicyDnsAnswer, Fixnum, Hash)>] AggregatePolicyDnsAnswer data, response status code and response headers
    def global_infra_lookup_address_via_tier1_dns_forwarder_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_lookup_address_via_tier1_dns_forwarder ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.global_infra_lookup_address_via_tier1_dns_forwarder"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder/nslookup'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatePolicyDnsAnswer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_lookup_address_via_tier1_dns_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_0_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [nil]
    def global_infra_perform_ep_action_for_dns_forwarder_at_tier0(tier_0_id, action, opts = {})
      global_infra_perform_ep_action_for_dns_forwarder_at_tier0_with_http_info(tier_0_id, action, opts)
      nil
    end

    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_0_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_perform_ep_action_for_dns_forwarder_at_tier0_with_http_info(tier_0_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier0"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling IPManagementApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier0"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['clear_cache'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of clear_cache"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_perform_ep_action_for_dns_forwarder_at_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [nil]
    def global_infra_perform_ep_action_for_dns_forwarder_at_tier1(tier_1_id, action, opts = {})
      global_infra_perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(tier_1_id, action, opts)
      nil
    end

    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(tier_1_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling IPManagementApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['clear_cache'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of clear_cache"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_perform_ep_action_for_dns_forwarder_at_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def global_infra_read_dhcp_relay_config(dhcp_relay_config_id, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts)
      data
    end

    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def global_infra_read_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling IPManagementApi.global_infra_read_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/global-infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def global_infra_read_dhcp_server_config(dhcp_server_config_id, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts)
      data
    end

    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def global_infra_read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling IPManagementApi.global_infra_read_dhcp_server_config"
      end
      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [DhcpLeasesResult]
    def global_infra_read_dhcp_server_leases(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def global_infra_read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_dhcp_server_leases ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.global_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.global_infra_read_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_read_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_read_dhcp_server_leases, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/leases'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerState]
    def global_infra_read_dhcp_server_state(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerState, Fixnum, Hash)>] DhcpServerState data, response status code and response headers
    def global_infra_read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_dhcp_server_state ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.global_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.global_infra_read_dhcp_server_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_read_dhcp_server_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_read_dhcp_server_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/state'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_dhcp_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def global_infra_read_dhcp_server_stats(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def global_infra_read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.global_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.global_infra_read_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_read_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_read_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/stats'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def global_infra_read_dhcp_server_status(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def global_infra_read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_dhcp_server_status ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.global_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.global_infra_read_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_read_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_read_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/status'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def global_infra_read_failed_dns_queries_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_read_failed_dns_queries_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def global_infra_read_failed_dns_queries_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_failed_dns_queries_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.global_infra_read_failed_dns_queries_on_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.global_infra_read_failed_dns_queries_on_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.global_infra_read_failed_dns_queries_on_tier0, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder/failed-queries'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_failed_dns_queries_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def global_infra_read_failed_dns_queries_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_read_failed_dns_queries_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def global_infra_read_failed_dns_queries_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_failed_dns_queries_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.global_infra_read_failed_dns_queries_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.global_infra_read_failed_dns_queries_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.global_infra_read_failed_dns_queries_on_tier1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder/failed-queries'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_failed_dns_queries_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def global_infra_read_infra_segment_dhcp_static_binding(segment_id, binding_id, opts = {})
      data, _status_code, _headers = global_infra_read_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def global_infra_read_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.global_infra_read_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.global_infra_read_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def global_infra_read_infra_segment_dhcp_static_binding_state(segment_id, binding_id, opts = {})
      data, _status_code, _headers = global_infra_read_infra_segment_dhcp_static_binding_state_with_http_info(segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def global_infra_read_infra_segment_dhcp_static_binding_state_with_http_info(segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_infra_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.global_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.global_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_infra_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def global_infra_read_policy_dns_forwarder_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_read_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def global_infra_read_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_policy_dns_forwarder_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.global_infra_read_policy_dns_forwarder_on_tier0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_policy_dns_forwarder_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def global_infra_read_policy_dns_forwarder_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_read_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def global_infra_read_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.global_infra_read_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarderZone]
    def global_infra_read_policy_dns_forwarder_zone(dns_forwarder_zone_id, opts = {})
      data, _status_code, _headers = global_infra_read_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts)
      data
    end

    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarderZone, Fixnum, Hash)>] PolicyDnsForwarderZone data, response status code and response headers
    def global_infra_read_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling IPManagementApi.global_infra_read_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/global-infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def global_infra_read_segment_dhcp_static_binding(tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = global_infra_read_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def global_infra_read_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.global_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.global_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.global_infra_read_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def global_infra_read_segment_dhcp_static_binding_state(tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = global_infra_read_segment_dhcp_static_binding_state_with_http_info(tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def global_infra_read_segment_dhcp_static_binding_state_with_http_info(tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_read_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.global_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.global_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.global_infra_read_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_read_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def global_infra_reset_dhcp_server_stats(config_id, connectivity_path, opts = {})
      global_infra_reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      nil
    end

    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.global_infra_reset_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.global_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.global_infra_reset_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_reset_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.global_infra_reset_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/stats?action=reset'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#global_infra_reset_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpRelayConfigListResult]
    def list_dhcp_relay_config(opts = {})
      data, _status_code, _headers = list_dhcp_relay_config_with_http_info(opts)
      data
    end

    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpRelayConfigListResult, Fixnum, Hash)>] DhcpRelayConfigListResult data, response status code and response headers
    def list_dhcp_relay_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_dhcp_relay_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_dhcp_relay_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_dhcp_relay_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-relay-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerConfigListResult]
    def list_dhcp_server_config(opts = {})
      data, _status_code, _headers = list_dhcp_server_config_with_http_info(opts)
      data
    end

    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerConfigListResult, Fixnum, Hash)>] DhcpServerConfigListResult data, response status code and response headers
    def list_dhcp_server_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_dhcp_server_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_dhcp_server_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_dhcp_server_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def list_infra_segment_dhcp_static_binding(segment_id, opts = {})
      data, _status_code, _headers = list_infra_segment_dhcp_static_binding_with_http_info(segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def list_infra_segment_dhcp_static_binding_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.list_infra_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_infra_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_infra_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IpAddressBlocks
    # Paginated list of IpAddressBlocks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressBlockListResult]
    def list_ip_address_blocks(opts = {})
      data, _status_code, _headers = list_ip_address_blocks_with_http_info(opts)
      data
    end

    # List IpAddressBlocks
    # Paginated list of IpAddressBlocks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressBlockListResult, Fixnum, Hash)>] IpAddressBlockListResult data, response status code and response headers
    def list_ip_address_blocks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_ip_address_blocks ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_ip_address_blocks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_ip_address_blocks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ip-blocks'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_ip_address_blocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IpAddressPool Allocations
    # Returns information about which addresses have been allocated from a specified IP address pool in policy. 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressAllocationListResult]
    def list_ip_address_pool_allocations(ip_pool_id, opts = {})
      data, _status_code, _headers = list_ip_address_pool_allocations_with_http_info(ip_pool_id, opts)
      data
    end

    # List IpAddressPool Allocations
    # Returns information about which addresses have been allocated from a specified IP address pool in policy. 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressAllocationListResult, Fixnum, Hash)>] IpAddressAllocationListResult data, response status code and response headers
    def list_ip_address_pool_allocations_with_http_info(ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_ip_address_pool_allocations ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.list_ip_address_pool_allocations"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_ip_address_pool_allocations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_ip_address_pool_allocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}/ip-allocations'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_ip_address_pool_allocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IpAddressPoolSubnets
    # Paginated list of IpAddressPoolSubnets. 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressPoolSubnetListResult]
    def list_ip_address_pool_subnets(ip_pool_id, opts = {})
      data, _status_code, _headers = list_ip_address_pool_subnets_with_http_info(ip_pool_id, opts)
      data
    end

    # List IpAddressPoolSubnets
    # Paginated list of IpAddressPoolSubnets. 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressPoolSubnetListResult, Fixnum, Hash)>] IpAddressPoolSubnetListResult data, response status code and response headers
    def list_ip_address_pool_subnets_with_http_info(ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_ip_address_pool_subnets ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.list_ip_address_pool_subnets"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_ip_address_pool_subnets, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_ip_address_pool_subnets, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}/ip-subnets'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolSubnetListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_ip_address_pool_subnets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IpAddressPools
    # Paginated list of IpAddressPools. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressPoolListResult]
    def list_ip_address_pools(opts = {})
      data, _status_code, _headers = list_ip_address_pools_with_http_info(opts)
      data
    end

    # List IpAddressPools
    # Paginated list of IpAddressPools. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressPoolListResult, Fixnum, Hash)>] IpAddressPoolListResult data, response status code and response headers
    def list_ip_address_pools_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_ip_address_pools ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_ip_address_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_ip_address_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ip-pools'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_ip_address_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Manager Ip Pools
    # Paginated list of Manager Ip Pools. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressPoolListResult]
    def list_manager_ip_pools(opts = {})
      data, _status_code, _headers = list_manager_ip_pools_with_http_info(opts)
      data
    end

    # List Manager Ip Pools
    # Paginated list of Manager Ip Pools. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressPoolListResult, Fixnum, Hash)>] IpAddressPoolListResult data, response status code and response headers
    def list_manager_ip_pools_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_manager_ip_pools ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_manager_ip_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_manager_ip_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/manager-ip-pools'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_manager_ip_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDnsForwarderZoneListResult]
    def list_policy_dns_forwarder_zone(opts = {})
      data, _status_code, _headers = list_policy_dns_forwarder_zone_with_http_info(opts)
      data
    end

    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDnsForwarderZoneListResult, Fixnum, Hash)>] PolicyDnsForwarderZoneListResult data, response status code and response headers
    def list_policy_dns_forwarder_zone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_policy_dns_forwarder_zone ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_policy_dns_forwarder_zone, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_policy_dns_forwarder_zone, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dns-forwarder-zones'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZoneListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def list_segment_dhcp_static_binding(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = list_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def list_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.list_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.list_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of static ip pools of the Subnet.
    # Paginated list of static ip pools of the Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressPoolListResult]
    def list_vpc_subnet_ip_address_pools(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_ip_address_pools_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List of static ip pools of the Subnet.
    # Paginated list of static ip pools of the Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressPoolListResult, Fixnum, Hash)>] IpAddressPoolListResult data, response status code and response headers
    def list_vpc_subnet_ip_address_pools_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_vpc_subnet_ip_address_pools ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.list_vpc_subnet_ip_address_pools"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.list_vpc_subnet_ip_address_pools"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling IPManagementApi.list_vpc_subnet_ip_address_pools"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling IPManagementApi.list_vpc_subnet_ip_address_pools"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_vpc_subnet_ip_address_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_vpc_subnet_ip_address_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_vpc_subnet_ip_address_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC Subnet ip allocations
    # List all the ip allocations for a VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressAllocationListResult]
    def list_vpc_subnet_ip_allocations(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_ip_allocations_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts)
      data
    end

    # List VPC Subnet ip allocations
    # List all the ip allocations for a VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressAllocationListResult, Fixnum, Hash)>] IpAddressAllocationListResult data, response status code and response headers
    def list_vpc_subnet_ip_allocations_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.list_vpc_subnet_ip_allocations ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling IPManagementApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling IPManagementApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.list_vpc_subnet_ip_allocations"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_vpc_subnet_ip_allocations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.list_vpc_subnet_ip_allocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#list_vpc_subnet_ip_allocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve a given address via the dns forwarder at Tier0
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregatePolicyDnsAnswer]
    def lookup_address_via_tier0_dns_forwarder(tier_0_id, opts = {})
      data, _status_code, _headers = lookup_address_via_tier0_dns_forwarder_with_http_info(tier_0_id, opts)
      data
    end

    # Resolve a given address via the dns forwarder at Tier0
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregatePolicyDnsAnswer, Fixnum, Hash)>] AggregatePolicyDnsAnswer data, response status code and response headers
    def lookup_address_via_tier0_dns_forwarder_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.lookup_address_via_tier0_dns_forwarder ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.lookup_address_via_tier0_dns_forwarder"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder/nslookup'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatePolicyDnsAnswer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#lookup_address_via_tier0_dns_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregatePolicyDnsAnswer]
    def lookup_address_via_tier1_dns_forwarder(tier_1_id, opts = {})
      data, _status_code, _headers = lookup_address_via_tier1_dns_forwarder_with_http_info(tier_1_id, opts)
      data
    end

    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregatePolicyDnsAnswer, Fixnum, Hash)>] AggregatePolicyDnsAnswer data, response status code and response headers
    def lookup_address_via_tier1_dns_forwarder_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.lookup_address_via_tier1_dns_forwarder ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.lookup_address_via_tier1_dns_forwarder"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder/nslookup'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatePolicyDnsAnswer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#lookup_address_via_tier1_dns_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new IPBlock
    # Creates a new IpAddressBlock with specified ID if not already present. If IpAddressBlock of given ID is already present, then the instance is updated with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block(org_id, project_id, ip_block_id, ip_address_block, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block_with_http_info(org_id, project_id, ip_block_id, ip_address_block, opts)
      nil
    end

    # Create a new IPBlock
    # Creates a new IpAddressBlock with specified ID if not already present. If IpAddressBlock of given ID is already present, then the instance is updated with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block_with_http_info(org_id, project_id, ip_block_id, ip_address_block, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block"
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block"
      end
      # verify the required parameter 'ip_address_block' is set
      if @api_client.config.client_side_validation && ip_address_block.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_block' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/{ip-block-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_block)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new IP address pool
    # Creates a new IpAddressPool with specified ID if not already present. If IpAddressPool of given ID is already present, then the instance is updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_address_pool 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool(org_id, project_id, ip_pool_id, ip_address_pool, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_with_http_info(org_id, project_id, ip_pool_id, ip_address_pool, opts)
      nil
    end

    # Create a new IP address pool
    # Creates a new IpAddressPool with specified ID if not already present. If IpAddressPool of given ID is already present, then the instance is updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_address_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_with_http_info(org_id, project_id, ip_pool_id, ip_address_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool"
      end
      # verify the required parameter 'ip_address_pool' is set
      if @api_client.config.client_side_validation && ip_address_pool.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_pool' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to allocate an IP Address from an IP Pool
    # If allocation of the same ID is found, this is a no-op. If no allocation of the specified ID is found, then a new allocation is created. An allocation cannot be updated once created. When an allocation is requested from an IpAddressPool, the IP could be allocated from any subnet in the pool that has the available capacity. Request to allocate an IP will fail if no subnet was previously created. If specific IP was requested, the status of allocation is reflected in the realized state. If any IP is requested, the IP finally allocated is obtained by polling on the realized state until the allocated IP is returned in the extended attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_allocation(org_id, project_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_allocation_with_http_info(org_id, project_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts)
      nil
    end

    # Records intent to allocate an IP Address from an IP Pool
    # If allocation of the same ID is found, this is a no-op. If no allocation of the specified ID is found, then a new allocation is created. An allocation cannot be updated once created. When an allocation is requested from an IpAddressPool, the IP could be allocated from any subnet in the pool that has the available capacity. Request to allocate an IP will fail if no subnet was previously created. If specific IP was requested, the status of allocation is reflected in the realized state. If any IP is requested, the IP finally allocated is obtained by polling on the realized state until the allocated IP is returned in the extended attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_allocation_with_http_info(org_id, project_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_address_allocation' is set
      if @api_client.config.client_side_validation && ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new IP Subnet
    # Creates a new IpAddressPoolSubnet with the specified ID if it does not already exist. If a IpAddressPoolSubnet of the given ID already exists, IpAddressPoolSubnet will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param ip_address_pool_subnet 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_subnet(org_id, project_id, ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_subnet_with_http_info(org_id, project_id, ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts)
      nil
    end

    # Create a new IP Subnet
    # Creates a new IpAddressPoolSubnet with the specified ID if it does not already exist. If a IpAddressPoolSubnet of the given ID already exists, IpAddressPoolSubnet will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param ip_address_pool_subnet 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_subnet_with_http_info(org_id, project_id, ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_subnet_id' is set
      if @api_client.config.client_side_validation && ip_subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_subnet_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_address_pool_subnet' is set
      if @api_client.config.client_side_validation && ip_address_pool_subnet.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_pool_subnet' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}/ip-subnets/{ip-subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-subnet-id' + '}', ip_subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_pool_subnet)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_pool_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, replace the DHCP relay config instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts)
      data
    end

    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, replace the DHCP relay config instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config' is set
      if @api_client.config.client_side_validation && dhcp_relay_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts)
      data
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      data
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IpAddressBlock
    # Create a new IpAddressBlock with given ID if it does not exist. If IpAddressBlock with given ID already exists, it will update existing instance. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlock]
    def orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block(org_id, project_id, ip_block_id, ip_address_block, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block_with_http_info(org_id, project_id, ip_block_id, ip_address_block, opts)
      data
    end

    # Create or Replace IpAddressBlock
    # Create a new IpAddressBlock with given ID if it does not exist. If IpAddressBlock with given ID already exists, it will update existing instance. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlock, Fixnum, Hash)>] IpAddressBlock data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block_with_http_info(org_id, project_id, ip_block_id, ip_address_block, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block"
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block"
      end
      # verify the required parameter 'ip_address_block' is set
      if @api_client.config.client_side_validation && ip_address_block.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_block' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/{ip-block-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_block)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IpAddressPool
    # Create a new IpAddressPool with given ID if it does not exist. If IpAddressPool with given ID already exists, it will update existing instance. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_address_pool 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPool]
    def orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool(org_id, project_id, ip_pool_id, ip_address_pool, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_with_http_info(org_id, project_id, ip_pool_id, ip_address_pool, opts)
      data
    end

    # Create or Replace IpAddressPool
    # Create a new IpAddressPool with given ID if it does not exist. If IpAddressPool with given ID already exists, it will update existing instance. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_address_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPool, Fixnum, Hash)>] IpAddressPool data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_with_http_info(org_id, project_id, ip_pool_id, ip_address_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool"
      end
      # verify the required parameter 'ip_address_pool' is set
      if @api_client.config.client_side_validation && ip_address_pool.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_pool' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to allocate an IP Address from an IP Pool
    # If allocation of the same ID is found, this is a no-op. If no allocation of the specified ID is found, then a new allocation is created. An allocation cannot be updated once created. When an IP allocation is requested from an IpAddressPool, the IP could be allocated from any subnet in the pool that has the available capacity. Request to allocate an IP will fail if no subnet was previously created. If specific IP was requested, the status of allocation is reflected in the realized state. If any IP is requested, the IP finally allocated is obtained by polling on the realized state until the allocated IP is returned in the extended attributes. An allocation cannot be updated once created. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressAllocation]
    def orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_allocation(org_id, project_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_allocation_with_http_info(org_id, project_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts)
      data
    end

    # Records intent to allocate an IP Address from an IP Pool
    # If allocation of the same ID is found, this is a no-op. If no allocation of the specified ID is found, then a new allocation is created. An allocation cannot be updated once created. When an IP allocation is requested from an IpAddressPool, the IP could be allocated from any subnet in the pool that has the available capacity. Request to allocate an IP will fail if no subnet was previously created. If specific IP was requested, the status of allocation is reflected in the realized state. If any IP is requested, the IP finally allocated is obtained by polling on the realized state until the allocated IP is returned in the extended attributes. An allocation cannot be updated once created. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressAllocation, Fixnum, Hash)>] IpAddressAllocation data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_allocation_with_http_info(org_id, project_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_address_allocation' is set
      if @api_client.config.client_side_validation && ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new IP Subnet
    # Creates a new IpAddressPoolSubnet with the specified ID if it does not already exist. If a IpAddressPoolSubnet of the given ID already exists, IpAddressPoolSubnet will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param ip_address_pool_subnet 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPoolSubnet]
    def orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_subnet(org_id, project_id, ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_subnet_with_http_info(org_id, project_id, ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts)
      data
    end

    # Create a new IP Subnet
    # Creates a new IpAddressPoolSubnet with the specified ID if it does not already exist. If a IpAddressPoolSubnet of the given ID already exists, IpAddressPoolSubnet will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param ip_address_pool_subnet 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPoolSubnet, Fixnum, Hash)>] IpAddressPoolSubnet data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_subnet_with_http_info(org_id, project_id, ip_pool_id, ip_subnet_id, ip_address_pool_subnet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_subnet_id' is set
      if @api_client.config.client_side_validation && ip_subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_subnet_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_address_pool_subnet' is set
      if @api_client.config.client_side_validation && ip_address_pool_subnet.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_pool_subnet' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}/ip-subnets/{ip-subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-subnet-id' + '}', ip_subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_pool_subnet)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolSubnet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_pool_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      data
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_create_or_replace_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease(org_id, project_id, segment_id, dhcp_delete_leases, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dhcp_lease_with_http_info(org_id, project_id, segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease_with_http_info(org_id, project_id, segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_dhcp_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1(org_id, project_id, tier1_id, segment_id, dhcp_delete_leases, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1_with_http_info(org_id, project_id, tier1_id, segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1_with_http_info(org_id, project_id, tier1_id, segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP relay configuration
    # Delete DHCP relay configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config(org_id, project_id, dhcp_relay_config_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, opts)
      nil
    end

    # Delete DHCP relay configuration
    # Delete DHCP relay configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dhcp_server_config(org_id, project_id, dhcp_server_config_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts)
      nil
    end

    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding(org_id, project_id, segment_id, binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, opts)
      nil
    end

    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an IpAddressBlock
    # Delete the IpAddressBlock with the given id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ip_address_block(org_id, project_id, ip_block_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ip_address_block_with_http_info(org_id, project_id, ip_block_id, opts)
      nil
    end

    # Delete an IpAddressBlock
    # Delete the IpAddressBlock with the given id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ip_address_block_with_http_info(org_id, project_id, ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_block ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_block"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_block"
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_block"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/{ip-block-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an IpAddressPool
    # Delete the IpAddressPool with the given id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ip_address_pool(org_id, project_id, ip_pool_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ip_address_pool_with_http_info(org_id, project_id, ip_pool_id, opts)
      nil
    end

    # Delete an IpAddressPool
    # Delete the IpAddressPool with the given id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ip_address_pool_with_http_info(org_id, project_id, ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_ip_address_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ip_address_pool_allocation(org_id, project_id, ip_pool_id, ip_allocation_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ip_address_pool_allocation_with_http_info(org_id, project_id, ip_pool_id, ip_allocation_id, opts)
      nil
    end

    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ip_address_pool_allocation_with_http_info(org_id, project_id, ip_pool_id, ip_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_ip_address_pool_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an IpAddressPoolSubnet
    # Delete the IpAddressPoolSubnet with the given id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ip_allocations Flag to specify whether to ignore ip allocations.  (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ip_address_pool_subnet(org_id, project_id, ip_pool_id, ip_subnet_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ip_address_pool_subnet_with_http_info(org_id, project_id, ip_pool_id, ip_subnet_id, opts)
      nil
    end

    # Delete an IpAddressPoolSubnet
    # Delete the IpAddressPoolSubnet with the given id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ip_allocations Flag to specify whether to ignore ip allocations. 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ip_address_pool_subnet_with_http_info(org_id, project_id, ip_pool_id, ip_subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_subnet_id' is set
      if @api_client.config.client_side_validation && ip_subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_subnet_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_ip_address_pool_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}/ip-subnets/{ip-subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-subnet-id' + '}', ip_subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ignore_ip_allocations'] = opts[:'ignore_ip_allocations'] if !opts[:'ignore_ip_allocations'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_ip_address_pool_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS configuration for tier-1 instance
    # Delete DNS configuration for tier-1 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1(org_id, project_id, tier_1_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts)
      nil
    end

    # Delete DNS configuration for tier-1 instance
    # Delete DNS configuration for tier-1 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the DNS Forwarder Zone
    # Delete the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone(org_id, project_id, dns_forwarder_zone_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, opts)
      nil
    end

    # Delete the DNS Forwarder Zone
    # Delete the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts)
      nil
    end

    # Delete DHCP static binding
    # Delete DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_delete_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get state of the given IpAddressBlock
    # Get state of a given IPAddressBlock. It lists all the allocated IPs and subnets created using that block per Project and VPCs. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlockState]
    def orgs_org_id_projects_project_id_infra_get_ip_address_block_state(org_id, project_id, intent_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ip_address_block_state_with_http_info(org_id, project_id, intent_path, opts)
      data
    end

    # Get state of the given IpAddressBlock
    # Get state of a given IPAddressBlock. It lists all the allocated IPs and subnets created using that block per Project and VPCs. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlockState, Fixnum, Hash)>] IpAddressBlockState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ip_address_block_state_with_http_info(org_id, project_id, intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_state"
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_state"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_get_ip_address_block_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an IpAddressBlock usage
    # Get IpAddressBlock usage with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlockUsage]
    def orgs_org_id_projects_project_id_infra_get_ip_address_block_usage(org_id, project_id, ip_block_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ip_address_block_usage_with_http_info(org_id, project_id, ip_block_id, opts)
      data
    end

    # Get an IpAddressBlock usage
    # Get IpAddressBlock usage with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlockUsage, Fixnum, Hash)>] IpAddressBlockUsage data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ip_address_block_usage_with_http_info(org_id, project_id, ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_usage ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_usage"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_usage"
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_usage"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/{ip-block-id}/usage'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_get_ip_address_block_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatistics]
    def orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatistics, Fixnum, Hash)>] AggregateDNSForwarderStatistics data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatus]
    def orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatus, Fixnum, Hash)>] AggregateDNSForwarderStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpRelayConfigListResult]
    def orgs_org_id_projects_project_id_infra_list_dhcp_relay_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_dhcp_relay_config_with_http_info(org_id, project_id, opts)
      data
    end

    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpRelayConfigListResult, Fixnum, Hash)>] DhcpRelayConfigListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_dhcp_relay_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_list_dhcp_relay_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_dhcp_relay_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_dhcp_relay_config"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_dhcp_relay_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_dhcp_relay_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-relay-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_list_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerConfigListResult]
    def orgs_org_id_projects_project_id_infra_list_dhcp_server_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_dhcp_server_config_with_http_info(org_id, project_id, opts)
      data
    end

    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerConfigListResult, Fixnum, Hash)>] DhcpServerConfigListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_dhcp_server_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_list_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding(org_id, project_id, segment_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_list_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IpAddressBlocks
    # Paginated list of IpAddressBlocks. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressBlockListResult]
    def orgs_org_id_projects_project_id_infra_list_ip_address_blocks(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ip_address_blocks_with_http_info(org_id, project_id, opts)
      data
    end

    # List IpAddressBlocks
    # Paginated list of IpAddressBlocks. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressBlockListResult, Fixnum, Hash)>] IpAddressBlockListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ip_address_blocks_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_blocks ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_blocks"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_blocks"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_blocks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_blocks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_list_ip_address_blocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IpAddressPool Allocations
    # Returns information about which addresses have been allocated from a specified IP address pool in policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressAllocationListResult]
    def orgs_org_id_projects_project_id_infra_list_ip_address_pool_allocations(org_id, project_id, ip_pool_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ip_address_pool_allocations_with_http_info(org_id, project_id, ip_pool_id, opts)
      data
    end

    # List IpAddressPool Allocations
    # Returns information about which addresses have been allocated from a specified IP address pool in policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressAllocationListResult, Fixnum, Hash)>] IpAddressAllocationListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ip_address_pool_allocations_with_http_info(org_id, project_id, ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_allocations ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_allocations"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_allocations"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_allocations"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_allocations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_allocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}/ip-allocations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_list_ip_address_pool_allocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IpAddressPoolSubnets
    # Paginated list of IpAddressPoolSubnets. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressPoolSubnetListResult]
    def orgs_org_id_projects_project_id_infra_list_ip_address_pool_subnets(org_id, project_id, ip_pool_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ip_address_pool_subnets_with_http_info(org_id, project_id, ip_pool_id, opts)
      data
    end

    # List IpAddressPoolSubnets
    # Paginated list of IpAddressPoolSubnets. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressPoolSubnetListResult, Fixnum, Hash)>] IpAddressPoolSubnetListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ip_address_pool_subnets_with_http_info(org_id, project_id, ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_subnets ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_subnets"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_subnets"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_subnets"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_subnets, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pool_subnets, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}/ip-subnets'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolSubnetListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_list_ip_address_pool_subnets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IpAddressPools
    # Paginated list of IpAddressPools. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressPoolListResult]
    def orgs_org_id_projects_project_id_infra_list_ip_address_pools(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ip_address_pools_with_http_info(org_id, project_id, opts)
      data
    end

    # List IpAddressPools
    # Paginated list of IpAddressPools. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressPoolListResult, Fixnum, Hash)>] IpAddressPoolListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ip_address_pools_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pools ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pools"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pools"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_ip_address_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_list_ip_address_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDnsForwarderZoneListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone_with_http_info(org_id, project_id, opts)
      data
    end

    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDnsForwarderZoneListResult, Fixnum, Hash)>] PolicyDnsForwarderZoneListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-forwarder-zones'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZoneListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding(org_id, project_id, tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, opts)
      data
    end

    # List all DHCP static bindings
    # Paginated list of all DHCP static binding instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_list_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregatePolicyDnsAnswer]
    def orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregatePolicyDnsAnswer, Fixnum, Hash)>] AggregatePolicyDnsAnswer data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder/nslookup'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatePolicyDnsAnswer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, update the DHCP relay config instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts)
      nil
    end

    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, update the DHCP relay config instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, dhcp_relay_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config' is set
      if @api_client.config.client_side_validation && dhcp_relay_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_patch_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dhcp_server_config(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts)
      nil
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_patch_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      nil
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_patch_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1(org_id, project_id, tier_1_id, policy_dns_forwarder, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, policy_dns_forwarder, opts)
      nil
    end

    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts)
      nil
    end

    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'policy_dns_forwarder_zone' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder_zone.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder_zone' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder_zone)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      nil
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_patch_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1(org_id, project_id, tier_1_id, action, opts = {})
      orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(org_id, project_id, tier_1_id, action, opts)
      nil
    end

    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(org_id, project_id, tier_1_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['clear_cache'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of clear_cache"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def orgs_org_id_projects_project_id_infra_read_dhcp_relay_config(org_id, project_id, dhcp_relay_config_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, opts)
      data
    end

    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_relay_config_with_http_info(org_id, project_id, dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_relay_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_relay_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_config(org_id, project_id, dhcp_server_config_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts)
      data
    end

    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server leases
    # Read DHCP server leases
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [DhcpLeasesResult]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_leases(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_leases_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server leases
    # Read DHCP server leases
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_leases_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server state
    # Read DHCP server state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerState]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_state(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_state_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server state
    # Read DHCP server state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerState, Fixnum, Hash)>] DhcpServerState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_state_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_stats(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/stats'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server status
    # Read DHCP server status
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_status(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_status_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server status
    # Read DHCP server status
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_status_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0(org_id, project_id, tier_0_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0_with_http_info(org_id, project_id, tier_0_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0_with_http_info(org_id, project_id, tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0"
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-0s/{tier-0-id}/dns-forwarder/failed-queries'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder/failed-queries'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding(org_id, project_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_with_http_info(org_id, project_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state(org_id, project_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state_with_http_info(org_id, project_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state_with_http_info(org_id, project_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_infra_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a IpAddressBlock
    # Read IpAddressBlock with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ipblock_usage Flag to specify whether to fetch block usage.  (default to false)
    # @return [IpAddressBlock]
    def orgs_org_id_projects_project_id_infra_read_ip_address_block(org_id, project_id, ip_block_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_ip_address_block_with_http_info(org_id, project_id, ip_block_id, opts)
      data
    end

    # Read a IpAddressBlock
    # Read IpAddressBlock with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ipblock_usage Flag to specify whether to fetch block usage. 
    # @return [Array<(IpAddressBlock, Fixnum, Hash)>] IpAddressBlock data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_ip_address_block_with_http_info(org_id, project_id, ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_block ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_block"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_block"
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_block"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/{ip-block-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ignore_ipblock_usage'] = opts[:'ignore_ipblock_usage'] if !opts[:'ignore_ipblock_usage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an IpAddressPool
    # Read IpAddressPool with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPool]
    def orgs_org_id_projects_project_id_infra_read_ip_address_pool(org_id, project_id, ip_pool_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_ip_address_pool_with_http_info(org_id, project_id, ip_pool_id, opts)
      data
    end

    # Read an IpAddressPool
    # Read IpAddressPool with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPool, Fixnum, Hash)>] IpAddressPool data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_ip_address_pool_with_http_info(org_id, project_id, ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_ip_address_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read policy IpPool allocation
    # Read a previously created allocation 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressAllocation]
    def orgs_org_id_projects_project_id_infra_read_ip_address_pool_allocation(org_id, project_id, ip_pool_id, ip_allocation_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_ip_address_pool_allocation_with_http_info(org_id, project_id, ip_pool_id, ip_allocation_id, opts)
      data
    end

    # Read policy IpPool allocation
    # Read a previously created allocation 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressAllocation, Fixnum, Hash)>] IpAddressAllocation data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_ip_address_pool_allocation_with_http_info(org_id, project_id, ip_pool_id, ip_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_ip_address_pool_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an IpAddressPoolSubnet
    # Read IpAddressPoolSubnet with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPoolSubnet]
    def orgs_org_id_projects_project_id_infra_read_ip_address_pool_subnet(org_id, project_id, ip_pool_id, ip_subnet_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_ip_address_pool_subnet_with_http_info(org_id, project_id, ip_pool_id, ip_subnet_id, opts)
      data
    end

    # Read an IpAddressPoolSubnet
    # Read IpAddressPoolSubnet with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPoolSubnet, Fixnum, Hash)>] IpAddressPoolSubnet data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_ip_address_pool_subnet_with_http_info(org_id, project_id, ip_pool_id, ip_subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_subnet_id' is set
      if @api_client.config.client_side_validation && ip_subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_subnet_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_ip_address_pool_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-pools/{ip-pool-id}/ip-subnets/{ip-subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-subnet-id' + '}', ip_subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolSubnet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_ip_address_pool_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarderZone]
    def orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone(org_id, project_id, dns_forwarder_zone_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, opts)
      data
    end

    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarderZone, Fixnum, Hash)>] PolicyDnsForwarderZone data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state_with_http_info(org_id, project_id, tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_read_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats(org_id, project_id, config_id, connectivity_path, opts = {})
      orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      nil
    end

    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/stats?action=reset'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1(org_id, project_id, tier_1_id, policy_dns_forwarder, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, policy_dns_forwarder, opts)
      data
    end

    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarderZone]
    def orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts)
      data
    end

    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarderZone, Fixnum, Hash)>] PolicyDnsForwarderZone data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'policy_dns_forwarder_zone' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder_zone.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder_zone' when calling IPManagementApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder_zone)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, update the DHCP relay config instance with specified attributes. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dhcp_relay_config(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      patch_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts)
      nil
    end

    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, update the DHCP relay config instance with specified attributes. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.patch_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling IPManagementApi.patch_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config' is set
      if @api_client.config.client_side_validation && dhcp_relay_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config' when calling IPManagementApi.patch_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#patch_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dhcp_server_config(dhcp_server_config_id, dhcp_server_config, opts = {})
      patch_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts)
      nil
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.patch_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling IPManagementApi.patch_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling IPManagementApi.patch_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#patch_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment_dhcp_static_binding(segment_id, binding_id, dhcp_static_binding_config, opts = {})
      patch_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, dhcp_static_binding_config, opts)
      nil
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.patch_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.patch_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling IPManagementApi.patch_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#patch_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the DNS Forwarder
    # Update the DNS Forwarder
    # @param tier_0_id Tier-0 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_dns_forwarder_on_tier0(tier_0_id, policy_dns_forwarder, opts = {})
      patch_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, policy_dns_forwarder, opts)
      nil
    end

    # Update the DNS Forwarder
    # Update the DNS Forwarder
    # @param tier_0_id Tier-0 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.patch_policy_dns_forwarder_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.patch_policy_dns_forwarder_on_tier0"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling IPManagementApi.patch_policy_dns_forwarder_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#patch_policy_dns_forwarder_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_dns_forwarder_on_tier1(tier_1_id, policy_dns_forwarder, opts = {})
      patch_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, policy_dns_forwarder, opts)
      nil
    end

    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.patch_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.patch_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling IPManagementApi.patch_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#patch_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_dns_forwarder_zone(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      patch_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts)
      nil
    end

    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.patch_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling IPManagementApi.patch_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'policy_dns_forwarder_zone' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder_zone.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder_zone' when calling IPManagementApi.patch_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder_zone)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#patch_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_segment_dhcp_static_binding(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      patch_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts)
      nil
    end

    # Create or update DHCP static binding
    # If binding with the binding-id is not already present, create a new DHCP static binding instance. If it already exists, replace the existing DHCP static binding instance with specified attributes. 
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.patch_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.patch_segment_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling IPManagementApi.patch_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#patch_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a VPC Subnet ip_allocations
    # Create a VPC Subnet ip-allocation if it does not exist based on the IDs, or update existing ip-allocation 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      patch_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts)
      nil
    end

    # Patch a VPC Subnet ip_allocations
    # Create a VPC Subnet ip-allocation if it does not exist based on the IDs, or update existing ip-allocation 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.patch_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling IPManagementApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling IPManagementApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_address_allocation' is set
      if @api_client.config.client_side_validation && ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation' when calling IPManagementApi.patch_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#patch_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_0_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [nil]
    def perform_ep_action_for_dns_forwarder_at_tier0(tier_0_id, action, opts = {})
      perform_ep_action_for_dns_forwarder_at_tier0_with_http_info(tier_0_id, action, opts)
      nil
    end

    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_0_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def perform_ep_action_for_dns_forwarder_at_tier0_with_http_info(tier_0_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.perform_ep_action_for_dns_forwarder_at_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.perform_ep_action_for_dns_forwarder_at_tier0"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling IPManagementApi.perform_ep_action_for_dns_forwarder_at_tier0"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['clear_cache'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of clear_cache"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#perform_ep_action_for_dns_forwarder_at_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [nil]
    def perform_ep_action_for_dns_forwarder_at_tier1(tier_1_id, action, opts = {})
      perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(tier_1_id, action, opts)
      nil
    end

    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(tier_1_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.perform_ep_action_for_dns_forwarder_at_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling IPManagementApi.perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['clear_cache'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of clear_cache"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#perform_ep_action_for_dns_forwarder_at_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def read_dhcp_relay_config(dhcp_relay_config_id, opts = {})
      data, _status_code, _headers = read_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts)
      data
    end

    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def read_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling IPManagementApi.read_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def read_dhcp_server_config(dhcp_server_config_id, opts = {})
      data, _status_code, _headers = read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts)
      data
    end

    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling IPManagementApi.read_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [DhcpLeasesResult]
    def read_dhcp_server_leases(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_dhcp_server_leases ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.read_dhcp_server_leases"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.read_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.read_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.read_dhcp_server_leases, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/leases'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerState]
    def read_dhcp_server_state(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerState, Fixnum, Hash)>] DhcpServerState data, response status code and response headers
    def read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_dhcp_server_state ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.read_dhcp_server_state"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.read_dhcp_server_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.read_dhcp_server_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.read_dhcp_server_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/state'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_dhcp_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def read_dhcp_server_stats(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.read_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.read_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.read_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.read_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/stats'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def read_dhcp_server_status(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_dhcp_server_status ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.read_dhcp_server_status"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.read_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.read_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.read_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/status'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def read_failed_dns_queries_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = read_failed_dns_queries_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def read_failed_dns_queries_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_failed_dns_queries_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.read_failed_dns_queries_on_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.read_failed_dns_queries_on_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.read_failed_dns_queries_on_tier0, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder/failed-queries'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_failed_dns_queries_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def read_failed_dns_queries_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = read_failed_dns_queries_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def read_failed_dns_queries_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_failed_dns_queries_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.read_failed_dns_queries_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.read_failed_dns_queries_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling IPManagementApi.read_failed_dns_queries_on_tier1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder/failed-queries'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_failed_dns_queries_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def read_infra_segment_dhcp_static_binding(segment_id, binding_id, opts = {})
      data, _status_code, _headers = read_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def read_infra_segment_dhcp_static_binding_with_http_info(segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_infra_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.read_infra_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.read_infra_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_infra_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def read_infra_segment_dhcp_static_binding_state(segment_id, binding_id, opts = {})
      data, _status_code, _headers = read_infra_segment_dhcp_static_binding_state_with_http_info(segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def read_infra_segment_dhcp_static_binding_state_with_http_info(segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_infra_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.read_infra_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.read_infra_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_infra_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a IpAddressBlock
    # Read IpAddressBlock with given Id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ipblock_usage Flag to specify whether to fetch block usage.  (default to false)
    # @return [IpAddressBlock]
    def read_ip_address_block(ip_block_id, opts = {})
      data, _status_code, _headers = read_ip_address_block_with_http_info(ip_block_id, opts)
      data
    end

    # Read a IpAddressBlock
    # Read IpAddressBlock with given Id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ipblock_usage Flag to specify whether to fetch block usage. 
    # @return [Array<(IpAddressBlock, Fixnum, Hash)>] IpAddressBlock data, response status code and response headers
    def read_ip_address_block_with_http_info(ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_ip_address_block ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPManagementApi.read_ip_address_block"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/{ip-block-id}'.sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ignore_ipblock_usage'] = opts[:'ignore_ipblock_usage'] if !opts[:'ignore_ipblock_usage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an IpAddressPool
    # Read IpAddressPool with given Id. 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPool]
    def read_ip_address_pool(ip_pool_id, opts = {})
      data, _status_code, _headers = read_ip_address_pool_with_http_info(ip_pool_id, opts)
      data
    end

    # Read an IpAddressPool
    # Read IpAddressPool with given Id. 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPool, Fixnum, Hash)>] IpAddressPool data, response status code and response headers
    def read_ip_address_pool_with_http_info(ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_ip_address_pool ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.read_ip_address_pool"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_ip_address_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read policy IpPool allocation
    # Read a previously created allocation 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressAllocation]
    def read_ip_address_pool_allocation(ip_pool_id, ip_allocation_id, opts = {})
      data, _status_code, _headers = read_ip_address_pool_allocation_with_http_info(ip_pool_id, ip_allocation_id, opts)
      data
    end

    # Read policy IpPool allocation
    # Read a previously created allocation 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressAllocation, Fixnum, Hash)>] IpAddressAllocation data, response status code and response headers
    def read_ip_address_pool_allocation_with_http_info(ip_pool_id, ip_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_ip_address_pool_allocation ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.read_ip_address_pool_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.read_ip_address_pool_allocation"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_ip_address_pool_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an IpAddressPoolSubnet
    # Read IpAddressPoolSubnet with given Id. 
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPoolSubnet]
    def read_ip_address_pool_subnet(ip_pool_id, ip_subnet_id, opts = {})
      data, _status_code, _headers = read_ip_address_pool_subnet_with_http_info(ip_pool_id, ip_subnet_id, opts)
      data
    end

    # Read an IpAddressPoolSubnet
    # Read IpAddressPoolSubnet with given Id. 
    # @param ip_pool_id 
    # @param ip_subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPoolSubnet, Fixnum, Hash)>] IpAddressPoolSubnet data, response status code and response headers
    def read_ip_address_pool_subnet_with_http_info(ip_pool_id, ip_subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_ip_address_pool_subnet ...'
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.read_ip_address_pool_subnet"
      end
      # verify the required parameter 'ip_subnet_id' is set
      if @api_client.config.client_side_validation && ip_subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_subnet_id' when calling IPManagementApi.read_ip_address_pool_subnet"
      end
      # resource path
      local_var_path = '/infra/ip-pools/{ip-pool-id}/ip-subnets/{ip-subnet-id}'.sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-subnet-id' + '}', ip_subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolSubnet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_ip_address_pool_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Manager Ip Pool
    # Read Manager Ip Pool with given Id. 
    # @param manager_ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPool]
    def read_manager_ip_pool(manager_ip_pool_id, opts = {})
      data, _status_code, _headers = read_manager_ip_pool_with_http_info(manager_ip_pool_id, opts)
      data
    end

    # Read a Manager Ip Pool
    # Read Manager Ip Pool with given Id. 
    # @param manager_ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPool, Fixnum, Hash)>] IpAddressPool data, response status code and response headers
    def read_manager_ip_pool_with_http_info(manager_ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_manager_ip_pool ...'
      end
      # verify the required parameter 'manager_ip_pool_id' is set
      if @api_client.config.client_side_validation && manager_ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'manager_ip_pool_id' when calling IPManagementApi.read_manager_ip_pool"
      end
      # resource path
      local_var_path = '/infra/manager-ip-pools/{manager-ip-pool-id}'.sub('{' + 'manager-ip-pool-id' + '}', manager_ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_manager_ip_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def read_policy_dns_forwarder_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = read_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def read_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_policy_dns_forwarder_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.read_policy_dns_forwarder_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_policy_dns_forwarder_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def read_policy_dns_forwarder_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = read_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def read_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.read_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarderZone]
    def read_policy_dns_forwarder_zone(dns_forwarder_zone_id, opts = {})
      data, _status_code, _headers = read_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts)
      data
    end

    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarderZone, Fixnum, Hash)>] PolicyDnsForwarderZone data, response status code and response headers
    def read_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling IPManagementApi.read_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding
    # Read DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def read_segment_dhcp_static_binding(tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = read_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding
    # Read DHCP static binding
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def read_segment_dhcp_static_binding_with_http_info(tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_segment_dhcp_static_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.read_segment_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.read_segment_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_segment_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingState]
    def read_segment_dhcp_static_binding_state(tier_1_id, segment_id, binding_id, opts = {})
      data, _status_code, _headers = read_segment_dhcp_static_binding_state_with_http_info(tier_1_id, segment_id, binding_id, opts)
      data
    end

    # Read DHCP static binding state
    # Read DHCP static binding state
    # @param tier_1_id 
    # @param segment_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingState, Fixnum, Hash)>] DhcpStaticBindingState data, response status code and response headers
    def read_segment_dhcp_static_binding_state_with_http_info(tier_1_id, segment_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_segment_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling IPManagementApi.read_segment_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling IPManagementApi.read_segment_dhcp_static_binding_state"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/dhcp-static-bindings/{binding-id}/state'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_segment_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an IpAddressPool of VPC Subnet.
    # Read IpAddressPool with given Id. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPool]
    def read_vpc_subnet_ip_address_pool(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      data, _status_code, _headers = read_vpc_subnet_ip_address_pool_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts)
      data
    end

    # Read an IpAddressPool of VPC Subnet.
    # Read IpAddressPool with given Id. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPool, Fixnum, Hash)>] IpAddressPool data, response status code and response headers
    def read_vpc_subnet_ip_address_pool_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.read_vpc_subnet_ip_address_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling IPManagementApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling IPManagementApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.read_vpc_subnet_ip_address_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#read_vpc_subnet_ip_address_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def reset_dhcp_server_stats(config_id, connectivity_path, opts = {})
      reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      nil
    end

    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.reset_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling IPManagementApi.reset_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling IPManagementApi.reset_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.reset_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPManagementApi.reset_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/stats?action=reset'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#reset_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the DNS Forwarder
    # Update the DNS Forwarder
    # @param tier_0_id Tier-0 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def update_policy_dns_forwarder_on_tier0(tier_0_id, policy_dns_forwarder, opts = {})
      data, _status_code, _headers = update_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, policy_dns_forwarder, opts)
      data
    end

    # Update the DNS Forwarder
    # Update the DNS Forwarder
    # @param tier_0_id Tier-0 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def update_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.update_policy_dns_forwarder_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling IPManagementApi.update_policy_dns_forwarder_on_tier0"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling IPManagementApi.update_policy_dns_forwarder_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#update_policy_dns_forwarder_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def update_policy_dns_forwarder_on_tier1(tier_1_id, policy_dns_forwarder, opts = {})
      data, _status_code, _headers = update_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, policy_dns_forwarder, opts)
      data
    end

    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def update_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.update_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling IPManagementApi.update_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling IPManagementApi.update_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#update_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarderZone]
    def update_policy_dns_forwarder_zone(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      data, _status_code, _headers = update_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts)
      data
    end

    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarderZone, Fixnum, Hash)>] PolicyDnsForwarderZone data, response status code and response headers
    def update_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.update_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling IPManagementApi.update_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'policy_dns_forwarder_zone' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder_zone.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder_zone' when calling IPManagementApi.update_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder_zone)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#update_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a VPC Subnet ip allocation
    # Create a VPC Subnet ip allocation if it does not exist based on the IDs, or update existing ip-allocation information by replacing the port object already exists. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressAllocation]
    def update_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      data, _status_code, _headers = update_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts)
      data
    end

    # Create or update a VPC Subnet ip allocation
    # Create a VPC Subnet ip allocation if it does not exist based on the IDs, or update existing ip-allocation information by replacing the port object already exists. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressAllocation, Fixnum, Hash)>] IpAddressAllocation data, response status code and response headers
    def update_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPManagementApi.update_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPManagementApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPManagementApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling IPManagementApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling IPManagementApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling IPManagementApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling IPManagementApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_address_allocation' is set
      if @api_client.config.client_side_validation && ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation' when calling IPManagementApi.update_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPManagementApi#update_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
