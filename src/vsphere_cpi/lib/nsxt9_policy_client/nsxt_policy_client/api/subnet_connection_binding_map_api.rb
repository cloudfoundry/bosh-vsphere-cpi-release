=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SubnetConnectionBindingMapApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Patch a subnet connection binding map
    # Patch the subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SubnetConnectionBindingMap]
    def create_or_update_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      data, _status_code, _headers = create_or_update_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts)
      data
    end

    # Patch a subnet connection binding map
    # Patch the subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubnetConnectionBindingMap, Fixnum, Hash)>] SubnetConnectionBindingMap data, response status code and response headers
    def create_or_update_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetConnectionBindingMapApi.create_or_update_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetConnectionBindingMapApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetConnectionBindingMapApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetConnectionBindingMapApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetConnectionBindingMapApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SubnetConnectionBindingMapApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_connection_binding_map' is set
      if @api_client.config.client_side_validation && subnet_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_connection_binding_map' when calling SubnetConnectionBindingMapApi.create_or_update_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(subnet_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubnetConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetConnectionBindingMapApi#create_or_update_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes infra SubnetConnectionBindingMap.
    # Deletes infra SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      delete_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts)
      nil
    end

    # Deletes infra SubnetConnectionBindingMap.
    # Deletes infra SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetConnectionBindingMapApi.delete_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetConnectionBindingMapApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetConnectionBindingMapApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetConnectionBindingMapApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetConnectionBindingMapApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SubnetConnectionBindingMapApi.delete_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetConnectionBindingMapApi#delete_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List SubnetConnectionBindingMap specific Segment
    # List SubnetConnectionBindingMap specific subnet 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SubnetConnectionBindingMapListResult]
    def list_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List SubnetConnectionBindingMap specific Segment
    # List SubnetConnectionBindingMap specific subnet 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SubnetConnectionBindingMapListResult, Fixnum, Hash)>] SubnetConnectionBindingMapListResult data, response status code and response headers
    def list_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetConnectionBindingMapApi.list_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetConnectionBindingMapApi.list_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetConnectionBindingMapApi.list_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetConnectionBindingMapApi.list_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetConnectionBindingMapApi.list_subnet_connection_binding_map"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetConnectionBindingMapApi.list_subnet_connection_binding_map, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetConnectionBindingMapApi.list_subnet_connection_binding_map, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubnetConnectionBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetConnectionBindingMapApi#list_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a vpc subnet connection binding map
    # Patch the vpc subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      patch_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts)
      nil
    end

    # Patch a vpc subnet connection binding map
    # Patch the vpc subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetConnectionBindingMapApi.patch_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetConnectionBindingMapApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetConnectionBindingMapApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetConnectionBindingMapApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetConnectionBindingMapApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SubnetConnectionBindingMapApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_connection_binding_map' is set
      if @api_client.config.client_side_validation && subnet_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_connection_binding_map' when calling SubnetConnectionBindingMapApi.patch_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(subnet_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetConnectionBindingMapApi#patch_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read SubnetConnectionBindingMap
    # Read SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [SubnetConnectionBindingMap]
    def read_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      data, _status_code, _headers = read_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts)
      data
    end

    # Read SubnetConnectionBindingMap
    # Read SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubnetConnectionBindingMap, Fixnum, Hash)>] SubnetConnectionBindingMap data, response status code and response headers
    def read_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetConnectionBindingMapApi.read_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetConnectionBindingMapApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetConnectionBindingMapApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetConnectionBindingMapApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetConnectionBindingMapApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SubnetConnectionBindingMapApi.read_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubnetConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetConnectionBindingMapApi#read_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
