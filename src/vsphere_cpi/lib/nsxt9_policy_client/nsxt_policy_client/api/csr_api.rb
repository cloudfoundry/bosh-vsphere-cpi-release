=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class CSRApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a CSR
    # Removes a specified CSR. If a CSR is not used for verification, you can delete it. Note that the CSR import and upload POST actions automatically delete the associated CSR. 
    # @param csr_id ID of CSR to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_csr(csr_id, opts = {})
      delete_tls_csr_with_http_info(csr_id, opts)
      nil
    end

    # Delete a CSR
    # Removes a specified CSR. If a CSR is not used for verification, you can delete it. Note that the CSR import and upload POST actions automatically delete the associated CSR. 
    # @param csr_id ID of CSR to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_csr_with_http_info(csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.delete_tls_csr ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.delete_tls_csr"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#delete_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate a new self-signed certificate
    # Creates a new self-signed certificate. A private key is also created at the same time. This is convenience call that will generate a CSR and then self-sign it. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param tls_csr_with_days_valid 
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def generate_self_signed_tls_certificate(tls_csr_with_days_valid, opts = {})
      data, _status_code, _headers = generate_self_signed_tls_certificate_with_http_info(tls_csr_with_days_valid, opts)
      data
    end

    # Generate a new self-signed certificate
    # Creates a new self-signed certificate. A private key is also created at the same time. This is convenience call that will generate a CSR and then self-sign it. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param tls_csr_with_days_valid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def generate_self_signed_tls_certificate_with_http_info(tls_csr_with_days_valid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.generate_self_signed_tls_certificate ...'
      end
      # verify the required parameter 'tls_csr_with_days_valid' is set
      if @api_client.config.client_side_validation && tls_csr_with_days_valid.nil?
        fail ArgumentError, "Missing the required parameter 'tls_csr_with_days_valid' when calling CSRApi.generate_self_signed_tls_certificate"
      end
      # resource path
      local_var_path = '/infra/csrs?action=self_sign'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_csr_with_days_valid)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#generate_self_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate a New Certificate Signing Request
    # Creates a new certificate signing request (CSR). A CSR is encrypted text that contains information about your organization (organization name, country, and so on) and your Web server's public key, which is a public certificate the is generated on the server that can be used to forward this request to a certificate authority (CA). A private key is also usually created at the same time as the CSR. 
    # @param csr_id ID of CSR to create
    # @param tls_csr 
    # @param [Hash] opts the optional parameters
    # @return [TlsCsr]
    def generate_tls_csr(csr_id, tls_csr, opts = {})
      data, _status_code, _headers = generate_tls_csr_with_http_info(csr_id, tls_csr, opts)
      data
    end

    # Generate a New Certificate Signing Request
    # Creates a new certificate signing request (CSR). A CSR is encrypted text that contains information about your organization (organization name, country, and so on) and your Web server&#39;s public key, which is a public certificate the is generated on the server that can be used to forward this request to a certificate authority (CA). A private key is also usually created at the same time as the CSR. 
    # @param csr_id ID of CSR to create
    # @param tls_csr 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCsr, Fixnum, Hash)>] TlsCsr data, response status code and response headers
    def generate_tls_csr_with_http_info(csr_id, tls_csr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.generate_tls_csr ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.generate_tls_csr"
      end
      # verify the required parameter 'tls_csr' is set
      if @api_client.config.client_side_validation && tls_csr.nil?
        fail ArgumentError, "Missing the required parameter 'tls_csr' when calling CSRApi.generate_tls_csr"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}?action=create'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_csr)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsr')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#generate_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show CSR Data for the Given CSR ID
    # Returns information about the specified CSR.
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [TlsCsr]
    def get_tls_csr(csr_id, opts = {})
      data, _status_code, _headers = get_tls_csr_with_http_info(csr_id, opts)
      data
    end

    # Show CSR Data for the Given CSR ID
    # Returns information about the specified CSR.
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCsr, Fixnum, Hash)>] TlsCsr data, response status code and response headers
    def get_tls_csr_with_http_info(csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.get_tls_csr ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.get_tls_csr"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsr')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#get_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get CSR PEM File for the Given CSR ID
    # Downloads the CSR PEM file for a specified CSR. Clients must include an Accept: text/plain request header.
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_tls_csr_pem(csr_id, opts = {})
      data, _status_code, _headers = get_tls_csr_pem_with_http_info(csr_id, opts)
      data
    end

    # Get CSR PEM File for the Given CSR ID
    # Downloads the CSR PEM file for a specified CSR. Clients must include an Accept: text/plain request header.
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tls_csr_pem_with_http_info(csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.get_tls_csr_pem ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.get_tls_csr_pem"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}/pem-file'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#get_tls_csr_pem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import a Certificate Associated with an Approved CSR
    # Imports a certificate authority (CA)-signed certificate for a CSR. This action links the certificate to the private key created by the CSR. The pem_encoded string in the request body is the signed certificate provided by your CA in response to the CSR that you provide to them. The import POST action automatically deletes the associated CSR. 
    # @param csr_id CSR this certificate is associated with
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def import_signed_tls_certificate(csr_id, tls_trust_data, opts = {})
      data, _status_code, _headers = import_signed_tls_certificate_with_http_info(csr_id, tls_trust_data, opts)
      data
    end

    # Import a Certificate Associated with an Approved CSR
    # Imports a certificate authority (CA)-signed certificate for a CSR. This action links the certificate to the private key created by the CSR. The pem_encoded string in the request body is the signed certificate provided by your CA in response to the CSR that you provide to them. The import POST action automatically deletes the associated CSR. 
    # @param csr_id CSR this certificate is associated with
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def import_signed_tls_certificate_with_http_info(csr_id, tls_trust_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.import_signed_tls_certificate ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.import_signed_tls_certificate"
      end
      # verify the required parameter 'tls_trust_data' is set
      if @api_client.config.client_side_validation && tls_trust_data.nil?
        fail ArgumentError, "Missing the required parameter 'tls_trust_data' when calling CSRApi.import_signed_tls_certificate"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}?action=import'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_trust_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#import_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return All the Generated CSRs
    # Returns information about all of the CSRs that have been created.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsCsrListResult]
    def list_tls_csrs(opts = {})
      data, _status_code, _headers = list_tls_csrs_with_http_info(opts)
      data
    end

    # Return All the Generated CSRs
    # Returns information about all of the CSRs that have been created.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsCsrListResult, Fixnum, Hash)>] TlsCsrListResult data, response status code and response headers
    def list_tls_csrs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.list_tls_csrs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CSRApi.list_tls_csrs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CSRApi.list_tls_csrs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/csrs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsrListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#list_tls_csrs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a CSR
    # Removes a specified CSR. If a CSR is not used for verification, you can delete it. Note that the CSR import and upload POST actions automatically delete the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tls_csr(org_id, project_id, csr_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tls_csr_with_http_info(org_id, project_id, csr_id, opts)
      nil
    end

    # Delete a CSR
    # Removes a specified CSR. If a CSR is not used for verification, you can delete it. Note that the CSR import and upload POST actions automatically delete the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tls_csr_with_http_info(org_id, project_id, csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.orgs_org_id_projects_project_id_infra_delete_tls_csr ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_delete_tls_csr"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_delete_tls_csr"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_delete_tls_csr"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#orgs_org_id_projects_project_id_infra_delete_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate a new self-signed certificate
    # Creates a new self-signed certificate. A private key is also created at the same time. This is convenience call that will generate a CSR and then self-sign it. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tls_csr_with_days_valid 
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate(org_id, project_id, tls_csr_with_days_valid, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate_with_http_info(org_id, project_id, tls_csr_with_days_valid, opts)
      data
    end

    # Generate a new self-signed certificate
    # Creates a new self-signed certificate. A private key is also created at the same time. This is convenience call that will generate a CSR and then self-sign it. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tls_csr_with_days_valid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate_with_http_info(org_id, project_id, tls_csr_with_days_valid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate"
      end
      # verify the required parameter 'tls_csr_with_days_valid' is set
      if @api_client.config.client_side_validation && tls_csr_with_days_valid.nil?
        fail ArgumentError, "Missing the required parameter 'tls_csr_with_days_valid' when calling CSRApi.orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs?action=self_sign'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_csr_with_days_valid)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate a New Certificate Signing Request
    # Creates a new certificate signing request (CSR). A CSR is encrypted text that contains information about your organization (organization name, country, and so on) and your Web server's public key, which is a public certificate the is generated on the server that can be used to forward this request to a certificate authority (CA). A private key is also usually created at the same time as the CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to create
    # @param tls_csr 
    # @param [Hash] opts the optional parameters
    # @return [TlsCsr]
    def orgs_org_id_projects_project_id_infra_generate_tls_csr(org_id, project_id, csr_id, tls_csr, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_generate_tls_csr_with_http_info(org_id, project_id, csr_id, tls_csr, opts)
      data
    end

    # Generate a New Certificate Signing Request
    # Creates a new certificate signing request (CSR). A CSR is encrypted text that contains information about your organization (organization name, country, and so on) and your Web server&#39;s public key, which is a public certificate the is generated on the server that can be used to forward this request to a certificate authority (CA). A private key is also usually created at the same time as the CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to create
    # @param tls_csr 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCsr, Fixnum, Hash)>] TlsCsr data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_generate_tls_csr_with_http_info(org_id, project_id, csr_id, tls_csr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.orgs_org_id_projects_project_id_infra_generate_tls_csr ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_generate_tls_csr"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_generate_tls_csr"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_generate_tls_csr"
      end
      # verify the required parameter 'tls_csr' is set
      if @api_client.config.client_side_validation && tls_csr.nil?
        fail ArgumentError, "Missing the required parameter 'tls_csr' when calling CSRApi.orgs_org_id_projects_project_id_infra_generate_tls_csr"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}?action=create'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_csr)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsr')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#orgs_org_id_projects_project_id_infra_generate_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show CSR Data for the Given CSR ID
    # Returns information about the specified CSR.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [TlsCsr]
    def orgs_org_id_projects_project_id_infra_get_tls_csr(org_id, project_id, csr_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tls_csr_with_http_info(org_id, project_id, csr_id, opts)
      data
    end

    # Show CSR Data for the Given CSR ID
    # Returns information about the specified CSR.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCsr, Fixnum, Hash)>] TlsCsr data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tls_csr_with_http_info(org_id, project_id, csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.orgs_org_id_projects_project_id_infra_get_tls_csr ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_get_tls_csr"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_get_tls_csr"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_get_tls_csr"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsr')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#orgs_org_id_projects_project_id_infra_get_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get CSR PEM File for the Given CSR ID
    # Downloads the CSR PEM file for a specified CSR. Clients must include an Accept: text/plain request header.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [String]
    def orgs_org_id_projects_project_id_infra_get_tls_csr_pem(org_id, project_id, csr_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tls_csr_pem_with_http_info(org_id, project_id, csr_id, opts)
      data
    end

    # Get CSR PEM File for the Given CSR ID
    # Downloads the CSR PEM file for a specified CSR. Clients must include an Accept: text/plain request header.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tls_csr_pem_with_http_info(org_id, project_id, csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.orgs_org_id_projects_project_id_infra_get_tls_csr_pem ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_get_tls_csr_pem"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_get_tls_csr_pem"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_get_tls_csr_pem"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}/pem-file'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#orgs_org_id_projects_project_id_infra_get_tls_csr_pem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import a Certificate Associated with an Approved CSR
    # Imports a certificate authority (CA)-signed certificate for a CSR. This action links the certificate to the private key created by the CSR. The pem_encoded string in the request body is the signed certificate provided by your CA in response to the CSR that you provide to them. The import POST action automatically deletes the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id CSR this certificate is associated with
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def orgs_org_id_projects_project_id_infra_import_signed_tls_certificate(org_id, project_id, csr_id, tls_trust_data, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_import_signed_tls_certificate_with_http_info(org_id, project_id, csr_id, tls_trust_data, opts)
      data
    end

    # Import a Certificate Associated with an Approved CSR
    # Imports a certificate authority (CA)-signed certificate for a CSR. This action links the certificate to the private key created by the CSR. The pem_encoded string in the request body is the signed certificate provided by your CA in response to the CSR that you provide to them. The import POST action automatically deletes the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id CSR this certificate is associated with
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_import_signed_tls_certificate_with_http_info(org_id, project_id, csr_id, tls_trust_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.orgs_org_id_projects_project_id_infra_import_signed_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_import_signed_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_import_signed_tls_certificate"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_import_signed_tls_certificate"
      end
      # verify the required parameter 'tls_trust_data' is set
      if @api_client.config.client_side_validation && tls_trust_data.nil?
        fail ArgumentError, "Missing the required parameter 'tls_trust_data' when calling CSRApi.orgs_org_id_projects_project_id_infra_import_signed_tls_certificate"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}?action=import'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_trust_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#orgs_org_id_projects_project_id_infra_import_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return All the Generated CSRs
    # Returns information about all of the CSRs that have been created.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsCsrListResult]
    def orgs_org_id_projects_project_id_infra_list_tls_csrs(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tls_csrs_with_http_info(org_id, project_id, opts)
      data
    end

    # Return All the Generated CSRs
    # Returns information about all of the CSRs that have been created.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsCsrListResult, Fixnum, Hash)>] TlsCsrListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tls_csrs_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.orgs_org_id_projects_project_id_infra_list_tls_csrs ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_list_tls_csrs"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_list_tls_csrs"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CSRApi.orgs_org_id_projects_project_id_infra_list_tls_csrs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CSRApi.orgs_org_id_projects_project_id_infra_list_tls_csrs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsrListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#orgs_org_id_projects_project_id_infra_list_tls_csrs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Self-Sign the CSR
    # Self-signs the previously generated CSR. This action is similar to the import certificate action, but instead of using a public certificate signed by a CA, the self_sign POST action uses a certificate that is signed with NSX's own private key. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id CSR this certificate is associated with
    # @param days_valid Number of days the certificate will be valid, default 825 days
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def orgs_org_id_projects_project_id_infra_self_sign_tls_certificate(org_id, project_id, csr_id, days_valid, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_self_sign_tls_certificate_with_http_info(org_id, project_id, csr_id, days_valid, opts)
      data
    end

    # Self-Sign the CSR
    # Self-signs the previously generated CSR. This action is similar to the import certificate action, but instead of using a public certificate signed by a CA, the self_sign POST action uses a certificate that is signed with NSX&#39;s own private key. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id CSR this certificate is associated with
    # @param days_valid Number of days the certificate will be valid, default 825 days
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_self_sign_tls_certificate_with_http_info(org_id, project_id, csr_id, days_valid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.orgs_org_id_projects_project_id_infra_self_sign_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_self_sign_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_self_sign_tls_certificate"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_self_sign_tls_certificate"
      end
      # verify the required parameter 'days_valid' is set
      if @api_client.config.client_side_validation && days_valid.nil?
        fail ArgumentError, "Missing the required parameter 'days_valid' when calling CSRApi.orgs_org_id_projects_project_id_infra_self_sign_tls_certificate"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}?action=self_sign'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'days_valid'] = days_valid

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#orgs_org_id_projects_project_id_infra_self_sign_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload the Certificate PEM File Signed by the CA Associated with a CSR
    # Uploads the certificate authority (CA)-signed certificate. After you send the certificate request to the CA of your choice, and the CA sends back the signed certificate, you can use the upload POST action to upload the signed certificate. The upload action is similar to the import action, but the upload action allows you to directly upload the PEM-encoded file (signed certificate) provided by the CA. Like the import POST action, the upload POST action automatically deletes the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of the CSR to read
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [TlsCertificate]
    def orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate(org_id, project_id, csr_id, file, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate_with_http_info(org_id, project_id, csr_id, file, opts)
      data
    end

    # Upload the Certificate PEM File Signed by the CA Associated with a CSR
    # Uploads the certificate authority (CA)-signed certificate. After you send the certificate request to the CA of your choice, and the CA sends back the signed certificate, you can use the upload POST action to upload the signed certificate. The upload action is similar to the import action, but the upload action allows you to directly upload the PEM-encoded file (signed certificate) provided by the CA. Like the import POST action, the upload POST action automatically deletes the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of the CSR to read
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate_with_http_info(org_id, project_id, csr_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling CSRApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate"
      end
      if @api_client.config.client_side_validation && !opts[:'description'].nil? && opts[:'description'].to_s.length > 1024
        fail ArgumentError, 'invalid value for "opts[:"description"]" when calling CSRApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate, the character length must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && !opts[:'display_name'].nil? && opts[:'display_name'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"display_name"]" when calling CSRApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate, the character length must be smaller than or equal to 255.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}?action=upload'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Self-Sign the CSR
    # Self-signs the previously generated CSR. This action is similar to the import certificate action, but instead of using a public certificate signed by a CA, the self_sign POST action uses a certificate that is signed with NSX's own private key. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param csr_id CSR this certificate is associated with
    # @param days_valid Number of days the certificate will be valid, default 825 days
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def self_sign_tls_certificate(csr_id, days_valid, opts = {})
      data, _status_code, _headers = self_sign_tls_certificate_with_http_info(csr_id, days_valid, opts)
      data
    end

    # Self-Sign the CSR
    # Self-signs the previously generated CSR. This action is similar to the import certificate action, but instead of using a public certificate signed by a CA, the self_sign POST action uses a certificate that is signed with NSX&#39;s own private key. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param csr_id CSR this certificate is associated with
    # @param days_valid Number of days the certificate will be valid, default 825 days
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def self_sign_tls_certificate_with_http_info(csr_id, days_valid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.self_sign_tls_certificate ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.self_sign_tls_certificate"
      end
      # verify the required parameter 'days_valid' is set
      if @api_client.config.client_side_validation && days_valid.nil?
        fail ArgumentError, "Missing the required parameter 'days_valid' when calling CSRApi.self_sign_tls_certificate"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}?action=self_sign'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'days_valid'] = days_valid

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#self_sign_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload the Certificate PEM File Signed by the CA Associated with a CSR
    # Uploads the certificate authority (CA)-signed certificate. After you send the certificate request to the CA of your choice, and the CA sends back the signed certificate, you can use the upload POST action to upload the signed certificate. The upload action is similar to the import action, but the upload action allows you to directly upload the PEM-encoded file (signed certificate) provided by the CA. Like the import POST action, the upload POST action automatically deletes the associated CSR. 
    # @param csr_id ID of the CSR to read
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [TlsCertificate]
    def upload_pem_signed_tls_certificate(csr_id, file, opts = {})
      data, _status_code, _headers = upload_pem_signed_tls_certificate_with_http_info(csr_id, file, opts)
      data
    end

    # Upload the Certificate PEM File Signed by the CA Associated with a CSR
    # Uploads the certificate authority (CA)-signed certificate. After you send the certificate request to the CA of your choice, and the CA sends back the signed certificate, you can use the upload POST action to upload the signed certificate. The upload action is similar to the import action, but the upload action allows you to directly upload the PEM-encoded file (signed certificate) provided by the CA. Like the import POST action, the upload POST action automatically deletes the associated CSR. 
    # @param csr_id ID of the CSR to read
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def upload_pem_signed_tls_certificate_with_http_info(csr_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSRApi.upload_pem_signed_tls_certificate ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling CSRApi.upload_pem_signed_tls_certificate"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling CSRApi.upload_pem_signed_tls_certificate"
      end
      if @api_client.config.client_side_validation && !opts[:'description'].nil? && opts[:'description'].to_s.length > 1024
        fail ArgumentError, 'invalid value for "opts[:"description"]" when calling CSRApi.upload_pem_signed_tls_certificate, the character length must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && !opts[:'display_name'].nil? && opts[:'display_name'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"display_name"]" when calling CSRApi.upload_pem_signed_tls_certificate, the character length must be smaller than or equal to 255.'
      end

      # resource path
      local_var_path = '/infra/csrs/{csr-id}?action=upload'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSRApi#upload_pem_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
