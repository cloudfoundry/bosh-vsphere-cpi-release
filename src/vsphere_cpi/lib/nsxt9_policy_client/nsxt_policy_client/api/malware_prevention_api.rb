=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class MalwarePreventionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Registration URL
    # Registration URL.
    # @param region Region
    # @param [Hash] opts the optional parameters
    # @return [MalwarePreventionTeaserRegistrationURL]
    def create_malware_prevention_teaser_registration_url(region, opts = {})
      data, _status_code, _headers = create_malware_prevention_teaser_registration_url_with_http_info(region, opts)
      data
    end

    # Registration URL
    # Registration URL.
    # @param region Region
    # @param [Hash] opts the optional parameters
    # @return [Array<(MalwarePreventionTeaserRegistrationURL, Fixnum, Hash)>] MalwarePreventionTeaserRegistrationURL data, response status code and response headers
    def create_malware_prevention_teaser_registration_url_with_http_info(region, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MalwarePreventionApi.create_malware_prevention_teaser_registration_url ...'
      end
      # verify the required parameter 'region' is set
      if @api_client.config.client_side_validation && region.nil?
        fail ArgumentError, "Missing the required parameter 'region' when calling MalwarePreventionApi.create_malware_prevention_teaser_registration_url"
      end
      # resource path
      local_var_path = '/malware-prevention/teaser/registration_url'

      # query parameters
      query_params = {}
      query_params[:'region'] = region

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionTeaserRegistrationURL')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MalwarePreventionApi#create_malware_prevention_teaser_registration_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove service deployment
    # Remove the service deployment. This will remove all the Service VMs that were created as part of this deployment on the specified cluster. User can optionally set force delete option which will force remove the deployment, but should be used only when the regular delete is not working. Regular delete will ensure proper cleanup of Service VMs and related objects. Directly calling this API without trying regular undeploy will result in unexpected results, and orphan objects. 
    # @param compute_collection_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_mps_service_deployment(compute_collection_id, opts = {})
      delete_mps_service_deployment_with_http_info(compute_collection_id, opts)
      nil
    end

    # Remove service deployment
    # Remove the service deployment. This will remove all the Service VMs that were created as part of this deployment on the specified cluster. User can optionally set force delete option which will force remove the deployment, but should be used only when the regular delete is not working. Regular delete will ensure proper cleanup of Service VMs and related objects. Directly calling this API without trying regular undeploy will result in unexpected results, and orphan objects. 
    # @param compute_collection_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_mps_service_deployment_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MalwarePreventionApi.delete_mps_service_deployment ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling MalwarePreventionApi.delete_mps_service_deployment"
      end
      # resource path
      local_var_path = '/malware-prevention/compute-collection/{compute-collection-id}/svm-deployment'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MalwarePreventionApi#delete_mps_service_deployment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deploys a the Malware Prevention Service on the specified compute-collection
    # This will deploy the Malware Prevention Service on a given cluster. Internally OVF will be deployed on each host that is part of the cluster. If there are no issues in the parameters, the call returns immediately, and the service VMs will be deployed asynchronously. To get the overall status of the deployment or to get the status of individual service vm, please use the MPS deployment status APIs. 
    # @param compute_collection_id 
    # @param mps_svm_deployment_spec 
    # @param [Hash] opts the optional parameters
    # @return [MpsSvmDeploymentSpec]
    def deploy_mps_service(compute_collection_id, mps_svm_deployment_spec, opts = {})
      data, _status_code, _headers = deploy_mps_service_with_http_info(compute_collection_id, mps_svm_deployment_spec, opts)
      data
    end

    # Deploys a the Malware Prevention Service on the specified compute-collection
    # This will deploy the Malware Prevention Service on a given cluster. Internally OVF will be deployed on each host that is part of the cluster. If there are no issues in the parameters, the call returns immediately, and the service VMs will be deployed asynchronously. To get the overall status of the deployment or to get the status of individual service vm, please use the MPS deployment status APIs. 
    # @param compute_collection_id 
    # @param mps_svm_deployment_spec 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MpsSvmDeploymentSpec, Fixnum, Hash)>] MpsSvmDeploymentSpec data, response status code and response headers
    def deploy_mps_service_with_http_info(compute_collection_id, mps_svm_deployment_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MalwarePreventionApi.deploy_mps_service ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling MalwarePreventionApi.deploy_mps_service"
      end
      # verify the required parameter 'mps_svm_deployment_spec' is set
      if @api_client.config.client_side_validation && mps_svm_deployment_spec.nil?
        fail ArgumentError, "Missing the required parameter 'mps_svm_deployment_spec' when calling MalwarePreventionApi.deploy_mps_service"
      end
      # resource path
      local_var_path = '/malware-prevention/compute-collection/{compute-collection-id}/svm-deployment'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mps_svm_deployment_spec)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MpsSvmDeploymentSpec')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MalwarePreventionApi#deploy_mps_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get status for MPS Compute collection.
    # Returns current status of the deployment of MPS Service on a given cluster. 
    # @param compute_collection_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [MpsComputeCollectionStatus]
    def get_mps_compute_collection_status(compute_collection_id, opts = {})
      data, _status_code, _headers = get_mps_compute_collection_status_with_http_info(compute_collection_id, opts)
      data
    end

    # Get status for MPS Compute collection.
    # Returns current status of the deployment of MPS Service on a given cluster. 
    # @param compute_collection_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(MpsComputeCollectionStatus, Fixnum, Hash)>] MpsComputeCollectionStatus data, response status code and response headers
    def get_mps_compute_collection_status_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MalwarePreventionApi.get_mps_compute_collection_status ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling MalwarePreventionApi.get_mps_compute_collection_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/malware-prevention/compute-collection/{compute-collection-id}/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MpsComputeCollectionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MalwarePreventionApi#get_mps_compute_collection_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List OVF specifications
    # List OVF specifications
    # @param [Hash] opts the optional parameters
    # @return [MpsOvfSpecListResult]
    def get_mps_deployment_spec(opts = {})
      data, _status_code, _headers = get_mps_deployment_spec_with_http_info(opts)
      data
    end

    # List OVF specifications
    # List OVF specifications
    # @param [Hash] opts the optional parameters
    # @return [Array<(MpsOvfSpecListResult, Fixnum, Hash)>] MpsOvfSpecListResult data, response status code and response headers
    def get_mps_deployment_spec_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MalwarePreventionApi.get_mps_deployment_spec ...'
      end
      # resource path
      local_var_path = '/malware-prevention/ovf-spec'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MpsOvfSpecListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MalwarePreventionApi#get_mps_deployment_spec\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the Malware Prevention Service deployment on the specified compute-collection
    # Returns detail of the Malware Prevention Service deployment. 
    # @param compute_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [MpsSvmDeploymentSpec]
    def get_mps_service_deployment(compute_collection_id, opts = {})
      data, _status_code, _headers = get_mps_service_deployment_with_http_info(compute_collection_id, opts)
      data
    end

    # Get the Malware Prevention Service deployment on the specified compute-collection
    # Returns detail of the Malware Prevention Service deployment. 
    # @param compute_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MpsSvmDeploymentSpec, Fixnum, Hash)>] MpsSvmDeploymentSpec data, response status code and response headers
    def get_mps_service_deployment_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MalwarePreventionApi.get_mps_service_deployment ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling MalwarePreventionApi.get_mps_service_deployment"
      end
      # resource path
      local_var_path = '/malware-prevention/compute-collection/{compute-collection-id}/svm-deployment'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MpsSvmDeploymentSpec')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MalwarePreventionApi#get_mps_service_deployment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get status for MPS Transport Node.
    # Returns current status of the deployment of MPS Service on a transport node. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [MpsTransportNodeStatus]
    def get_mps_transport_node_status(transport_node_id, opts = {})
      data, _status_code, _headers = get_mps_transport_node_status_with_http_info(transport_node_id, opts)
      data
    end

    # Get status for MPS Transport Node.
    # Returns current status of the deployment of MPS Service on a transport node. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(MpsTransportNodeStatus, Fixnum, Hash)>] MpsTransportNodeStatus data, response status code and response headers
    def get_mps_transport_node_status_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MalwarePreventionApi.get_mps_transport_node_status ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling MalwarePreventionApi.get_mps_transport_node_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/malware-prevention/transport-node/{transport-node-id}/status'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MpsTransportNodeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MalwarePreventionApi#get_mps_transport_node_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Registration status
    # Registration status.
    # @param [Hash] opts the optional parameters
    # @return [MalwarePreventionTeaserRegistrationStatus]
    def malware_prevention_teaser_check_status(opts = {})
      data, _status_code, _headers = malware_prevention_teaser_check_status_with_http_info(opts)
      data
    end

    # Registration status
    # Registration status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MalwarePreventionTeaserRegistrationStatus, Fixnum, Hash)>] MalwarePreventionTeaserRegistrationStatus data, response status code and response headers
    def malware_prevention_teaser_check_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MalwarePreventionApi.malware_prevention_teaser_check_status ...'
      end
      # resource path
      local_var_path = '/malware-prevention/teaser/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionTeaserRegistrationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MalwarePreventionApi#malware_prevention_teaser_check_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List available regions
    # List available regions.
    # @param [Hash] opts the optional parameters
    # @return [MalwarePreventionTeaserRegionsListResult]
    def malware_prevention_teaser_list_regions(opts = {})
      data, _status_code, _headers = malware_prevention_teaser_list_regions_with_http_info(opts)
      data
    end

    # List available regions
    # List available regions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MalwarePreventionTeaserRegionsListResult, Fixnum, Hash)>] MalwarePreventionTeaserRegionsListResult data, response status code and response headers
    def malware_prevention_teaser_list_regions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MalwarePreventionApi.malware_prevention_teaser_list_regions ...'
      end
      # resource path
      local_var_path = '/malware-prevention/teaser/regions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionTeaserRegionsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MalwarePreventionApi#malware_prevention_teaser_list_regions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upgrade all VMs part of this service deployment to new OVF specification on the given datastore.
    # If new deployment specification is provided, the deployment will be moved to the provided specification provided that current deployment state is either UPGRADE_FAILED or DEPLOYMENT_SUCCESSFUL If same deployment specification is provided, upgrade will be done only if current deployment state is UPGRADE_FAILED If the existing data store is upgraded or changed, there is an optional parameter to supply the new storage Id during upgrade which would perform the deployment upgrade on the new data store 
    # @param compute_collection_id 
    # @param mps_svm_new_appliance_spec 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mps_change_appliance(compute_collection_id, mps_svm_new_appliance_spec, opts = {})
      mps_change_appliance_with_http_info(compute_collection_id, mps_svm_new_appliance_spec, opts)
      nil
    end

    # Upgrade all VMs part of this service deployment to new OVF specification on the given datastore.
    # If new deployment specification is provided, the deployment will be moved to the provided specification provided that current deployment state is either UPGRADE_FAILED or DEPLOYMENT_SUCCESSFUL If same deployment specification is provided, upgrade will be done only if current deployment state is UPGRADE_FAILED If the existing data store is upgraded or changed, there is an optional parameter to supply the new storage Id during upgrade which would perform the deployment upgrade on the new data store 
    # @param compute_collection_id 
    # @param mps_svm_new_appliance_spec 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def mps_change_appliance_with_http_info(compute_collection_id, mps_svm_new_appliance_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MalwarePreventionApi.mps_change_appliance ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling MalwarePreventionApi.mps_change_appliance"
      end
      # verify the required parameter 'mps_svm_new_appliance_spec' is set
      if @api_client.config.client_side_validation && mps_svm_new_appliance_spec.nil?
        fail ArgumentError, "Missing the required parameter 'mps_svm_new_appliance_spec' when calling MalwarePreventionApi.mps_change_appliance"
      end
      # resource path
      local_var_path = '/malware-prevention/compute-collection/{compute-collection-id}/svm-deployment/action/change-appliance'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mps_svm_new_appliance_spec)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MalwarePreventionApi#mps_change_appliance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
