=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SharedResourceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Share
    # Delete a Share. 
    # @param share_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_share(share_id, opts = {})
      delete_share_with_http_info(share_id, opts)
      nil
    end

    # Delete Share
    # Delete a Share. 
    # @param share_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_share_with_http_info(share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.delete_share ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.delete_share"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}'.sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#delete_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Shared Resource
    # Delete Shared Resource. 
    # @param share_id 
    # @param shared_resource_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_shared_resource(share_id, shared_resource_id, opts = {})
      delete_shared_resource_with_http_info(share_id, shared_resource_id, opts)
      nil
    end

    # Delete Shared Resource
    # Delete Shared Resource. 
    # @param share_id 
    # @param shared_resource_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_shared_resource_with_http_info(share_id, shared_resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.delete_shared_resource ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.delete_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling SharedResourceApi.delete_shared_resource"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#delete_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get single instance of a share
    # Get single instance of a share
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @return [Share]
    def get_share(share_id, opts = {})
      data, _status_code, _headers = get_share_with_http_info(share_id, opts)
      data
    end

    # Get single instance of a share
    # Get single instance of a share
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Share, Fixnum, Hash)>] Share data, response status code and response headers
    def get_share_with_http_info(share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.get_share ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.get_share"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}'.sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Share')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#get_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Shared resource
    # Get the shared resource that represents shared objects. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param [Hash] opts the optional parameters
    # @return [SharedResource]
    def get_shared_resource(share_id, shared_resource_id, opts = {})
      data, _status_code, _headers = get_shared_resource_with_http_info(share_id, shared_resource_id, opts)
      data
    end

    # Get Shared resource
    # Get the shared resource that represents shared objects. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SharedResource, Fixnum, Hash)>] SharedResource data, response status code and response headers
    def get_shared_resource_with_http_info(share_id, shared_resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.get_shared_resource ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.get_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling SharedResourceApi.get_shared_resource"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#get_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get resources shared with a given org
    # Get the list of resource shared with a given org. 
    # @param org_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [SharedResourceListResult]
    def list_resources_shared_with_me_org(org_id, opts = {})
      data, _status_code, _headers = list_resources_shared_with_me_org_with_http_info(org_id, opts)
      data
    end

    # Get resources shared with a given org
    # Get the list of resource shared with a given org. 
    # @param org_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [Array<(SharedResourceListResult, Fixnum, Hash)>] SharedResourceListResult data, response status code and response headers
    def list_resources_shared_with_me_org_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.list_resources_shared_with_me_org ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.list_resources_shared_with_me_org"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/shared-with-me'.sub('{' + 'org-id' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#list_resources_shared_with_me_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get resources shared with a given project
    # Get the list of resource shared with a given project. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [SharedResourceListResult]
    def list_resources_shared_with_me_project(org_id, project_id, opts = {})
      data, _status_code, _headers = list_resources_shared_with_me_project_with_http_info(org_id, project_id, opts)
      data
    end

    # Get resources shared with a given project
    # Get the list of resource shared with a given project. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [Array<(SharedResourceListResult, Fixnum, Hash)>] SharedResourceListResult data, response status code and response headers
    def list_resources_shared_with_me_project_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.list_resources_shared_with_me_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.list_resources_shared_with_me_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.list_resources_shared_with_me_project"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/shared-with-me'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#list_resources_shared_with_me_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get resources shared with a given vpc
    # Get the list of resource shared with a given vpc. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [SharedResourceListResult]
    def list_resources_shared_with_me_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_resources_shared_with_me_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get resources shared with a given vpc
    # Get the list of resource shared with a given vpc. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [Array<(SharedResourceListResult, Fixnum, Hash)>] SharedResourceListResult data, response status code and response headers
    def list_resources_shared_with_me_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.list_resources_shared_with_me_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.list_resources_shared_with_me_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.list_resources_shared_with_me_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SharedResourceApi.list_resources_shared_with_me_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/shared-with-me'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#list_resources_shared_with_me_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Shared resource list for a given share
    # Get the list of shared resource in a given share. 
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [SharedResourceListResult]
    def list_shared_resources(share_id, opts = {})
      data, _status_code, _headers = list_shared_resources_with_http_info(share_id, opts)
      data
    end

    # Get Shared resource list for a given share
    # Get the list of shared resource in a given share. 
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [Array<(SharedResourceListResult, Fixnum, Hash)>] SharedResourceListResult data, response status code and response headers
    def list_shared_resources_with_http_info(share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.list_shared_resources ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.list_shared_resources"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}/resources'.sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#list_shared_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List shares
    # List shares
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShareListResult]
    def list_shares(opts = {})
      data, _status_code, _headers = list_shares_with_http_info(opts)
      data
    end

    # List shares
    # List shares
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShareListResult, Fixnum, Hash)>] ShareListResult data, response status code and response headers
    def list_shares_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.list_shares ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SharedResourceApi.list_shares, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SharedResourceApi.list_shares, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/shares'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShareListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#list_shares\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Share
    # Delete a Share. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_share(org_id, project_id, share_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_share_with_http_info(org_id, project_id, share_id, opts)
      nil
    end

    # Delete Share
    # Delete a Share. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_share_with_http_info(org_id, project_id, share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.orgs_org_id_projects_project_id_infra_delete_share ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_delete_share"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_delete_share"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_delete_share"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#orgs_org_id_projects_project_id_infra_delete_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Shared Resource
    # Delete Shared Resource. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id 
    # @param shared_resource_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_shared_resource(org_id, project_id, share_id, shared_resource_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, opts)
      nil
    end

    # Delete Shared Resource
    # Delete Shared Resource. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id 
    # @param shared_resource_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.orgs_org_id_projects_project_id_infra_delete_shared_resource ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_delete_shared_resource"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_delete_shared_resource"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_delete_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_delete_shared_resource"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#orgs_org_id_projects_project_id_infra_delete_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get single instance of a share
    # Get single instance of a share
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @return [Share]
    def orgs_org_id_projects_project_id_infra_get_share(org_id, project_id, share_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_share_with_http_info(org_id, project_id, share_id, opts)
      data
    end

    # Get single instance of a share
    # Get single instance of a share
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Share, Fixnum, Hash)>] Share data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_share_with_http_info(org_id, project_id, share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.orgs_org_id_projects_project_id_infra_get_share ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_get_share"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_get_share"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_get_share"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Share')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#orgs_org_id_projects_project_id_infra_get_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Shared resource
    # Get the shared resource that represents shared objects. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param [Hash] opts the optional parameters
    # @return [SharedResource]
    def orgs_org_id_projects_project_id_infra_get_shared_resource(org_id, project_id, share_id, shared_resource_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, opts)
      data
    end

    # Get Shared resource
    # Get the shared resource that represents shared objects. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SharedResource, Fixnum, Hash)>] SharedResource data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.orgs_org_id_projects_project_id_infra_get_shared_resource ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_get_shared_resource"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_get_shared_resource"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_get_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_get_shared_resource"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#orgs_org_id_projects_project_id_infra_get_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Shared resource list for a given share
    # Get the list of shared resource in a given share. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [SharedResourceListResult]
    def orgs_org_id_projects_project_id_infra_list_shared_resources(org_id, project_id, share_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_shared_resources_with_http_info(org_id, project_id, share_id, opts)
      data
    end

    # Get Shared resource list for a given share
    # Get the list of shared resource in a given share. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_type resource type
    # @return [Array<(SharedResourceListResult, Fixnum, Hash)>] SharedResourceListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_shared_resources_with_http_info(org_id, project_id, share_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.orgs_org_id_projects_project_id_infra_list_shared_resources ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_list_shared_resources"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_list_shared_resources"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_list_shared_resources"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}/resources'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#orgs_org_id_projects_project_id_infra_list_shared_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List shares
    # List shares
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShareListResult]
    def orgs_org_id_projects_project_id_infra_list_shares(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_shares_with_http_info(org_id, project_id, opts)
      data
    end

    # List shares
    # List shares
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShareListResult, Fixnum, Hash)>] ShareListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_shares_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.orgs_org_id_projects_project_id_infra_list_shares ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_list_shares"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_list_shares"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_list_shares, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_list_shares, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShareListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#orgs_org_id_projects_project_id_infra_list_shares\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Share
    # If a Share with the given ID already exists, update the share entity. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_share(org_id, project_id, share_id, share, opts = {})
      orgs_org_id_projects_project_id_infra_patch_share_with_http_info(org_id, project_id, share_id, share, opts)
      nil
    end

    # Create or update a Share
    # If a Share with the given ID already exists, update the share entity. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_share_with_http_info(org_id, project_id, share_id, share, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.orgs_org_id_projects_project_id_infra_patch_share ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_patch_share"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_patch_share"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_patch_share"
      end
      # verify the required parameter 'share' is set
      if @api_client.config.client_side_validation && share.nil?
        fail ArgumentError, "Missing the required parameter 'share' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_patch_share"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(share)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#orgs_org_id_projects_project_id_infra_patch_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_shared_resource(org_id, project_id, share_id, shared_resource_id, shared_resource, opts = {})
      orgs_org_id_projects_project_id_infra_patch_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, shared_resource, opts)
      nil
    end

    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, shared_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.orgs_org_id_projects_project_id_infra_patch_shared_resource ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_patch_shared_resource"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_patch_shared_resource"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_patch_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_patch_shared_resource"
      end
      # verify the required parameter 'shared_resource' is set
      if @api_client.config.client_side_validation && shared_resource.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_patch_shared_resource"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(shared_resource)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#orgs_org_id_projects_project_id_infra_patch_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Share
    # If a Share with the given ID already exists, and the revision is 0, throw error 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Share]
    def orgs_org_id_projects_project_id_infra_update_share(org_id, project_id, share_id, share, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_share_with_http_info(org_id, project_id, share_id, share, opts)
      data
    end

    # Create or update a Share
    # If a Share with the given ID already exists, and the revision is 0, throw error 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Share, Fixnum, Hash)>] Share data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_share_with_http_info(org_id, project_id, share_id, share, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.orgs_org_id_projects_project_id_infra_update_share ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_update_share"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_update_share"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_update_share"
      end
      # verify the required parameter 'share' is set
      if @api_client.config.client_side_validation && share.nil?
        fail ArgumentError, "Missing the required parameter 'share' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_update_share"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(share)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Share')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#orgs_org_id_projects_project_id_infra_update_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [SharedResource]
    def orgs_org_id_projects_project_id_infra_update_shared_resource(org_id, project_id, share_id, shared_resource_id, shared_resource, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, shared_resource, opts)
      data
    end

    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SharedResource, Fixnum, Hash)>] SharedResource data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_shared_resource_with_http_info(org_id, project_id, share_id, shared_resource_id, shared_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.orgs_org_id_projects_project_id_infra_update_shared_resource ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_update_shared_resource"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_update_shared_resource"
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_update_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_update_shared_resource"
      end
      # verify the required parameter 'shared_resource' is set
      if @api_client.config.client_side_validation && shared_resource.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource' when calling SharedResourceApi.orgs_org_id_projects_project_id_infra_update_shared_resource"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(shared_resource)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#orgs_org_id_projects_project_id_infra_update_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Share
    # If a Share with the given ID already exists, update the share entity. 
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_share(share_id, share, opts = {})
      patch_share_with_http_info(share_id, share, opts)
      nil
    end

    # Create or update a Share
    # If a Share with the given ID already exists, update the share entity. 
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_share_with_http_info(share_id, share, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.patch_share ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.patch_share"
      end
      # verify the required parameter 'share' is set
      if @api_client.config.client_side_validation && share.nil?
        fail ArgumentError, "Missing the required parameter 'share' when calling SharedResourceApi.patch_share"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}'.sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(share)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#patch_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_shared_resource(share_id, shared_resource_id, shared_resource, opts = {})
      patch_shared_resource_with_http_info(share_id, shared_resource_id, shared_resource, opts)
      nil
    end

    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_shared_resource_with_http_info(share_id, shared_resource_id, shared_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.patch_shared_resource ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.patch_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling SharedResourceApi.patch_shared_resource"
      end
      # verify the required parameter 'shared_resource' is set
      if @api_client.config.client_side_validation && shared_resource.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource' when calling SharedResourceApi.patch_shared_resource"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(shared_resource)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#patch_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Share
    # If a Share with the given ID already exists, and the revision is 0, throw error 
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Share]
    def update_share(share_id, share, opts = {})
      data, _status_code, _headers = update_share_with_http_info(share_id, share, opts)
      data
    end

    # Create or update a Share
    # If a Share with the given ID already exists, and the revision is 0, throw error 
    # @param share_id Share ID
    # @param share 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Share, Fixnum, Hash)>] Share data, response status code and response headers
    def update_share_with_http_info(share_id, share, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.update_share ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.update_share"
      end
      # verify the required parameter 'share' is set
      if @api_client.config.client_side_validation && share.nil?
        fail ArgumentError, "Missing the required parameter 'share' when calling SharedResourceApi.update_share"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}'.sub('{' + 'share-id' + '}', share_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(share)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Share')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#update_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [SharedResource]
    def update_shared_resource(share_id, shared_resource_id, shared_resource, opts = {})
      data, _status_code, _headers = update_shared_resource_with_http_info(share_id, shared_resource_id, shared_resource, opts)
      data
    end

    # Create or update Shared Resource
    # If Shared resource already exists, update the shared resource entity. User Presence of the shared resource denotes sharing of the parent object. 
    # @param share_id Share ID
    # @param shared_resource_id Shared resource id
    # @param shared_resource 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SharedResource, Fixnum, Hash)>] SharedResource data, response status code and response headers
    def update_shared_resource_with_http_info(share_id, shared_resource_id, shared_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharedResourceApi.update_shared_resource ...'
      end
      # verify the required parameter 'share_id' is set
      if @api_client.config.client_side_validation && share_id.nil?
        fail ArgumentError, "Missing the required parameter 'share_id' when calling SharedResourceApi.update_shared_resource"
      end
      # verify the required parameter 'shared_resource_id' is set
      if @api_client.config.client_side_validation && shared_resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource_id' when calling SharedResourceApi.update_shared_resource"
      end
      # verify the required parameter 'shared_resource' is set
      if @api_client.config.client_side_validation && shared_resource.nil?
        fail ArgumentError, "Missing the required parameter 'shared_resource' when calling SharedResourceApi.update_shared_resource"
      end
      # resource path
      local_var_path = '/infra/shares/{share-id}/resources/{shared-resource-id}'.sub('{' + 'share-id' + '}', share_id.to_s).sub('{' + 'shared-resource-id' + '}', shared_resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(shared_resource)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharedResourceApi#update_shared_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
